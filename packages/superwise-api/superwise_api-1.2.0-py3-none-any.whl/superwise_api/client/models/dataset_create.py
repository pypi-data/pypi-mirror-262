# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import constr
from pydantic import Field
from pydantic import StrictStr

from superwise_api.client.models.dataset_tag import DatasetTag
from superwise_api.client.models.model_schema import ModelSchema


class DatasetCreate(BaseModel):
    """
    DatasetCreate
    """

    name: constr(strict=True, max_length=100, min_length=1) = Field(
        ..., description="A descriptive name for this dataset"
    )
    description: Optional[StrictStr] = Field(None, description="Relevant information about the context of this dataset")
    id: Optional[StrictStr] = None
    model_version_id: Optional[StrictStr] = None
    tags: Optional[conlist(DatasetTag)] = None
    var_schema: Optional[ModelSchema] = Field(None, alias="schema")
    __properties = ["name", "description", "id", "model_version_id", "tags", "schema"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetCreate:
        """Create an instance of DatasetCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetCreate:
        """Create an instance of DatasetCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetCreate.parse_obj(obj)

        _obj = DatasetCreate.parse_obj(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "id": obj.get("id"),
                "model_version_id": obj.get("model_version_id"),
                "tags": [DatasetTag.from_dict(_item) for _item in obj.get("tags")]
                if obj.get("tags") is not None
                else None,
                "var_schema": ModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            }
        )
        return _obj
