# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import io
import re  # noqa: F401
import warnings
from typing import Any
from typing import Optional

from pydantic import conint
from pydantic import Field
from pydantic import StrictStr
from pydantic import validate_arguments
from pydantic import ValidationError
from typing_extensions import Annotated

from superwise_api.client.api_client import ApiClient
from superwise_api.client.api_response import ApiResponse
from superwise_api.client.exceptions import ApiTypeError
from superwise_api.client.exceptions import ApiValueError
from superwise_api.client.models.page_tool_response import PageToolResponse
from superwise_api.client.models.tool_create import ToolCreate
from superwise_api.client.models.tool_response import ToolResponse
from superwise_api.client.models.tool_update import ToolUpdate


class ToolsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_tool(self, application_id: StrictStr, tool_create: ToolCreate, **kwargs) -> ToolResponse:  # noqa: E501
        """Create Tool  # noqa: E501

        Create a tool for the application.  Parameters:  - **application_id**: UUID of the application. - **payload**: Information about the tool to be created which should match one of the following configurations based on the tool type:     - **SQL Database Tool**         - **name**: A human-readable name for the tool.         - **description**: A brief summary describing the tool's purpose or use. This description will be a part of the prompt that the LLM uses for the database.         - **type**: An identifier for the tool type, specifically for SQL databases in this case.         - **secrets**: Connection information required to access the SQL database, such as a connection string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tool(application_id, tool_create, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_create: (required)
        :type tool_create: ToolCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ToolResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_tool_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_tool_with_http_info(application_id, tool_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_tool_with_http_info(
        self, application_id: StrictStr, tool_create: ToolCreate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Create Tool  # noqa: E501

        Create a tool for the application.  Parameters:  - **application_id**: UUID of the application. - **payload**: Information about the tool to be created which should match one of the following configurations based on the tool type:     - **SQL Database Tool**         - **name**: A human-readable name for the tool.         - **description**: A brief summary describing the tool's purpose or use. This description will be a part of the prompt that the LLM uses for the database.         - **type**: An identifier for the tool type, specifically for SQL databases in this case.         - **secrets**: Connection information required to access the SQL database, such as a connection string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tool_with_http_info(application_id, tool_create, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_create: (required)
        :type tool_create: ToolCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ToolResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "tool_create"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method create_tool" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["tool_create"] is not None:
            _body_params = _params["tool_create"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "201": "ToolResponse",
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}/tools",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_tool(self, application_id: StrictStr, tool_id: StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete Tool  # noqa: E501

        Delete a tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tool(application_id, tool_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_tool_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_tool_with_http_info(application_id, tool_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_tool_with_http_info(
        self, application_id: StrictStr, tool_id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Delete Tool  # noqa: E501

        Delete a tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tool_with_http_info(application_id, tool_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["application_id", "tool_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method delete_tool" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        if _params["tool_id"] is not None:
            _path_params["tool_id"] = _params["tool_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/applications/{application_id}/tools/{tool_id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_tool(self, application_id: StrictStr, tool_id: StrictStr, **kwargs) -> ToolResponse:  # noqa: E501
        """Get Tool  # noqa: E501

        Retrieve a Tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tool(application_id, tool_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ToolResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_tool_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_tool_with_http_info(application_id, tool_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_tool_with_http_info(
        self, application_id: StrictStr, tool_id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Tool  # noqa: E501

        Retrieve a Tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tool_with_http_info(application_id, tool_id, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ToolResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "tool_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_tool" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        if _params["tool_id"] is not None:
            _path_params["tool_id"] = _params["tool_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "ToolResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}/tools/{tool_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_tools(
        self,
        application_id: StrictStr,
        name: Optional[Any] = None,
        type: Optional[Any] = None,
        page: Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page number")] = None,
        size: Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Page size")] = None,
        **kwargs
    ) -> PageToolResponse:  # noqa: E501
        """Get Tools  # noqa: E501

        Retrieve Tools under a given application ID based on the provided filters.  - **application_id**: UUID of the application. - **name**: Name of the tool. - **type**: Type of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tools(application_id, name, type, page, size, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param name:
        :type name: Name
        :param type:
        :type type: ToolType
        :param page: Page number
        :type page: int
        :param size: Page size
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageToolResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_tools_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_tools_with_http_info(application_id, name, type, page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_tools_with_http_info(
        self,
        application_id: StrictStr,
        name: Optional[Any] = None,
        type: Optional[Any] = None,
        page: Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page number")] = None,
        size: Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Page size")] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get Tools  # noqa: E501

        Retrieve Tools under a given application ID based on the provided filters.  - **application_id**: UUID of the application. - **name**: Name of the tool. - **type**: Type of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tools_with_http_info(application_id, name, type, page, size, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param name:
        :type name: Name
        :param type:
        :type type: ToolType
        :param page: Page number
        :type page: int
        :param size: Page size
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageToolResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "name", "type", "page", "size"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method get_tools" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("type") is not None:  # noqa: E501
            _query_params.append(("type", _params["type"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("size") is not None:  # noqa: E501
            _query_params.append(("size", _params["size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "PageToolResponse",
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}/tools",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_tool(
        self, application_id: StrictStr, tool_id: StrictStr, tool_update: ToolUpdate, **kwargs
    ) -> ToolResponse:  # noqa: E501
        """Update Tool  # noqa: E501

        Update a tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tool(application_id, tool_id, tool_update, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param tool_update: (required)
        :type tool_update: ToolUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ToolResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_tool_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_tool_with_http_info(application_id, tool_id, tool_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_tool_with_http_info(
        self, application_id: StrictStr, tool_id: StrictStr, tool_update: ToolUpdate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update Tool  # noqa: E501

        Update a tool based on the given tool_id.  - **application_id**: UUID of the application. - **tool_id**: UUID of the tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tool_with_http_info(application_id, tool_id, tool_update, async_req=True)
        >>> result = thread.get()

        :param application_id: (required)
        :type application_id: str
        :param tool_id: (required)
        :type tool_id: str
        :param tool_update: (required)
        :type tool_update: ToolUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ToolResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "tool_id", "tool_update"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'" " to method update_tool" % _key)
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["application_id"] = _params["application_id"]

        if _params["tool_id"] is not None:
            _path_params["tool_id"] = _params["tool_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["tool_update"] is not None:
            _body_params = _params["tool_update"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["implicit"]  # noqa: E501

        _response_types_map = {
            "200": "ToolResponse",
            "404": None,
            "422": "HTTPValidationError",
            "500": None,
        }

        return self.api_client.call_api(
            "/v1/applications/{application_id}/tools/{tool_id}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
