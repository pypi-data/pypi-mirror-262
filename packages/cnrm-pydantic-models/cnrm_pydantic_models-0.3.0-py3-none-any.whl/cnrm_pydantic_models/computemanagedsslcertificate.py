# generated by datamodel-codegen:
#   filename:  computemanagedsslcertificate_v1alpha1.json
#   timestamp: 2024-03-15T04:51:43+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(None, description='Type is the type of the condition.')


class Managed(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domains: List[str] = Field(
        ...,
        description='Immutable. Domains for which a managed SSL certificate will be valid.  Currently,\nthere can be up to 100 domains in this list.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        None, description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None, description='Immutable. An optional description of this resource.'
    )
    managed: Optional[Managed] = Field(
        None,
        description="Immutable. Properties relevant to a managed certificate.  These will be used if the\ncertificate is managed (as indicated by a value of 'MANAGED' in 'type').",
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    type: Optional[str] = Field(
        None,
        description='Immutable. Enum field whose value is always \'MANAGED\' - used to signal to the API\nwhich type this is. Default value: "MANAGED" Possible values: ["MANAGED"].',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    certificateId: Optional[int] = Field(
        None, description='The unique identifier for the resource.'
    )
    conditions: Optional[List[Condition]] = Field(
        None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTimestamp: Optional[str] = Field(
        None, description='Creation timestamp in RFC3339 text format.'
    )
    expireTime: Optional[str] = Field(
        None, description='Expire time of the certificate in RFC3339 text format.'
    )
    observedGeneration: Optional[int] = Field(
        None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None
    subjectAlternativeNames: Optional[List[str]] = Field(
        None,
        description='Domains associated with the certificate via Subject Alternative Name.',
    )
