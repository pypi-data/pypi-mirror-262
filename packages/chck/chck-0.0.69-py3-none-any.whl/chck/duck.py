# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_duck.ipynb.

# %% auto 0
__all__ = ['ospath', 'plpath', 'pxpath', 'pynan', 'npnan', 'npNaN', 'npNAN', 'pdna', 'pdindex', 'pdseries', 'dataframe',
           'pdcatindex', 'pddelegate', 'pdcataccessor', 'npbool', 'npmatrix', 'nparray', 'recarray', 'nptype',
           'sparray', 'spmatrix', 'ptsize', 'pttype', 'ptdevice', 'pttensor', 'ptinttensor', 'ptfloattensor',
           'ptbooltensor', 'nnmodule', 'ptdataset', 'ptdataloader', 'pldatamodule', 'neuralode', 'neuralsde', 'odefunc',
           'sdefunc', 'cv2vidcap', 'adata', 'pathmeta', 'pathlike', 'nansmeta', 'nans', 'strbytesmeta',
           'notstrbytesmeta', 'notstrbytes', 'idxmeta', 'indexlike', 'boolmeta', 'bool01', 'boolsmeta', 'boolindex',
           'dtypemeta', 'dtype', 'sizemeta', 'size', 'devicemeta', 'device', 'tensmeta', 'tensor', 'dynamicsmeta',
           'neuraldynamics']

# %% ../nbs/00_duck.ipynb 4
from abc import abstractmethod

from types import ModuleType
from typing import Any, Type, Union, Literal, Callable, ForwardRef, TypeVar, ParamSpec, TypeGuard, TypeAlias, Iterable

# %% ../nbs/00_duck.ipynb 7
try: import os
except ImportError: os = None
try: import math
except ImportError: math = None
try: import pathlib
except ImportError: pathlib = None

try: import numpy as np
except ImportError: np = None
try: import scipy as sp
except ImportError: sp = None
try: import pandas as pd
except ImportError: pd = None

try: import torch
except ImportError: torch = None
try: import pytorch_lightning as pl
except ImportError: pl = None
try: import torchdyn
except ImportError: torchdyn = None
try: import anndata
except ImportError: anndata = None
try: import cv2
except ImportError: cv2 = None

# %% ../nbs/00_duck.ipynb 11
_pd_core: ModuleType = getattr(pd, 'core', None)
_pd_core_acc: ModuleType = getattr(_pd_core, 'accessor', None)
_pd_core_arr: ModuleType = getattr(getattr(_pd_core, 'arrays', None), 'categorical', None)

_sp: ModuleType = getattr(sp, 'sparse', None)

_nn: ModuleType = getattr(torch, 'nn', None)
_data: ModuleType = getattr(getattr(torch, 'utils', None), 'data', None)
_dyn_core: ModuleType = getattr(torchdyn, 'core', None)
_dyn_core_defunc: ModuleType = getattr(_dyn_core, 'defunc', None)

# %% ../nbs/00_duck.ipynb 13
ospath = getattr(os, 'PathLike', type)
plpath = getattr(pathlib, 'Path', type)
pxpath = getattr(pathlib, 'PosixPath', type)

# %% ../nbs/00_duck.ipynb 14
pynan = getattr(math, 'nan', float('nan'))
npnan = getattr(np, 'nan', pynan)
npNaN = getattr(np, 'NaN', pynan)
npNAN = getattr(np, 'npNAN', pynan)
pdna = getattr(pd, 'NA', pynan)

# %% ../nbs/00_duck.ipynb 15
pdindex = getattr(pd, 'Index', list)
pdseries = getattr(pd, 'Series', list)
dataframe = getattr(pd, 'DataFrame', list)
pdcatindex = getattr(pd, 'CategoricalIndex', list)

pddelegate = getattr(_pd_core_acc, 'PandasDelegate', object)
pdcataccessor = getattr(_pd_core_arr, 'CategoricalAccessor', object)

# %% ../nbs/00_duck.ipynb 16
npbool: bool = getattr(np, 'bool_', bool)
npmatrix: type = getattr(np, 'matrix', list)
nparray: type = getattr(np, 'ndarray', list)
recarray: type = getattr(np, 'recarray', list)
nptype:type = getattr(np, 'dtype', type)

# %% ../nbs/00_duck.ipynb 17
sparray = getattr(getattr(_sp, '_arrays', None), '_sparray', None)
sparray = getattr(_sp, 'sparray', sparray or list)
spmatrix = getattr(_sp, 'spmatrix', list)

# %% ../nbs/00_duck.ipynb 18
ptsize = getattr(torch, 'size', tuple)
pttype = getattr(torch, 'dtype', type)
ptdevice = getattr(torch, 'device', str)

pttensor = getattr(torch, 'Tensor', list)
ptinttensor = getattr(torch, 'IntTensor', list)
ptfloattensor = getattr(torch, 'FloatTensor', list)
ptbooltensor = getattr(torch, 'BoolTensor', list)


nnmodule = getattr(_nn, 'Module', type)

ptdataset = getattr(_data, 'Dataset', list)
ptdataloader = getattr(_data, 'DataLoader', list)

pldatamodule = getattr(pl, 'LightningDataModule', type)

# %% ../nbs/00_duck.ipynb 19
neuralode = getattr(_dyn_core, 'NeuralODE', nnmodule)
neuralsde = getattr(_dyn_core, 'NeuralSDE', nnmodule)

odefunc = getattr(_dyn_core_defunc, 'ODEFunc', nnmodule)
sdefunc = getattr(_dyn_core_defunc, 'SDEFunc', nnmodule)

# %% ../nbs/00_duck.ipynb 20
cv2vidcap = getattr(cv2, 'VideoCapture', type)
adata = getattr(anndata, 'AnnData', list)

# %% ../nbs/00_duck.ipynb 22
def _bool01(x):
    return isinstance(x, (bool, npbool)) or x == 0 or x == 1

def _bools(x):
    t = getattr(x, 'dtype', None)
    if isinstance(x, Iterable): 
        return all(_bools(i) for i in x)
    else: 
        return _bool01(x) or (_bool01(t) or t == bool)

# %% ../nbs/00_duck.ipynb 24
class duckmeta(type):
    @classmethod
    @abstractmethod
    def __guard__(cls, inst): ...
    def __instancecheck__(self, inst): return self.__guard__(inst)

class notmeta(duckmeta):
    def __instancecheck__(self, inst): return not self.__guard__(inst)

# %% ../nbs/00_duck.ipynb 25
class pathmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (ospath, plpath, pxpath))
    
class pathlike(metaclass=duckmeta): ...

# %% ../nbs/00_duck.ipynb 26
class nansmeta(duckmeta):
    def __guard__(self, inst): 
        try:
            anyna = inst is pdna or any(inst == n for n in (npnan, npNAN, npNaN))
            isnan = getattr(pd, 'isna', lambda x: math.isnan(x))
            return isinstance(inst, type(pdna)) or isnan(inst) or anyna
        except: return False

class nans(metaclass=nansmeta): ...

# %% ../nbs/00_duck.ipynb 27
class strbytesmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (str, bytes))

class notstrbytesmeta(notmeta, strbytesmeta): ...    
class notstrbytes(metaclass=notstrbytesmeta): ...

# %% ../nbs/00_duck.ipynb 28
class idxmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (list, pdindex, nparray))
    
class indexlike(metaclass=idxmeta): ...

# %% ../nbs/00_duck.ipynb 29
class boolmeta(duckmeta):
    def __guard__(self, inst): return _bool01(inst)
    
class bool01(metaclass=boolmeta): ...
    
class boolsmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (list, pdindex, nparray)) and _bools(inst)

class boolindex(metaclass=boolsmeta): ...

# %% ../nbs/00_duck.ipynb 30
class dtypemeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (pttype, nptype))

class dtype(metaclass=dtypemeta): ...


class sizemeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (ptsize, ))

class size(metaclass=sizemeta): ...


class devicemeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (ptdevice, ))

class device(metaclass=devicemeta): ...

# %% ../nbs/00_duck.ipynb 31
class tensmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (pttensor, ptinttensor, ptfloattensor, ptbooltensor))

class tensor(metaclass=tensmeta): ...


# %% ../nbs/00_duck.ipynb 32
class dynamicsmeta(duckmeta):
    def __guard__(self, inst): return isinstance(inst, (neuralode, neuralsde))
    
class neuraldynamics(metaclass=dynamicsmeta): ...
