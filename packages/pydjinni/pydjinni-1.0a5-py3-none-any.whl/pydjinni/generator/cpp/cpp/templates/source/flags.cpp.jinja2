{% extends "base.jinja2" %}
{% from "macros.jinja2" import to_string %}

{% block header %}
#include {{ type_def.cpp.header | quote }}
{% if config.string_serialization_for_enums %}
#include <string>
#include <utility>
#include <vector>
{% endif %}
{% endblock %}

{% block content %}

{% if config.string_serialization_for_enums %}
namespace {

inline std::vector<std::string> to_string_vector( {{ type_def.cpp.name }} value) {
    static const std::pair<{{ type_def.cpp.name }}, std::string> m[] = {
{% for flag in type_def.flags %}
{% if flag.all == false and flag.none == false %}
         { {{ type_def.cpp.name }}::{{ flag.cpp.name }},"{{ flag.cpp.name }}"},
{% endif %}
{% endfor %}
    };

    std::vector<std::string> stringVector;
    for(const auto& flagOption : m) {
        if(static_cast<unsigned>(value & flagOption.first) != 0) {
            stringVector.push_back(flagOption.second);
        }
    }
    return stringVector;
}

}

std::ostream& operator<<(std::ostream& os, {{ type_def.cpp.name }} value) {
    auto as_string_vector = to_string_vector(value);
    for (auto const& item : as_string_vector) {
        if(&item != &as_string_vector[0]) {
            os << " | ";
        }
        os << item;
    }
    return os;
}
{% endif %}
{% endblock %}
