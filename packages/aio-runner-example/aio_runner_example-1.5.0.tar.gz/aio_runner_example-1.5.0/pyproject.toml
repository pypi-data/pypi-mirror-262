[tool.poetry]
name = "aio-runner-example"
version = "1.5.0"
description = "AIO SDK's implementation in Python"
authors = ["Intelygenz - AIO Team"]
maintainers = ["Intelygenz - AIO Team"]
keywords = ["python", "runner", "aio"]
packages = [
    {include = "runner"},
    {include = "sdk", from = "sdk"},
]

[tool.poetry.dependencies]
python = "~3.11"
nats-py = "2.6.0"
protobuf = ">=4.23.0, <=4.23.4"
loguru = "0.7.0"
vyper-config = "1.1.1"
minio = "7.2.0"
python-keycloak = "3.7.0"
redis = {extras = ["hiredis"], version = "5.0.1"}
semver = "3.0.2"
opentelemetry-sdk = "1.23.0"
opentelemetry-exporter-otlp-proto-grpc = "1.23.0"
grpcio = "1.59.3"

[tool.poetry.group.dev.dependencies]
black = "23.7.0"
pytest = "7.4.0"
pytest-asyncio = "0.21.1"
pytest-cov = "4.1.0"
isort = "5.12.0"
coverage = "7.2.7"
codespell = "2.2.5"
ipdb = "0.13.13"
pytest-mock = "3.11.1"
mock = "5.1.0"
types-mock = "5.1.0.1"
mypy = "1.5.1"
types-protobuf = "4.24.0.1"
loguru-mypy = "0.0.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py311"]
line-length = 120
exclude = '/(.*_pb2.*\.py)|(.venv)|(dist)|(__init__.py)/'

[tool.isort]
py_version=311
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
extend_skip = [
    "kai_nats_msg_pb2.py",
    ".venv",
    "dist",
    "__init__.py",
]

[tool.pytest.ini_options]
addopts = [
    "-vvv",
    "-s",
    "-W ignore::DeprecationWarning",
]
testpaths = [
    "sdk/sdk/**/*_test.py",
    "runner/**/*_test.py",
]
python_files = "*_test.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
omit = [
    "*_test.py",
    "kai_nats_msg_pb2.py",
    ".venv",
    "dist",
    "/**/*__init__.py",
]
relative_files = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Skip any pass lines such as may be used for @abstractmethod
    "pass",

    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Do not complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Do not complain if non-runnable code is not run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Do not complain about logs not being tested
    "self.logger.*",
    "logger.*",

    # Do not complain about random uuids
    "uuid.uuid4()",

    # Do not complain about type checking
    "if TYPE_CHECKING:",

    # Do not complain about signals
    "self.loop.add_signal_handler",
]

ignore_errors = false
fail_under = 80
precision = 2
show_missing = true

[tool.codespell]
skip = [
    ".venv",
    "kai_nats_msg_pb2.py",
    "dist",
    "__init__.py",
]

[tool.mypy]
python_version = 3.11
exclude = [
    ".venv",
    "kai_nats_msg_pb2.py",
    "dist",
    "__init__.py",
]
ignore_missing_imports = true
