[project]
name = "cs.result"
description = "Result and friends: various subclassable classes for deferred delivery of values."
authors = [
    { name = "Cameron Simpson", email = "cs@cskk.id.au" },
]
keywords = [
    "python2",
    "python3",
]
dependencies = [
    "cs.deco>=20240316",
    "cs.fsm>=20240316",
    "cs.gimmicks>=20240316",
    "cs.mappings>=20231129",
    "cs.pfx>=20230604",
    "cs.py.func>=20230331",
    "cs.py3>=20220523",
    "cs.seq>=20221118",
    "cs.threads>=20240316",
    "icontract",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 2",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
version = "20240316"

[project.license]
text = "GNU General Public License v3 or later (GPLv3+)"

[project.urls]
URL = "https://bitbucket.org/cameron_simpson/css/commits/all"

[project.readme]
text = """
Result and friends: various subclassable classes for deferred delivery of values.

*Latest release 20240316*:
Fixed release upload artifacts.

A `Result` is the base class for several callable subclasses
which will receive values at a later point in time,
and can also be used standalone without subclassing.

A call to a `Result` will block until the value is received or the `Result` is cancelled,
which will raise an exception in the caller.
A `Result` may be called by multiple users, before or after the value has been delivered;
if the value has been delivered the caller returns with it immediately.
A `Result`'s state may be inspected (pending, running, ready, cancelled).
Callbacks can be registered via a `Result`'s .notify method.

An incomplete `Result` can be told to call a function to compute its value;
the function return will be stored as the value unless the function raises an exception,
in which case the exception information is recorded instead.
If an exception occurred, it will be reraised for any caller of the `Result`.

Trite example:

    R = Result(name=\"my demo\")

Thread 1:

    # this blocks until the Result is ready
    value = R()
    print(value)
    # prints 3 once Thread 2 (below) assigns to it

Thread 2:

    R.result = 3

Thread 3:

    value = R()
    # returns immediately with 3

You can also collect multiple `Result`s in completion order using the `report()` function:

    Rs = [ ... list of Results of whatever type ... ]
    ...
    for R in report(Rs):
        x = R()     # collect result, will return immediately because
                    # the Result is complete
        print(x)    # print result

## Function `after(Rs, R, func, *a, **kw)`

After the completion of `Rs` call `func(*a,**kw)` and return
its result via `R`; return the `Result` object.

Parameters:
* `Rs`: an iterable of Results.
* `R`: a `Result` to collect to result of calling `func`.
  If `None`, one will be created.
* `func`, `a`, `kw`: a callable and its arguments.

## Function `bg(func, *a, **kw)`

Dispatch a `Thread` to run `func`, return a `Result` to collect its value.

Parameters:
* `_name`: optional name for the `Result`, passed to the initialiser
* `_extra`: optional extra data for the `Result`, passed to the initialiser

Other parameters are passed to `func`.

## Function `call_in_thread(func, *a, **kw)`

Run `func(*a,**kw)` in a separate `Thread` via the `@in_thread` decorator.
Return or exception is as for the original function.

## Class `CancellationError(builtins.Exception, builtins.BaseException)`

Raised when accessing `result` or `exc_info` after cancellation.

*Method `CancellationError.__init__(self, message=None, **kw)`*:
Initialise the `CancellationError`.

The optional `message` parameter (default `\"cancelled\"`)
is set as the `message` attribute.
Other keyword parameters set their matching attributes.

## Function `in_thread(func)`

Decorator to evaluate `func` in a separate `Thread`.
Return or exception is as for the original function.

This exists to step out of the current `Thread's` thread
local context, such as a database transaction associated
with Django's implicit per-`Thread` database context.

## Class `OnDemandFunction(Result, cs.fsm.FSM, cs.gvutils.DOTNodeMixin)`

Wrap a callable, run it when required.

## Class `OnDemandResult(Result, cs.fsm.FSM, cs.gvutils.DOTNodeMixin)`

Wrap a callable, run it when required.

## Function `report(LFs)`

Generator which yields completed `Result`s.

This is a generator that yields `Result`s as they complete,
useful for waiting for a sequence of `Result`s
that may complete in an arbitrary order.

## Class `Result(cs.fsm.FSM, cs.gvutils.DOTNodeMixin)`

Base class for asynchronous collection of a result.
This is used to make `Result`, `OnDemandFunction`s, `LateFunction`s
and other objects with asynchronous termination.

In addition to the methods below, for each state value such
as `self.PENDING` there is a corresponding attribute `is_pending`
testing whether the `Result` is in that state.

*Method `Result.__init__(self, name=None, lock=None, result=None, state=None, extra=None)`*:
Base initialiser for `Result` objects and subclasses.

Parameter:
* `name`: optional parameter naming this object.
* `lock`: optional locking object, defaults to a new `threading.Lock`.
* `result`: if not `None`, prefill the `.result` property.
* `extra`: an optional mapping of extra information to
  associate with the `Result`, useful to provide context
  when collecting the result; the `Result` has a public
  attribute `.extra` which is an `AttrableMapping` to hold
  this information.

## Class `ResultSet(builtins.set)`

A `set` subclass containing `Result`s,
on which one may iterate as `Result`s complete.

# Release Log



*Release 20240316*:
Fixed release upload artifacts.

*Release 20240305*:
Result.__str__: handle early use where __dict__ lacks various entries.

*Release 20231221*:
Doc update.

*Release 20231129*:
Result.__del__: issue a warning about no collection instead of raising an exception.

*Release 20230331*:
Result.join: access self._result instead of the property.

*Release 20230212*:
* Result._complete: release self._get_lock before firing the event, as the event is what fires the notifiers.
* Result.notify: when we make a direct notifier call, call the notifier outside the lock and remember to set self.collected=True.
* Result: new post_notify() method to queue a function of the Result.result, returning a Result for the completion of the post function.

*Release 20221207*:
CancellationError: accept keyword arguments, apply as attributes.

*Release 20221118*:
* CancellationError: rename msg to message.
* Result.run_func_in_thread: new method to run an arbitrary function in a separate Thread and return it via the Result.
* New @in_thread decorator to cause a function to run in a separate Thread using Result.run_in_thread.
* New call_in_thread to run an arbitrary function in a distinct Thread.
* @in_thread: expose the original function as the decorated function's .direct attribute.

*Release 20220918*:
OnDemandResult: modern \"pending\" check.

*Release 20220805*:
Result now subclasses cs.fsm.FSM.

*Release 20220311*:
* Result: class local Seq instance.
* Result.call: thread safe runtime check of self.state==pending.
* New Task and @task decorator, prototype for rerunnable blocking chaining tasks scheme - very alpha.

*Release 20210420*:
Update dependencies, add docstring.

*Release 20210407*:
New ResultSet(set) class, with context manager and wait methods, and whose __iter__ iterates completed Results.

*Release 20210123*:
bg: accept optional _extra parameter for use by the Result.

*Release 20201102*:
Result: now .extra attribute for associated data and a new optional \"extra\" parameter in the initialiser.

*Release 20200521*:
* OnDemandResult: bugfixes and improvements.
* Result.bg: accept optional _name parameter to specify the Result.name.

*Release 20191007*:
* Simplify ResultState definition.
* Result.bg: use cs.threads.bg to dispatch the Thread.

*Release 20190522*:
* Result.__call__ now accepts an optional callable and args.
* Result.call: set the Result state to \"running\" before dispatching the function.
* Rename OnDemandFunction to OnDemandResult, keep old name around for compatibility.
* Result._complete: also permitted if state==cancelled.

*Release 20190309*:
Small bugfix.

*Release 20181231*:
* Result.call: report baser exceptions than BaseException.
* Drop _PendingFunction abstract class.

*Release 20181109.1*:
DISTINFO update.

*Release 20181109*:
* Derive CancellationError from Exception instead of RuntimeError, fix initialiser.
* Rename AsynchState to ResultState and make it an Enum.
* Make Results hashable and comparable for equality for use as mapping keys: equality is identity.
* New Result.collected attribute, set true if .result or .exc_info are accessed, logs an error if Result.__del__ is called when false, may be set true externally if a Result is not required.
* Drop `final` parameter; never used and supplanted by Result.notify.
* Result.join: return the .result and .exc_info properties in order to mark the Result as collected.
* Result: set .collected to True when a notifier has been called successfully.
* Bugfix Result.cancel: apply the new cancelled state.

*Release 20171231*:
* Bugfix Result.call to catch BaseException instead of Exception.
* New convenience function bg(func) to dispatch `func` in a separate Thread and return a Result to collect its value.

*Release 20171030.1*:
Fix module requirements specification.

*Release 20171030*:
New Result.bg(func, *a, **kw) method to dispatch function in separate Thread to compute the Result value.

*Release 20170903*:
rename cs.asynchron to cs.result"""
content-type = "text/markdown"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools >= 61.2",
    "trove-classifiers",
    "wheel",
]

[tool.setuptools]
py-modules = [
    "cs.result",
]

[tool.setuptools.package-dir]
"" = "lib/python"
