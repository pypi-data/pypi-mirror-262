# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_util.ipynb.

# %% auto 0
__all__ = ['sdim', 'slice_dimensions', 'slice_dims', 'channels_resize']

# %% ../nbs/02_util.ipynb 6
from functools import wraps

# %% ../nbs/02_util.ipynb 8
from types import ModuleType

# %% ../nbs/02_util.ipynb 10
#| export


# %% ../nbs/02_util.ipynb 12
from quac import ints, intq, int4, slicespecs, tensor, imagesizeq
from quac.eggs import tv_functional
from chck import notnone, isnone, isiter
from asto import THWC, TCHW, to_channels_format

# %% ../nbs/02_util.ipynb 14
from .cons import WRAPS_ASSIGN_ANNDOCS

# %% ../nbs/02_util.ipynb 16
def sdim(*slcs: slicespecs, axes: ints | None = None, ndim: intq = None) -> int:
     '''
     Calculate the number of dimensions to which the slices apply.

     Parameters
     ----------
     slcs : Slcs
          The slices for which the dimensionality is to be determined.

     axes : tuple[int, ...], optional
          The axes that the slices apply to, defaults to None.

     ndim : int, optional
          The number of dimensions of the target tensor, defaults to None.

     Returns
     -------
     int
          The number of dimensions to which the slices apply.

     Examples
     --------
     >>> sdim((0, 10), (0, 10))
     2
     
     See Also
     --------
     slice_dims : Alias for sdim
     slice_dimensions : Alias for sdim
     '''
     if notnone(ndim): 
          return ndim
     
     if isnone(axes): 
          return len(slcs)
     
     if isiter(axes): 
          return max(max(axes) + 1, len(axes))
     
     return axes

@wraps(sdim, assigned=WRAPS_ASSIGN_ANNDOCS)
def slice_dimensions(*slcs: slicespecs, axes: ints | None = None, ndim: intq = None) -> int:
     '''Alias for `sdim`'''
     return sdim(*slcs, axes=axes, ndim=ndim)

@wraps(sdim, assigned=WRAPS_ASSIGN_ANNDOCS)
def slice_dims(*slcs: slicespecs, axes: ints | None = None, ndim: intq = None) -> int:
     '''Alias for `sdim`'''
     return sdim(*slcs, axes=axes, ndim=ndim)

# %% ../nbs/02_util.ipynb 18
def channels_resize(t: tensor, resize: imagesizeq = None, output_channels: str | int4 = THWC) -> tensor:
    '''
    Resizes a tensor and changes its channel configuration if needed.

    Parameters
    ----------
    t : Tensor
        The input tensor to resize.
        
    resize : ImgSizeQ, optional
        The target size for resizing, does nothing if None.
        
    output_channels : Channels, optional
        The channel configuration for the output tensor, defaults to THWC.

    Returns
    -------
    Tensor
        The resized tensor, potentially with a different channel configuration.
        
    See Also
    --------
    etrc.enum.Channels.resize: Alias for channels_resize
    '''
    if isnone(resize): return t 
    # F: ModuleType = imod('torchvision.transforms.functional')
    F: ModuleType = tv_functional.duck
    t = to_channels_format(t, TCHW)
    t = F.resize(t, resize)
    t = to_channels_format(t, output_channels)
    return t

# %% ../nbs/02_util.ipynb 20
#| export
