# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_meta.ipynb.

# %% auto 0
__all__ = ['TypedDictMeta', 'TypeDict', 'dtyp', 'typedict', 'tdict', 'tkws', 'TypeKwds', 'typekwds']

# %% ../nbs/10_meta.ipynb 6
from inspect import Signature, Parameter, get_annotations, _ParameterKind as ParamKind, _empty as Empty
from functools import wraps, partial
from enum import EnumMeta

# %% ../nbs/10_meta.ipynb 8
from types import NoneType, WrapperDescriptorType, FunctionType, MethodWrapperType
from typing import (
    Any, Self, Type, Callable, TypeVar, ParamSpec, TypeGuard, TypedDict,
    ParamSpecArgs, ParamSpecKwargs, get_args, _UnionGenericAlias, 
    get_type_hints
)

# %% ../nbs/10_meta.ipynb 10
#| export


# %% ../nbs/10_meta.ipynb 12
#| export


# %% ../nbs/10_meta.ipynb 14
from .cons import (__DOC__, __NEW__, __MODULE__, __DEFAULTS__, __TYPEDICT__, __ANNOTATIONS__)
from .atyp import T, P, K
from .grds import isnone
from .util import getname
from .sigs import typed_dict_signature
from .tdct import (typeddict_from_keywords, typed_dict_defaults, get_typed_dict_keywords, prune_type_dict_keywords, typeddict_factory)
from .sigs import (signature_from_annotations)

# %% ../nbs/10_meta.ipynb 17
class TypedDictMeta(type):
    __typedict__: dict
    '''The `TypedDict` created when subclassed''';
    
    __defaults__: dict = dict()
    '''Default values for the `TypeDict`''';
    
    def __instancecheck__(cls, instance):
        if not isinstance(instance, dict): return False
        given = get_type_hints(cls)
        found = {k: type(v) for k, v in instance.items()}
        # Simplified type checking logic
        return all(given.get(k) == found.get(k) for k in given)
    
    def __new__(cls, name: str, bases: tuple[type, ...] = (), namespace: dict = dict(), **kwargs: P.kwargs):
        new = super().__new__(cls, name, bases, namespace)
        return new
    
    def __defs__(cls, **kwargs: P.kwargs) -> dict:
        anns = get_type_hints(cls)
        base = typed_dict_defaults(cls.__typedict__)
        
        defs = cls() if issubclass(cls, dict) else dict()
        base.update(defs)
        base.update({k: v for k, v in cls.__dict__.items() if k in anns})
        base.update({k: kwargs.get(k) for k in cls.__dict__ if k in kwargs})
        return base
    
    def __init__(cls, name: str, bases: tuple[type, ...] = (), namespace: dict = dict(), **kwargs: P.kwargs):
        super().__init__(cls, name, bases)
        setattr(cls, __TYPEDICT__, TypedDict( f'{name}_typeddict', get_type_hints(cls)))
        defs = cls.__defs__(**kwargs)
        setattr(cls, __DEFAULTS__, defs)

# %% ../nbs/10_meta.ipynb 19
class TypeDict(dict, metaclass=TypedDictMeta):
    def __init_subclass__(cls, *args: P.args, **kwargs: P.kwargs):
        super().__init_subclass__()

    def __new__(cls, *args: P.args, **kwargs: P.kwargs):
        newdct = super().__new__(cls, *args, **kwargs)
        joined = {**cls.__defaults__, **kwargs}
        newdct.update(joined)
        return newdct
    
    def dropnones(self, inplace: bool = True):
        '''Removes keys with `None` values from the TypedDict instance.'''
        bad = {k for k, v in self.items() if isnone(v)}
        if inplace:
            for k in bad: self.pop(k)
            return self
        sub = {k: v for k, v in self.items() if k in bad}
        return type(self)(sub)
    
    @classmethod
    def filter(cls, __defaults: T | None = None, **kwargs: K) -> Self: 
        '''Filter the keywords in **kwargs to just those specified in the class's TypedDict.'''
        tdict = getattr(cls, __TYPEDICT__, dict())
        return get_typed_dict_keywords(tdict, __defaults=__defaults, **kwargs)
    
    @classmethod
    def remove(cls, **kwargs: K): 
        '''Remove the keywords in **kwargs from the class's TypedDict'''
        tdict = getattr(cls, __TYPEDICT__, dict())
        return prune_type_dict_keywords(tdict, **kwargs)

# %% ../nbs/10_meta.ipynb 20
@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class dtyp(TypeDict, __subclass=True):  ...

@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class typedict(TypeDict, __subclass=True): ...

@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class tdict(TypeDict, __subclass=True): ...
    

@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class tkws(TypeDict, __subclass=True): ...
    
@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class TypeKwds(TypeDict, __subclass=True): ...

@wraps(TypeDict, assigned = (__MODULE__, __DOC__, __ANNOTATIONS__), updated=())
class typekwds(TypeDict, __subclass=True): ...
