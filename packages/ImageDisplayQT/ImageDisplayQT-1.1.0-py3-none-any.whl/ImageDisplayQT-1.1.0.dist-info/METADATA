Metadata-Version: 2.1
Name: ImageDisplayQT
Version: 1.1.0
Summary: A widget for real time image display in PyQT GUIs.
Author-email: Michael Hughes <m.r.hughes@kent.ac.uk>
License: MIT License
        
        Copyright (c) 2023 Mike Hughes
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/MikeHughesKent/ImageDisplayQT/
Keywords: imaging,GUI,display,video,PyQT,QT,scientific
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy >=1.18
Requires-Dist: Pillow >=9.3.0
Requires-Dist: matplotlib >=3.3.4
Requires-Dist: PyQT5 >=5.15.0
Provides-Extra: dev

# ImageDisplayQT
ImageDisplayQT is a PyQT widget for displaying live images in GUIs. It was developed for scientific imaging applications, with features including zoom, 
pixel inspection, autoscaling, region of interest with live mean display, and the ability to add persistent overlays. 

It is lightweight and simple to use, requiring 
only a few lines of code to be added to your GUI. It can display images at video rate on modest hardware.

It currently supports monochrome and colour (RGB) images stored as 2D and 3D numpy arrays. 1D array data can also
be displayed as a simple line graph.

[Full documentation is available](https://imagedisplayqt.readthedocs.io/).

You can see the widget's appearance on [Youtube](https://www.youtube.com/watch?v=Yak7tegc_DI).

You can ``pip install ImageDisplayQT`` for the latest stable version.

The widget is developed mainly by [Mike Hughes](https://research.kent.ac.uk/applied-optics/hughes) 
at the [Applied Optics Group](https://research.kent.ac.uk/applied-optics/), School of Physics and Astronomy, University of Kent. 

The widget was originally developed for our in-house microscopy and imaging systems and will evolve with our requirements. Bug reports, contributions and pull requests are welcome.

## Getting started

Import the class:
```
from image_display import ImageDisplay
```
Create an instance:
```
imDisplay = ImageDisplay()
```
and then add this widget to your GUI.

To update the image, call:
```
imDisplay.set_image(img)
```

where `img` is a 2D numpy array containing a monochrome image or a 3D numpy array containing a colour (RGB) image.

Toggle the status bar visibility using:

```
imDisplay.set_status_bar(True/False)
```

Toggle the zoom facility using the mouse scroll wheel (or pinch zoom):

```
imDisplay.set_zoom_enabled(True/False)
```
Once zoomed you can pan by holding the middle or right mouse buttons.

Toggle the ability to draw a rectangular region of interest by holding the left mouse button and dragging:

```
imDisplay.set_roi_enabled(True/False)
```

Set the colormap to be any Matplotlib colormap using:
```
imDisplay.set_colormap(colormapName)
```

Please see the example in the examples folder for more functionality, including overlays and autoscaling.


## Requirements

Required Packages:
* PyQt (tested on v5)
* Numpy
* PIL
* Matplotlib (for colormaps)


## Acknowledgements

Funding from EPSRC (Ultrathin fluorescence microscope in a needle, EP/R019274/1), Royal Society (Ultrathin Inline Holographic Microscopy) and University of Kent.
