# komle/bindings/v20/_eml.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:1e9617d03415d86adf273fcb31eaedcc7bb83b1b
# Generated 2020-05-05 12:51:53.526637 by PyXB version 1.2.6 using Python 3.8.2.final.0
# Namespace http://www.energistics.org/energyml/data/commonv2 [xmlns:eml]

from __future__ import unicode_literals

import io
import sys

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import pyxb.utils.domutils
import pyxb.utils.six as _six
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:52e853d8-8ebe-11ea-ae29-f507f064c4f5')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

import komle.bindings.v20._nsgroup as _ImportedBinding_bindings_v20__nsgroup

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.energistics.org/energyml/data/commonv2', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ParameterKind
class ParameterKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ParameterKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 108, 1)
    _Documentation = None
ParameterKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ParameterKind, enum_prefix=None)
ParameterKind.dataObject = ParameterKind._CF_enumeration.addEnumeration(unicode_value='dataObject', tag='dataObject')
ParameterKind.double = ParameterKind._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
ParameterKind.integer = ParameterKind._CF_enumeration.addEnumeration(unicode_value='integer', tag='integer')
ParameterKind.string = ParameterKind._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
ParameterKind.timestamp = ParameterKind._CF_enumeration.addEnumeration(unicode_value='timestamp', tag='timestamp')
ParameterKind.subActivity = ParameterKind._CF_enumeration.addEnumeration(unicode_value='subActivity', tag='subActivity')
ParameterKind._InitializeFacetMap(ParameterKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ParameterKind', ParameterKind)
_module_typeBindings.ParameterKind = ParameterKind

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}NonNegativeLong
class NonNegativeLong (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NonNegativeLong')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 26, 1)
    _Documentation = None
NonNegativeLong._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=NonNegativeLong, value=pyxb.binding.datatypes.long(0))
NonNegativeLong._InitializeFacetMap(NonNegativeLong._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'NonNegativeLong', NonNegativeLong)
_module_typeBindings.NonNegativeLong = NonNegativeLong

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AbstractMeasure
class AbstractMeasure (pyxb.binding.datatypes.double):

    """The intended abstract supertype of all quantities that have a value with a unit of measure. The unit of measure is in the uom attribute of the subtypes. 

This type allows all quantities to be profiled to be a 'float' instead of a 'double'."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 55, 1)
    _Documentation = "The intended abstract supertype of all quantities that have a value with a unit of measure. The unit of measure is in the uom attribute of the subtypes. \n\nThis type allows all quantities to be profiled to be a 'float' instead of a 'double'."
AbstractMeasure._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'AbstractMeasure', AbstractMeasure)
_module_typeBindings.AbstractMeasure = AbstractMeasure

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AbstractString
class AbstractString (pyxb.binding.datatypes.string):

    """The intended abstract supertype of all strings. This abstract type allows the control over whitespace for all strings to be defined at a high level. This type should not be used directly except to derive another type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractString')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 201, 1)
    _Documentation = 'The intended abstract supertype of all strings. This abstract type allows the control over whitespace for all strings to be defined at a high level. This type should not be used directly except to derive another type.'
AbstractString._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'AbstractString', AbstractString)
_module_typeBindings.AbstractString = AbstractString

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PositiveLong
class PositiveLong (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositiveLong')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 438, 1)
    _Documentation = None
PositiveLong._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=PositiveLong, value=pyxb.binding.datatypes.long(1))
PositiveLong._InitializeFacetMap(PositiveLong._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'PositiveLong', PositiveLong)
_module_typeBindings.PositiveLong = PositiveLong

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AxisOrder2d
class AxisOrder2d (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Defines the coordinate system axis order of the global CRS using the axis names (from EPSG database)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AxisOrder2d')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 216, 1)
    _Documentation = 'Defines the coordinate system axis order of the global CRS using the axis names (from EPSG database).'
AxisOrder2d._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AxisOrder2d, enum_prefix=None)
AxisOrder2d.easting_northing = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='easting northing', tag='easting_northing')
AxisOrder2d.northing_easting = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='northing easting', tag='northing_easting')
AxisOrder2d.westing_southing = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='westing southing', tag='westing_southing')
AxisOrder2d.southing_westing = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='southing westing', tag='southing_westing')
AxisOrder2d.northing_westing = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='northing westing', tag='northing_westing')
AxisOrder2d.westing_northing = AxisOrder2d._CF_enumeration.addEnumeration(unicode_value='westing northing', tag='westing_northing')
AxisOrder2d._InitializeFacetMap(AxisOrder2d._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AxisOrder2d', AxisOrder2d)
_module_typeBindings.AxisOrder2d = AxisOrder2d

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VerticalDirection
class VerticalDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalDirection')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 262, 1)
    _Documentation = None
VerticalDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VerticalDirection, enum_prefix=None)
VerticalDirection.up = VerticalDirection._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
VerticalDirection.down = VerticalDirection._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
VerticalDirection._InitializeFacetMap(VerticalDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VerticalDirection', VerticalDirection)
_module_typeBindings.VerticalDirection = VerticalDirection

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}UuidString
class UuidString (AbstractString):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UuidString')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 21, 1)
    _Documentation = None
UuidString._CF_pattern = pyxb.binding.facets.CF_pattern()
UuidString._CF_pattern.addPattern(pattern='[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}')
UuidString._InitializeFacetMap(UuidString._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'UuidString', UuidString)
_module_typeBindings.UuidString = UuidString

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}String64
class String64 (AbstractString):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'String64')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 207, 1)
    _Documentation = None
String64._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(64))
String64._InitializeFacetMap(String64._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'String64', String64)
_module_typeBindings.String64 = String64

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnumExtensionPattern
class EnumExtensionPattern (AbstractString):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnumExtensionPattern')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 233, 1)
    _Documentation = None
EnumExtensionPattern._CF_pattern = pyxb.binding.facets.CF_pattern()
EnumExtensionPattern._CF_pattern.addPattern(pattern='.*:.*')
EnumExtensionPattern._InitializeFacetMap(EnumExtensionPattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'EnumExtensionPattern', EnumExtensionPattern)
_module_typeBindings.EnumExtensionPattern = EnumExtensionPattern

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}String2000
class String2000 (AbstractString):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'String2000')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 368, 1)
    _Documentation = None
String2000._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2000))
String2000._InitializeFacetMap(String2000._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'String2000', String2000)
_module_typeBindings.String2000 = String2000

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimeStamp
class TimeStamp (AbstractString):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeStamp')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 472, 1)
    _Documentation = None
TimeStamp._CF_pattern = pyxb.binding.facets.CF_pattern()
TimeStamp._CF_pattern.addPattern(pattern='.+T.+[Z+\\-].*')
TimeStamp._InitializeFacetMap(TimeStamp._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'TimeStamp', TimeStamp)
_module_typeBindings.TimeStamp = TimeStamp

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}UomEnum
class UomEnum (AbstractString):

    """The intended abstract supertype of all "units of measure".
			This abstract type allows the maximum length of a UOM enumeration to be centrally defined. 
			This type is abstract in the sense that it should not be used directly 
			except to derive another type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UomEnum')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 484, 1)
    _Documentation = 'The intended abstract supertype of all "units of measure".\n\t\t\tThis abstract type allows the maximum length of a UOM enumeration to be centrally defined. \n\t\t\tThis type is abstract in the sense that it should not be used directly \n\t\t\texcept to derive another type.'
UomEnum._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32))
UomEnum._InitializeFacetMap(UomEnum._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'UomEnum', UomEnum)
_module_typeBindings.UomEnum = UomEnum

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimeZone
class TimeZone (String64):

    """A time zone conforming to the XSD:dateTime specification."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeZone')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 41, 1)
    _Documentation = 'A time zone conforming to the XSD:dateTime specification.'
TimeZone._CF_pattern = pyxb.binding.facets.CF_pattern()
TimeZone._CF_pattern.addPattern(pattern='[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])')
TimeZone._InitializeFacetMap(TimeZone._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'TimeZone', TimeZone)
_module_typeBindings.TimeZone = TimeZone

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TypeEnum
class TypeEnum (String64):

    """The intended abstract supertype of all enumerated "types". This abstract type allows the maximum length of a type enumeration to be centrally defined. This type should not be used directly except to derive another type. It should also be used for uncontrolled strings which are candidates to become enumerations at a future date."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 49, 1)
    _Documentation = 'The intended abstract supertype of all enumerated "types". This abstract type allows the maximum length of a type enumeration to be centrally defined. This type should not be used directly except to derive another type. It should also be used for uncontrolled strings which are candidates to become enumerations at a future date.'
TypeEnum._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'TypeEnum', TypeEnum)
_module_typeBindings.TypeEnum = TypeEnum

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}UnitOfMeasure
class UnitOfMeasure (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """This is a list of the valid units of measure across all the measure classes. Its intended use is to ensure that a valid unit of measure string is used in cases where the measure class is not known in advance or is otherwise not explicitly modeled in the XML schema."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitOfMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 1034, 1)
    _Documentation = 'This is a list of the valid units of measure across all the measure classes. Its intended use is to ensure that a valid unit of measure string is used in cases where the measure class is not known in advance or is otherwise not explicitly modeled in the XML schema.'
UnitOfMeasure._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=UnitOfMeasure, enum_prefix=None)
UnitOfMeasure.emptyString = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
UnitOfMeasure.area = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='%[area]', tag='area')
UnitOfMeasure.mass = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='%[mass]', tag='mass')
UnitOfMeasure.molar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='%[molar]', tag='molar')
UnitOfMeasure.vol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='%[vol]', tag='vol')
UnitOfMeasure.bbldbbld = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='(bbl/d)/(bbl/d)', tag='bbldbbld')
UnitOfMeasure.m3dm3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='(m3/d)/(m3/d)', tag='m3dm3d')
UnitOfMeasure.m3sm3s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='(m3/s)/(m3/s)', tag='m3sm3s')
UnitOfMeasure.n0_001_bblft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 bbl/ft3', tag='n0_001_bblft3')
UnitOfMeasure.n0_001_bblm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 bbl/m3', tag='n0_001_bblm3')
UnitOfMeasure.n0_001_dft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 d/ft3', tag='n0_001_dft3')
UnitOfMeasure.n0_001_galUKbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 gal[UK]/bbl', tag='n0_001_galUKbbl')
UnitOfMeasure.n0_001_galUKgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 gal[UK]/gal[UK]', tag='n0_001_galUKgalUK')
UnitOfMeasure.n0_001_galUSbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/bbl', tag='n0_001_galUSbbl')
UnitOfMeasure.n0_001_galUSft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/ft3', tag='n0_001_galUSft3')
UnitOfMeasure.n0_001_galUSgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/gal[US]', tag='n0_001_galUSgalUS')
UnitOfMeasure.n0_001_hft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 h/ft', tag='n0_001_hft')
UnitOfMeasure.n0_001_kPa2cP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 kPa2/cP', tag='n0_001_kPa2cP')
UnitOfMeasure.n0_001_lbmbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/bbl', tag='n0_001_lbmbbl')
UnitOfMeasure.n0_001_lbmgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/gal[UK]', tag='n0_001_lbmgalUK')
UnitOfMeasure.n0_001_lbmgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/gal[US]', tag='n0_001_lbmgalUS')
UnitOfMeasure.n0_001_psift = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 psi/ft', tag='n0_001_psift')
UnitOfMeasure.n0_001_ptUKbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 pt[UK]/bbl', tag='n0_001_ptUKbbl')
UnitOfMeasure.n0_001_seca = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.001 seca', tag='n0_001_seca')
UnitOfMeasure.n0_01_bblbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 bbl/bbl', tag='n0_01_bblbbl')
UnitOfMeasure.n0_01_degaft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 dega/ft', tag='n0_01_degaft')
UnitOfMeasure.n0_01_degFft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 degF/ft', tag='n0_01_degFft')
UnitOfMeasure.n0_01_dm3km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 dm3/km', tag='n0_01_dm3km')
UnitOfMeasure.n0_01_ftft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 ft/ft', tag='n0_01_ftft')
UnitOfMeasure.n0_01_grainft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 grain/ft3', tag='n0_01_grainft3')
UnitOfMeasure.n0_01_Lkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 L/kg', tag='n0_01_Lkg')
UnitOfMeasure.n0_01_Lkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 L/km', tag='n0_01_Lkm')
UnitOfMeasure.n0_01_lbfft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 lbf/ft', tag='n0_01_lbfft')
UnitOfMeasure.n0_01_lbfft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 lbf/ft2', tag='n0_01_lbfft2')
UnitOfMeasure.n0_01_lbmft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 lbm/ft2', tag='n0_01_lbmft2')
UnitOfMeasure.n0_01_psift = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.01 psi/ft', tag='n0_01_psift')
UnitOfMeasure.n0_1_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 ft', tag='n0_1_ft')
UnitOfMeasure.n0_1_ftUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 ft[US]', tag='n0_1_ftUS')
UnitOfMeasure.n0_1_galUSbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 gal[US]/bbl', tag='n0_1_galUSbbl')
UnitOfMeasure.n0_1_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 in', tag='n0_1_in')
UnitOfMeasure.n0_1_Lbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 L/bbl', tag='n0_1_Lbbl')
UnitOfMeasure.n0_1_lbmbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 lbm/bbl', tag='n0_1_lbmbbl')
UnitOfMeasure.n0_1_ptUSbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 pt[US]/bbl', tag='n0_1_ptUSbbl')
UnitOfMeasure.n0_1_yd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='0.1 yd', tag='n0_1_yd')
UnitOfMeasure.n1kg_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/(kg.s)', tag='n1kg_s')
UnitOfMeasure.n116_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/16 in', tag='n116_in')
UnitOfMeasure.n12_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/2 ft', tag='n12_ft')
UnitOfMeasure.n12_ms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/2 ms', tag='n12_ms')
UnitOfMeasure.n130_cm3min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 cm3/min', tag='n130_cm3min')
UnitOfMeasure.n130_degaft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 dega/ft', tag='n130_degaft')
UnitOfMeasure.n130_degam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 dega/m', tag='n130_degam')
UnitOfMeasure.n130_lbfm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 lbf/m', tag='n130_lbfm')
UnitOfMeasure.n130_mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 m/m', tag='n130_mm')
UnitOfMeasure.n130_Nm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/30 N/m', tag='n130_Nm')
UnitOfMeasure.n132_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/32 in', tag='n132_in')
UnitOfMeasure.n164_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/64 in', tag='n164_in')
UnitOfMeasure.n1a = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/a', tag='n1a')
UnitOfMeasure.n1angstrom = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/angstrom', tag='n1angstrom')
UnitOfMeasure.n1bar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/bar', tag='n1bar')
UnitOfMeasure.n1bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/bbl', tag='n1bbl')
UnitOfMeasure.n1cm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/cm', tag='n1cm')
UnitOfMeasure.n1d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/d', tag='n1d')
UnitOfMeasure.n1degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/degC', tag='n1degC')
UnitOfMeasure.n1degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/degF', tag='n1degF')
UnitOfMeasure.n1degR = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/degR', tag='n1degR')
UnitOfMeasure.n1ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/ft', tag='n1ft')
UnitOfMeasure.n1ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/ft2', tag='n1ft2')
UnitOfMeasure.n1ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/ft3', tag='n1ft3')
UnitOfMeasure.n1g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/g', tag='n1g')
UnitOfMeasure.n1galUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/gal[UK]', tag='n1galUK')
UnitOfMeasure.n1galUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/gal[US]', tag='n1galUS')
UnitOfMeasure.n1h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/h', tag='n1h')
UnitOfMeasure.n1H = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/H', tag='n1H')
UnitOfMeasure.n1in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/in', tag='n1in')
UnitOfMeasure.n1K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/K', tag='n1K')
UnitOfMeasure.n1kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/kg', tag='n1kg')
UnitOfMeasure.n1km2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/km2', tag='n1km2')
UnitOfMeasure.n1kPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/kPa', tag='n1kPa')
UnitOfMeasure.n1L = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/L', tag='n1L')
UnitOfMeasure.n1lbf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/lbf', tag='n1lbf')
UnitOfMeasure.n1lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/lbm', tag='n1lbm')
UnitOfMeasure.n1m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/m', tag='n1m')
UnitOfMeasure.n1m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/m2', tag='n1m2')
UnitOfMeasure.n1m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/m3', tag='n1m3')
UnitOfMeasure.n1mi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/mi', tag='n1mi')
UnitOfMeasure.n1mi2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/mi2', tag='n1mi2')
UnitOfMeasure.n1min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/min', tag='n1min')
UnitOfMeasure.n1mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/mm', tag='n1mm')
UnitOfMeasure.n1ms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/ms', tag='n1ms')
UnitOfMeasure.n1N = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/N', tag='n1N')
UnitOfMeasure.n1nm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/nm', tag='n1nm')
UnitOfMeasure.n1Pa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/Pa', tag='n1Pa')
UnitOfMeasure.n1pPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/pPa', tag='n1pPa')
UnitOfMeasure.n1psi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/psi', tag='n1psi')
UnitOfMeasure.n1s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/s', tag='n1s')
UnitOfMeasure.n1upsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/upsi', tag='n1upsi')
UnitOfMeasure.n1us = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/us', tag='n1us')
UnitOfMeasure.n1uV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/uV', tag='n1uV')
UnitOfMeasure.n1V = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/V', tag='n1V')
UnitOfMeasure.n1wk = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/wk', tag='n1wk')
UnitOfMeasure.n1yd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1/yd', tag='n1yd')
UnitOfMeasure.n10_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='10 ft', tag='n10_ft')
UnitOfMeasure.n10_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='10 in', tag='n10_in')
UnitOfMeasure.n10_km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='10 km', tag='n10_km')
UnitOfMeasure.n10_kN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='10 kN', tag='n10_kN')
UnitOfMeasure.n10_Mgm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='10 Mg/m3', tag='n10_Mgm3')
UnitOfMeasure.n100_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='100 ft', tag='n100_ft')
UnitOfMeasure.n100_kat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='100 ka[t]', tag='n100_kat')
UnitOfMeasure.n100_km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='100 km', tag='n100_km')
UnitOfMeasure.n1000_bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 bbl', tag='n1000_bbl')
UnitOfMeasure.n1000_bbl_ftd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 bbl.ft/d', tag='n1000_bbl_ftd')
UnitOfMeasure.n1000_bbld = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 bbl/d', tag='n1000_bbld')
UnitOfMeasure.n1000_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft', tag='n1000_ft')
UnitOfMeasure.n1000_fth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft/h', tag='n1000_fth')
UnitOfMeasure.n1000_fts = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft/s', tag='n1000_fts')
UnitOfMeasure.n1000_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft3', tag='n1000_ft3')
UnitOfMeasure.n1000_ft3d_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft3/(d.ft)', tag='n1000_ft3d_ft')
UnitOfMeasure.n1000_ft3psi_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft3/(psi.d)', tag='n1000_ft3psi_d')
UnitOfMeasure.n1000_ft3bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft3/bbl', tag='n1000_ft3bbl')
UnitOfMeasure.n1000_ft3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 ft3/d', tag='n1000_ft3d')
UnitOfMeasure.n1000_galUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 gal[UK]', tag='n1000_galUK')
UnitOfMeasure.n1000_galUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 gal[US]', tag='n1000_galUS')
UnitOfMeasure.n1000_lbf_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 lbf.ft', tag='n1000_lbf_ft')
UnitOfMeasure.n1000_m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3', tag='n1000_m3')
UnitOfMeasure.n1000_m3d_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3/(d.m)', tag='n1000_m3d_m')
UnitOfMeasure.n1000_m3h_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3/(h.m)', tag='n1000_m3h_m')
UnitOfMeasure.n1000_m3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3/d', tag='n1000_m3d')
UnitOfMeasure.n1000_m3h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3/h', tag='n1000_m3h')
UnitOfMeasure.n1000_m3m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m3/m3', tag='n1000_m3m3')
UnitOfMeasure.n1000_m4d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1000 m4/d', tag='n1000_m4d')
UnitOfMeasure.n1E12_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E12 ft3', tag='n1E12_ft3')
UnitOfMeasure.n1E6_ft3dbbld = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 (ft3/d)/(bbl/d)', tag='n1E6_ft3dbbld')
UnitOfMeasure.n1E_6_acre_ftbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 acre.ft/bbl', tag='n1E_6_acre_ftbbl')
UnitOfMeasure.n1E6_bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 bbl', tag='n1E6_bbl')
UnitOfMeasure.n1E6_bblacre_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/(acre.ft)', tag='n1E6_bblacre_ft')
UnitOfMeasure.n1E6_bblacre = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/acre', tag='n1E6_bblacre')
UnitOfMeasure.n1E6_bbld = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/d', tag='n1E6_bbld')
UnitOfMeasure.n1E_6_bblft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 bbl/ft3', tag='n1E_6_bblft3')
UnitOfMeasure.n1E_6_bblm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 bbl/m3', tag='n1E_6_bblm3')
UnitOfMeasure.n1E6_BtuIT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 Btu[IT]', tag='n1E6_BtuIT')
UnitOfMeasure.n1E6_BtuITh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 Btu[IT]/h', tag='n1E6_BtuITh')
UnitOfMeasure.n1E6_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 ft3', tag='n1E6_ft3')
UnitOfMeasure.n1E6_ft3acre_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/(acre.ft)', tag='n1E6_ft3acre_ft')
UnitOfMeasure.n1E6_ft3bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/bbl', tag='n1E6_ft3bbl')
UnitOfMeasure.n1E6_ft3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/d', tag='n1E6_ft3d')
UnitOfMeasure.n1E_6_galUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 gal[US]', tag='n1E_6_galUS')
UnitOfMeasure.n1E6_lbma = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 lbm/a', tag='n1E6_lbma')
UnitOfMeasure.n1E6_m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 m3', tag='n1E6_m3')
UnitOfMeasure.n1E_6_m3m3_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 m3/(m3.degC)', tag='n1E_6_m3m3_degC')
UnitOfMeasure.n1E_6_m3m3_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-6 m3/(m3.degF)', tag='n1E_6_m3m3_degF')
UnitOfMeasure.n1E6_m3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E6 m3/d', tag='n1E6_m3d')
UnitOfMeasure.n1E_9_1ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E-9 1/ft', tag='n1E_9_1ft')
UnitOfMeasure.n1E9_bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E9 bbl', tag='n1E9_bbl')
UnitOfMeasure.n1E9_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='1E9 ft3', tag='n1E9_ft3')
UnitOfMeasure.n30_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='30 ft', tag='n30_ft')
UnitOfMeasure.n30_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='30 m', tag='n30_m')
UnitOfMeasure.A = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A', tag='A')
UnitOfMeasure.a = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='a', tag='a')
UnitOfMeasure.A_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A.h', tag='A_h')
UnitOfMeasure.A_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A.m2', tag='A_m2')
UnitOfMeasure.A_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A.s', tag='A_s')
UnitOfMeasure.A_skg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A.s/kg', tag='A_skg')
UnitOfMeasure.A_sm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A.s/m3', tag='A_sm3')
UnitOfMeasure.Acm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/cm2', tag='Acm2')
UnitOfMeasure.Aft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/ft2', tag='Aft2')
UnitOfMeasure.Am = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/m', tag='Am')
UnitOfMeasure.Am2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/m2', tag='Am2')
UnitOfMeasure.Amm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/mm', tag='Amm')
UnitOfMeasure.Amm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='A/mm2', tag='Amm2')
UnitOfMeasure.at = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='a[t]', tag='at')
UnitOfMeasure.acre = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='acre', tag='acre')
UnitOfMeasure.acre_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='acre.ft', tag='acre_ft')
UnitOfMeasure.ag = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ag', tag='ag')
UnitOfMeasure.aJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='aJ', tag='aJ')
UnitOfMeasure.angstrom = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='angstrom', tag='angstrom')
UnitOfMeasure.at_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='at', tag='at_')
UnitOfMeasure.atm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='atm', tag='atm')
UnitOfMeasure.atmft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='atm/ft', tag='atmft')
UnitOfMeasure.atmh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='atm/h', tag='atmh')
UnitOfMeasure.atmhm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='atm/hm', tag='atmhm')
UnitOfMeasure.atmm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='atm/m', tag='atmm')
UnitOfMeasure.b = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='b', tag='b')
UnitOfMeasure.B = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
UnitOfMeasure.B_W = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='B.W', tag='B_W')
UnitOfMeasure.bcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='b/cm3', tag='bcm3')
UnitOfMeasure.Bm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='B/m', tag='Bm')
UnitOfMeasure.BO = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='B/O', tag='BO')
UnitOfMeasure.bar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar', tag='bar')
UnitOfMeasure.barh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar/h', tag='barh')
UnitOfMeasure.barkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar/km', tag='barkm')
UnitOfMeasure.barm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar/m', tag='barm')
UnitOfMeasure.bar2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar2', tag='bar2')
UnitOfMeasure.bar2cP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bar2/cP', tag='bar2cP')
UnitOfMeasure.bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl', tag='bbl')
UnitOfMeasure.bblacre_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(acre.ft)', tag='bblacre_ft')
UnitOfMeasure.bbld_acre_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(d.acre.ft)', tag='bbld_acre_ft')
UnitOfMeasure.bbld_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(d.ft)', tag='bbld_ft')
UnitOfMeasure.bblft_psi_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(ft.psi.d)', tag='bblft_psi_d')
UnitOfMeasure.bblkPa_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(kPa.d)', tag='bblkPa_d')
UnitOfMeasure.bblpsi_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/(psi.d)', tag='bblpsi_d')
UnitOfMeasure.bblacre = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/acre', tag='bblacre')
UnitOfMeasure.bblbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/bbl', tag='bblbbl')
UnitOfMeasure.bbld = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/d', tag='bbld')
UnitOfMeasure.bbld2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/d2', tag='bbld2')
UnitOfMeasure.bblft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/ft', tag='bblft')
UnitOfMeasure.bblft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/ft3', tag='bblft3')
UnitOfMeasure.bblh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/h', tag='bblh')
UnitOfMeasure.bblh2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/h2', tag='bblh2')
UnitOfMeasure.bblin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/in', tag='bblin')
UnitOfMeasure.bblm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/m3', tag='bblm3')
UnitOfMeasure.bblmi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/mi', tag='bblmi')
UnitOfMeasure.bblmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/min', tag='bblmin')
UnitOfMeasure.bblpsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/psi', tag='bblpsi')
UnitOfMeasure.bbltonUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/ton[UK]', tag='bbltonUK')
UnitOfMeasure.bbltonUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bbl/ton[US]', tag='bbltonUS')
UnitOfMeasure.Bd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Bd', tag='Bd')
UnitOfMeasure.bit = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bit', tag='bit')
UnitOfMeasure.bits = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='bit/s', tag='bits')
UnitOfMeasure.Bq = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Bq', tag='Bq')
UnitOfMeasure.Bqkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Bq/kg', tag='Bqkg')
UnitOfMeasure.BtuIT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]', tag='BtuIT')
UnitOfMeasure.BtuIT_inh_ft2_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT].in/(h.ft2.degF)', tag='BtuIT_inh_ft2_degF')
UnitOfMeasure.BtuITh_ft_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft.degF)', tag='BtuITh_ft_degF')
UnitOfMeasure.BtuITh_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2)', tag='BtuITh_ft2')
UnitOfMeasure.BtuITh_ft2_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2.degF)', tag='BtuITh_ft2_degF')
UnitOfMeasure.BtuITh_ft2_degR = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2.degR)', tag='BtuITh_ft2_degR')
UnitOfMeasure.BtuITh_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft3)', tag='BtuITh_ft3')
UnitOfMeasure.BtuITh_ft3_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft3.degF)', tag='BtuITh_ft3_degF')
UnitOfMeasure.BtuITh_m2_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.m2.degC)', tag='BtuITh_m2_degC')
UnitOfMeasure.BtuIThp_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(hp.h)', tag='BtuIThp_h')
UnitOfMeasure.BtuITlbm_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbm.degF)', tag='BtuITlbm_degF')
UnitOfMeasure.BtuITlbm_degR = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbm.degR)', tag='BtuITlbm_degR')
UnitOfMeasure.BtuITlbmol_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbmol.degF)', tag='BtuITlbmol_degF')
UnitOfMeasure.BtuITs_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft2)', tag='BtuITs_ft2')
UnitOfMeasure.BtuITs_ft2_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft2.degF)', tag='BtuITs_ft2_degF')
UnitOfMeasure.BtuITs_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft3)', tag='BtuITs_ft3')
UnitOfMeasure.BtuITs_ft3_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft3.degF)', tag='BtuITs_ft3_degF')
UnitOfMeasure.BtuITbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/bbl', tag='BtuITbbl')
UnitOfMeasure.BtuITft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/ft3', tag='BtuITft3')
UnitOfMeasure.BtuITgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/gal[UK]', tag='BtuITgalUK')
UnitOfMeasure.BtuITgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/gal[US]', tag='BtuITgalUS')
UnitOfMeasure.BtuITh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/h', tag='BtuITh')
UnitOfMeasure.BtuITlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/lbm', tag='BtuITlbm')
UnitOfMeasure.BtuITlbmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/lbmol', tag='BtuITlbmol')
UnitOfMeasure.BtuITmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/min', tag='BtuITmin')
UnitOfMeasure.BtuITs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/s', tag='BtuITs')
UnitOfMeasure.Btuth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[th]', tag='Btuth')
UnitOfMeasure.BtuUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Btu[UK]', tag='BtuUK')
UnitOfMeasure.byte = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='byte', tag='byte')
UnitOfMeasure.bytes = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='byte/s', tag='bytes')
UnitOfMeasure.C = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
UnitOfMeasure.C_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C.m', tag='C_m')
UnitOfMeasure.Ccm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/cm2', tag='Ccm2')
UnitOfMeasure.Ccm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/cm3', tag='Ccm3')
UnitOfMeasure.Cg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/g', tag='Cg')
UnitOfMeasure.Ckg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/kg', tag='Ckg')
UnitOfMeasure.Cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/m2', tag='Cm2')
UnitOfMeasure.Cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/m3', tag='Cm3')
UnitOfMeasure.Cmm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/mm2', tag='Cmm2')
UnitOfMeasure.Cmm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='C/mm3', tag='Cmm3')
UnitOfMeasure.ca = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ca', tag='ca')
UnitOfMeasure.cA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cA', tag='cA')
UnitOfMeasure.calIT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[IT]', tag='calIT')
UnitOfMeasure.calth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]', tag='calth')
UnitOfMeasure.calthg_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(g.K)', tag='calthg_K')
UnitOfMeasure.calthh_cm_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm.degC)', tag='calthh_cm_degC')
UnitOfMeasure.calthh_cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm2)', tag='calthh_cm2')
UnitOfMeasure.calthh_cm2_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm2.degC)', tag='calthh_cm2_degC')
UnitOfMeasure.calthh_cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm3)', tag='calthh_cm3')
UnitOfMeasure.calthmol_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(mol.degC)', tag='calthmol_degC')
UnitOfMeasure.calths_cm_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm.degC)', tag='calths_cm_degC')
UnitOfMeasure.calths_cm2_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm2.degC)', tag='calths_cm2_degC')
UnitOfMeasure.calths_cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm3)', tag='calths_cm3')
UnitOfMeasure.calthcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/cm3', tag='calthcm3')
UnitOfMeasure.calthg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/g', tag='calthg')
UnitOfMeasure.calthh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/h', tag='calthh')
UnitOfMeasure.calthkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/kg', tag='calthkg')
UnitOfMeasure.calthlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/lbm', tag='calthlbm')
UnitOfMeasure.calthmL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/mL', tag='calthmL')
UnitOfMeasure.calthmm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cal[th]/mm3', tag='calthmm3')
UnitOfMeasure.cC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cC', tag='cC')
UnitOfMeasure.ccalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ccal[th]', tag='ccalth')
UnitOfMeasure.ccgr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ccgr', tag='ccgr')
UnitOfMeasure.cd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cd', tag='cd')
UnitOfMeasure.cdm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cd/m2', tag='cdm2')
UnitOfMeasure.cEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cEuc', tag='cEuc')
UnitOfMeasure.ceV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ceV', tag='ceV')
UnitOfMeasure.cF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cF', tag='cF')
UnitOfMeasure.cg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cg', tag='cg')
UnitOfMeasure.cgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cgauss', tag='cgauss')
UnitOfMeasure.cgr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cgr', tag='cgr')
UnitOfMeasure.cGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cGy', tag='cGy')
UnitOfMeasure.cH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cH', tag='cH')
UnitOfMeasure.chain = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain', tag='chain')
UnitOfMeasure.chainBnA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[BnA]', tag='chainBnA')
UnitOfMeasure.chainBnB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[BnB]', tag='chainBnB')
UnitOfMeasure.chainCla = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[Cla]', tag='chainCla')
UnitOfMeasure.chainInd37 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[Ind37]', tag='chainInd37')
UnitOfMeasure.chainSe = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[Se]', tag='chainSe')
UnitOfMeasure.chainSeT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[SeT]', tag='chainSeT')
UnitOfMeasure.chainUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='chain[US]', tag='chainUS')
UnitOfMeasure.cHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cHz', tag='cHz')
UnitOfMeasure.Ci = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ci', tag='Ci')
UnitOfMeasure.cJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cJ', tag='cJ')
UnitOfMeasure.cm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm', tag='cm')
UnitOfMeasure.cma = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm/a', tag='cma')
UnitOfMeasure.cms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm/s', tag='cms')
UnitOfMeasure.cms2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm/s2', tag='cms2')
UnitOfMeasure.cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm2', tag='cm2')
UnitOfMeasure.cm2g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm2/g', tag='cm2g')
UnitOfMeasure.cm2s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm2/s', tag='cm2s')
UnitOfMeasure.cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3', tag='cm3')
UnitOfMeasure.cm3cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/cm3', tag='cm3cm3')
UnitOfMeasure.cm3g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/g', tag='cm3g')
UnitOfMeasure.cm3h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/h', tag='cm3h')
UnitOfMeasure.cm3L = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/L', tag='cm3L')
UnitOfMeasure.cm3m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/m3', tag='cm3m3')
UnitOfMeasure.cm3min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/min', tag='cm3min')
UnitOfMeasure.cm3s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm3/s', tag='cm3s')
UnitOfMeasure.cm4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cm4', tag='cm4')
UnitOfMeasure.cmH2O4degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cmH2O[4degC]', tag='cmH2O4degC')
UnitOfMeasure.cN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cN', tag='cN')
UnitOfMeasure.cohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cohm', tag='cohm')
UnitOfMeasure.cP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cP', tag='cP')
UnitOfMeasure.cPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cPa', tag='cPa')
UnitOfMeasure.crd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='crd', tag='crd')
UnitOfMeasure.cS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cS', tag='cS')
UnitOfMeasure.cs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cs', tag='cs')
UnitOfMeasure.cSt = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cSt', tag='cSt')
UnitOfMeasure.ct = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ct', tag='ct')
UnitOfMeasure.cT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cT', tag='cT')
UnitOfMeasure.cu = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cu', tag='cu')
UnitOfMeasure.cV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cV', tag='cV')
UnitOfMeasure.cW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cW', tag='cW')
UnitOfMeasure.cWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cWb', tag='cWb')
UnitOfMeasure.cwtUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cwt[UK]', tag='cwtUK')
UnitOfMeasure.cwtUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='cwt[US]', tag='cwtUS')
UnitOfMeasure.D = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
UnitOfMeasure.d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='d', tag='d')
UnitOfMeasure.D_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D.ft', tag='D_ft')
UnitOfMeasure.D_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D.m', tag='D_m')
UnitOfMeasure.DPa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D/(Pa.s)', tag='DPa_s')
UnitOfMeasure.dbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='d/bbl', tag='dbbl')
UnitOfMeasure.DcP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D/cP', tag='DcP')
UnitOfMeasure.dft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='d/ft3', tag='dft3')
UnitOfMeasure.dm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='d/m3', tag='dm3')
UnitOfMeasure.DAPI = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='D[API]', tag='DAPI')
UnitOfMeasure.dA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dA', tag='dA')
UnitOfMeasure.dam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dam', tag='dam')
UnitOfMeasure.daN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='daN', tag='daN')
UnitOfMeasure.daN_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='daN.m', tag='daN_m')
UnitOfMeasure.dAPI = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dAPI', tag='dAPI')
UnitOfMeasure.dB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB', tag='dB')
UnitOfMeasure.dB_mW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB.mW', tag='dB_mW')
UnitOfMeasure.dB_MW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB.MW', tag='dB_MW')
UnitOfMeasure.dB_W = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB.W', tag='dB_W')
UnitOfMeasure.dBft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB/ft', tag='dBft')
UnitOfMeasure.dBkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB/km', tag='dBkm')
UnitOfMeasure.dBm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB/m', tag='dBm')
UnitOfMeasure.dBO = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dB/O', tag='dBO')
UnitOfMeasure.dC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dC', tag='dC')
UnitOfMeasure.dcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dcal[th]', tag='dcalth')
UnitOfMeasure.dega = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega', tag='dega')
UnitOfMeasure.degaft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega/ft', tag='degaft')
UnitOfMeasure.degah = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega/h', tag='degah')
UnitOfMeasure.degam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega/m', tag='degam')
UnitOfMeasure.degamin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega/min', tag='degamin')
UnitOfMeasure.degas = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dega/s', tag='degas')
UnitOfMeasure.degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC', tag='degC')
UnitOfMeasure.degC_m2_hkcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC.m2.h/kcal[th]', tag='degC_m2_hkcalth')
UnitOfMeasure.degCft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/ft', tag='degCft')
UnitOfMeasure.degCh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/h', tag='degCh')
UnitOfMeasure.degChm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/hm', tag='degChm')
UnitOfMeasure.degCkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/km', tag='degCkm')
UnitOfMeasure.degCkPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/kPa', tag='degCkPa')
UnitOfMeasure.degCm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/m', tag='degCm')
UnitOfMeasure.degCmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/min', tag='degCmin')
UnitOfMeasure.degCs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degC/s', tag='degCs')
UnitOfMeasure.degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF', tag='degF')
UnitOfMeasure.degF_ft2_hBtuIT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF.ft2.h/Btu[IT]', tag='degF_ft2_hBtuIT')
UnitOfMeasure.degFft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/ft', tag='degFft')
UnitOfMeasure.degFh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/h', tag='degFh')
UnitOfMeasure.degFm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/m', tag='degFm')
UnitOfMeasure.degFmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/min', tag='degFmin')
UnitOfMeasure.degFpsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/psi', tag='degFpsi')
UnitOfMeasure.degFs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degF/s', tag='degFs')
UnitOfMeasure.degR = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='degR', tag='degR')
UnitOfMeasure.dEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dEuc', tag='dEuc')
UnitOfMeasure.deV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='deV', tag='deV')
UnitOfMeasure.dF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dF', tag='dF')
UnitOfMeasure.dgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dgauss', tag='dgauss')
UnitOfMeasure.dGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dGy', tag='dGy')
UnitOfMeasure.dH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dH', tag='dH')
UnitOfMeasure.dHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dHz', tag='dHz')
UnitOfMeasure.dJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dJ', tag='dJ')
UnitOfMeasure.dm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm', tag='dm')
UnitOfMeasure.dms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm/s', tag='dms')
UnitOfMeasure.dm3_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3', tag='dm3_')
UnitOfMeasure.dm3kW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/(kW.h)', tag='dm3kW_h')
UnitOfMeasure.dm3kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/kg', tag='dm3kg')
UnitOfMeasure.dm3kmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/kmol', tag='dm3kmol')
UnitOfMeasure.dm3m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/m', tag='dm3m')
UnitOfMeasure.dm3m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/m3', tag='dm3m3')
UnitOfMeasure.dm3MJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/MJ', tag='dm3MJ')
UnitOfMeasure.dm3s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/s', tag='dm3s')
UnitOfMeasure.dm3s2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/s2', tag='dm3s2')
UnitOfMeasure.dm3t = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dm3/t', tag='dm3t')
UnitOfMeasure.dN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dN', tag='dN')
UnitOfMeasure.dN_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dN.m', tag='dN_m')
UnitOfMeasure.dohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dohm', tag='dohm')
UnitOfMeasure.dP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dP', tag='dP')
UnitOfMeasure.dPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dPa', tag='dPa')
UnitOfMeasure.drd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='drd', tag='drd')
UnitOfMeasure.ds = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ds', tag='ds')
UnitOfMeasure.dS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dS', tag='dS')
UnitOfMeasure.dT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dT', tag='dT')
UnitOfMeasure.dV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dV', tag='dV')
UnitOfMeasure.dW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dW', tag='dW')
UnitOfMeasure.dWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dWb', tag='dWb')
UnitOfMeasure.dyne = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dyne', tag='dyne')
UnitOfMeasure.dyne_cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dyne.cm2', tag='dyne_cm2')
UnitOfMeasure.dyne_scm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dyne.s/cm2', tag='dyne_scm2')
UnitOfMeasure.dynecm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dyne/cm', tag='dynecm')
UnitOfMeasure.dynecm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='dyne/cm2', tag='dynecm2')
UnitOfMeasure.EA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EA', tag='EA')
UnitOfMeasure.Eat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ea[t]', tag='Eat')
UnitOfMeasure.EC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EC', tag='EC')
UnitOfMeasure.Ecalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ecal[th]', tag='Ecalth')
UnitOfMeasure.EEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EEuc', tag='EEuc')
UnitOfMeasure.EeV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EeV', tag='EeV')
UnitOfMeasure.EF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EF', tag='EF')
UnitOfMeasure.Eg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Eg', tag='Eg')
UnitOfMeasure.Egauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Egauss', tag='Egauss')
UnitOfMeasure.EGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EGy', tag='EGy')
UnitOfMeasure.EH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EH', tag='EH')
UnitOfMeasure.EHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EHz', tag='EHz')
UnitOfMeasure.EJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EJ', tag='EJ')
UnitOfMeasure.EJa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EJ/a', tag='EJa')
UnitOfMeasure.Em = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Em', tag='Em')
UnitOfMeasure.EN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EN', tag='EN')
UnitOfMeasure.Eohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Eohm', tag='Eohm')
UnitOfMeasure.EP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EP', tag='EP')
UnitOfMeasure.EPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EPa', tag='EPa')
UnitOfMeasure.Erd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Erd', tag='Erd')
UnitOfMeasure.erg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg', tag='erg')
UnitOfMeasure.erga = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/a', tag='erga')
UnitOfMeasure.ergcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/cm2', tag='ergcm2')
UnitOfMeasure.ergcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/cm3', tag='ergcm3')
UnitOfMeasure.ergg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/g', tag='ergg')
UnitOfMeasure.ergkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/kg', tag='ergkg')
UnitOfMeasure.ergm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='erg/m3', tag='ergm3')
UnitOfMeasure.ES = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ES', tag='ES')
UnitOfMeasure.ET = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ET', tag='ET')
UnitOfMeasure.Euc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
UnitOfMeasure.eV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='eV', tag='eV')
UnitOfMeasure.EW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EW', tag='EW')
UnitOfMeasure.EWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='EWb', tag='EWb')
UnitOfMeasure.F = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
UnitOfMeasure.Fm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='F/m', tag='Fm')
UnitOfMeasure.fa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fa', tag='fa')
UnitOfMeasure.fA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fA', tag='fA')
UnitOfMeasure.fathom = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fathom', tag='fathom')
UnitOfMeasure.fC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fC', tag='fC')
UnitOfMeasure.fcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fcal[th]', tag='fcalth')
UnitOfMeasure.fEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fEuc', tag='fEuc')
UnitOfMeasure.feV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='feV', tag='feV')
UnitOfMeasure.fF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fF', tag='fF')
UnitOfMeasure.fg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fg', tag='fg')
UnitOfMeasure.fgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fgauss', tag='fgauss')
UnitOfMeasure.fGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fGy', tag='fGy')
UnitOfMeasure.fH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fH', tag='fH')
UnitOfMeasure.fHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fHz', tag='fHz')
UnitOfMeasure.fJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fJ', tag='fJ')
UnitOfMeasure.flozUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='floz[UK]', tag='flozUK')
UnitOfMeasure.flozUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='floz[US]', tag='flozUS')
UnitOfMeasure.fm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fm', tag='fm')
UnitOfMeasure.fN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fN', tag='fN')
UnitOfMeasure.fohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fohm', tag='fohm')
UnitOfMeasure.footcandle = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='footcandle', tag='footcandle')
UnitOfMeasure.footcandle_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='footcandle.s', tag='footcandle_s')
UnitOfMeasure.fP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fP', tag='fP')
UnitOfMeasure.fPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fPa', tag='fPa')
UnitOfMeasure.frd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='frd', tag='frd')
UnitOfMeasure.fS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fS', tag='fS')
UnitOfMeasure.ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft', tag='ft')
UnitOfMeasure.fT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fT', tag='fT')
UnitOfMeasure.ftbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/bbl', tag='ftbbl')
UnitOfMeasure.ftd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/d', tag='ftd')
UnitOfMeasure.ftdegF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/degF', tag='ftdegF')
UnitOfMeasure.ftft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/ft', tag='ftft')
UnitOfMeasure.ftft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/ft3', tag='ftft3')
UnitOfMeasure.ftgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/gal[US]', tag='ftgalUS')
UnitOfMeasure.fth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/h', tag='fth')
UnitOfMeasure.ftin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/in', tag='ftin')
UnitOfMeasure.ftlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/lbm', tag='ftlbm')
UnitOfMeasure.ftm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/m', tag='ftm')
UnitOfMeasure.ftmi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/mi', tag='ftmi')
UnitOfMeasure.ftmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/min', tag='ftmin')
UnitOfMeasure.ftms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/ms', tag='ftms')
UnitOfMeasure.ftpsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/psi', tag='ftpsi')
UnitOfMeasure.fts = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/s', tag='fts')
UnitOfMeasure.fts2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/s2', tag='fts2')
UnitOfMeasure.ftus = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft/us', tag='ftus')
UnitOfMeasure.ftBnA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[BnA]', tag='ftBnA')
UnitOfMeasure.ftBnB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[BnB]', tag='ftBnB')
UnitOfMeasure.ftBr36 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Br36]', tag='ftBr36')
UnitOfMeasure.ftBr65 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Br65]', tag='ftBr65')
UnitOfMeasure.ftCla = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Cla]', tag='ftCla')
UnitOfMeasure.ftGC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[GC]', tag='ftGC')
UnitOfMeasure.ftInd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Ind]', tag='ftInd')
UnitOfMeasure.ftInd37 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Ind37]', tag='ftInd37')
UnitOfMeasure.ftInd62 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Ind62]', tag='ftInd62')
UnitOfMeasure.ftInd75 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Ind75]', tag='ftInd75')
UnitOfMeasure.ftSe = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[Se]', tag='ftSe')
UnitOfMeasure.ftSeT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[SeT]', tag='ftSeT')
UnitOfMeasure.ftUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft[US]', tag='ftUS')
UnitOfMeasure.ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft2', tag='ft2')
UnitOfMeasure.ft2h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft2/h', tag='ft2h')
UnitOfMeasure.ft2in3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft2/in3', tag='ft2in3')
UnitOfMeasure.ft2lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft2/lbm', tag='ft2lbm')
UnitOfMeasure.ft2s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft2/s', tag='ft2s')
UnitOfMeasure.ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3', tag='ft3')
UnitOfMeasure.ft3d_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/(d.ft)', tag='ft3d_ft')
UnitOfMeasure.ft3ft_psi_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/(ft.psi.d)', tag='ft3ft_psi_d')
UnitOfMeasure.ft3min_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/(min.ft2)', tag='ft3min_ft2')
UnitOfMeasure.ft3s_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/(s.ft2)', tag='ft3s_ft2')
UnitOfMeasure.ft3bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/bbl', tag='ft3bbl')
UnitOfMeasure.ft3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/d', tag='ft3d')
UnitOfMeasure.ft3d2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/d2', tag='ft3d2')
UnitOfMeasure.ft3ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/ft', tag='ft3ft')
UnitOfMeasure.ft3ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/ft2', tag='ft3ft2')
UnitOfMeasure.ft3ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/ft3', tag='ft3ft3')
UnitOfMeasure.ft3h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/h', tag='ft3h')
UnitOfMeasure.ft3h2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/h2', tag='ft3h2')
UnitOfMeasure.ft3kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/kg', tag='ft3kg')
UnitOfMeasure.ft3lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/lbm', tag='ft3lbm')
UnitOfMeasure.ft3lbmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/lbmol', tag='ft3lbmol')
UnitOfMeasure.ft3min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/min', tag='ft3min')
UnitOfMeasure.ft3min2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/min2', tag='ft3min2')
UnitOfMeasure.ft3rad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/rad', tag='ft3rad')
UnitOfMeasure.ft3s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/s', tag='ft3s')
UnitOfMeasure.ft3s2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/s2', tag='ft3s2')
UnitOfMeasure.ft3sack94lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ft3/sack[94lbm]', tag='ft3sack94lbm')
UnitOfMeasure.furUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fur[US]', tag='furUS')
UnitOfMeasure.fV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fV', tag='fV')
UnitOfMeasure.fW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fW', tag='fW')
UnitOfMeasure.fWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='fWb', tag='fWb')
UnitOfMeasure.g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g', tag='g')
UnitOfMeasure.g_ftcm3_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g.ft/(cm3.s)', tag='g_ftcm3_s')
UnitOfMeasure.g_mcm3_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g.m/(cm3.s)', tag='g_mcm3_s')
UnitOfMeasure.gcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/cm3', tag='gcm3')
UnitOfMeasure.gcm4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/cm4', tag='gcm4')
UnitOfMeasure.gdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/dm3', tag='gdm3')
UnitOfMeasure.ggalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/gal[UK]', tag='ggalUK')
UnitOfMeasure.ggalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/gal[US]', tag='ggalUS')
UnitOfMeasure.gkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/kg', tag='gkg')
UnitOfMeasure.gL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/L', tag='gL')
UnitOfMeasure.gm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/m3', tag='gm3')
UnitOfMeasure.gmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/mol', tag='gmol')
UnitOfMeasure.gs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/s', tag='gs')
UnitOfMeasure.gt = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='g/t', tag='gt')
UnitOfMeasure.GA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GA', tag='GA')
UnitOfMeasure.Gat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ga[t]', tag='Gat')
UnitOfMeasure.Gal = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gal', tag='Gal')
UnitOfMeasure.galUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]', tag='galUK')
UnitOfMeasure.galUKh_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.ft)', tag='galUKh_ft')
UnitOfMeasure.galUKh_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.ft2)', tag='galUKh_ft2')
UnitOfMeasure.galUKh_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.in)', tag='galUKh_in')
UnitOfMeasure.galUKh_in2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.in2)', tag='galUKh_in2')
UnitOfMeasure.galUKmin_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(min.ft)', tag='galUKmin_ft')
UnitOfMeasure.galUKmin_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(min.ft2)', tag='galUKmin_ft2')
UnitOfMeasure.galUKd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/d', tag='galUKd')
UnitOfMeasure.galUKft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/ft3', tag='galUKft3')
UnitOfMeasure.galUKh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/h', tag='galUKh')
UnitOfMeasure.galUKh2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/h2', tag='galUKh2')
UnitOfMeasure.galUKlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/lbm', tag='galUKlbm')
UnitOfMeasure.galUKmi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/mi', tag='galUKmi')
UnitOfMeasure.galUKmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/min', tag='galUKmin')
UnitOfMeasure.galUKmin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[UK]/min2', tag='galUKmin2')
UnitOfMeasure.galUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]', tag='galUS')
UnitOfMeasure.galUSh_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.ft)', tag='galUSh_ft')
UnitOfMeasure.galUSh_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.ft2)', tag='galUSh_ft2')
UnitOfMeasure.galUSh_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.in)', tag='galUSh_in')
UnitOfMeasure.galUSh_in2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.in2)', tag='galUSh_in2')
UnitOfMeasure.galUSmin_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(min.ft)', tag='galUSmin_ft')
UnitOfMeasure.galUSmin_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/(min.ft2)', tag='galUSmin_ft2')
UnitOfMeasure.galUSbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/bbl', tag='galUSbbl')
UnitOfMeasure.galUSd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/d', tag='galUSd')
UnitOfMeasure.galUSft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/ft', tag='galUSft')
UnitOfMeasure.galUSft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/ft3', tag='galUSft3')
UnitOfMeasure.galUSh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/h', tag='galUSh')
UnitOfMeasure.galUSh2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/h2', tag='galUSh2')
UnitOfMeasure.galUSlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/lbm', tag='galUSlbm')
UnitOfMeasure.galUSmi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/mi', tag='galUSmi')
UnitOfMeasure.galUSmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/min', tag='galUSmin')
UnitOfMeasure.galUSmin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/min2', tag='galUSmin2')
UnitOfMeasure.galUSsack94lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/sack[94lbm]', tag='galUSsack94lbm')
UnitOfMeasure.galUStonUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/ton[UK]', tag='galUStonUK')
UnitOfMeasure.galUStonUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gal[US]/ton[US]', tag='galUStonUS')
UnitOfMeasure.gAPI = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gAPI', tag='gAPI')
UnitOfMeasure.gauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gauss', tag='gauss')
UnitOfMeasure.gausscm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gauss/cm', tag='gausscm')
UnitOfMeasure.GBq = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GBq', tag='GBq')
UnitOfMeasure.GC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GC', tag='GC')
UnitOfMeasure.Gcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gcal[th]', tag='Gcalth')
UnitOfMeasure.GEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GEuc', tag='GEuc')
UnitOfMeasure.GeV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GeV', tag='GeV')
UnitOfMeasure.gf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gf', tag='gf')
UnitOfMeasure.GF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GF', tag='GF')
UnitOfMeasure.Gg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gg', tag='Gg')
UnitOfMeasure.Ggauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ggauss', tag='Ggauss')
UnitOfMeasure.GGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GGy', tag='GGy')
UnitOfMeasure.GH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GH', tag='GH')
UnitOfMeasure.GHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GHz', tag='GHz')
UnitOfMeasure.GJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GJ', tag='GJ')
UnitOfMeasure.Gm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gm', tag='Gm')
UnitOfMeasure.GN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GN', tag='GN')
UnitOfMeasure.gn = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gn', tag='gn')
UnitOfMeasure.Gohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gohm', tag='Gohm')
UnitOfMeasure.gon = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='gon', tag='gon')
UnitOfMeasure.GP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GP', tag='GP')
UnitOfMeasure.GPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GPa', tag='GPa')
UnitOfMeasure.GPacm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GPa/cm', tag='GPacm')
UnitOfMeasure.GPa2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GPa2', tag='GPa2')
UnitOfMeasure.grain = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='grain', tag='grain')
UnitOfMeasure.grainft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='grain/ft3', tag='grainft3')
UnitOfMeasure.graingalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='grain/gal[US]', tag='graingalUS')
UnitOfMeasure.Grd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Grd', tag='Grd')
UnitOfMeasure.GS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GS', tag='GS')
UnitOfMeasure.GT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GT', tag='GT')
UnitOfMeasure.GV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GV', tag='GV')
UnitOfMeasure.GW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GW', tag='GW')
UnitOfMeasure.GW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GW.h', tag='GW_h')
UnitOfMeasure.GWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='GWb', tag='GWb')
UnitOfMeasure.Gy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Gy', tag='Gy')
UnitOfMeasure.H = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='H', tag='H')
UnitOfMeasure.h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='h', tag='h')
UnitOfMeasure.hft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='h/ft3', tag='hft3')
UnitOfMeasure.hkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='h/km', tag='hkm')
UnitOfMeasure.Hm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='H/m', tag='Hm')
UnitOfMeasure.hm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='h/m3', tag='hm3')
UnitOfMeasure.ha = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ha', tag='ha')
UnitOfMeasure.ha_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ha.m', tag='ha_m')
UnitOfMeasure.hbar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hbar', tag='hbar')
UnitOfMeasure.hg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hg', tag='hg')
UnitOfMeasure.hL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hL', tag='hL')
UnitOfMeasure.hm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hm', tag='hm')
UnitOfMeasure.hN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hN', tag='hN')
UnitOfMeasure.hp = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp', tag='hp')
UnitOfMeasure.hp_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp.h', tag='hp_h')
UnitOfMeasure.hp_hbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp.h/bbl', tag='hp_hbbl')
UnitOfMeasure.hp_hlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp.h/lbm', tag='hp_hlbm')
UnitOfMeasure.hpft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp/ft3', tag='hpft3')
UnitOfMeasure.hpin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp/in2', tag='hpin2')
UnitOfMeasure.hpelec = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp[elec]', tag='hpelec')
UnitOfMeasure.hphyd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp[hyd]', tag='hphyd')
UnitOfMeasure.hphydin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp[hyd]/in2', tag='hphydin2')
UnitOfMeasure.hpmetric = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp[metric]', tag='hpmetric')
UnitOfMeasure.hpmetric_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hp[metric].h', tag='hpmetric_h')
UnitOfMeasure.hs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='hs', tag='hs')
UnitOfMeasure.Hz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Hz', tag='Hz')
UnitOfMeasure.in_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
UnitOfMeasure.inin_degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in/(in.degF)', tag='inin_degF')
UnitOfMeasure.ina = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in/a', tag='ina')
UnitOfMeasure.inmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in/min', tag='inmin')
UnitOfMeasure.ins = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in/s', tag='ins')
UnitOfMeasure.ins2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in/s2', tag='ins2')
UnitOfMeasure.inUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in[US]', tag='inUS')
UnitOfMeasure.in2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in2', tag='in2')
UnitOfMeasure.in2ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in2/ft2', tag='in2ft2')
UnitOfMeasure.in2in2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in2/in2', tag='in2in2')
UnitOfMeasure.in2s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in2/s', tag='in2s')
UnitOfMeasure.in3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in3', tag='in3')
UnitOfMeasure.in3ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in3/ft', tag='in3ft')
UnitOfMeasure.in4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='in4', tag='in4')
UnitOfMeasure.inH2O39degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='inH2O[39degF]', tag='inH2O39degF')
UnitOfMeasure.inH2O60degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='inH2O[60degF]', tag='inH2O60degF')
UnitOfMeasure.inHg32degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='inHg[32degF]', tag='inHg32degF')
UnitOfMeasure.inHg60degF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='inHg[60degF]', tag='inHg60degF')
UnitOfMeasure.J = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J', tag='J')
UnitOfMeasure.J_ms_m2_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J.m/(s.m2.K)', tag='J_ms_m2_K')
UnitOfMeasure.J_mm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J.m/m2', tag='J_mm2')
UnitOfMeasure.Jg_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/(g.K)', tag='Jg_K')
UnitOfMeasure.Jkg_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/(kg.K)', tag='Jkg_K')
UnitOfMeasure.Jmol_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/(mol.K)', tag='Jmol_K')
UnitOfMeasure.Js_m2_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/(s.m2.degC)', tag='Js_m2_degC')
UnitOfMeasure.Jcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/cm2', tag='Jcm2')
UnitOfMeasure.Jdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/dm3', tag='Jdm3')
UnitOfMeasure.Jg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/g', tag='Jg')
UnitOfMeasure.JK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/K', tag='JK')
UnitOfMeasure.Jkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/kg', tag='Jkg')
UnitOfMeasure.Jm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/m', tag='Jm')
UnitOfMeasure.Jm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/m2', tag='Jm2')
UnitOfMeasure.Jm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/m3', tag='Jm3')
UnitOfMeasure.Jmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/mol', tag='Jmol')
UnitOfMeasure.Js = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='J/s', tag='Js')
UnitOfMeasure.K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
UnitOfMeasure.K_m2kW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K.m2/kW', tag='K_m2kW')
UnitOfMeasure.K_m2W = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K.m2/W', tag='K_m2W')
UnitOfMeasure.Kkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K/km', tag='Kkm')
UnitOfMeasure.Km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K/m', tag='Km')
UnitOfMeasure.KPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K/Pa', tag='KPa')
UnitOfMeasure.Ks = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K/s', tag='Ks')
UnitOfMeasure.KW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='K/W', tag='KW')
UnitOfMeasure.kA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kA', tag='kA')
UnitOfMeasure.kat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ka[t]', tag='kat')
UnitOfMeasure.kC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kC', tag='kC')
UnitOfMeasure.kcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]', tag='kcalth')
UnitOfMeasure.kcalth_mcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th].m/cm2', tag='kcalth_mcm2')
UnitOfMeasure.kcalthh_m_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(h.m.degC)', tag='kcalthh_m_degC')
UnitOfMeasure.kcalthh_m2_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(h.m2.degC)', tag='kcalthh_m2_degC')
UnitOfMeasure.kcalthkg_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(kg.degC)', tag='kcalthkg_degC')
UnitOfMeasure.kcalthcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/cm3', tag='kcalthcm3')
UnitOfMeasure.kcalthg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/g', tag='kcalthg')
UnitOfMeasure.kcalthh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/h', tag='kcalthh')
UnitOfMeasure.kcalthkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/kg', tag='kcalthkg')
UnitOfMeasure.kcalthm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/m3', tag='kcalthm3')
UnitOfMeasure.kcalthmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcal[th]/mol', tag='kcalthmol')
UnitOfMeasure.kcd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kcd', tag='kcd')
UnitOfMeasure.kdyne = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kdyne', tag='kdyne')
UnitOfMeasure.kEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kEuc', tag='kEuc')
UnitOfMeasure.keV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='keV', tag='keV')
UnitOfMeasure.kF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kF', tag='kF')
UnitOfMeasure.kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg', tag='kg')
UnitOfMeasure.kg_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg.m', tag='kg_m')
UnitOfMeasure.kg_mcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg.m/cm2', tag='kg_mcm2')
UnitOfMeasure.kg_ms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg.m/s', tag='kg_ms')
UnitOfMeasure.kg_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg.m2', tag='kg_m2')
UnitOfMeasure.kgkW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/(kW.h)', tag='kgkW_h')
UnitOfMeasure.kgm_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/(m.s)', tag='kgm_s')
UnitOfMeasure.kgm2_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/(m2.s)', tag='kgm2_s')
UnitOfMeasure.kgd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/d', tag='kgd')
UnitOfMeasure.kgdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/dm3', tag='kgdm3')
UnitOfMeasure.kgdm4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/dm4', tag='kgdm4')
UnitOfMeasure.kgh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/h', tag='kgh')
UnitOfMeasure.kgJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/J', tag='kgJ')
UnitOfMeasure.kgkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/kg', tag='kgkg')
UnitOfMeasure.kgL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/L', tag='kgL')
UnitOfMeasure.kgm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/m', tag='kgm')
UnitOfMeasure.kgm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/m2', tag='kgm2')
UnitOfMeasure.kgm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/m3', tag='kgm3')
UnitOfMeasure.kgm4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/m4', tag='kgm4')
UnitOfMeasure.kgmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/min', tag='kgmin')
UnitOfMeasure.kgMJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/MJ', tag='kgMJ')
UnitOfMeasure.kgmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/mol', tag='kgmol')
UnitOfMeasure.kgs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/s', tag='kgs')
UnitOfMeasure.kgsack94lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/sack[94lbm]', tag='kgsack94lbm')
UnitOfMeasure.kgt = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kg/t', tag='kgt')
UnitOfMeasure.kgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgauss', tag='kgauss')
UnitOfMeasure.kgf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf', tag='kgf')
UnitOfMeasure.kgf_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf.m', tag='kgf_m')
UnitOfMeasure.kgf_mcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf.m/cm2', tag='kgf_mcm2')
UnitOfMeasure.kgf_mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf.m/m', tag='kgf_mm')
UnitOfMeasure.kgf_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf.m2', tag='kgf_m2')
UnitOfMeasure.kgf_sm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf.s/m2', tag='kgf_sm2')
UnitOfMeasure.kgfcm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf/cm', tag='kgfcm')
UnitOfMeasure.kgfcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf/cm2', tag='kgfcm2')
UnitOfMeasure.kgfkgf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf/kgf', tag='kgfkgf')
UnitOfMeasure.kgfm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf/m2', tag='kgfm2')
UnitOfMeasure.kgfmm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kgf/mm2', tag='kgfmm2')
UnitOfMeasure.kGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kGy', tag='kGy')
UnitOfMeasure.kH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kH', tag='kH')
UnitOfMeasure.kHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kHz', tag='kHz')
UnitOfMeasure.Kibyte = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Kibyte', tag='Kibyte')
UnitOfMeasure.kJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ', tag='kJ')
UnitOfMeasure.kJ_mh_m2_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ.m/(h.m2.K)', tag='kJ_mh_m2_K')
UnitOfMeasure.kJh_m2_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/(h.m2.K)', tag='kJh_m2_K')
UnitOfMeasure.kJkg_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/(kg.K)', tag='kJkg_K')
UnitOfMeasure.kJkmol_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/(kmol.K)', tag='kJkmol_K')
UnitOfMeasure.kJdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/dm3', tag='kJdm3')
UnitOfMeasure.kJkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/kg', tag='kJkg')
UnitOfMeasure.kJkmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/kmol', tag='kJkmol')
UnitOfMeasure.kJm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kJ/m3', tag='kJm3')
UnitOfMeasure.klbf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='klbf', tag='klbf')
UnitOfMeasure.klbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='klbm', tag='klbm')
UnitOfMeasure.klbmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='klbm/in', tag='klbmin')
UnitOfMeasure.klx = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='klx', tag='klx')
UnitOfMeasure.km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km', tag='km')
UnitOfMeasure.kmcm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km/cm', tag='kmcm')
UnitOfMeasure.kmdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km/dm3', tag='kmdm3')
UnitOfMeasure.kmh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km/h', tag='kmh')
UnitOfMeasure.kmL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km/L', tag='kmL')
UnitOfMeasure.kms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km/s', tag='kms')
UnitOfMeasure.km2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km2', tag='km2')
UnitOfMeasure.km3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='km3', tag='km3')
UnitOfMeasure.kmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kmol', tag='kmol')
UnitOfMeasure.kmolh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kmol/h', tag='kmolh')
UnitOfMeasure.kmolm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kmol/m3', tag='kmolm3')
UnitOfMeasure.kmols = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kmol/s', tag='kmols')
UnitOfMeasure.kN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kN', tag='kN')
UnitOfMeasure.kN_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kN.m', tag='kN_m')
UnitOfMeasure.kN_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kN.m2', tag='kN_m2')
UnitOfMeasure.kNm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kN/m', tag='kNm')
UnitOfMeasure.kNm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kN/m2', tag='kNm2')
UnitOfMeasure.knot = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='knot', tag='knot')
UnitOfMeasure.kohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kohm', tag='kohm')
UnitOfMeasure.kohm_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kohm.m', tag='kohm_m')
UnitOfMeasure.kP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kP', tag='kP')
UnitOfMeasure.kPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa', tag='kPa')
UnitOfMeasure.kPa_sm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa.s/m', tag='kPa_sm')
UnitOfMeasure.kPah = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa/h', tag='kPah')
UnitOfMeasure.kPahm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa/hm', tag='kPahm')
UnitOfMeasure.kPam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa/m', tag='kPam')
UnitOfMeasure.kPamin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa/min', tag='kPamin')
UnitOfMeasure.kPa2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa2', tag='kPa2')
UnitOfMeasure.kPa2cP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kPa2/cP', tag='kPa2cP')
UnitOfMeasure.kpsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kpsi', tag='kpsi')
UnitOfMeasure.kpsi2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kpsi2', tag='kpsi2')
UnitOfMeasure.krad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='krad', tag='krad')
UnitOfMeasure.krd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='krd', tag='krd')
UnitOfMeasure.kS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kS', tag='kS')
UnitOfMeasure.kSm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kS/m', tag='kSm')
UnitOfMeasure.kT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kT', tag='kT')
UnitOfMeasure.kV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kV', tag='kV')
UnitOfMeasure.kW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW', tag='kW')
UnitOfMeasure.kW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW.h', tag='kW_h')
UnitOfMeasure.kW_hkg_degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW.h/(kg.degC)', tag='kW_hkg_degC')
UnitOfMeasure.kW_hdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW.h/dm3', tag='kW_hdm3')
UnitOfMeasure.kW_hkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW.h/kg', tag='kW_hkg')
UnitOfMeasure.kW_hm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW.h/m3', tag='kW_hm3')
UnitOfMeasure.kWm2_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW/(m2.K)', tag='kWm2_K')
UnitOfMeasure.kWm3_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW/(m3.K)', tag='kWm3_K')
UnitOfMeasure.kWcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW/cm2', tag='kWcm2')
UnitOfMeasure.kWm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW/m2', tag='kWm2')
UnitOfMeasure.kWm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kW/m3', tag='kWm3')
UnitOfMeasure.kWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='kWb', tag='kWb')
UnitOfMeasure.L = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L', tag='L')
UnitOfMeasure.Lbar_min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/(bar.min)', tag='Lbar_min')
UnitOfMeasure.Lh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/h', tag='Lh')
UnitOfMeasure.Lkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/kg', tag='Lkg')
UnitOfMeasure.Lkmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/kmol', tag='Lkmol')
UnitOfMeasure.Lm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/m', tag='Lm')
UnitOfMeasure.Lm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/m3', tag='Lm3')
UnitOfMeasure.Lmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/min', tag='Lmin')
UnitOfMeasure.Lmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/mol', tag='Lmol')
UnitOfMeasure.Ls = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/s', tag='Ls')
UnitOfMeasure.Ls2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/s2', tag='Ls2')
UnitOfMeasure.Lt = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/t', tag='Lt')
UnitOfMeasure.LtonUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='L/ton[UK]', tag='LtonUK')
UnitOfMeasure.lbf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf', tag='lbf')
UnitOfMeasure.lbf_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft', tag='lbf_ft')
UnitOfMeasure.lbf_ftbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/bbl', tag='lbf_ftbbl')
UnitOfMeasure.lbf_ftgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/gal[US]', tag='lbf_ftgalUS')
UnitOfMeasure.lbf_ftin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/in', tag='lbf_ftin')
UnitOfMeasure.lbf_ftin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/in2', tag='lbf_ftin2')
UnitOfMeasure.lbf_ftlbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/lbm', tag='lbf_ftlbm')
UnitOfMeasure.lbf_ftmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/min', tag='lbf_ftmin')
UnitOfMeasure.lbf_fts = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.ft/s', tag='lbf_fts')
UnitOfMeasure.lbf_in = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.in', tag='lbf_in')
UnitOfMeasure.lbf_inin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.in/in', tag='lbf_inin')
UnitOfMeasure.lbf_in2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.in2', tag='lbf_in2')
UnitOfMeasure.lbf_sft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.s/ft2', tag='lbf_sft2')
UnitOfMeasure.lbf_sin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf.s/in2', tag='lbf_sin2')
UnitOfMeasure.lbfft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/ft', tag='lbfft')
UnitOfMeasure.lbfft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/ft2', tag='lbfft2')
UnitOfMeasure.lbfft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/ft3', tag='lbfft3')
UnitOfMeasure.lbfgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/gal[US]', tag='lbfgalUS')
UnitOfMeasure.lbfin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/in', tag='lbfin')
UnitOfMeasure.lbflbf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbf/lbf', tag='lbflbf')
UnitOfMeasure.lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm', tag='lbm')
UnitOfMeasure.lbm_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm.ft', tag='lbm_ft')
UnitOfMeasure.lbm_fts = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm.ft/s', tag='lbm_fts')
UnitOfMeasure.lbm_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm.ft2', tag='lbm_ft2')
UnitOfMeasure.lbm_ft2s2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm.ft2/s2', tag='lbm_ft2s2')
UnitOfMeasure.lbmft_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(ft.h)', tag='lbmft_h')
UnitOfMeasure.lbmft_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(ft.s)', tag='lbmft_s')
UnitOfMeasure.lbmft2_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(ft2.h)', tag='lbmft2_h')
UnitOfMeasure.lbmft2_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(ft2.s)', tag='lbmft2_s')
UnitOfMeasure.lbmgalUK_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(gal[UK].ft)', tag='lbmgalUK_ft')
UnitOfMeasure.lbmgalUS_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(gal[US].ft)', tag='lbmgalUS_ft')
UnitOfMeasure.lbmhp_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/(hp.h)', tag='lbmhp_h')
UnitOfMeasure.lbmbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/bbl', tag='lbmbbl')
UnitOfMeasure.lbmd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/d', tag='lbmd')
UnitOfMeasure.lbmft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/ft', tag='lbmft')
UnitOfMeasure.lbmft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/ft2', tag='lbmft2')
UnitOfMeasure.lbmft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/ft3', tag='lbmft3')
UnitOfMeasure.lbmft4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/ft4', tag='lbmft4')
UnitOfMeasure.lbmgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/gal[UK]', tag='lbmgalUK')
UnitOfMeasure.lbmgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/gal[US]', tag='lbmgalUS')
UnitOfMeasure.lbmh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/h', tag='lbmh')
UnitOfMeasure.lbmin3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/in3', tag='lbmin3')
UnitOfMeasure.lbmlbmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/lbmol', tag='lbmlbmol')
UnitOfMeasure.lbmmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/min', tag='lbmmin')
UnitOfMeasure.lbms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbm/s', tag='lbms')
UnitOfMeasure.lbmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol', tag='lbmol')
UnitOfMeasure.lbmolh_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/(h.ft2)', tag='lbmolh_ft2')
UnitOfMeasure.lbmols_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/(s.ft2)', tag='lbmols_ft2')
UnitOfMeasure.lbmolft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/ft3', tag='lbmolft3')
UnitOfMeasure.lbmolgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/gal[UK]', tag='lbmolgalUK')
UnitOfMeasure.lbmolgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/gal[US]', tag='lbmolgalUS')
UnitOfMeasure.lbmolh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/h', tag='lbmolh')
UnitOfMeasure.lbmols = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lbmol/s', tag='lbmols')
UnitOfMeasure.link = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link', tag='link')
UnitOfMeasure.linkBnA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[BnA]', tag='linkBnA')
UnitOfMeasure.linkBnB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[BnB]', tag='linkBnB')
UnitOfMeasure.linkCla = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[Cla]', tag='linkCla')
UnitOfMeasure.linkSe = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[Se]', tag='linkSe')
UnitOfMeasure.linkSeT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[SeT]', tag='linkSeT')
UnitOfMeasure.linkUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='link[US]', tag='linkUS')
UnitOfMeasure.lm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lm', tag='lm')
UnitOfMeasure.lm_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lm.s', tag='lm_s')
UnitOfMeasure.lmm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lm/m2', tag='lmm2')
UnitOfMeasure.lmW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lm/W', tag='lmW')
UnitOfMeasure.lx = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lx', tag='lx')
UnitOfMeasure.lx_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='lx.s', tag='lx_s')
UnitOfMeasure.m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m', tag='m')
UnitOfMeasure.mm_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/(m.K)', tag='mm_K')
UnitOfMeasure.mcm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/cm', tag='mcm')
UnitOfMeasure.md = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/d', tag='md')
UnitOfMeasure.mh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/h', tag='mh')
UnitOfMeasure.mK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/K', tag='mK')
UnitOfMeasure.mkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/kg', tag='mkg')
UnitOfMeasure.mkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/km', tag='mkm')
UnitOfMeasure.mkPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/kPa', tag='mkPa')
UnitOfMeasure.mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/m', tag='mm')
UnitOfMeasure.mm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/m3', tag='mm3')
UnitOfMeasure.mmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/min', tag='mmin')
UnitOfMeasure.mms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/ms', tag='mms')
UnitOfMeasure.mPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/Pa', tag='mPa')
UnitOfMeasure.ms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/s', tag='ms')
UnitOfMeasure.ms2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m/s2', tag='ms2')
UnitOfMeasure.mGer = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m[Ger]', tag='mGer')
UnitOfMeasure.m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2', tag='m2')
UnitOfMeasure.m2kPa_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/(kPa.d)', tag='m2kPa_d')
UnitOfMeasure.m2Pa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/(Pa.s)', tag='m2Pa_s')
UnitOfMeasure.m2cm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/cm3', tag='m2cm3')
UnitOfMeasure.m2d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/d', tag='m2d')
UnitOfMeasure.m2g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/g', tag='m2g')
UnitOfMeasure.m2h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/h', tag='m2h')
UnitOfMeasure.m2kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/kg', tag='m2kg')
UnitOfMeasure.m2m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/m2', tag='m2m2')
UnitOfMeasure.m2m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/m3', tag='m2m3')
UnitOfMeasure.m2mol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/mol', tag='m2mol')
UnitOfMeasure.m2s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m2/s', tag='m2s')
UnitOfMeasure.m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3', tag='m3')
UnitOfMeasure.m3bar_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(bar.d)', tag='m3bar_d')
UnitOfMeasure.m3bar_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(bar.h)', tag='m3bar_h')
UnitOfMeasure.m3bar_min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(bar.min)', tag='m3bar_min')
UnitOfMeasure.m3d_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(d.m)', tag='m3d_m')
UnitOfMeasure.m3h_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(h.m)', tag='m3h_m')
UnitOfMeasure.m3ha_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(ha.m)', tag='m3ha_m')
UnitOfMeasure.m3kPa_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(kPa.d)', tag='m3kPa_d')
UnitOfMeasure.m3kPa_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(kPa.h)', tag='m3kPa_h')
UnitOfMeasure.m3kW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(kW.h)', tag='m3kW_h')
UnitOfMeasure.m3m3_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(m3.K)', tag='m3m3_K')
UnitOfMeasure.m3Pa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(Pa.s)', tag='m3Pa_s')
UnitOfMeasure.m3psi_d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(psi.d)', tag='m3psi_d')
UnitOfMeasure.m3s_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(s.ft)', tag='m3s_ft')
UnitOfMeasure.m3s_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(s.m)', tag='m3s_m')
UnitOfMeasure.m3s_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(s.m2)', tag='m3s_m2')
UnitOfMeasure.m3s_m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/(s.m3)', tag='m3s_m3')
UnitOfMeasure.m3bbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/bbl', tag='m3bbl')
UnitOfMeasure.m3d = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/d', tag='m3d')
UnitOfMeasure.m3d2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/d2', tag='m3d2')
UnitOfMeasure.m3g = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/g', tag='m3g')
UnitOfMeasure.m3h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/h', tag='m3h')
UnitOfMeasure.m3J = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/J', tag='m3J')
UnitOfMeasure.m3kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/kg', tag='m3kg')
UnitOfMeasure.m3km = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/km', tag='m3km')
UnitOfMeasure.m3kmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/kmol', tag='m3kmol')
UnitOfMeasure.m3kPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/kPa', tag='m3kPa')
UnitOfMeasure.m3m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/m', tag='m3m')
UnitOfMeasure.m3m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/m2', tag='m3m2')
UnitOfMeasure.m3m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/m3', tag='m3m3')
UnitOfMeasure.m3min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/min', tag='m3min')
UnitOfMeasure.m3mol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/mol', tag='m3mol')
UnitOfMeasure.m3Pa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/Pa', tag='m3Pa')
UnitOfMeasure.m3rad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/rad', tag='m3rad')
UnitOfMeasure.m3rev = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/rev', tag='m3rev')
UnitOfMeasure.m3s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/s', tag='m3s')
UnitOfMeasure.m3s2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/s2', tag='m3s2')
UnitOfMeasure.m3t = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/t', tag='m3t')
UnitOfMeasure.m3tonUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/ton[UK]', tag='m3tonUK')
UnitOfMeasure.m3tonUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m3/ton[US]', tag='m3tonUS')
UnitOfMeasure.m4 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m4', tag='m4')
UnitOfMeasure.m4s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='m4/s', tag='m4s')
UnitOfMeasure.mA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mA', tag='mA')
UnitOfMeasure.MA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MA', tag='MA')
UnitOfMeasure.mAcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mA/cm2', tag='mAcm2')
UnitOfMeasure.mAft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mA/ft2', tag='mAft2')
UnitOfMeasure.Mat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ma[t]', tag='Mat')
UnitOfMeasure.mbar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mbar', tag='mbar')
UnitOfMeasure.MBq = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MBq', tag='MBq')
UnitOfMeasure.mC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mC', tag='mC')
UnitOfMeasure.MC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MC', tag='MC')
UnitOfMeasure.mCm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mC/m2', tag='mCm2')
UnitOfMeasure.mcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mcal[th]', tag='mcalth')
UnitOfMeasure.Mcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mcal[th]', tag='Mcalth')
UnitOfMeasure.mCi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mCi', tag='mCi')
UnitOfMeasure.mD = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD', tag='mD')
UnitOfMeasure.mD_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD.ft', tag='mD_ft')
UnitOfMeasure.mD_ft2lbf_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD.ft2/(lbf.s)', tag='mD_ft2lbf_s')
UnitOfMeasure.mD_in2lbf_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD.in2/(lbf.s)', tag='mD_in2lbf_s')
UnitOfMeasure.mD_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD.m', tag='mD_m')
UnitOfMeasure.mDPa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD/(Pa.s)', tag='mDPa_s')
UnitOfMeasure.mDcP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mD/cP', tag='mDcP')
UnitOfMeasure.MEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MEuc', tag='MEuc')
UnitOfMeasure.mEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mEuc', tag='mEuc')
UnitOfMeasure.meV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='meV', tag='meV')
UnitOfMeasure.MeV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MeV', tag='MeV')
UnitOfMeasure.MF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MF', tag='MF')
UnitOfMeasure.mF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mF', tag='mF')
UnitOfMeasure.mg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg', tag='mg')
UnitOfMeasure.Mg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg', tag='Mg')
UnitOfMeasure.Mga = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/a', tag='Mga')
UnitOfMeasure.Mgd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/d', tag='Mgd')
UnitOfMeasure.mgdm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/dm3', tag='mgdm3')
UnitOfMeasure.mgg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/g', tag='mgg')
UnitOfMeasure.mggalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/gal[US]', tag='mggalUS')
UnitOfMeasure.Mgh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/h', tag='Mgh')
UnitOfMeasure.Mgin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/in', tag='Mgin')
UnitOfMeasure.mgJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/J', tag='mgJ')
UnitOfMeasure.mgkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/kg', tag='mgkg')
UnitOfMeasure.mgL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/L', tag='mgL')
UnitOfMeasure.Mgm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/m2', tag='Mgm2')
UnitOfMeasure.mgm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mg/m3', tag='mgm3')
UnitOfMeasure.Mgm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/m3', tag='Mgm3')
UnitOfMeasure.Mgmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mg/min', tag='Mgmin')
UnitOfMeasure.mGal = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mGal', tag='mGal')
UnitOfMeasure.mgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mgauss', tag='mgauss')
UnitOfMeasure.Mgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mgauss', tag='Mgauss')
UnitOfMeasure.Mgf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mgf', tag='Mgf')
UnitOfMeasure.mgn = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mgn', tag='mgn')
UnitOfMeasure.MGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MGy', tag='MGy')
UnitOfMeasure.mGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mGy', tag='mGy')
UnitOfMeasure.mH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mH', tag='mH')
UnitOfMeasure.MH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MH', tag='MH')
UnitOfMeasure.mHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mHz', tag='mHz')
UnitOfMeasure.MHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MHz', tag='MHz')
UnitOfMeasure.mi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi', tag='mi')
UnitOfMeasure.migalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi/gal[UK]', tag='migalUK')
UnitOfMeasure.migalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi/gal[US]', tag='migalUS')
UnitOfMeasure.mih = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi/h', tag='mih')
UnitOfMeasure.miin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi/in', tag='miin')
UnitOfMeasure.minaut = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi[naut]', tag='minaut')
UnitOfMeasure.minautUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi[nautUK]', tag='minautUK')
UnitOfMeasure.miUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi[US]', tag='miUS')
UnitOfMeasure.miUS2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi[US]2', tag='miUS2')
UnitOfMeasure.mi2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi2', tag='mi2')
UnitOfMeasure.mi3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mi3', tag='mi3')
UnitOfMeasure.Mibyte = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mibyte', tag='Mibyte')
UnitOfMeasure.mil = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mil', tag='mil')
UnitOfMeasure.mila = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mil/a', tag='mila')
UnitOfMeasure.mila_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mila', tag='mila_')
UnitOfMeasure.min = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='min', tag='min')
UnitOfMeasure.minft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='min/ft', tag='minft')
UnitOfMeasure.minm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='min/m', tag='minm')
UnitOfMeasure.mina = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mina', tag='mina')
UnitOfMeasure.mJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mJ', tag='mJ')
UnitOfMeasure.MJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ', tag='MJ')
UnitOfMeasure.MJa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ/a', tag='MJa')
UnitOfMeasure.mJcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mJ/cm2', tag='mJcm2')
UnitOfMeasure.MJkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ/kg', tag='MJkg')
UnitOfMeasure.MJkmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ/kmol', tag='MJkmol')
UnitOfMeasure.MJm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ/m', tag='MJm')
UnitOfMeasure.mJm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mJ/m2', tag='mJm2')
UnitOfMeasure.MJm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MJ/m3', tag='MJm3')
UnitOfMeasure.mL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mL', tag='mL')
UnitOfMeasure.mLgalUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mL/gal[UK]', tag='mLgalUK')
UnitOfMeasure.mLgalUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mL/gal[US]', tag='mLgalUS')
UnitOfMeasure.mLmL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mL/mL', tag='mLmL')
UnitOfMeasure.mm_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm', tag='mm_')
UnitOfMeasure.Mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mm', tag='Mm')
UnitOfMeasure.mmmm_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm/(mm.K)', tag='mmmm_K')
UnitOfMeasure.mma = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm/a', tag='mma')
UnitOfMeasure.mms_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm/s', tag='mms_')
UnitOfMeasure.mm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm2', tag='mm2')
UnitOfMeasure.mm2mm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm2/mm2', tag='mm2mm2')
UnitOfMeasure.mm2s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm2/s', tag='mm2s')
UnitOfMeasure.mm3_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm3', tag='mm3_')
UnitOfMeasure.mm3J = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mm3/J', tag='mm3J')
UnitOfMeasure.mmHg0degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mmHg[0degC]', tag='mmHg0degC')
UnitOfMeasure.mmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mmol', tag='mmol')
UnitOfMeasure.MN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MN', tag='MN')
UnitOfMeasure.mN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mN', tag='mN')
UnitOfMeasure.mN_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mN.m2', tag='mN_m2')
UnitOfMeasure.mNkm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mN/km', tag='mNkm')
UnitOfMeasure.mNm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mN/m', tag='mNm')
UnitOfMeasure.Mohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mohm', tag='Mohm')
UnitOfMeasure.mohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mohm', tag='mohm')
UnitOfMeasure.mol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol', tag='mol')
UnitOfMeasure.mol_m2mol_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol.m2/(mol.s)', tag='mol_m2mol_s')
UnitOfMeasure.mols_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol/(s.m2)', tag='mols_m2')
UnitOfMeasure.molm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol/m2', tag='molm2')
UnitOfMeasure.molm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol/m3', tag='molm3')
UnitOfMeasure.molmol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol/mol', tag='molmol')
UnitOfMeasure.mols = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mol/s', tag='mols')
UnitOfMeasure.MP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MP', tag='MP')
UnitOfMeasure.mP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mP', tag='mP')
UnitOfMeasure.mPa_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mPa', tag='mPa_')
UnitOfMeasure.MPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MPa', tag='MPa')
UnitOfMeasure.mPa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mPa.s', tag='mPa_s')
UnitOfMeasure.MPa_sm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MPa.s/m', tag='MPa_sm')
UnitOfMeasure.MPah = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MPa/h', tag='MPah')
UnitOfMeasure.MPam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MPa/m', tag='MPam')
UnitOfMeasure.Mpsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mpsi', tag='Mpsi')
UnitOfMeasure.Mrad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mrad', tag='Mrad')
UnitOfMeasure.mrad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mrad', tag='mrad')
UnitOfMeasure.mrd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mrd', tag='mrd')
UnitOfMeasure.Mrd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Mrd', tag='Mrd')
UnitOfMeasure.mrem = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mrem', tag='mrem')
UnitOfMeasure.mremh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mrem/h', tag='mremh')
UnitOfMeasure.ms_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms', tag='ms_')
UnitOfMeasure.MS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MS', tag='MS')
UnitOfMeasure.mS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mS', tag='mS')
UnitOfMeasure.mScm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mS/cm', tag='mScm')
UnitOfMeasure.mscm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms/cm', tag='mscm')
UnitOfMeasure.msft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms/ft', tag='msft')
UnitOfMeasure.msin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms/in', tag='msin')
UnitOfMeasure.mSm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mS/m', tag='mSm')
UnitOfMeasure.msm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms/m', tag='msm')
UnitOfMeasure.mss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ms/s', tag='mss')
UnitOfMeasure.mSv = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mSv', tag='mSv')
UnitOfMeasure.mSvh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mSv/h', tag='mSvh')
UnitOfMeasure.mT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mT', tag='mT')
UnitOfMeasure.mTdm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mT/dm', tag='mTdm')
UnitOfMeasure.MV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MV', tag='MV')
UnitOfMeasure.mV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mV', tag='mV')
UnitOfMeasure.mVft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mV/ft', tag='mVft')
UnitOfMeasure.mVm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mV/m', tag='mVm')
UnitOfMeasure.mW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mW', tag='mW')
UnitOfMeasure.MW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MW', tag='MW')
UnitOfMeasure.MW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MW.h', tag='MW_h')
UnitOfMeasure.MW_hkg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MW.h/kg', tag='MW_hkg')
UnitOfMeasure.MW_hm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MW.h/m3', tag='MW_hm3')
UnitOfMeasure.mWm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mW/m2', tag='mWm2')
UnitOfMeasure.MWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='MWb', tag='MWb')
UnitOfMeasure.mWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='mWb', tag='mWb')
UnitOfMeasure.N = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
UnitOfMeasure.N_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N.m', tag='N_m')
UnitOfMeasure.N_mm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N.m/m', tag='N_mm')
UnitOfMeasure.N_m2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N.m2', tag='N_m2')
UnitOfMeasure.N_sm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N.s/m2', tag='N_sm2')
UnitOfMeasure.Nm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N/m', tag='Nm')
UnitOfMeasure.Nm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N/m2', tag='Nm2')
UnitOfMeasure.Nm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N/m3', tag='Nm3')
UnitOfMeasure.Nmm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N/mm2', tag='Nmm2')
UnitOfMeasure.NN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='N/N', tag='NN')
UnitOfMeasure.na = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='na', tag='na')
UnitOfMeasure.nA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nA', tag='nA')
UnitOfMeasure.nAPI = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nAPI', tag='nAPI')
UnitOfMeasure.nC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nC', tag='nC')
UnitOfMeasure.ncalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ncal[th]', tag='ncalth')
UnitOfMeasure.nCi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nCi', tag='nCi')
UnitOfMeasure.nEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nEuc', tag='nEuc')
UnitOfMeasure.neV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='neV', tag='neV')
UnitOfMeasure.nF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nF', tag='nF')
UnitOfMeasure.ng = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ng', tag='ng')
UnitOfMeasure.ngg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ng/g', tag='ngg')
UnitOfMeasure.ngmg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ng/mg', tag='ngmg')
UnitOfMeasure.ngauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ngauss', tag='ngauss')
UnitOfMeasure.nGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nGy', tag='nGy')
UnitOfMeasure.nH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nH', tag='nH')
UnitOfMeasure.nHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nHz', tag='nHz')
UnitOfMeasure.nJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nJ', tag='nJ')
UnitOfMeasure.nm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nm', tag='nm')
UnitOfMeasure.nms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nm/s', tag='nms')
UnitOfMeasure.nN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nN', tag='nN')
UnitOfMeasure.nohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nohm', tag='nohm')
UnitOfMeasure.nohm_mil2ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nohm.mil2/ft', tag='nohm_mil2ft')
UnitOfMeasure.nohm_mm2m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nohm.mm2/m', tag='nohm_mm2m')
UnitOfMeasure.nP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nP', tag='nP')
UnitOfMeasure.nPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nPa', tag='nPa')
UnitOfMeasure.nrd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nrd', tag='nrd')
UnitOfMeasure.ns = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ns', tag='ns')
UnitOfMeasure.nS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nS', tag='nS')
UnitOfMeasure.nsft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ns/ft', tag='nsft')
UnitOfMeasure.nsm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ns/m', tag='nsm')
UnitOfMeasure.nT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nT', tag='nT')
UnitOfMeasure.nV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nV', tag='nV')
UnitOfMeasure.nW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nW', tag='nW')
UnitOfMeasure.nWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='nWb', tag='nWb')
UnitOfMeasure.O = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
UnitOfMeasure.Oe = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Oe', tag='Oe')
UnitOfMeasure.ohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ohm', tag='ohm')
UnitOfMeasure.ohm_cm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ohm.cm', tag='ohm_cm')
UnitOfMeasure.ohm_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ohm.m', tag='ohm_m')
UnitOfMeasure.ohm_m2m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ohm.m2/m', tag='ohm_m2m')
UnitOfMeasure.ohmm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ohm/m', tag='ohmm')
UnitOfMeasure.ozf = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ozf', tag='ozf')
UnitOfMeasure.ozm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ozm', tag='ozm')
UnitOfMeasure.ozmtroy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ozm[troy]', tag='ozmtroy')
UnitOfMeasure.P = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
UnitOfMeasure.Pa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa', tag='Pa')
UnitOfMeasure.pA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pA', tag='pA')
UnitOfMeasure.Pa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa.s', tag='Pa_s')
UnitOfMeasure.Pa_s_m3kg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa.s.m3/kg', tag='Pa_s_m3kg')
UnitOfMeasure.Pa_sm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa.s/m3', tag='Pa_sm3')
UnitOfMeasure.Pa_s2m3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa.s2/m3', tag='Pa_s2m3')
UnitOfMeasure.Pah = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa/h', tag='Pah')
UnitOfMeasure.Pam = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa/m', tag='Pam')
UnitOfMeasure.Pam3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa/m3', tag='Pam3')
UnitOfMeasure.Pas = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa/s', tag='Pas')
UnitOfMeasure.Pa2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa2', tag='Pa2')
UnitOfMeasure.Pa2Pa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Pa2/(Pa.s)', tag='Pa2Pa_s')
UnitOfMeasure.pC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pC', tag='pC')
UnitOfMeasure.pcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pcal[th]', tag='pcalth')
UnitOfMeasure.pCi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pCi', tag='pCi')
UnitOfMeasure.pCig = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pCi/g', tag='pCig')
UnitOfMeasure.pdl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pdl', tag='pdl')
UnitOfMeasure.pdl_cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pdl.cm2', tag='pdl_cm2')
UnitOfMeasure.pdl_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pdl.ft', tag='pdl_ft')
UnitOfMeasure.pdlcm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pdl/cm', tag='pdlcm')
UnitOfMeasure.pEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pEuc', tag='pEuc')
UnitOfMeasure.peV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='peV', tag='peV')
UnitOfMeasure.pF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pF', tag='pF')
UnitOfMeasure.pg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pg', tag='pg')
UnitOfMeasure.pgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pgauss', tag='pgauss')
UnitOfMeasure.pGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pGy', tag='pGy')
UnitOfMeasure.pHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pHz', tag='pHz')
UnitOfMeasure.pJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pJ', tag='pJ')
UnitOfMeasure.pm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pm', tag='pm')
UnitOfMeasure.pN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pN', tag='pN')
UnitOfMeasure.pohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pohm', tag='pohm')
UnitOfMeasure.pP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pP', tag='pP')
UnitOfMeasure.pPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pPa', tag='pPa')
UnitOfMeasure.ppk = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppk', tag='ppk')
UnitOfMeasure.ppm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
UnitOfMeasure.ppmmass = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppm[mass]', tag='ppmmass')
UnitOfMeasure.ppmvol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppm[vol]', tag='ppmvol')
UnitOfMeasure.ppmvoldegC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppm[vol]/degC', tag='ppmvoldegC')
UnitOfMeasure.ppmvoldegF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ppm[vol]/degF', tag='ppmvoldegF')
UnitOfMeasure.prd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='prd', tag='prd')
UnitOfMeasure.pS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pS', tag='pS')
UnitOfMeasure.ps = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ps', tag='ps')
UnitOfMeasure.psi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi', tag='psi')
UnitOfMeasure.psi_dbbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi.d/bbl', tag='psi_dbbl')
UnitOfMeasure.psi_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi.s', tag='psi_s')
UnitOfMeasure.psift = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi/ft', tag='psift')
UnitOfMeasure.psih = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi/h', tag='psih')
UnitOfMeasure.psim = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi/m', tag='psim')
UnitOfMeasure.psimin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi/min', tag='psimin')
UnitOfMeasure.psi2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi2', tag='psi2')
UnitOfMeasure.psi2_dcP_ft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi2.d/(cP.ft3)', tag='psi2_dcP_ft3')
UnitOfMeasure.psi2cP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='psi2/cP', tag='psi2cP')
UnitOfMeasure.pT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pT', tag='pT')
UnitOfMeasure.ptUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pt[UK]', tag='ptUK')
UnitOfMeasure.ptUKhp_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pt[UK]/(hp.h)', tag='ptUKhp_h')
UnitOfMeasure.ptUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pt[US]', tag='ptUS')
UnitOfMeasure.pV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pV', tag='pV')
UnitOfMeasure.pW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pW', tag='pW')
UnitOfMeasure.pWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='pWb', tag='pWb')
UnitOfMeasure.qtUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='qt[UK]', tag='qtUK')
UnitOfMeasure.qtUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='qt[US]', tag='qtUS')
UnitOfMeasure.quad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='quad', tag='quad')
UnitOfMeasure.quada = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='quad/a', tag='quada')
UnitOfMeasure.rad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad', tag='rad')
UnitOfMeasure.radft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/ft', tag='radft')
UnitOfMeasure.radft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/ft3', tag='radft3')
UnitOfMeasure.radm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/m', tag='radm')
UnitOfMeasure.radm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/m3', tag='radm3')
UnitOfMeasure.rads = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/s', tag='rads')
UnitOfMeasure.rads2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rad/s2', tag='rads2')
UnitOfMeasure.rd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rd', tag='rd')
UnitOfMeasure.rem = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rem', tag='rem')
UnitOfMeasure.remh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rem/h', tag='remh')
UnitOfMeasure.rev = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rev', tag='rev')
UnitOfMeasure.revft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rev/ft', tag='revft')
UnitOfMeasure.revm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rev/m', tag='revm')
UnitOfMeasure.revs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rev/s', tag='revs')
UnitOfMeasure.rodUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rod[US]', tag='rodUS')
UnitOfMeasure.rpm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rpm', tag='rpm')
UnitOfMeasure.rpms = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='rpm/s', tag='rpms')
UnitOfMeasure.S = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
UnitOfMeasure.s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s', tag='s')
UnitOfMeasure.scm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/cm', tag='scm')
UnitOfMeasure.sft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/ft', tag='sft')
UnitOfMeasure.sft3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/ft3', tag='sft3')
UnitOfMeasure.sin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/in', tag='sin')
UnitOfMeasure.skg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/kg', tag='skg')
UnitOfMeasure.sL = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/L', tag='sL')
UnitOfMeasure.sm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/m', tag='sm')
UnitOfMeasure.Sm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='S/m', tag='Sm')
UnitOfMeasure.sm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/m3', tag='sm3')
UnitOfMeasure.sqtUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/qt[UK]', tag='sqtUK')
UnitOfMeasure.sqtUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/qt[US]', tag='sqtUS')
UnitOfMeasure.ss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='s/s', tag='ss')
UnitOfMeasure.sack94lbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='sack[94lbm]', tag='sack94lbm')
UnitOfMeasure.seca = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='seca', tag='seca')
UnitOfMeasure.section = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='section', tag='section')
UnitOfMeasure.sr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='sr', tag='sr')
UnitOfMeasure.St = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='St', tag='St')
UnitOfMeasure.Sv = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Sv', tag='Sv')
UnitOfMeasure.Svh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Sv/h', tag='Svh')
UnitOfMeasure.Svs = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Sv/s', tag='Svs')
UnitOfMeasure.t = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t', tag='t')
UnitOfMeasure.T = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='T', tag='T')
UnitOfMeasure.ta = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t/a', tag='ta')
UnitOfMeasure.td = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t/d', tag='td')
UnitOfMeasure.th = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t/h', tag='th')
UnitOfMeasure.Tm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='T/m', tag='Tm')
UnitOfMeasure.tm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t/m3', tag='tm3')
UnitOfMeasure.tmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='t/min', tag='tmin')
UnitOfMeasure.TA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TA', tag='TA')
UnitOfMeasure.Tat = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Ta[t]', tag='Tat')
UnitOfMeasure.TBq = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TBq', tag='TBq')
UnitOfMeasure.TC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TC', tag='TC')
UnitOfMeasure.Tcalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Tcal[th]', tag='Tcalth')
UnitOfMeasure.TDAPI = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TD[API]', tag='TDAPI')
UnitOfMeasure.TDAPI_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TD[API].m', tag='TDAPI_m')
UnitOfMeasure.TDAPIPa_s = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TD[API]/(Pa.s)', tag='TDAPIPa_s')
UnitOfMeasure.TEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TEuc', tag='TEuc')
UnitOfMeasure.TeV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TeV', tag='TeV')
UnitOfMeasure.TF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TF', tag='TF')
UnitOfMeasure.Tg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Tg', tag='Tg')
UnitOfMeasure.Tgauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Tgauss', tag='Tgauss')
UnitOfMeasure.TGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TGy', tag='TGy')
UnitOfMeasure.TH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TH', tag='TH')
UnitOfMeasure.thermEC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='therm[EC]', tag='thermEC')
UnitOfMeasure.thermUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='therm[UK]', tag='thermUK')
UnitOfMeasure.thermUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='therm[US]', tag='thermUS')
UnitOfMeasure.THz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='THz', tag='THz')
UnitOfMeasure.TJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TJ', tag='TJ')
UnitOfMeasure.TJa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TJ/a', tag='TJa')
UnitOfMeasure.Tm_ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Tm', tag='Tm_')
UnitOfMeasure.TN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TN', tag='TN')
UnitOfMeasure.Tohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Tohm', tag='Tohm')
UnitOfMeasure.tonUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[UK]', tag='tonUK')
UnitOfMeasure.tonUKa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[UK]/a', tag='tonUKa')
UnitOfMeasure.tonUKd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[UK]/d', tag='tonUKd')
UnitOfMeasure.tonUKh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[UK]/h', tag='tonUKh')
UnitOfMeasure.tonUKmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[UK]/min', tag='tonUKmin')
UnitOfMeasure.tonUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]', tag='tonUS')
UnitOfMeasure.tonUSa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]/a', tag='tonUSa')
UnitOfMeasure.tonUSd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]/d', tag='tonUSd')
UnitOfMeasure.tonUSft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]/ft2', tag='tonUSft2')
UnitOfMeasure.tonUSh = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]/h', tag='tonUSh')
UnitOfMeasure.tonUSmin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ton[US]/min', tag='tonUSmin')
UnitOfMeasure.tonfUK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[UK]', tag='tonfUK')
UnitOfMeasure.tonfUK_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[UK].ft2', tag='tonfUK_ft2')
UnitOfMeasure.tonfUKft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[UK]/ft', tag='tonfUKft')
UnitOfMeasure.tonfUKft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[UK]/ft2', tag='tonfUKft2')
UnitOfMeasure.tonfUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US]', tag='tonfUS')
UnitOfMeasure.tonfUS_ft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US].ft', tag='tonfUS_ft')
UnitOfMeasure.tonfUS_ft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US].ft2', tag='tonfUS_ft2')
UnitOfMeasure.tonfUS_mi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi', tag='tonfUS_mi')
UnitOfMeasure.tonfUS_mibbl = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi/bbl', tag='tonfUS_mibbl')
UnitOfMeasure.tonfUS_mift = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi/ft', tag='tonfUS_mift')
UnitOfMeasure.tonfUSft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US]/ft', tag='tonfUSft')
UnitOfMeasure.tonfUSft2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US]/ft2', tag='tonfUSft2')
UnitOfMeasure.tonfUSin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonf[US]/in2', tag='tonfUSin2')
UnitOfMeasure.tonRefrig = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='tonRefrig', tag='tonRefrig')
UnitOfMeasure.torr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='torr', tag='torr')
UnitOfMeasure.TP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TP', tag='TP')
UnitOfMeasure.TPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TPa', tag='TPa')
UnitOfMeasure.Trd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Trd', tag='Trd')
UnitOfMeasure.TS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TS', tag='TS')
UnitOfMeasure.TT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TT', tag='TT')
UnitOfMeasure.TV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TV', tag='TV')
UnitOfMeasure.TW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TW', tag='TW')
UnitOfMeasure.TW_h = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TW.h', tag='TW_h')
UnitOfMeasure.TWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='TWb', tag='TWb')
UnitOfMeasure.uA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uA', tag='uA')
UnitOfMeasure.uAcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uA/cm2', tag='uAcm2')
UnitOfMeasure.uAin2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uA/in2', tag='uAin2')
UnitOfMeasure.ubar = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ubar', tag='ubar')
UnitOfMeasure.uC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uC', tag='uC')
UnitOfMeasure.ucalth = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ucal[th]', tag='ucalth')
UnitOfMeasure.ucalths_cm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ucal[th]/(s.cm2)', tag='ucalths_cm2')
UnitOfMeasure.ucalths = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ucal[th]/s', tag='ucalths')
UnitOfMeasure.uCi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uCi', tag='uCi')
UnitOfMeasure.uEuc = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uEuc', tag='uEuc')
UnitOfMeasure.ueV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ueV', tag='ueV')
UnitOfMeasure.uF = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uF', tag='uF')
UnitOfMeasure.uFm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uF/m', tag='uFm')
UnitOfMeasure.ug = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ug', tag='ug')
UnitOfMeasure.ugcm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ug/cm3', tag='ugcm3')
UnitOfMeasure.ugg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ug/g', tag='ugg')
UnitOfMeasure.ugmg = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ug/mg', tag='ugmg')
UnitOfMeasure.ugauss = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='ugauss', tag='ugauss')
UnitOfMeasure.uGy = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uGy', tag='uGy')
UnitOfMeasure.uH = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uH', tag='uH')
UnitOfMeasure.uHm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uH/m', tag='uHm')
UnitOfMeasure.uHz = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uHz', tag='uHz')
UnitOfMeasure.uJ = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uJ', tag='uJ')
UnitOfMeasure.um = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='um', tag='um')
UnitOfMeasure.ums = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='um/s', tag='ums')
UnitOfMeasure.um2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='um2', tag='um2')
UnitOfMeasure.um2_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='um2.m', tag='um2_m')
UnitOfMeasure.umHg0degC = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='umHg[0degC]', tag='umHg0degC')
UnitOfMeasure.umol = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='umol', tag='umol')
UnitOfMeasure.uN = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uN', tag='uN')
UnitOfMeasure.uohm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uohm', tag='uohm')
UnitOfMeasure.uohmft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uohm/ft', tag='uohmft')
UnitOfMeasure.uohmm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uohm/m', tag='uohmm')
UnitOfMeasure.uP = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uP', tag='uP')
UnitOfMeasure.uPa = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uPa', tag='uPa')
UnitOfMeasure.upsi = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='upsi', tag='upsi')
UnitOfMeasure.urad = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='urad', tag='urad')
UnitOfMeasure.urd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='urd', tag='urd')
UnitOfMeasure.us = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='us', tag='us')
UnitOfMeasure.uS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uS', tag='uS')
UnitOfMeasure.usft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='us/ft', tag='usft')
UnitOfMeasure.usin = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='us/in', tag='usin')
UnitOfMeasure.usm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='us/m', tag='usm')
UnitOfMeasure.uT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uT', tag='uT')
UnitOfMeasure.uV = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uV', tag='uV')
UnitOfMeasure.uVft = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uV/ft', tag='uVft')
UnitOfMeasure.uVm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uV/m', tag='uVm')
UnitOfMeasure.uW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uW', tag='uW')
UnitOfMeasure.uWm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uW/m3', tag='uWm3')
UnitOfMeasure.uWb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='uWb', tag='uWb')
UnitOfMeasure.V = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='V', tag='V')
UnitOfMeasure.VB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='V/B', tag='VB')
UnitOfMeasure.VdB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='V/dB', tag='VdB')
UnitOfMeasure.Vm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='V/m', tag='Vm')
UnitOfMeasure.W = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
UnitOfMeasure.W_m2_KJ_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W.m2.K/(J.K)', tag='W_m2_KJ_K')
UnitOfMeasure.Wm_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/(m.K)', tag='Wm_K')
UnitOfMeasure.Wm2_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/(m2.K)', tag='Wm2_K')
UnitOfMeasure.Wm2_sr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/(m2.sr)', tag='Wm2_sr')
UnitOfMeasure.Wm3_K = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/(m3.K)', tag='Wm3_K')
UnitOfMeasure.Wcm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/cm2', tag='Wcm2')
UnitOfMeasure.WK = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/K', tag='WK')
UnitOfMeasure.WkW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/kW', tag='WkW')
UnitOfMeasure.Wm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/m2', tag='Wm2')
UnitOfMeasure.Wm3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/m3', tag='Wm3')
UnitOfMeasure.Wmm2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/mm2', tag='Wmm2')
UnitOfMeasure.Wsr = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/sr', tag='Wsr')
UnitOfMeasure.WW = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='W/W', tag='WW')
UnitOfMeasure.Wb = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Wb', tag='Wb')
UnitOfMeasure.Wb_m = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Wb.m', tag='Wb_m')
UnitOfMeasure.Wbm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Wb/m', tag='Wbm')
UnitOfMeasure.Wbmm = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='Wb/mm', tag='Wbmm')
UnitOfMeasure.wk = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='wk', tag='wk')
UnitOfMeasure.yd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd', tag='yd')
UnitOfMeasure.ydBnA = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[BnA]', tag='ydBnA')
UnitOfMeasure.ydBnB = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[BnB]', tag='ydBnB')
UnitOfMeasure.ydCla = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Cla]', tag='ydCla')
UnitOfMeasure.ydInd = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Ind]', tag='ydInd')
UnitOfMeasure.ydInd37 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Ind37]', tag='ydInd37')
UnitOfMeasure.ydInd62 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Ind62]', tag='ydInd62')
UnitOfMeasure.ydInd75 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Ind75]', tag='ydInd75')
UnitOfMeasure.ydSe = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[Se]', tag='ydSe')
UnitOfMeasure.ydSeT = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[SeT]', tag='ydSeT')
UnitOfMeasure.ydUS = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd[US]', tag='ydUS')
UnitOfMeasure.yd2 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd2', tag='yd2')
UnitOfMeasure.yd3 = UnitOfMeasure._CF_enumeration.addEnumeration(unicode_value='yd3', tag='yd3')
UnitOfMeasure._InitializeFacetMap(UnitOfMeasure._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'UnitOfMeasure', UnitOfMeasure)
_module_typeBindings.UnitOfMeasure = UnitOfMeasure

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioUom
class LogarithmicPowerRatioUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 28, 1)
    _Documentation = None
LogarithmicPowerRatioUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LogarithmicPowerRatioUom, enum_prefix=None)
LogarithmicPowerRatioUom.B = LogarithmicPowerRatioUom._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
LogarithmicPowerRatioUom.dB = LogarithmicPowerRatioUom._CF_enumeration.addEnumeration(unicode_value='dB', tag='dB')
LogarithmicPowerRatioUom._InitializeFacetMap(LogarithmicPowerRatioUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioUom', LogarithmicPowerRatioUom)
_module_typeBindings.LogarithmicPowerRatioUom = LogarithmicPowerRatioUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeUom
class AmountOfSubstancePerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 60, 1)
    _Documentation = None
AmountOfSubstancePerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerTimeUom, enum_prefix=None)
AmountOfSubstancePerTimeUom.kat = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='kat', tag='kat')
AmountOfSubstancePerTimeUom.kmolh = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='kmol/h', tag='kmolh')
AmountOfSubstancePerTimeUom.kmols = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='kmol/s', tag='kmols')
AmountOfSubstancePerTimeUom.lbmolh = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbmol/h', tag='lbmolh')
AmountOfSubstancePerTimeUom.lbmols = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbmol/s', tag='lbmols')
AmountOfSubstancePerTimeUom.mols = AmountOfSubstancePerTimeUom._CF_enumeration.addEnumeration(unicode_value='mol/s', tag='mols')
AmountOfSubstancePerTimeUom._InitializeFacetMap(AmountOfSubstancePerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimeUom', AmountOfSubstancePerTimeUom)
_module_typeBindings.AmountOfSubstancePerTimeUom = AmountOfSubstancePerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityUom
class ElectricConductivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 100, 1)
    _Documentation = None
ElectricConductivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricConductivityUom, enum_prefix=None)
ElectricConductivityUom.kSm = ElectricConductivityUom._CF_enumeration.addEnumeration(unicode_value='kS/m', tag='kSm')
ElectricConductivityUom.mScm = ElectricConductivityUom._CF_enumeration.addEnumeration(unicode_value='mS/cm', tag='mScm')
ElectricConductivityUom.mSm = ElectricConductivityUom._CF_enumeration.addEnumeration(unicode_value='mS/m', tag='mSm')
ElectricConductivityUom.Sm = ElectricConductivityUom._CF_enumeration.addEnumeration(unicode_value='S/m', tag='Sm')
ElectricConductivityUom._InitializeFacetMap(ElectricConductivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricConductivityUom', ElectricConductivityUom)
_module_typeBindings.ElectricConductivityUom = ElectricConductivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationUom
class VolumePerRotationUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerRotationUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 133, 1)
    _Documentation = None
VolumePerRotationUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerRotationUom, enum_prefix=None)
VolumePerRotationUom.ft3rad = VolumePerRotationUom._CF_enumeration.addEnumeration(unicode_value='ft3/rad', tag='ft3rad')
VolumePerRotationUom.m3rad = VolumePerRotationUom._CF_enumeration.addEnumeration(unicode_value='m3/rad', tag='m3rad')
VolumePerRotationUom.m3rev = VolumePerRotationUom._CF_enumeration.addEnumeration(unicode_value='m3/rev', tag='m3rev')
VolumePerRotationUom._InitializeFacetMap(VolumePerRotationUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerRotationUom', VolumePerRotationUom)
_module_typeBindings.VolumePerRotationUom = VolumePerRotationUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightUom
class DiffusiveTimeOfFlightUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusiveTimeOfFlightUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 152, 1)
    _Documentation = None
DiffusiveTimeOfFlightUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DiffusiveTimeOfFlightUom, enum_prefix=None)
DiffusiveTimeOfFlightUom.h0_5 = DiffusiveTimeOfFlightUom._CF_enumeration.addEnumeration(unicode_value='h(0.5)', tag='h0_5')
DiffusiveTimeOfFlightUom.s0_5 = DiffusiveTimeOfFlightUom._CF_enumeration.addEnumeration(unicode_value='s(0.5)', tag='s0_5')
DiffusiveTimeOfFlightUom._InitializeFacetMap(DiffusiveTimeOfFlightUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DiffusiveTimeOfFlightUom', DiffusiveTimeOfFlightUom)
_module_typeBindings.DiffusiveTimeOfFlightUom = DiffusiveTimeOfFlightUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaUom
class VolumePerTimePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 162, 1)
    _Documentation = None
VolumePerTimePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerAreaUom, enum_prefix=None)
VolumePerTimePerAreaUom.ft3min_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='ft3/(min.ft2)', tag='ft3min_ft2')
VolumePerTimePerAreaUom.ft3s_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='ft3/(s.ft2)', tag='ft3s_ft2')
VolumePerTimePerAreaUom.galUKh_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.ft2)', tag='galUKh_ft2')
VolumePerTimePerAreaUom.galUKh_in2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.in2)', tag='galUKh_in2')
VolumePerTimePerAreaUom.galUKmin_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(min.ft2)', tag='galUKmin_ft2')
VolumePerTimePerAreaUom.galUSh_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.ft2)', tag='galUSh_ft2')
VolumePerTimePerAreaUom.galUSh_in2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.in2)', tag='galUSh_in2')
VolumePerTimePerAreaUom.galUSmin_ft2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(min.ft2)', tag='galUSmin_ft2')
VolumePerTimePerAreaUom.m3s_m2 = VolumePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='m3/(s.m2)', tag='m3s_m2')
VolumePerTimePerAreaUom._InitializeFacetMap(VolumePerTimePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerAreaUom', VolumePerTimePerAreaUom)
_module_typeBindings.VolumePerTimePerAreaUom = VolumePerTimePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MobilityUom
class MobilityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobilityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 220, 1)
    _Documentation = None
MobilityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MobilityUom, enum_prefix=None)
MobilityUom.DPa_s = MobilityUom._CF_enumeration.addEnumeration(unicode_value='D/(Pa.s)', tag='DPa_s')
MobilityUom.DcP = MobilityUom._CF_enumeration.addEnumeration(unicode_value='D/cP', tag='DcP')
MobilityUom.mD_ft2lbf_s = MobilityUom._CF_enumeration.addEnumeration(unicode_value='mD.ft2/(lbf.s)', tag='mD_ft2lbf_s')
MobilityUom.mD_in2lbf_s = MobilityUom._CF_enumeration.addEnumeration(unicode_value='mD.in2/(lbf.s)', tag='mD_in2lbf_s')
MobilityUom.mDPa_s = MobilityUom._CF_enumeration.addEnumeration(unicode_value='mD/(Pa.s)', tag='mDPa_s')
MobilityUom.mDcP = MobilityUom._CF_enumeration.addEnumeration(unicode_value='mD/cP', tag='mDcP')
MobilityUom.TDAPIPa_s = MobilityUom._CF_enumeration.addEnumeration(unicode_value='TD[API]/(Pa.s)', tag='TDAPIPa_s')
MobilityUom._InitializeFacetMap(MobilityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MobilityUom', MobilityUom)
_module_typeBindings.MobilityUom = MobilityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientUom
class HeatTransferCoefficientUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatTransferCoefficientUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 265, 1)
    _Documentation = None
HeatTransferCoefficientUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatTransferCoefficientUom, enum_prefix=None)
HeatTransferCoefficientUom.BtuITh_ft2_deltaF = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2.deltaF)', tag='BtuITh_ft2_deltaF')
HeatTransferCoefficientUom.BtuITh_ft2_deltaR = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2.deltaR)', tag='BtuITh_ft2_deltaR')
HeatTransferCoefficientUom.BtuITh_m2_deltaC = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.m2.deltaC)', tag='BtuITh_m2_deltaC')
HeatTransferCoefficientUom.BtuITs_ft2_deltaF = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft2.deltaF)', tag='BtuITs_ft2_deltaF')
HeatTransferCoefficientUom.calthh_cm2_deltaC = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm2.deltaC)', tag='calthh_cm2_deltaC')
HeatTransferCoefficientUom.calths_cm2_deltaC = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm2.deltaC)', tag='calths_cm2_deltaC')
HeatTransferCoefficientUom.Js_m2_deltaC = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='J/(s.m2.deltaC)', tag='Js_m2_deltaC')
HeatTransferCoefficientUom.kcalthh_m2_deltaC = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(h.m2.deltaC)', tag='kcalthh_m2_deltaC')
HeatTransferCoefficientUom.kJh_m2_deltaK = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='kJ/(h.m2.deltaK)', tag='kJh_m2_deltaK')
HeatTransferCoefficientUom.kWm2_deltaK = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='kW/(m2.deltaK)', tag='kWm2_deltaK')
HeatTransferCoefficientUom.Wm2_deltaK = HeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='W/(m2.deltaK)', tag='Wm2_deltaK')
HeatTransferCoefficientUom._InitializeFacetMap(HeatTransferCoefficientUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatTransferCoefficientUom', HeatTransferCoefficientUom)
_module_typeBindings.HeatTransferCoefficientUom = HeatTransferCoefficientUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyUom
class MassPerEnergyUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerEnergyUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 324, 1)
    _Documentation = None
MassPerEnergyUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerEnergyUom, enum_prefix=None)
MassPerEnergyUom.kgkW_h = MassPerEnergyUom._CF_enumeration.addEnumeration(unicode_value='kg/(kW.h)', tag='kgkW_h')
MassPerEnergyUom.kgJ = MassPerEnergyUom._CF_enumeration.addEnumeration(unicode_value='kg/J', tag='kgJ')
MassPerEnergyUom.kgMJ = MassPerEnergyUom._CF_enumeration.addEnumeration(unicode_value='kg/MJ', tag='kgMJ')
MassPerEnergyUom.lbmhp_h = MassPerEnergyUom._CF_enumeration.addEnumeration(unicode_value='lbm/(hp.h)', tag='lbmhp_h')
MassPerEnergyUom.mgJ = MassPerEnergyUom._CF_enumeration.addEnumeration(unicode_value='mg/J', tag='mgJ')
MassPerEnergyUom._InitializeFacetMap(MassPerEnergyUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerEnergyUom', MassPerEnergyUom)
_module_typeBindings.MassPerEnergyUom = MassPerEnergyUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaUom
class MomentOfInertiaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfInertiaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 353, 1)
    _Documentation = None
MomentOfInertiaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentOfInertiaUom, enum_prefix=None)
MomentOfInertiaUom.kg_m2 = MomentOfInertiaUom._CF_enumeration.addEnumeration(unicode_value='kg.m2', tag='kg_m2')
MomentOfInertiaUom.lbm_ft2 = MomentOfInertiaUom._CF_enumeration.addEnumeration(unicode_value='lbm.ft2', tag='lbm_ft2')
MomentOfInertiaUom._InitializeFacetMap(MomentOfInertiaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentOfInertiaUom', MomentOfInertiaUom)
_module_typeBindings.MomentOfInertiaUom = MomentOfInertiaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}CapacitanceUom
class CapacitanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CapacitanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 367, 1)
    _Documentation = None
CapacitanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CapacitanceUom, enum_prefix=None)
CapacitanceUom.cF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='cF', tag='cF')
CapacitanceUom.dF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='dF', tag='dF')
CapacitanceUom.EF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='EF', tag='EF')
CapacitanceUom.F = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
CapacitanceUom.fF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='fF', tag='fF')
CapacitanceUom.GF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='GF', tag='GF')
CapacitanceUom.kF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='kF', tag='kF')
CapacitanceUom.mF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='mF', tag='mF')
CapacitanceUom.MF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='MF', tag='MF')
CapacitanceUom.nF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='nF', tag='nF')
CapacitanceUom.pF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='pF', tag='pF')
CapacitanceUom.TF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='TF', tag='TF')
CapacitanceUom.uF = CapacitanceUom._CF_enumeration.addEnumeration(unicode_value='uF', tag='uF')
CapacitanceUom._InitializeFacetMap(CapacitanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CapacitanceUom', CapacitanceUom)
_module_typeBindings.CapacitanceUom = CapacitanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthUom
class MagneticFluxDensityPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 436, 1)
    _Documentation = None
MagneticFluxDensityPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxDensityPerLengthUom, enum_prefix=None)
MagneticFluxDensityPerLengthUom.gausscm = MagneticFluxDensityPerLengthUom._CF_enumeration.addEnumeration(unicode_value='gauss/cm', tag='gausscm')
MagneticFluxDensityPerLengthUom.mTdm = MagneticFluxDensityPerLengthUom._CF_enumeration.addEnumeration(unicode_value='mT/dm', tag='mTdm')
MagneticFluxDensityPerLengthUom.Tm = MagneticFluxDensityPerLengthUom._CF_enumeration.addEnumeration(unicode_value='T/m', tag='Tm')
MagneticFluxDensityPerLengthUom._InitializeFacetMap(MagneticFluxDensityPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityPerLengthUom', MagneticFluxDensityPerLengthUom)
_module_typeBindings.MagneticFluxDensityPerLengthUom = MagneticFluxDensityPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeUom
class LengthPerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 455, 1)
    _Documentation = None
LengthPerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerVolumeUom, enum_prefix=None)
LengthPerVolumeUom.ftbbl = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft/bbl', tag='ftbbl')
LengthPerVolumeUom.ftft3 = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft/ft3', tag='ftft3')
LengthPerVolumeUom.ftgalUS = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft/gal[US]', tag='ftgalUS')
LengthPerVolumeUom.kmdm3 = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='km/dm3', tag='kmdm3')
LengthPerVolumeUom.kmL = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='km/L', tag='kmL')
LengthPerVolumeUom.mm3 = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m/m3', tag='mm3')
LengthPerVolumeUom.migalUK = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mi/gal[UK]', tag='migalUK')
LengthPerVolumeUom.migalUS = LengthPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mi/gal[US]', tag='migalUS')
LengthPerVolumeUom._InitializeFacetMap(LengthPerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerVolumeUom', LengthPerVolumeUom)
_module_typeBindings.LengthPerVolumeUom = LengthPerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityUom
class CationExchangeCapacityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CationExchangeCapacityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 502, 1)
    _Documentation = None
CationExchangeCapacityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CationExchangeCapacityUom, enum_prefix=None)
CationExchangeCapacityUom.n01_meqg = CationExchangeCapacityUom._CF_enumeration.addEnumeration(unicode_value='.01 meq/g', tag='n01_meqg')
CationExchangeCapacityUom._InitializeFacetMap(CationExchangeCapacityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CationExchangeCapacityUom', CationExchangeCapacityUom)
_module_typeBindings.CationExchangeCapacityUom = CationExchangeCapacityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimeUom
class MassPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 507, 1)
    _Documentation = None
MassPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimeUom, enum_prefix=None)
MassPerTimeUom.n1E6_lbma = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='1E6 lbm/a', tag='n1E6_lbma')
MassPerTimeUom.gs = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='g/s', tag='gs')
MassPerTimeUom.kgd = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='kg/d', tag='kgd')
MassPerTimeUom.kgh = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='kg/h', tag='kgh')
MassPerTimeUom.kgmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='kg/min', tag='kgmin')
MassPerTimeUom.kgs = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='kg/s', tag='kgs')
MassPerTimeUom.lbmd = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbm/d', tag='lbmd')
MassPerTimeUom.lbmh = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbm/h', tag='lbmh')
MassPerTimeUom.lbmmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbm/min', tag='lbmmin')
MassPerTimeUom.lbms = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='lbm/s', tag='lbms')
MassPerTimeUom.Mga = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Mg/a', tag='Mga')
MassPerTimeUom.Mgd = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Mg/d', tag='Mgd')
MassPerTimeUom.Mgh = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Mg/h', tag='Mgh')
MassPerTimeUom.Mgmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Mg/min', tag='Mgmin')
MassPerTimeUom.ta = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='t/a', tag='ta')
MassPerTimeUom.td = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='t/d', tag='td')
MassPerTimeUom.th = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='t/h', tag='th')
MassPerTimeUom.tmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='t/min', tag='tmin')
MassPerTimeUom.tonUKa = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[UK]/a', tag='tonUKa')
MassPerTimeUom.tonUKd = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[UK]/d', tag='tonUKd')
MassPerTimeUom.tonUKh = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[UK]/h', tag='tonUKh')
MassPerTimeUom.tonUKmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[UK]/min', tag='tonUKmin')
MassPerTimeUom.tonUSa = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[US]/a', tag='tonUSa')
MassPerTimeUom.tonUSd = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[US]/d', tag='tonUSd')
MassPerTimeUom.tonUSh = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[US]/h', tag='tonUSh')
MassPerTimeUom.tonUSmin = MassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ton[US]/min', tag='tonUSmin')
MassPerTimeUom._InitializeFacetMap(MassPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimeUom', MassPerTimeUom)
_module_typeBindings.MassPerTimeUom = MassPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MolecularWeightUom
class MolecularWeightUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolecularWeightUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 653, 1)
    _Documentation = None
MolecularWeightUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolecularWeightUom, enum_prefix=None)
MolecularWeightUom.gmol = MolecularWeightUom._CF_enumeration.addEnumeration(unicode_value='g/mol', tag='gmol')
MolecularWeightUom.kgmol = MolecularWeightUom._CF_enumeration.addEnumeration(unicode_value='kg/mol', tag='kgmol')
MolecularWeightUom.lbmlbmol = MolecularWeightUom._CF_enumeration.addEnumeration(unicode_value='lbm/lbmol', tag='lbmlbmol')
MolecularWeightUom._InitializeFacetMap(MolecularWeightUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolecularWeightUom', MolecularWeightUom)
_module_typeBindings.MolecularWeightUom = MolecularWeightUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxUom
class MagneticFluxUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 675, 1)
    _Documentation = None
MagneticFluxUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxUom, enum_prefix=None)
MagneticFluxUom.cWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='cWb', tag='cWb')
MagneticFluxUom.dWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='dWb', tag='dWb')
MagneticFluxUom.EWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='EWb', tag='EWb')
MagneticFluxUom.fWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='fWb', tag='fWb')
MagneticFluxUom.GWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='GWb', tag='GWb')
MagneticFluxUom.kWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='kWb', tag='kWb')
MagneticFluxUom.mWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='mWb', tag='mWb')
MagneticFluxUom.MWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='MWb', tag='MWb')
MagneticFluxUom.nWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='nWb', tag='nWb')
MagneticFluxUom.pWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='pWb', tag='pWb')
MagneticFluxUom.TWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='TWb', tag='TWb')
MagneticFluxUom.uWb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='uWb', tag='uWb')
MagneticFluxUom.Wb = MagneticFluxUom._CF_enumeration.addEnumeration(unicode_value='Wb', tag='Wb')
MagneticFluxUom._InitializeFacetMap(MagneticFluxUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxUom', MagneticFluxUom)
_module_typeBindings.MagneticFluxUom = MagneticFluxUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumeUom
class VolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 744, 1)
    _Documentation = None
VolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumeUom, enum_prefix=None)
VolumeUom.n1000_bbl = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 bbl', tag='n1000_bbl')
VolumeUom.n1000_ft3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 ft3', tag='n1000_ft3')
VolumeUom.n1000_galUK = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 gal[UK]', tag='n1000_galUK')
VolumeUom.n1000_galUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 gal[US]', tag='n1000_galUS')
VolumeUom.n1000_m3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 m3', tag='n1000_m3')
VolumeUom.n1E_6_galUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E-6 gal[US]', tag='n1E_6_galUS')
VolumeUom.n1E12_ft3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E12 ft3', tag='n1E12_ft3')
VolumeUom.n1E6_bbl = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 bbl', tag='n1E6_bbl')
VolumeUom.n1E6_ft3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 ft3', tag='n1E6_ft3')
VolumeUom.n1E6_m3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 m3', tag='n1E6_m3')
VolumeUom.n1E9_bbl = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E9 bbl', tag='n1E9_bbl')
VolumeUom.n1E9_ft3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='1E9 ft3', tag='n1E9_ft3')
VolumeUom.acre_ft = VolumeUom._CF_enumeration.addEnumeration(unicode_value='acre.ft', tag='acre_ft')
VolumeUom.bbl = VolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl', tag='bbl')
VolumeUom.cm3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='cm3', tag='cm3')
VolumeUom.dm3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='dm3', tag='dm3')
VolumeUom.flozUK = VolumeUom._CF_enumeration.addEnumeration(unicode_value='floz[UK]', tag='flozUK')
VolumeUom.flozUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='floz[US]', tag='flozUS')
VolumeUom.ft3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='ft3', tag='ft3')
VolumeUom.galUK = VolumeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]', tag='galUK')
VolumeUom.galUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]', tag='galUS')
VolumeUom.ha_m = VolumeUom._CF_enumeration.addEnumeration(unicode_value='ha.m', tag='ha_m')
VolumeUom.hL = VolumeUom._CF_enumeration.addEnumeration(unicode_value='hL', tag='hL')
VolumeUom.in3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='in3', tag='in3')
VolumeUom.km3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='km3', tag='km3')
VolumeUom.L = VolumeUom._CF_enumeration.addEnumeration(unicode_value='L', tag='L')
VolumeUom.m3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='m3', tag='m3')
VolumeUom.mi3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='mi3', tag='mi3')
VolumeUom.mL = VolumeUom._CF_enumeration.addEnumeration(unicode_value='mL', tag='mL')
VolumeUom.mm3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='mm3', tag='mm3')
VolumeUom.ptUK = VolumeUom._CF_enumeration.addEnumeration(unicode_value='pt[UK]', tag='ptUK')
VolumeUom.ptUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='pt[US]', tag='ptUS')
VolumeUom.qtUK = VolumeUom._CF_enumeration.addEnumeration(unicode_value='qt[UK]', tag='qtUK')
VolumeUom.qtUS = VolumeUom._CF_enumeration.addEnumeration(unicode_value='qt[US]', tag='qtUS')
VolumeUom.um2_m = VolumeUom._CF_enumeration.addEnumeration(unicode_value='um2.m', tag='um2_m')
VolumeUom.yd3 = VolumeUom._CF_enumeration.addEnumeration(unicode_value='yd3', tag='yd3')
VolumeUom._InitializeFacetMap(VolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumeUom', VolumeUom)
_module_typeBindings.VolumeUom = VolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceUom
class ThermalConductanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 937, 1)
    _Documentation = None
ThermalConductanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalConductanceUom, enum_prefix=None)
ThermalConductanceUom.WdeltaK = ThermalConductanceUom._CF_enumeration.addEnumeration(unicode_value='W/deltaK', tag='WdeltaK')
ThermalConductanceUom._InitializeFacetMap(ThermalConductanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalConductanceUom', ThermalConductanceUom)
_module_typeBindings.ThermalConductanceUom = ThermalConductanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureUom
class MassPerVolumePerTemperatureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerTemperatureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 949, 1)
    _Documentation = None
MassPerVolumePerTemperatureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerTemperatureUom, enum_prefix=None)
MassPerVolumePerTemperatureUom.kgm3_degC = MassPerVolumePerTemperatureUom._CF_enumeration.addEnumeration(unicode_value='kg/m3.degC', tag='kgm3_degC')
MassPerVolumePerTemperatureUom.kgm3_K = MassPerVolumePerTemperatureUom._CF_enumeration.addEnumeration(unicode_value='kg/m3.K', tag='kgm3_K')
MassPerVolumePerTemperatureUom.lbft_degF = MassPerVolumePerTemperatureUom._CF_enumeration.addEnumeration(unicode_value='lb/ft.degF', tag='lbft_degF')
MassPerVolumePerTemperatureUom._InitializeFacetMap(MassPerVolumePerTemperatureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerTemperatureUom', MassPerVolumePerTemperatureUom)
_module_typeBindings.MassPerVolumePerTemperatureUom = MassPerVolumePerTemperatureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightUom
class QuantityOfLightUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityOfLightUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 959, 1)
    _Documentation = None
QuantityOfLightUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=QuantityOfLightUom, enum_prefix=None)
QuantityOfLightUom.lm_s = QuantityOfLightUom._CF_enumeration.addEnumeration(unicode_value='lm.s', tag='lm_s')
QuantityOfLightUom._InitializeFacetMap(QuantityOfLightUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'QuantityOfLightUom', QuantityOfLightUom)
_module_typeBindings.QuantityOfLightUom = QuantityOfLightUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeUom
class LengthPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 980, 1)
    _Documentation = None
LengthPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerTimeUom, enum_prefix=None)
LengthPerTimeUom.n1000_fth = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 ft/h', tag='n1000_fth')
LengthPerTimeUom.n1000_fts = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 ft/s', tag='n1000_fts')
LengthPerTimeUom.cma = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm/a', tag='cma')
LengthPerTimeUom.cms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm/s', tag='cms')
LengthPerTimeUom.dms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='dm/s', tag='dms')
LengthPerTimeUom.ftd = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/d', tag='ftd')
LengthPerTimeUom.fth = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/h', tag='fth')
LengthPerTimeUom.ftmin = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/min', tag='ftmin')
LengthPerTimeUom.ftms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/ms', tag='ftms')
LengthPerTimeUom.fts = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/s', tag='fts')
LengthPerTimeUom.ftus = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft/us', tag='ftus')
LengthPerTimeUom.ina = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='in/a', tag='ina')
LengthPerTimeUom.inmin = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='in/min', tag='inmin')
LengthPerTimeUom.ins = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='in/s', tag='ins')
LengthPerTimeUom.kmh = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='km/h', tag='kmh')
LengthPerTimeUom.kms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='km/s', tag='kms')
LengthPerTimeUom.knot = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='knot', tag='knot')
LengthPerTimeUom.md = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m/d', tag='md')
LengthPerTimeUom.mh = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m/h', tag='mh')
LengthPerTimeUom.mmin = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m/min', tag='mmin')
LengthPerTimeUom.mms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m/ms', tag='mms')
LengthPerTimeUom.ms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m/s', tag='ms')
LengthPerTimeUom.mih = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mi/h', tag='mih')
LengthPerTimeUom.mila = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mil/a', tag='mila')
LengthPerTimeUom.mma = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mm/a', tag='mma')
LengthPerTimeUom.mms_ = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mm/s', tag='mms_')
LengthPerTimeUom.nms = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='nm/s', tag='nms')
LengthPerTimeUom.ums = LengthPerTimeUom._CF_enumeration.addEnumeration(unicode_value='um/s', tag='ums')
LengthPerTimeUom._InitializeFacetMap(LengthPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerTimeUom', LengthPerTimeUom)
_module_typeBindings.LengthPerTimeUom = LengthPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthUom
class ForceLengthPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceLengthPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1124, 1)
    _Documentation = None
ForceLengthPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceLengthPerLengthUom, enum_prefix=None)
ForceLengthPerLengthUom.kgf_mm = ForceLengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='kgf.m/m', tag='kgf_mm')
ForceLengthPerLengthUom.lbf_ftin = ForceLengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/in', tag='lbf_ftin')
ForceLengthPerLengthUom.lbf_inin = ForceLengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbf.in/in', tag='lbf_inin')
ForceLengthPerLengthUom.N_mm = ForceLengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='N.m/m', tag='N_mm')
ForceLengthPerLengthUom.tonfUS_mift = ForceLengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi/ft', tag='tonfUS_mift')
ForceLengthPerLengthUom._InitializeFacetMap(ForceLengthPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceLengthPerLengthUom', ForceLengthPerLengthUom)
_module_typeBindings.ForceLengthPerLengthUom = ForceLengthPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}SolidAngleUom
class SolidAngleUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolidAngleUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1156, 1)
    _Documentation = None
SolidAngleUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SolidAngleUom, enum_prefix=None)
SolidAngleUom.sr = SolidAngleUom._CF_enumeration.addEnumeration(unicode_value='sr', tag='sr')
SolidAngleUom._InitializeFacetMap(SolidAngleUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SolidAngleUom', SolidAngleUom)
_module_typeBindings.SolidAngleUom = SolidAngleUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureUom
class MassPerVolumePerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1165, 1)
    _Documentation = None
MassPerVolumePerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerPressureUom, enum_prefix=None)
MassPerVolumePerPressureUom.kgm3_kPa = MassPerVolumePerPressureUom._CF_enumeration.addEnumeration(unicode_value='kg/m3.kPa', tag='kgm3_kPa')
MassPerVolumePerPressureUom.lbft_psi = MassPerVolumePerPressureUom._CF_enumeration.addEnumeration(unicode_value='lb/ft.psi', tag='lbft_psi')
MassPerVolumePerPressureUom._InitializeFacetMap(MassPerVolumePerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerPressureUom', MassPerVolumePerPressureUom)
_module_typeBindings.MassPerVolumePerPressureUom = MassPerVolumePerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeUom
class VolumePerTimePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1177, 1)
    _Documentation = None
VolumePerTimePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerVolumeUom, enum_prefix=None)
VolumePerTimePerVolumeUom.bbld_acre_ft = VolumePerTimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl/(d.acre.ft)', tag='bbld_acre_ft')
VolumePerTimePerVolumeUom.m3s_m3 = VolumePerTimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/(s.m3)', tag='m3s_m3')
VolumePerTimePerVolumeUom._InitializeFacetMap(VolumePerTimePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerVolumeUom', VolumePerTimePerVolumeUom)
_module_typeBindings.VolumePerTimePerVolumeUom = VolumePerTimePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MomentOfForceUom
class MomentOfForceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfForceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1191, 1)
    _Documentation = None
MomentOfForceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentOfForceUom, enum_prefix=None)
MomentOfForceUom.n1000_lbf_ft = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='1000 lbf.ft', tag='n1000_lbf_ft')
MomentOfForceUom.daN_m = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='daN.m', tag='daN_m')
MomentOfForceUom.dN_m = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='dN.m', tag='dN_m')
MomentOfForceUom.J = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='J', tag='J')
MomentOfForceUom.kgf_m = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='kgf.m', tag='kgf_m')
MomentOfForceUom.kN_m = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='kN.m', tag='kN_m')
MomentOfForceUom.lbf_ft = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft', tag='lbf_ft')
MomentOfForceUom.lbf_in = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='lbf.in', tag='lbf_in')
MomentOfForceUom.lbm_ft2s2 = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='lbm.ft2/s2', tag='lbm_ft2s2')
MomentOfForceUom.N_m = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='N.m', tag='N_m')
MomentOfForceUom.pdl_ft = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='pdl.ft', tag='pdl_ft')
MomentOfForceUom.tonfUS_ft = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='tonf[US].ft', tag='tonfUS_ft')
MomentOfForceUom.tonfUS_mi = MomentOfForceUom._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi', tag='tonfUS_mi')
MomentOfForceUom._InitializeFacetMap(MomentOfForceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentOfForceUom', MomentOfForceUom)
_module_typeBindings.MomentOfForceUom = MomentOfForceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeUom
class MassPerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1260, 1)
    _Documentation = None
MassPerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumeUom, enum_prefix=None)
MassPerVolumeUom.n0_001_lbmbbl = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/bbl', tag='n0_001_lbmbbl')
MassPerVolumeUom.n0_001_lbmgalUK = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/gal[UK]', tag='n0_001_lbmgalUK')
MassPerVolumeUom.n0_001_lbmgalUS = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 lbm/gal[US]', tag='n0_001_lbmgalUS')
MassPerVolumeUom.n0_01_grainft3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.01 grain/ft3', tag='n0_01_grainft3')
MassPerVolumeUom.n0_1_lbmbbl = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.1 lbm/bbl', tag='n0_1_lbmbbl')
MassPerVolumeUom.n10_Mgm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='10 Mg/m3', tag='n10_Mgm3')
MassPerVolumeUom.gcm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/cm3', tag='gcm3')
MassPerVolumeUom.gdm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/dm3', tag='gdm3')
MassPerVolumeUom.ggalUK = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/gal[UK]', tag='ggalUK')
MassPerVolumeUom.ggalUS = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/gal[US]', tag='ggalUS')
MassPerVolumeUom.gL = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/L', tag='gL')
MassPerVolumeUom.gm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='g/m3', tag='gm3')
MassPerVolumeUom.grainft3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='grain/ft3', tag='grainft3')
MassPerVolumeUom.graingalUS = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='grain/gal[US]', tag='graingalUS')
MassPerVolumeUom.kgdm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kg/dm3', tag='kgdm3')
MassPerVolumeUom.kgL = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kg/L', tag='kgL')
MassPerVolumeUom.kgm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kg/m3', tag='kgm3')
MassPerVolumeUom.lbmbbl = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbm/bbl', tag='lbmbbl')
MassPerVolumeUom.lbmft3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbm/ft3', tag='lbmft3')
MassPerVolumeUom.lbmgalUK = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbm/gal[UK]', tag='lbmgalUK')
MassPerVolumeUom.lbmgalUS = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbm/gal[US]', tag='lbmgalUS')
MassPerVolumeUom.lbmin3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbm/in3', tag='lbmin3')
MassPerVolumeUom.mgdm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mg/dm3', tag='mgdm3')
MassPerVolumeUom.mggalUS = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mg/gal[US]', tag='mggalUS')
MassPerVolumeUom.mgL = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mg/L', tag='mgL')
MassPerVolumeUom.mgm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mg/m3', tag='mgm3')
MassPerVolumeUom.Mgm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Mg/m3', tag='Mgm3')
MassPerVolumeUom.tm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='t/m3', tag='tm3')
MassPerVolumeUom.ugcm3 = MassPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ug/cm3', tag='ugcm3')
MassPerVolumeUom._InitializeFacetMap(MassPerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumeUom', MassPerVolumeUom)
_module_typeBindings.MassPerVolumeUom = MassPerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MolarVolumeUom
class MolarVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1412, 1)
    _Documentation = None
MolarVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarVolumeUom, enum_prefix=None)
MolarVolumeUom.dm3kmol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='dm3/kmol', tag='dm3kmol')
MolarVolumeUom.ft3lbmol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft3/lbmol', tag='ft3lbmol')
MolarVolumeUom.Lkmol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='L/kmol', tag='Lkmol')
MolarVolumeUom.Lmol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='L/mol', tag='Lmol')
MolarVolumeUom.m3kmol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/kmol', tag='m3kmol')
MolarVolumeUom.m3mol = MolarVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/mol', tag='m3mol')
MolarVolumeUom._InitializeFacetMap(MolarVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarVolumeUom', MolarVolumeUom)
_module_typeBindings.MolarVolumeUom = MolarVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceUom
class AmountOfSubstanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1446, 1)
    _Documentation = None
AmountOfSubstanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstanceUom, enum_prefix=None)
AmountOfSubstanceUom.kmol = AmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='kmol', tag='kmol')
AmountOfSubstanceUom.lbmol = AmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='lbmol', tag='lbmol')
AmountOfSubstanceUom.mmol = AmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='mmol', tag='mmol')
AmountOfSubstanceUom.mol = AmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='mol', tag='mol')
AmountOfSubstanceUom.umol = AmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='umol', tag='umol')
AmountOfSubstanceUom._InitializeFacetMap(AmountOfSubstanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstanceUom', AmountOfSubstanceUom)
_module_typeBindings.AmountOfSubstanceUom = AmountOfSubstanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DipoleMomentUom
class DipoleMomentUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DipoleMomentUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1478, 1)
    _Documentation = None
DipoleMomentUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DipoleMomentUom, enum_prefix=None)
DipoleMomentUom.C_m = DipoleMomentUom._CF_enumeration.addEnumeration(unicode_value='C.m', tag='C_m')
DipoleMomentUom._InitializeFacetMap(DipoleMomentUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DipoleMomentUom', DipoleMomentUom)
_module_typeBindings.DipoleMomentUom = DipoleMomentUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}APINeutronUom
class APINeutronUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APINeutronUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1487, 1)
    _Documentation = None
APINeutronUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APINeutronUom, enum_prefix=None)
APINeutronUom.nAPI = APINeutronUom._CF_enumeration.addEnumeration(unicode_value='nAPI', tag='nAPI')
APINeutronUom._InitializeFacetMap(APINeutronUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APINeutronUom', APINeutronUom)
_module_typeBindings.APINeutronUom = APINeutronUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeUom
class ReciprocalTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1496, 1)
    _Documentation = None
ReciprocalTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalTimeUom, enum_prefix=None)
ReciprocalTimeUom.n1a = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/a', tag='n1a')
ReciprocalTimeUom.n1d = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/d', tag='n1d')
ReciprocalTimeUom.n1h = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/h', tag='n1h')
ReciprocalTimeUom.n1min = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/min', tag='n1min')
ReciprocalTimeUom.n1ms = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/ms', tag='n1ms')
ReciprocalTimeUom.n1s = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/s', tag='n1s')
ReciprocalTimeUom.n1us = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/us', tag='n1us')
ReciprocalTimeUom.n1wk = ReciprocalTimeUom._CF_enumeration.addEnumeration(unicode_value='1/wk', tag='n1wk')
ReciprocalTimeUom._InitializeFacetMap(ReciprocalTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalTimeUom', ReciprocalTimeUom)
_module_typeBindings.ReciprocalTimeUom = ReciprocalTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureUom
class TemperatureIntervalPerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1543, 1)
    _Documentation = None
TemperatureIntervalPerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerPressureUom, enum_prefix=None)
TemperatureIntervalPerPressureUom.deltaCkPa = TemperatureIntervalPerPressureUom._CF_enumeration.addEnumeration(unicode_value='deltaC/kPa', tag='deltaCkPa')
TemperatureIntervalPerPressureUom.deltaFpsi = TemperatureIntervalPerPressureUom._CF_enumeration.addEnumeration(unicode_value='deltaF/psi', tag='deltaFpsi')
TemperatureIntervalPerPressureUom.deltaKPa = TemperatureIntervalPerPressureUom._CF_enumeration.addEnumeration(unicode_value='deltaK/Pa', tag='deltaKPa')
TemperatureIntervalPerPressureUom._InitializeFacetMap(TemperatureIntervalPerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerPressureUom', TemperatureIntervalPerPressureUom)
_module_typeBindings.TemperatureIntervalPerPressureUom = TemperatureIntervalPerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthUom
class LengthPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1574, 1)
    _Documentation = None
LengthPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerLengthUom, enum_prefix=None)
LengthPerLengthUom.emptyString = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
LengthPerLengthUom.n0_01_ftft = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 ft/ft', tag='n0_01_ftft')
LengthPerLengthUom.n130_mm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='1/30 m/m', tag='n130_mm')
LengthPerLengthUom.Euc = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
LengthPerLengthUom.ftft = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft/ft', tag='ftft')
LengthPerLengthUom.ftin = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft/in', tag='ftin')
LengthPerLengthUom.ftm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft/m', tag='ftm')
LengthPerLengthUom.ftmi = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft/mi', tag='ftmi')
LengthPerLengthUom.kmcm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='km/cm', tag='kmcm')
LengthPerLengthUom.mcm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='m/cm', tag='mcm')
LengthPerLengthUom.mkm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='m/km', tag='mkm')
LengthPerLengthUom.mm = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='m/m', tag='mm')
LengthPerLengthUom.miin = LengthPerLengthUom._CF_enumeration.addEnumeration(unicode_value='mi/in', tag='miin')
LengthPerLengthUom._InitializeFacetMap(LengthPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerLengthUom', LengthPerLengthUom)
_module_typeBindings.LengthPerLengthUom = LengthPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaUom
class AreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1646, 1)
    _Documentation = None
AreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaUom, enum_prefix=None)
AreaUom.acre = AreaUom._CF_enumeration.addEnumeration(unicode_value='acre', tag='acre')
AreaUom.b = AreaUom._CF_enumeration.addEnumeration(unicode_value='b', tag='b')
AreaUom.cm2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='cm2', tag='cm2')
AreaUom.ft2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='ft2', tag='ft2')
AreaUom.ha = AreaUom._CF_enumeration.addEnumeration(unicode_value='ha', tag='ha')
AreaUom.in2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='in2', tag='in2')
AreaUom.km2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='km2', tag='km2')
AreaUom.m2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='m2', tag='m2')
AreaUom.miUS2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='mi[US]2', tag='miUS2')
AreaUom.mi2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='mi2', tag='mi2')
AreaUom.mm2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='mm2', tag='mm2')
AreaUom.section = AreaUom._CF_enumeration.addEnumeration(unicode_value='section', tag='section')
AreaUom.um2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='um2', tag='um2')
AreaUom.yd2 = AreaUom._CF_enumeration.addEnumeration(unicode_value='yd2', tag='yd2')
AreaUom._InitializeFacetMap(AreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaUom', AreaUom)
_module_typeBindings.AreaUom = AreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}APIGammaRayUom
class APIGammaRayUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGammaRayUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1720, 1)
    _Documentation = None
APIGammaRayUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APIGammaRayUom, enum_prefix=None)
APIGammaRayUom.gAPI = APIGammaRayUom._CF_enumeration.addEnumeration(unicode_value='gAPI', tag='gAPI')
APIGammaRayUom._InitializeFacetMap(APIGammaRayUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APIGammaRayUom', APIGammaRayUom)
_module_typeBindings.APIGammaRayUom = APIGammaRayUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionUom
class VolumetricThermalExpansionUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricThermalExpansionUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1735, 1)
    _Documentation = None
VolumetricThermalExpansionUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumetricThermalExpansionUom, enum_prefix=None)
VolumetricThermalExpansionUom.n1deltaC = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1/deltaC', tag='n1deltaC')
VolumetricThermalExpansionUom.n1deltaF = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1/deltaF', tag='n1deltaF')
VolumetricThermalExpansionUom.n1deltaK = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1/deltaK', tag='n1deltaK')
VolumetricThermalExpansionUom.n1deltaR = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1/deltaR', tag='n1deltaR')
VolumetricThermalExpansionUom.n1E_6_m3m3_deltaC = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1E-6 m3/(m3.deltaC)', tag='n1E_6_m3m3_deltaC')
VolumetricThermalExpansionUom.n1E_6_m3m3_deltaF = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1E-6 m3/(m3.deltaF)', tag='n1E_6_m3m3_deltaF')
VolumetricThermalExpansionUom.m3m3_deltaK = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='m3/(m3.deltaK)', tag='m3m3_deltaK')
VolumetricThermalExpansionUom.ppmvoldeltaC = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='ppm[vol]/deltaC', tag='ppmvoldeltaC')
VolumetricThermalExpansionUom.ppmvoldeltaF = VolumetricThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='ppm[vol]/deltaF', tag='ppmvoldeltaF')
VolumetricThermalExpansionUom._InitializeFacetMap(VolumetricThermalExpansionUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumetricThermalExpansionUom', VolumetricThermalExpansionUom)
_module_typeBindings.VolumetricThermalExpansionUom = VolumetricThermalExpansionUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityUom
class ElectricCurrentDensityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentDensityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1784, 1)
    _Documentation = None
ElectricCurrentDensityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricCurrentDensityUom, enum_prefix=None)
ElectricCurrentDensityUom.Acm2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='A/cm2', tag='Acm2')
ElectricCurrentDensityUom.Aft2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='A/ft2', tag='Aft2')
ElectricCurrentDensityUom.Am2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='A/m2', tag='Am2')
ElectricCurrentDensityUom.Amm2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='A/mm2', tag='Amm2')
ElectricCurrentDensityUom.mAcm2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='mA/cm2', tag='mAcm2')
ElectricCurrentDensityUom.mAft2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='mA/ft2', tag='mAft2')
ElectricCurrentDensityUom.uAcm2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='uA/cm2', tag='uAcm2')
ElectricCurrentDensityUom.uAin2 = ElectricCurrentDensityUom._CF_enumeration.addEnumeration(unicode_value='uA/in2', tag='uAin2')
ElectricCurrentDensityUom._InitializeFacetMap(ElectricCurrentDensityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentDensityUom', ElectricCurrentDensityUom)
_module_typeBindings.ElectricCurrentDensityUom = ElectricCurrentDensityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForceUom
class ForceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1831, 1)
    _Documentation = None
ForceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceUom, enum_prefix=None)
ForceUom.n10_kN = ForceUom._CF_enumeration.addEnumeration(unicode_value='10 kN', tag='n10_kN')
ForceUom.cN = ForceUom._CF_enumeration.addEnumeration(unicode_value='cN', tag='cN')
ForceUom.daN = ForceUom._CF_enumeration.addEnumeration(unicode_value='daN', tag='daN')
ForceUom.dN = ForceUom._CF_enumeration.addEnumeration(unicode_value='dN', tag='dN')
ForceUom.dyne = ForceUom._CF_enumeration.addEnumeration(unicode_value='dyne', tag='dyne')
ForceUom.EN = ForceUom._CF_enumeration.addEnumeration(unicode_value='EN', tag='EN')
ForceUom.fN = ForceUom._CF_enumeration.addEnumeration(unicode_value='fN', tag='fN')
ForceUom.gf = ForceUom._CF_enumeration.addEnumeration(unicode_value='gf', tag='gf')
ForceUom.GN = ForceUom._CF_enumeration.addEnumeration(unicode_value='GN', tag='GN')
ForceUom.hN = ForceUom._CF_enumeration.addEnumeration(unicode_value='hN', tag='hN')
ForceUom.kdyne = ForceUom._CF_enumeration.addEnumeration(unicode_value='kdyne', tag='kdyne')
ForceUom.kgf = ForceUom._CF_enumeration.addEnumeration(unicode_value='kgf', tag='kgf')
ForceUom.klbf = ForceUom._CF_enumeration.addEnumeration(unicode_value='klbf', tag='klbf')
ForceUom.kN = ForceUom._CF_enumeration.addEnumeration(unicode_value='kN', tag='kN')
ForceUom.lbf = ForceUom._CF_enumeration.addEnumeration(unicode_value='lbf', tag='lbf')
ForceUom.Mgf = ForceUom._CF_enumeration.addEnumeration(unicode_value='Mgf', tag='Mgf')
ForceUom.mN = ForceUom._CF_enumeration.addEnumeration(unicode_value='mN', tag='mN')
ForceUom.MN = ForceUom._CF_enumeration.addEnumeration(unicode_value='MN', tag='MN')
ForceUom.N = ForceUom._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
ForceUom.nN = ForceUom._CF_enumeration.addEnumeration(unicode_value='nN', tag='nN')
ForceUom.ozf = ForceUom._CF_enumeration.addEnumeration(unicode_value='ozf', tag='ozf')
ForceUom.pdl = ForceUom._CF_enumeration.addEnumeration(unicode_value='pdl', tag='pdl')
ForceUom.pN = ForceUom._CF_enumeration.addEnumeration(unicode_value='pN', tag='pN')
ForceUom.TN = ForceUom._CF_enumeration.addEnumeration(unicode_value='TN', tag='TN')
ForceUom.tonfUK = ForceUom._CF_enumeration.addEnumeration(unicode_value='tonf[UK]', tag='tonfUK')
ForceUom.tonfUS = ForceUom._CF_enumeration.addEnumeration(unicode_value='tonf[US]', tag='tonfUS')
ForceUom.uN = ForceUom._CF_enumeration.addEnumeration(unicode_value='uN', tag='uN')
ForceUom._InitializeFacetMap(ForceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceUom', ForceUom)
_module_typeBindings.ForceUom = ForceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaUom
class VolumePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1970, 1)
    _Documentation = None
VolumePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerAreaUom, enum_prefix=None)
VolumePerAreaUom.n1E6_bblacre = VolumePerAreaUom._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/acre', tag='n1E6_bblacre')
VolumePerAreaUom.bblacre = VolumePerAreaUom._CF_enumeration.addEnumeration(unicode_value='bbl/acre', tag='bblacre')
VolumePerAreaUom.ft3ft2 = VolumePerAreaUom._CF_enumeration.addEnumeration(unicode_value='ft3/ft2', tag='ft3ft2')
VolumePerAreaUom.m3m2 = VolumePerAreaUom._CF_enumeration.addEnumeration(unicode_value='m3/m2', tag='m3m2')
VolumePerAreaUom._InitializeFacetMap(VolumePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerAreaUom', VolumePerAreaUom)
_module_typeBindings.VolumePerAreaUom = VolumePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceUom
class ReciprocalElectricPotentialDifferenceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalElectricPotentialDifferenceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2003, 1)
    _Documentation = None
ReciprocalElectricPotentialDifferenceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalElectricPotentialDifferenceUom, enum_prefix=None)
ReciprocalElectricPotentialDifferenceUom.n1uV = ReciprocalElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='1/uV', tag='n1uV')
ReciprocalElectricPotentialDifferenceUom.n1V = ReciprocalElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='1/V', tag='n1V')
ReciprocalElectricPotentialDifferenceUom._InitializeFacetMap(ReciprocalElectricPotentialDifferenceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalElectricPotentialDifferenceUom', ReciprocalElectricPotentialDifferenceUom)
_module_typeBindings.ReciprocalElectricPotentialDifferenceUom = ReciprocalElectricPotentialDifferenceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerLengthUom
class TimePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2017, 1)
    _Documentation = None
TimePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerLengthUom, enum_prefix=None)
TimePerLengthUom.n0_001_hft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.001 h/ft', tag='n0_001_hft')
TimePerLengthUom.hkm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='h/km', tag='hkm')
TimePerLengthUom.minft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='min/ft', tag='minft')
TimePerLengthUom.minm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='min/m', tag='minm')
TimePerLengthUom.mscm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ms/cm', tag='mscm')
TimePerLengthUom.msft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ms/ft', tag='msft')
TimePerLengthUom.msin = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ms/in', tag='msin')
TimePerLengthUom.msm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ms/m', tag='msm')
TimePerLengthUom.nsft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ns/ft', tag='nsft')
TimePerLengthUom.nsm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ns/m', tag='nsm')
TimePerLengthUom.scm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='s/cm', tag='scm')
TimePerLengthUom.sft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='s/ft', tag='sft')
TimePerLengthUom.sin = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='s/in', tag='sin')
TimePerLengthUom.sm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='s/m', tag='sm')
TimePerLengthUom.usft = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='us/ft', tag='usft')
TimePerLengthUom.usin = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='us/in', tag='usin')
TimePerLengthUom.usm = TimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='us/m', tag='usm')
TimePerLengthUom._InitializeFacetMap(TimePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerLengthUom', TimePerLengthUom)
_module_typeBindings.TimePerLengthUom = TimePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureUom
class VolumePerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2106, 1)
    _Documentation = None
VolumePerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerPressureUom, enum_prefix=None)
VolumePerPressureUom.bblpsi = VolumePerPressureUom._CF_enumeration.addEnumeration(unicode_value='bbl/psi', tag='bblpsi')
VolumePerPressureUom.m3kPa = VolumePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/kPa', tag='m3kPa')
VolumePerPressureUom.m3Pa = VolumePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/Pa', tag='m3Pa')
VolumePerPressureUom._InitializeFacetMap(VolumePerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerPressureUom', VolumePerPressureUom)
_module_typeBindings.VolumePerPressureUom = VolumePerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaUom
class ElectricChargePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2128, 1)
    _Documentation = None
ElectricChargePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerAreaUom, enum_prefix=None)
ElectricChargePerAreaUom.Ccm2 = ElectricChargePerAreaUom._CF_enumeration.addEnumeration(unicode_value='C/cm2', tag='Ccm2')
ElectricChargePerAreaUom.Cm2 = ElectricChargePerAreaUom._CF_enumeration.addEnumeration(unicode_value='C/m2', tag='Cm2')
ElectricChargePerAreaUom.Cmm2 = ElectricChargePerAreaUom._CF_enumeration.addEnumeration(unicode_value='C/mm2', tag='Cmm2')
ElectricChargePerAreaUom.mCm2 = ElectricChargePerAreaUom._CF_enumeration.addEnumeration(unicode_value='mC/m2', tag='mCm2')
ElectricChargePerAreaUom._InitializeFacetMap(ElectricChargePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerAreaUom', ElectricChargePerAreaUom)
_module_typeBindings.ElectricChargePerAreaUom = ElectricChargePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthUom
class MassPerTimePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2152, 1)
    _Documentation = None
MassPerTimePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimePerLengthUom, enum_prefix=None)
MassPerTimePerLengthUom.kgm_s = MassPerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='kg/(m.s)', tag='kgm_s')
MassPerTimePerLengthUom.lbmft_h = MassPerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/(ft.h)', tag='lbmft_h')
MassPerTimePerLengthUom.lbmft_s = MassPerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/(ft.s)', tag='lbmft_s')
MassPerTimePerLengthUom.Pa_s = MassPerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='Pa.s', tag='Pa_s')
MassPerTimePerLengthUom._InitializeFacetMap(MassPerTimePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerLengthUom', MassPerTimePerLengthUom)
_module_typeBindings.MassPerTimePerLengthUom = MassPerTimePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityUom
class MagneticFluxDensityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2176, 1)
    _Documentation = None
MagneticFluxDensityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxDensityUom, enum_prefix=None)
MagneticFluxDensityUom.cgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='cgauss', tag='cgauss')
MagneticFluxDensityUom.cT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='cT', tag='cT')
MagneticFluxDensityUom.dgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='dgauss', tag='dgauss')
MagneticFluxDensityUom.dT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='dT', tag='dT')
MagneticFluxDensityUom.Egauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='Egauss', tag='Egauss')
MagneticFluxDensityUom.ET = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='ET', tag='ET')
MagneticFluxDensityUom.fgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='fgauss', tag='fgauss')
MagneticFluxDensityUom.fT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='fT', tag='fT')
MagneticFluxDensityUom.gauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='gauss', tag='gauss')
MagneticFluxDensityUom.Ggauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='Ggauss', tag='Ggauss')
MagneticFluxDensityUom.GT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='GT', tag='GT')
MagneticFluxDensityUom.kgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='kgauss', tag='kgauss')
MagneticFluxDensityUom.kT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='kT', tag='kT')
MagneticFluxDensityUom.mgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='mgauss', tag='mgauss')
MagneticFluxDensityUom.Mgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='Mgauss', tag='Mgauss')
MagneticFluxDensityUom.mT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='mT', tag='mT')
MagneticFluxDensityUom.ngauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='ngauss', tag='ngauss')
MagneticFluxDensityUom.nT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='nT', tag='nT')
MagneticFluxDensityUom.pgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='pgauss', tag='pgauss')
MagneticFluxDensityUom.pT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='pT', tag='pT')
MagneticFluxDensityUom.T = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='T', tag='T')
MagneticFluxDensityUom.Tgauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='Tgauss', tag='Tgauss')
MagneticFluxDensityUom.TT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='TT', tag='TT')
MagneticFluxDensityUom.ugauss = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='ugauss', tag='ugauss')
MagneticFluxDensityUom.uT = MagneticFluxDensityUom._CF_enumeration.addEnumeration(unicode_value='uT', tag='uT')
MagneticFluxDensityUom._InitializeFacetMap(MagneticFluxDensityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityUom', MagneticFluxDensityUom)
_module_typeBindings.MagneticFluxDensityUom = MagneticFluxDensityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PlaneAngleUom
class PlaneAngleUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlaneAngleUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2311, 1)
    _Documentation = None
PlaneAngleUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PlaneAngleUom, enum_prefix=None)
PlaneAngleUom.n0_001_seca = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='0.001 seca', tag='n0_001_seca')
PlaneAngleUom.ccgr = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='ccgr', tag='ccgr')
PlaneAngleUom.cgr = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='cgr', tag='cgr')
PlaneAngleUom.dega = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='dega', tag='dega')
PlaneAngleUom.gon = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='gon', tag='gon')
PlaneAngleUom.krad = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='krad', tag='krad')
PlaneAngleUom.mila = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='mila', tag='mila')
PlaneAngleUom.mina = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='mina', tag='mina')
PlaneAngleUom.Mrad = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='Mrad', tag='Mrad')
PlaneAngleUom.mrad = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='mrad', tag='mrad')
PlaneAngleUom.rad = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='rad', tag='rad')
PlaneAngleUom.rev = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='rev', tag='rev')
PlaneAngleUom.seca = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='seca', tag='seca')
PlaneAngleUom.urad = PlaneAngleUom._CF_enumeration.addEnumeration(unicode_value='urad', tag='urad')
PlaneAngleUom._InitializeFacetMap(PlaneAngleUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PlaneAngleUom', PlaneAngleUom)
_module_typeBindings.PlaneAngleUom = PlaneAngleUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeUom
class SignalingEventPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignalingEventPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2385, 1)
    _Documentation = None
SignalingEventPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SignalingEventPerTimeUom, enum_prefix=None)
SignalingEventPerTimeUom.Bd = SignalingEventPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Bd', tag='Bd')
SignalingEventPerTimeUom._InitializeFacetMap(SignalingEventPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SignalingEventPerTimeUom', SignalingEventPerTimeUom)
_module_typeBindings.SignalingEventPerTimeUom = SignalingEventPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthUom
class EnergyPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2403, 1)
    _Documentation = None
EnergyPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerLengthUom, enum_prefix=None)
EnergyPerLengthUom.Jm = EnergyPerLengthUom._CF_enumeration.addEnumeration(unicode_value='J/m', tag='Jm')
EnergyPerLengthUom.MJm = EnergyPerLengthUom._CF_enumeration.addEnumeration(unicode_value='MJ/m', tag='MJm')
EnergyPerLengthUom._InitializeFacetMap(EnergyPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerLengthUom', EnergyPerLengthUom)
_module_typeBindings.EnergyPerLengthUom = EnergyPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentUom
class ElectricCurrentUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2417, 1)
    _Documentation = None
ElectricCurrentUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricCurrentUom, enum_prefix=None)
ElectricCurrentUom.A = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='A', tag='A')
ElectricCurrentUom.cA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='cA', tag='cA')
ElectricCurrentUom.dA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='dA', tag='dA')
ElectricCurrentUom.EA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='EA', tag='EA')
ElectricCurrentUom.fA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='fA', tag='fA')
ElectricCurrentUom.GA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='GA', tag='GA')
ElectricCurrentUom.kA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='kA', tag='kA')
ElectricCurrentUom.MA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='MA', tag='MA')
ElectricCurrentUom.mA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='mA', tag='mA')
ElectricCurrentUom.nA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='nA', tag='nA')
ElectricCurrentUom.pA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='pA', tag='pA')
ElectricCurrentUom.TA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='TA', tag='TA')
ElectricCurrentUom.uA = ElectricCurrentUom._CF_enumeration.addEnumeration(unicode_value='uA', tag='uA')
ElectricCurrentUom._InitializeFacetMap(ElectricCurrentUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentUom', ElectricCurrentUom)
_module_typeBindings.ElectricCurrentUom = ElectricCurrentUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressureSquaredUom
class PressureSquaredUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2486, 1)
    _Documentation = None
PressureSquaredUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureSquaredUom, enum_prefix=None)
PressureSquaredUom.bar2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='bar2', tag='bar2')
PressureSquaredUom.GPa2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='GPa2', tag='GPa2')
PressureSquaredUom.kPa2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='kPa2', tag='kPa2')
PressureSquaredUom.kpsi2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='kpsi2', tag='kpsi2')
PressureSquaredUom.Pa2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='Pa2', tag='Pa2')
PressureSquaredUom.psi2 = PressureSquaredUom._CF_enumeration.addEnumeration(unicode_value='psi2', tag='psi2')
PressureSquaredUom._InitializeFacetMap(PressureSquaredUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureSquaredUom', PressureSquaredUom)
_module_typeBindings.PressureSquaredUom = PressureSquaredUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationUom
class AngularAccelerationUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularAccelerationUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2526, 1)
    _Documentation = None
AngularAccelerationUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AngularAccelerationUom, enum_prefix=None)
AngularAccelerationUom.rads2 = AngularAccelerationUom._CF_enumeration.addEnumeration(unicode_value='rad/s2', tag='rads2')
AngularAccelerationUom.rpms = AngularAccelerationUom._CF_enumeration.addEnumeration(unicode_value='rpm/s', tag='rpms')
AngularAccelerationUom._InitializeFacetMap(AngularAccelerationUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AngularAccelerationUom', AngularAccelerationUom)
_module_typeBindings.AngularAccelerationUom = AngularAccelerationUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeUom
class ReciprocalMassTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2540, 1)
    _Documentation = None
ReciprocalMassTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalMassTimeUom, enum_prefix=None)
ReciprocalMassTimeUom.n1kg_s = ReciprocalMassTimeUom._CF_enumeration.addEnumeration(unicode_value='1/(kg.s)', tag='n1kg_s')
ReciprocalMassTimeUom.Bqkg = ReciprocalMassTimeUom._CF_enumeration.addEnumeration(unicode_value='Bq/kg', tag='Bqkg')
ReciprocalMassTimeUom.pCig = ReciprocalMassTimeUom._CF_enumeration.addEnumeration(unicode_value='pCi/g', tag='pCig')
ReciprocalMassTimeUom._InitializeFacetMap(ReciprocalMassTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassTimeUom', ReciprocalMassTimeUom)
_module_typeBindings.ReciprocalMassTimeUom = ReciprocalMassTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityUom
class ThermalDiffusivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDiffusivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2559, 1)
    _Documentation = None
ThermalDiffusivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalDiffusivityUom, enum_prefix=None)
ThermalDiffusivityUom.cm2s = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='cm2/s', tag='cm2s')
ThermalDiffusivityUom.ft2h = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='ft2/h', tag='ft2h')
ThermalDiffusivityUom.ft2s = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='ft2/s', tag='ft2s')
ThermalDiffusivityUom.in2s = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='in2/s', tag='in2s')
ThermalDiffusivityUom.m2h = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='m2/h', tag='m2h')
ThermalDiffusivityUom.m2s = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='m2/s', tag='m2s')
ThermalDiffusivityUom.mm2s = ThermalDiffusivityUom._CF_enumeration.addEnumeration(unicode_value='mm2/s', tag='mm2s')
ThermalDiffusivityUom._InitializeFacetMap(ThermalDiffusivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalDiffusivityUom', ThermalDiffusivityUom)
_module_typeBindings.ThermalDiffusivityUom = ThermalDiffusivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthUom
class VolumePerTimeLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2598, 1)
    _Documentation = None
VolumePerTimeLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimeLengthUom, enum_prefix=None)
VolumePerTimeLengthUom.n1000_bbl_ftd = VolumePerTimeLengthUom._CF_enumeration.addEnumeration(unicode_value='1000 bbl.ft/d', tag='n1000_bbl_ftd')
VolumePerTimeLengthUom.n1000_m4d = VolumePerTimeLengthUom._CF_enumeration.addEnumeration(unicode_value='1000 m4/d', tag='n1000_m4d')
VolumePerTimeLengthUom.m4s = VolumePerTimeLengthUom._CF_enumeration.addEnumeration(unicode_value='m4/s', tag='m4s')
VolumePerTimeLengthUom._InitializeFacetMap(VolumePerTimeLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeLengthUom', VolumePerTimeLengthUom)
_module_typeBindings.VolumePerTimeLengthUom = VolumePerTimeLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockUom
class PermeabilityRockUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityRockUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2617, 1)
    _Documentation = None
PermeabilityRockUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermeabilityRockUom, enum_prefix=None)
PermeabilityRockUom.D = PermeabilityRockUom._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
PermeabilityRockUom.DAPI = PermeabilityRockUom._CF_enumeration.addEnumeration(unicode_value='D[API]', tag='DAPI')
PermeabilityRockUom.mD = PermeabilityRockUom._CF_enumeration.addEnumeration(unicode_value='mD', tag='mD')
PermeabilityRockUom.TDAPI = PermeabilityRockUom._CF_enumeration.addEnumeration(unicode_value='TD[API]', tag='TDAPI')
PermeabilityRockUom._InitializeFacetMap(PermeabilityRockUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermeabilityRockUom', PermeabilityRockUom)
_module_typeBindings.PermeabilityRockUom = PermeabilityRockUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaUom
class SecondMomentOfAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecondMomentOfAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2644, 1)
    _Documentation = None
SecondMomentOfAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SecondMomentOfAreaUom, enum_prefix=None)
SecondMomentOfAreaUom.cm4 = SecondMomentOfAreaUom._CF_enumeration.addEnumeration(unicode_value='cm4', tag='cm4')
SecondMomentOfAreaUom.in4 = SecondMomentOfAreaUom._CF_enumeration.addEnumeration(unicode_value='in4', tag='in4')
SecondMomentOfAreaUom.m4 = SecondMomentOfAreaUom._CF_enumeration.addEnumeration(unicode_value='m4', tag='m4')
SecondMomentOfAreaUom._InitializeFacetMap(SecondMomentOfAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SecondMomentOfAreaUom', SecondMomentOfAreaUom)
_module_typeBindings.SecondMomentOfAreaUom = SecondMomentOfAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForceAreaUom
class ForceAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2666, 1)
    _Documentation = None
ForceAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceAreaUom, enum_prefix=None)
ForceAreaUom.dyne_cm2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='dyne.cm2', tag='dyne_cm2')
ForceAreaUom.kgf_m2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='kgf.m2', tag='kgf_m2')
ForceAreaUom.kN_m2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='kN.m2', tag='kN_m2')
ForceAreaUom.lbf_in2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='lbf.in2', tag='lbf_in2')
ForceAreaUom.mN_m2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='mN.m2', tag='mN_m2')
ForceAreaUom.N_m2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='N.m2', tag='N_m2')
ForceAreaUom.pdl_cm2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='pdl.cm2', tag='pdl_cm2')
ForceAreaUom.tonfUK_ft2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='tonf[UK].ft2', tag='tonfUK_ft2')
ForceAreaUom.tonfUS_ft2 = ForceAreaUom._CF_enumeration.addEnumeration(unicode_value='tonf[US].ft2', tag='tonfUS_ft2')
ForceAreaUom._InitializeFacetMap(ForceAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceAreaUom', ForceAreaUom)
_module_typeBindings.ForceAreaUom = ForceAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthUom
class ElectricFieldStrengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricFieldStrengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2715, 1)
    _Documentation = None
ElectricFieldStrengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricFieldStrengthUom, enum_prefix=None)
ElectricFieldStrengthUom.mVft = ElectricFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='mV/ft', tag='mVft')
ElectricFieldStrengthUom.mVm = ElectricFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='mV/m', tag='mVm')
ElectricFieldStrengthUom.uVft = ElectricFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='uV/ft', tag='uVft')
ElectricFieldStrengthUom.uVm = ElectricFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='uV/m', tag='uVm')
ElectricFieldStrengthUom.Vm = ElectricFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='V/m', tag='Vm')
ElectricFieldStrengthUom._InitializeFacetMap(ElectricFieldStrengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricFieldStrengthUom', ElectricFieldStrengthUom)
_module_typeBindings.ElectricFieldStrengthUom = ElectricFieldStrengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaUom
class AmountOfSubstancePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2753, 1)
    _Documentation = None
AmountOfSubstancePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerAreaUom, enum_prefix=None)
AmountOfSubstancePerAreaUom.molm2 = AmountOfSubstancePerAreaUom._CF_enumeration.addEnumeration(unicode_value='mol/m2', tag='molm2')
AmountOfSubstancePerAreaUom._InitializeFacetMap(AmountOfSubstancePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAreaUom', AmountOfSubstancePerAreaUom)
_module_typeBindings.AmountOfSubstancePerAreaUom = AmountOfSubstancePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimeUom
class TimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2768, 1)
    _Documentation = None
TimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimeUom, enum_prefix=None)
TimeUom.n12_ms = TimeUom._CF_enumeration.addEnumeration(unicode_value='1/2 ms', tag='n12_ms')
TimeUom.n100_kat = TimeUom._CF_enumeration.addEnumeration(unicode_value='100 ka[t]', tag='n100_kat')
TimeUom.a = TimeUom._CF_enumeration.addEnumeration(unicode_value='a', tag='a')
TimeUom.at = TimeUom._CF_enumeration.addEnumeration(unicode_value='a[t]', tag='at')
TimeUom.ca = TimeUom._CF_enumeration.addEnumeration(unicode_value='ca', tag='ca')
TimeUom.cs = TimeUom._CF_enumeration.addEnumeration(unicode_value='cs', tag='cs')
TimeUom.d = TimeUom._CF_enumeration.addEnumeration(unicode_value='d', tag='d')
TimeUom.ds = TimeUom._CF_enumeration.addEnumeration(unicode_value='ds', tag='ds')
TimeUom.Eat = TimeUom._CF_enumeration.addEnumeration(unicode_value='Ea[t]', tag='Eat')
TimeUom.fa = TimeUom._CF_enumeration.addEnumeration(unicode_value='fa', tag='fa')
TimeUom.Gat = TimeUom._CF_enumeration.addEnumeration(unicode_value='Ga[t]', tag='Gat')
TimeUom.h = TimeUom._CF_enumeration.addEnumeration(unicode_value='h', tag='h')
TimeUom.hs = TimeUom._CF_enumeration.addEnumeration(unicode_value='hs', tag='hs')
TimeUom.kat = TimeUom._CF_enumeration.addEnumeration(unicode_value='ka[t]', tag='kat')
TimeUom.Mat = TimeUom._CF_enumeration.addEnumeration(unicode_value='Ma[t]', tag='Mat')
TimeUom.min = TimeUom._CF_enumeration.addEnumeration(unicode_value='min', tag='min')
TimeUom.ms = TimeUom._CF_enumeration.addEnumeration(unicode_value='ms', tag='ms')
TimeUom.na = TimeUom._CF_enumeration.addEnumeration(unicode_value='na', tag='na')
TimeUom.ns = TimeUom._CF_enumeration.addEnumeration(unicode_value='ns', tag='ns')
TimeUom.ps = TimeUom._CF_enumeration.addEnumeration(unicode_value='ps', tag='ps')
TimeUom.s = TimeUom._CF_enumeration.addEnumeration(unicode_value='s', tag='s')
TimeUom.Tat = TimeUom._CF_enumeration.addEnumeration(unicode_value='Ta[t]', tag='Tat')
TimeUom.us = TimeUom._CF_enumeration.addEnumeration(unicode_value='us', tag='us')
TimeUom.wk = TimeUom._CF_enumeration.addEnumeration(unicode_value='wk', tag='wk')
TimeUom._InitializeFacetMap(TimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimeUom', TimeUom)
_module_typeBindings.TimeUom = TimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityUom
class ThermalConductivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2898, 1)
    _Documentation = None
ThermalConductivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalConductivityUom, enum_prefix=None)
ThermalConductivityUom.BtuITh_ft_deltaF = ThermalConductivityUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft.deltaF)', tag='BtuITh_ft_deltaF')
ThermalConductivityUom.calthh_cm_deltaC = ThermalConductivityUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm.deltaC)', tag='calthh_cm_deltaC')
ThermalConductivityUom.calths_cm_deltaC = ThermalConductivityUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm.deltaC)', tag='calths_cm_deltaC')
ThermalConductivityUom.kcalthh_m_deltaC = ThermalConductivityUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(h.m.deltaC)', tag='kcalthh_m_deltaC')
ThermalConductivityUom.Wm_deltaK = ThermalConductivityUom._CF_enumeration.addEnumeration(unicode_value='W/(m.deltaK)', tag='Wm_deltaK')
ThermalConductivityUom._InitializeFacetMap(ThermalConductivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalConductivityUom', ThermalConductivityUom)
_module_typeBindings.ThermalConductivityUom = ThermalConductivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceUom
class AreaPerAmountOfSubstanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAmountOfSubstanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2936, 1)
    _Documentation = None
AreaPerAmountOfSubstanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerAmountOfSubstanceUom, enum_prefix=None)
AreaPerAmountOfSubstanceUom.m2mol = AreaPerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='m2/mol', tag='m2mol')
AreaPerAmountOfSubstanceUom._InitializeFacetMap(AreaPerAmountOfSubstanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerAmountOfSubstanceUom', AreaPerAmountOfSubstanceUom)
_module_typeBindings.AreaPerAmountOfSubstanceUom = AreaPerAmountOfSubstanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthUom
class LogarithmicPowerRatioPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2951, 1)
    _Documentation = None
LogarithmicPowerRatioPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LogarithmicPowerRatioPerLengthUom, enum_prefix=None)
LogarithmicPowerRatioPerLengthUom.Bm = LogarithmicPowerRatioPerLengthUom._CF_enumeration.addEnumeration(unicode_value='B/m', tag='Bm')
LogarithmicPowerRatioPerLengthUom.dBft = LogarithmicPowerRatioPerLengthUom._CF_enumeration.addEnumeration(unicode_value='dB/ft', tag='dBft')
LogarithmicPowerRatioPerLengthUom.dBkm = LogarithmicPowerRatioPerLengthUom._CF_enumeration.addEnumeration(unicode_value='dB/km', tag='dBkm')
LogarithmicPowerRatioPerLengthUom.dBm = LogarithmicPowerRatioPerLengthUom._CF_enumeration.addEnumeration(unicode_value='dB/m', tag='dBm')
LogarithmicPowerRatioPerLengthUom._InitializeFacetMap(LogarithmicPowerRatioPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioPerLengthUom', LogarithmicPowerRatioPerLengthUom)
_module_typeBindings.LogarithmicPowerRatioPerLengthUom = LogarithmicPowerRatioPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthUom
class ReciprocalLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2984, 1)
    _Documentation = None
ReciprocalLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalLengthUom, enum_prefix=None)
ReciprocalLengthUom.n1angstrom = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/angstrom', tag='n1angstrom')
ReciprocalLengthUom.n1cm = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/cm', tag='n1cm')
ReciprocalLengthUom.n1ft = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/ft', tag='n1ft')
ReciprocalLengthUom.n1in = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/in', tag='n1in')
ReciprocalLengthUom.n1m = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/m', tag='n1m')
ReciprocalLengthUom.n1mi = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/mi', tag='n1mi')
ReciprocalLengthUom.n1mm = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/mm', tag='n1mm')
ReciprocalLengthUom.n1nm = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/nm', tag='n1nm')
ReciprocalLengthUom.n1yd = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1/yd', tag='n1yd')
ReciprocalLengthUom.n1E_9_1ft = ReciprocalLengthUom._CF_enumeration.addEnumeration(unicode_value='1E-9 1/ft', tag='n1E_9_1ft')
ReciprocalLengthUom._InitializeFacetMap(ReciprocalLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalLengthUom', ReciprocalLengthUom)
_module_typeBindings.ReciprocalLengthUom = ReciprocalLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LuminanceUom
class LuminanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3038, 1)
    _Documentation = None
LuminanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminanceUom, enum_prefix=None)
LuminanceUom.cdm2 = LuminanceUom._CF_enumeration.addEnumeration(unicode_value='cd/m2', tag='cdm2')
LuminanceUom._InitializeFacetMap(LuminanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminanceUom', LuminanceUom)
_module_typeBindings.LuminanceUom = LuminanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeUom
class VolumePerTimePerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3053, 1)
    _Documentation = None
VolumePerTimePerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerTimeUom, enum_prefix=None)
VolumePerTimePerTimeUom.bbld2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bbl/d2', tag='bbld2')
VolumePerTimePerTimeUom.bblh2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bbl/h2', tag='bblh2')
VolumePerTimePerTimeUom.dm3s2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='dm3/s2', tag='dm3s2')
VolumePerTimePerTimeUom.ft3d2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/d2', tag='ft3d2')
VolumePerTimePerTimeUom.ft3h2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/h2', tag='ft3h2')
VolumePerTimePerTimeUom.ft3min2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/min2', tag='ft3min2')
VolumePerTimePerTimeUom.ft3s2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/s2', tag='ft3s2')
VolumePerTimePerTimeUom.galUKh2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/h2', tag='galUKh2')
VolumePerTimePerTimeUom.galUKmin2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/min2', tag='galUKmin2')
VolumePerTimePerTimeUom.galUSh2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/h2', tag='galUSh2')
VolumePerTimePerTimeUom.galUSmin2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/min2', tag='galUSmin2')
VolumePerTimePerTimeUom.Ls2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='L/s2', tag='Ls2')
VolumePerTimePerTimeUom.m3d2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/d2', tag='m3d2')
VolumePerTimePerTimeUom.m3s2 = VolumePerTimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/s2', tag='m3s2')
VolumePerTimePerTimeUom._InitializeFacetMap(VolumePerTimePerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerTimeUom', VolumePerTimePerTimeUom)
_module_typeBindings.VolumePerTimePerTimeUom = VolumePerTimePerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityUom
class MolarHeatCapacityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarHeatCapacityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3130, 1)
    _Documentation = None
MolarHeatCapacityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarHeatCapacityUom, enum_prefix=None)
MolarHeatCapacityUom.BtuITlbmol_deltaF = MolarHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbmol.deltaF)', tag='BtuITlbmol_deltaF')
MolarHeatCapacityUom.calthmol_deltaC = MolarHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(mol.deltaC)', tag='calthmol_deltaC')
MolarHeatCapacityUom.Jmol_deltaK = MolarHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='J/(mol.deltaK)', tag='Jmol_deltaK')
MolarHeatCapacityUom.kJkmol_deltaK = MolarHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='kJ/(kmol.deltaK)', tag='kJkmol_deltaK')
MolarHeatCapacityUom._InitializeFacetMap(MolarHeatCapacityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarHeatCapacityUom', MolarHeatCapacityUom)
_module_typeBindings.MolarHeatCapacityUom = MolarHeatCapacityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateUom
class VolumeFlowRatePerVolumeFlowRateUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeFlowRatePerVolumeFlowRateUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3154, 1)
    _Documentation = None
VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumeFlowRatePerVolumeFlowRateUom, enum_prefix=None)
VolumeFlowRatePerVolumeFlowRateUom.emptyString = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
VolumeFlowRatePerVolumeFlowRateUom.bbldbbld = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='(bbl/d)/(bbl/d)', tag='bbldbbld')
VolumeFlowRatePerVolumeFlowRateUom.m3dm3d = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='(m3/d)/(m3/d)', tag='m3dm3d')
VolumeFlowRatePerVolumeFlowRateUom.m3sm3s = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='(m3/s)/(m3/s)', tag='m3sm3s')
VolumeFlowRatePerVolumeFlowRateUom.n1E6_ft3dbbld = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='1E6 (ft3/d)/(bbl/d)', tag='n1E6_ft3dbbld')
VolumeFlowRatePerVolumeFlowRateUom.Euc = VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
VolumeFlowRatePerVolumeFlowRateUom._InitializeFacetMap(VolumeFlowRatePerVolumeFlowRateUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumeFlowRatePerVolumeFlowRateUom', VolumeFlowRatePerVolumeFlowRateUom)
_module_typeBindings.VolumeFlowRatePerVolumeFlowRateUom = VolumeFlowRatePerVolumeFlowRateUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalUom
class FrequencyIntervalUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyIntervalUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3188, 1)
    _Documentation = None
FrequencyIntervalUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FrequencyIntervalUom, enum_prefix=None)
FrequencyIntervalUom.O = FrequencyIntervalUom._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
FrequencyIntervalUom._InitializeFacetMap(FrequencyIntervalUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FrequencyIntervalUom', FrequencyIntervalUom)
_module_typeBindings.FrequencyIntervalUom = FrequencyIntervalUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalUom
class TemperatureIntervalUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3197, 1)
    _Documentation = None
TemperatureIntervalUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalUom, enum_prefix=None)
TemperatureIntervalUom.deltaC = TemperatureIntervalUom._CF_enumeration.addEnumeration(unicode_value='deltaC', tag='deltaC')
TemperatureIntervalUom.deltaF = TemperatureIntervalUom._CF_enumeration.addEnumeration(unicode_value='deltaF', tag='deltaF')
TemperatureIntervalUom.deltaK = TemperatureIntervalUom._CF_enumeration.addEnumeration(unicode_value='deltaK', tag='deltaK')
TemperatureIntervalUom.deltaR = TemperatureIntervalUom._CF_enumeration.addEnumeration(unicode_value='deltaR', tag='deltaR')
TemperatureIntervalUom._InitializeFacetMap(TemperatureIntervalUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalUom', TemperatureIntervalUom)
_module_typeBindings.TemperatureIntervalUom = TemperatureIntervalUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityUom
class RadiantIntensityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadiantIntensityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3221, 1)
    _Documentation = None
RadiantIntensityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RadiantIntensityUom, enum_prefix=None)
RadiantIntensityUom.Wsr = RadiantIntensityUom._CF_enumeration.addEnumeration(unicode_value='W/sr', tag='Wsr')
RadiantIntensityUom._InitializeFacetMap(RadiantIntensityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RadiantIntensityUom', RadiantIntensityUom)
_module_typeBindings.RadiantIntensityUom = RadiantIntensityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthUom
class PermeabilityLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3236, 1)
    _Documentation = None
PermeabilityLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermeabilityLengthUom, enum_prefix=None)
PermeabilityLengthUom.D_ft = PermeabilityLengthUom._CF_enumeration.addEnumeration(unicode_value='D.ft', tag='D_ft')
PermeabilityLengthUom.D_m = PermeabilityLengthUom._CF_enumeration.addEnumeration(unicode_value='D.m', tag='D_m')
PermeabilityLengthUom.mD_ft = PermeabilityLengthUom._CF_enumeration.addEnumeration(unicode_value='mD.ft', tag='mD_ft')
PermeabilityLengthUom.mD_m = PermeabilityLengthUom._CF_enumeration.addEnumeration(unicode_value='mD.m', tag='mD_m')
PermeabilityLengthUom.TDAPI_m = PermeabilityLengthUom._CF_enumeration.addEnumeration(unicode_value='TD[API].m', tag='TDAPI_m')
PermeabilityLengthUom._InitializeFacetMap(PermeabilityLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermeabilityLengthUom', PermeabilityLengthUom)
_module_typeBindings.PermeabilityLengthUom = PermeabilityLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedUom
class DataTransferSpeedUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataTransferSpeedUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3265, 1)
    _Documentation = None
DataTransferSpeedUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DataTransferSpeedUom, enum_prefix=None)
DataTransferSpeedUom.bits = DataTransferSpeedUom._CF_enumeration.addEnumeration(unicode_value='bit/s', tag='bits')
DataTransferSpeedUom.bytes = DataTransferSpeedUom._CF_enumeration.addEnumeration(unicode_value='byte/s', tag='bytes')
DataTransferSpeedUom._InitializeFacetMap(DataTransferSpeedUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DataTransferSpeedUom', DataTransferSpeedUom)
_module_typeBindings.DataTransferSpeedUom = DataTransferSpeedUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}InductanceUom
class InductanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InductanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3288, 1)
    _Documentation = None
InductanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=InductanceUom, enum_prefix=None)
InductanceUom.cH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='cH', tag='cH')
InductanceUom.dH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='dH', tag='dH')
InductanceUom.EH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='EH', tag='EH')
InductanceUom.fH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='fH', tag='fH')
InductanceUom.GH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='GH', tag='GH')
InductanceUom.H = InductanceUom._CF_enumeration.addEnumeration(unicode_value='H', tag='H')
InductanceUom.kH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='kH', tag='kH')
InductanceUom.MH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='MH', tag='MH')
InductanceUom.mH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='mH', tag='mH')
InductanceUom.nH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='nH', tag='nH')
InductanceUom.TH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='TH', tag='TH')
InductanceUom.uH = InductanceUom._CF_enumeration.addEnumeration(unicode_value='uH', tag='uH')
InductanceUom._InitializeFacetMap(InductanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'InductanceUom', InductanceUom)
_module_typeBindings.InductanceUom = InductanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityUom
class KinematicViscosityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KinematicViscosityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3352, 1)
    _Documentation = None
KinematicViscosityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=KinematicViscosityUom, enum_prefix=None)
KinematicViscosityUom.cm2s = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='cm2/s', tag='cm2s')
KinematicViscosityUom.cSt = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='cSt', tag='cSt')
KinematicViscosityUom.ft2h = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='ft2/h', tag='ft2h')
KinematicViscosityUom.ft2s = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='ft2/s', tag='ft2s')
KinematicViscosityUom.in2s = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='in2/s', tag='in2s')
KinematicViscosityUom.m2h = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='m2/h', tag='m2h')
KinematicViscosityUom.m2s = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='m2/s', tag='m2s')
KinematicViscosityUom.mm2s = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='mm2/s', tag='mm2s')
KinematicViscosityUom.Pa_s_m3kg = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='Pa.s.m3/kg', tag='Pa_s_m3kg')
KinematicViscosityUom.St = KinematicViscosityUom._CF_enumeration.addEnumeration(unicode_value='St', tag='St')
KinematicViscosityUom._InitializeFacetMap(KinematicViscosityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'KinematicViscosityUom', KinematicViscosityUom)
_module_typeBindings.KinematicViscosityUom = KinematicViscosityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthUom
class VolumePerTimePerPressureLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3409, 1)
    _Documentation = None
VolumePerTimePerPressureLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerPressureLengthUom, enum_prefix=None)
VolumePerTimePerPressureLengthUom.bblft_psi_d = VolumePerTimePerPressureLengthUom._CF_enumeration.addEnumeration(unicode_value='bbl/(ft.psi.d)', tag='bblft_psi_d')
VolumePerTimePerPressureLengthUom.ft3ft_psi_d = VolumePerTimePerPressureLengthUom._CF_enumeration.addEnumeration(unicode_value='ft3/(ft.psi.d)', tag='ft3ft_psi_d')
VolumePerTimePerPressureLengthUom.m2kPa_d = VolumePerTimePerPressureLengthUom._CF_enumeration.addEnumeration(unicode_value='m2/(kPa.d)', tag='m2kPa_d')
VolumePerTimePerPressureLengthUom.m2Pa_s = VolumePerTimePerPressureLengthUom._CF_enumeration.addEnumeration(unicode_value='m2/(Pa.s)', tag='m2Pa_s')
VolumePerTimePerPressureLengthUom._InitializeFacetMap(VolumePerTimePerPressureLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureLengthUom', VolumePerTimePerPressureLengthUom)
_module_typeBindings.VolumePerTimePerPressureLengthUom = VolumePerTimePerPressureLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceUom
class ReciprocalForceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalForceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3433, 1)
    _Documentation = None
ReciprocalForceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalForceUom, enum_prefix=None)
ReciprocalForceUom.n1lbf = ReciprocalForceUom._CF_enumeration.addEnumeration(unicode_value='1/lbf', tag='n1lbf')
ReciprocalForceUom.n1N = ReciprocalForceUom._CF_enumeration.addEnumeration(unicode_value='1/N', tag='n1N')
ReciprocalForceUom._InitializeFacetMap(ReciprocalForceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalForceUom', ReciprocalForceUom)
_module_typeBindings.ReciprocalForceUom = ReciprocalForceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaUom
class ReciprocalAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3453, 1)
    _Documentation = None
ReciprocalAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalAreaUom, enum_prefix=None)
ReciprocalAreaUom.n1ft2 = ReciprocalAreaUom._CF_enumeration.addEnumeration(unicode_value='1/ft2', tag='n1ft2')
ReciprocalAreaUom.n1km2 = ReciprocalAreaUom._CF_enumeration.addEnumeration(unicode_value='1/km2', tag='n1km2')
ReciprocalAreaUom.n1m2 = ReciprocalAreaUom._CF_enumeration.addEnumeration(unicode_value='1/m2', tag='n1m2')
ReciprocalAreaUom.n1mi2 = ReciprocalAreaUom._CF_enumeration.addEnumeration(unicode_value='1/mi2', tag='n1mi2')
ReciprocalAreaUom._InitializeFacetMap(ReciprocalAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalAreaUom', ReciprocalAreaUom)
_module_typeBindings.ReciprocalAreaUom = ReciprocalAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeUom
class PressurePerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3483, 1)
    _Documentation = None
PressurePerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerTimeUom, enum_prefix=None)
PressurePerTimeUom.atmh = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='atm/h', tag='atmh')
PressurePerTimeUom.barh = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bar/h', tag='barh')
PressurePerTimeUom.kPah = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='kPa/h', tag='kPah')
PressurePerTimeUom.kPamin = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='kPa/min', tag='kPamin')
PressurePerTimeUom.MPah = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='MPa/h', tag='MPah')
PressurePerTimeUom.Pah = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='Pa/h', tag='Pah')
PressurePerTimeUom.Pas = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='Pa/s', tag='Pas')
PressurePerTimeUom.psih = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='psi/h', tag='psih')
PressurePerTimeUom.psimin = PressurePerTimeUom._CF_enumeration.addEnumeration(unicode_value='psi/min', tag='psimin')
PressurePerTimeUom._InitializeFacetMap(PressurePerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerTimeUom', PressurePerTimeUom)
_module_typeBindings.PressurePerTimeUom = PressurePerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargeUom
class ElectricChargeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3544, 1)
    _Documentation = None
ElectricChargeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargeUom, enum_prefix=None)
ElectricChargeUom.A_h = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='A.h', tag='A_h')
ElectricChargeUom.A_s = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='A.s', tag='A_s')
ElectricChargeUom.C = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
ElectricChargeUom.cC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='cC', tag='cC')
ElectricChargeUom.dC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='dC', tag='dC')
ElectricChargeUom.EC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='EC', tag='EC')
ElectricChargeUom.fC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='fC', tag='fC')
ElectricChargeUom.GC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='GC', tag='GC')
ElectricChargeUom.kC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='kC', tag='kC')
ElectricChargeUom.MC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='MC', tag='MC')
ElectricChargeUom.mC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='mC', tag='mC')
ElectricChargeUom.nC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='nC', tag='nC')
ElectricChargeUom.pC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='pC', tag='pC')
ElectricChargeUom.TC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='TC', tag='TC')
ElectricChargeUom.uC = ElectricChargeUom._CF_enumeration.addEnumeration(unicode_value='uC', tag='uC')
ElectricChargeUom._InitializeFacetMap(ElectricChargeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargeUom', ElectricChargeUom)
_module_typeBindings.ElectricChargeUom = ElectricChargeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyUom
class LuminousEfficacyUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousEfficacyUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3626, 1)
    _Documentation = None
LuminousEfficacyUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousEfficacyUom, enum_prefix=None)
LuminousEfficacyUom.lmW = LuminousEfficacyUom._CF_enumeration.addEnumeration(unicode_value='lm/W', tag='lmW')
LuminousEfficacyUom._InitializeFacetMap(LuminousEfficacyUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousEfficacyUom', LuminousEfficacyUom)
_module_typeBindings.LuminousEfficacyUom = LuminousEfficacyUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PowerUom
class PowerUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3644, 1)
    _Documentation = None
PowerUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerUom, enum_prefix=None)
PowerUom.cW = PowerUom._CF_enumeration.addEnumeration(unicode_value='cW', tag='cW')
PowerUom.dW = PowerUom._CF_enumeration.addEnumeration(unicode_value='dW', tag='dW')
PowerUom.EW = PowerUom._CF_enumeration.addEnumeration(unicode_value='EW', tag='EW')
PowerUom.fW = PowerUom._CF_enumeration.addEnumeration(unicode_value='fW', tag='fW')
PowerUom.GW = PowerUom._CF_enumeration.addEnumeration(unicode_value='GW', tag='GW')
PowerUom.hp = PowerUom._CF_enumeration.addEnumeration(unicode_value='hp', tag='hp')
PowerUom.hpelec = PowerUom._CF_enumeration.addEnumeration(unicode_value='hp[elec]', tag='hpelec')
PowerUom.hphyd = PowerUom._CF_enumeration.addEnumeration(unicode_value='hp[hyd]', tag='hphyd')
PowerUom.hpmetric = PowerUom._CF_enumeration.addEnumeration(unicode_value='hp[metric]', tag='hpmetric')
PowerUom.kW = PowerUom._CF_enumeration.addEnumeration(unicode_value='kW', tag='kW')
PowerUom.MW = PowerUom._CF_enumeration.addEnumeration(unicode_value='MW', tag='MW')
PowerUom.mW = PowerUom._CF_enumeration.addEnumeration(unicode_value='mW', tag='mW')
PowerUom.nW = PowerUom._CF_enumeration.addEnumeration(unicode_value='nW', tag='nW')
PowerUom.pW = PowerUom._CF_enumeration.addEnumeration(unicode_value='pW', tag='pW')
PowerUom.tonRefrig = PowerUom._CF_enumeration.addEnumeration(unicode_value='tonRefrig', tag='tonRefrig')
PowerUom.TW = PowerUom._CF_enumeration.addEnumeration(unicode_value='TW', tag='TW')
PowerUom.uW = PowerUom._CF_enumeration.addEnumeration(unicode_value='uW', tag='uW')
PowerUom.W = PowerUom._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
PowerUom._InitializeFacetMap(PowerUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerUom', PowerUom)
_module_typeBindings.PowerUom = PowerUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeUom
class PressurePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3738, 1)
    _Documentation = None
PressurePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerVolumeUom, enum_prefix=None)
PressurePerVolumeUom.Pam3 = PressurePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Pa/m3', tag='Pam3')
PressurePerVolumeUom.psi2_dcP_ft3 = PressurePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='psi2.d/(cP.ft3)', tag='psi2_dcP_ft3')
PressurePerVolumeUom._InitializeFacetMap(PressurePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerVolumeUom', PressurePerVolumeUom)
_module_typeBindings.PressurePerVolumeUom = PressurePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityUom
class ActivityOfRadioactivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActivityOfRadioactivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3752, 1)
    _Documentation = None
ActivityOfRadioactivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ActivityOfRadioactivityUom, enum_prefix=None)
ActivityOfRadioactivityUom.Bq = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='Bq', tag='Bq')
ActivityOfRadioactivityUom.Ci = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='Ci', tag='Ci')
ActivityOfRadioactivityUom.GBq = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='GBq', tag='GBq')
ActivityOfRadioactivityUom.MBq = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='MBq', tag='MBq')
ActivityOfRadioactivityUom.mCi = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='mCi', tag='mCi')
ActivityOfRadioactivityUom.nCi = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='nCi', tag='nCi')
ActivityOfRadioactivityUom.pCi = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='pCi', tag='pCi')
ActivityOfRadioactivityUom.TBq = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='TBq', tag='TBq')
ActivityOfRadioactivityUom.uCi = ActivityOfRadioactivityUom._CF_enumeration.addEnumeration(unicode_value='uCi', tag='uCi')
ActivityOfRadioactivityUom._InitializeFacetMap(ActivityOfRadioactivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ActivityOfRadioactivityUom', ActivityOfRadioactivityUom)
_module_typeBindings.ActivityOfRadioactivityUom = ActivityOfRadioactivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceUom
class ElectricPotentialDifferenceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricPotentialDifferenceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3804, 1)
    _Documentation = None
ElectricPotentialDifferenceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricPotentialDifferenceUom, enum_prefix=None)
ElectricPotentialDifferenceUom.cV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='cV', tag='cV')
ElectricPotentialDifferenceUom.dV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='dV', tag='dV')
ElectricPotentialDifferenceUom.fV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='fV', tag='fV')
ElectricPotentialDifferenceUom.GV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='GV', tag='GV')
ElectricPotentialDifferenceUom.kV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='kV', tag='kV')
ElectricPotentialDifferenceUom.mV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='mV', tag='mV')
ElectricPotentialDifferenceUom.MV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='MV', tag='MV')
ElectricPotentialDifferenceUom.nV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='nV', tag='nV')
ElectricPotentialDifferenceUom.pV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='pV', tag='pV')
ElectricPotentialDifferenceUom.TV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='TV', tag='TV')
ElectricPotentialDifferenceUom.uV = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='uV', tag='uV')
ElectricPotentialDifferenceUom.V = ElectricPotentialDifferenceUom._CF_enumeration.addEnumeration(unicode_value='V', tag='V')
ElectricPotentialDifferenceUom._InitializeFacetMap(ElectricPotentialDifferenceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricPotentialDifferenceUom', ElectricPotentialDifferenceUom)
_module_typeBindings.ElectricPotentialDifferenceUom = ElectricPotentialDifferenceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureUom
class LengthPerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3868, 1)
    _Documentation = None
LengthPerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerPressureUom, enum_prefix=None)
LengthPerPressureUom.ftpsi = LengthPerPressureUom._CF_enumeration.addEnumeration(unicode_value='ft/psi', tag='ftpsi')
LengthPerPressureUom.mkPa = LengthPerPressureUom._CF_enumeration.addEnumeration(unicode_value='m/kPa', tag='mkPa')
LengthPerPressureUom.mPa = LengthPerPressureUom._CF_enumeration.addEnumeration(unicode_value='m/Pa', tag='mPa')
LengthPerPressureUom._InitializeFacetMap(LengthPerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerPressureUom', LengthPerPressureUom)
_module_typeBindings.LengthPerPressureUom = LengthPerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerCountUom
class AreaPerCountUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerCountUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3890, 1)
    _Documentation = None
AreaPerCountUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerCountUom, enum_prefix=None)
AreaPerCountUom.belectron = AreaPerCountUom._CF_enumeration.addEnumeration(unicode_value='b/electron', tag='belectron')
AreaPerCountUom._InitializeFacetMap(AreaPerCountUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerCountUom', AreaPerCountUom)
_module_typeBindings.AreaPerCountUom = AreaPerCountUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialUom
class MagneticVectorPotentialUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticVectorPotentialUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3898, 1)
    _Documentation = None
MagneticVectorPotentialUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticVectorPotentialUom, enum_prefix=None)
MagneticVectorPotentialUom.Wbm = MagneticVectorPotentialUom._CF_enumeration.addEnumeration(unicode_value='Wb/m', tag='Wbm')
MagneticVectorPotentialUom.Wbmm = MagneticVectorPotentialUom._CF_enumeration.addEnumeration(unicode_value='Wb/mm', tag='Wbmm')
MagneticVectorPotentialUom._InitializeFacetMap(MagneticVectorPotentialUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticVectorPotentialUom', MagneticVectorPotentialUom)
_module_typeBindings.MagneticVectorPotentialUom = MagneticVectorPotentialUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthUom
class MagneticFieldStrengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFieldStrengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3915, 1)
    _Documentation = None
MagneticFieldStrengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFieldStrengthUom, enum_prefix=None)
MagneticFieldStrengthUom.Am = MagneticFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='A/m', tag='Am')
MagneticFieldStrengthUom.Amm = MagneticFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='A/mm', tag='Amm')
MagneticFieldStrengthUom.Oe = MagneticFieldStrengthUom._CF_enumeration.addEnumeration(unicode_value='Oe', tag='Oe')
MagneticFieldStrengthUom._InitializeFacetMap(MagneticFieldStrengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFieldStrengthUom', MagneticFieldStrengthUom)
_module_typeBindings.MagneticFieldStrengthUom = MagneticFieldStrengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeUom
class VolumePerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3943, 1)
    _Documentation = None
VolumePerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimeUom, enum_prefix=None)
VolumePerTimeUom.n130_cm3min = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1/30 cm3/min', tag='n130_cm3min')
VolumePerTimeUom.n1000_bbld = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 bbl/d', tag='n1000_bbld')
VolumePerTimeUom.n1000_ft3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 ft3/d', tag='n1000_ft3d')
VolumePerTimeUom.n1000_m3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 m3/d', tag='n1000_m3d')
VolumePerTimeUom.n1000_m3h = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1000 m3/h', tag='n1000_m3h')
VolumePerTimeUom.n1E6_bbld = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/d', tag='n1E6_bbld')
VolumePerTimeUom.n1E6_ft3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/d', tag='n1E6_ft3d')
VolumePerTimeUom.n1E6_m3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='1E6 m3/d', tag='n1E6_m3d')
VolumePerTimeUom.bbld = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bbl/d', tag='bbld')
VolumePerTimeUom.bblh = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bbl/h', tag='bblh')
VolumePerTimeUom.bblmin = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='bbl/min', tag='bblmin')
VolumePerTimeUom.cm3h = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm3/h', tag='cm3h')
VolumePerTimeUom.cm3min = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm3/min', tag='cm3min')
VolumePerTimeUom.cm3s = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm3/s', tag='cm3s')
VolumePerTimeUom.dm3s = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='dm3/s', tag='dm3s')
VolumePerTimeUom.ft3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/d', tag='ft3d')
VolumePerTimeUom.ft3h = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/h', tag='ft3h')
VolumePerTimeUom.ft3min = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/min', tag='ft3min')
VolumePerTimeUom.ft3s = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft3/s', tag='ft3s')
VolumePerTimeUom.galUKd = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/d', tag='galUKd')
VolumePerTimeUom.galUKh = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/h', tag='galUKh')
VolumePerTimeUom.galUKmin = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/min', tag='galUKmin')
VolumePerTimeUom.galUSd = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/d', tag='galUSd')
VolumePerTimeUom.galUSh = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/h', tag='galUSh')
VolumePerTimeUom.galUSmin = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/min', tag='galUSmin')
VolumePerTimeUom.Lh = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='L/h', tag='Lh')
VolumePerTimeUom.Lmin = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='L/min', tag='Lmin')
VolumePerTimeUom.Ls = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='L/s', tag='Ls')
VolumePerTimeUom.m3d = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/d', tag='m3d')
VolumePerTimeUom.m3h = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/h', tag='m3h')
VolumePerTimeUom.m3min = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/min', tag='m3min')
VolumePerTimeUom.m3s = VolumePerTimeUom._CF_enumeration.addEnumeration(unicode_value='m3/s', tag='m3s')
VolumePerTimeUom._InitializeFacetMap(VolumePerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeUom', VolumePerTimeUom)
_module_typeBindings.VolumePerTimeUom = VolumePerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthUom
class LengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4110, 1)
    _Documentation = None
LengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthUom, enum_prefix=None)
LengthUom.n0_1_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='0.1 ft', tag='n0_1_ft')
LengthUom.n0_1_ftUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='0.1 ft[US]', tag='n0_1_ftUS')
LengthUom.n0_1_in = LengthUom._CF_enumeration.addEnumeration(unicode_value='0.1 in', tag='n0_1_in')
LengthUom.n0_1_yd = LengthUom._CF_enumeration.addEnumeration(unicode_value='0.1 yd', tag='n0_1_yd')
LengthUom.n116_in = LengthUom._CF_enumeration.addEnumeration(unicode_value='1/16 in', tag='n116_in')
LengthUom.n12_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='1/2 ft', tag='n12_ft')
LengthUom.n132_in = LengthUom._CF_enumeration.addEnumeration(unicode_value='1/32 in', tag='n132_in')
LengthUom.n164_in = LengthUom._CF_enumeration.addEnumeration(unicode_value='1/64 in', tag='n164_in')
LengthUom.n10_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='10 ft', tag='n10_ft')
LengthUom.n10_in = LengthUom._CF_enumeration.addEnumeration(unicode_value='10 in', tag='n10_in')
LengthUom.n10_km = LengthUom._CF_enumeration.addEnumeration(unicode_value='10 km', tag='n10_km')
LengthUom.n100_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='100 ft', tag='n100_ft')
LengthUom.n100_km = LengthUom._CF_enumeration.addEnumeration(unicode_value='100 km', tag='n100_km')
LengthUom.n1000_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='1000 ft', tag='n1000_ft')
LengthUom.n30_ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='30 ft', tag='n30_ft')
LengthUom.n30_m = LengthUom._CF_enumeration.addEnumeration(unicode_value='30 m', tag='n30_m')
LengthUom.angstrom = LengthUom._CF_enumeration.addEnumeration(unicode_value='angstrom', tag='angstrom')
LengthUom.chain = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain', tag='chain')
LengthUom.chainBnA = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[BnA]', tag='chainBnA')
LengthUom.chainBnB = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[BnB]', tag='chainBnB')
LengthUom.chainCla = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[Cla]', tag='chainCla')
LengthUom.chainInd37 = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[Ind37]', tag='chainInd37')
LengthUom.chainSe = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[Se]', tag='chainSe')
LengthUom.chainSeT = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[SeT]', tag='chainSeT')
LengthUom.chainUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='chain[US]', tag='chainUS')
LengthUom.cm = LengthUom._CF_enumeration.addEnumeration(unicode_value='cm', tag='cm')
LengthUom.dam = LengthUom._CF_enumeration.addEnumeration(unicode_value='dam', tag='dam')
LengthUom.dm = LengthUom._CF_enumeration.addEnumeration(unicode_value='dm', tag='dm')
LengthUom.Em = LengthUom._CF_enumeration.addEnumeration(unicode_value='Em', tag='Em')
LengthUom.fathom = LengthUom._CF_enumeration.addEnumeration(unicode_value='fathom', tag='fathom')
LengthUom.fm = LengthUom._CF_enumeration.addEnumeration(unicode_value='fm', tag='fm')
LengthUom.ft = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft', tag='ft')
LengthUom.ftBnA = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[BnA]', tag='ftBnA')
LengthUom.ftBnB = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[BnB]', tag='ftBnB')
LengthUom.ftBr36 = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Br36]', tag='ftBr36')
LengthUom.ftBr65 = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Br65]', tag='ftBr65')
LengthUom.ftCla = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Cla]', tag='ftCla')
LengthUom.ftGC = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[GC]', tag='ftGC')
LengthUom.ftInd = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Ind]', tag='ftInd')
LengthUom.ftInd37 = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Ind37]', tag='ftInd37')
LengthUom.ftInd62 = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Ind62]', tag='ftInd62')
LengthUom.ftInd75 = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Ind75]', tag='ftInd75')
LengthUom.ftSe = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[Se]', tag='ftSe')
LengthUom.ftSeT = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[SeT]', tag='ftSeT')
LengthUom.ftUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='ft[US]', tag='ftUS')
LengthUom.furUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='fur[US]', tag='furUS')
LengthUom.Gm = LengthUom._CF_enumeration.addEnumeration(unicode_value='Gm', tag='Gm')
LengthUom.hm = LengthUom._CF_enumeration.addEnumeration(unicode_value='hm', tag='hm')
LengthUom.in_ = LengthUom._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
LengthUom.inUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='in[US]', tag='inUS')
LengthUom.km = LengthUom._CF_enumeration.addEnumeration(unicode_value='km', tag='km')
LengthUom.link = LengthUom._CF_enumeration.addEnumeration(unicode_value='link', tag='link')
LengthUom.linkBnA = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[BnA]', tag='linkBnA')
LengthUom.linkBnB = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[BnB]', tag='linkBnB')
LengthUom.linkCla = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[Cla]', tag='linkCla')
LengthUom.linkSe = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[Se]', tag='linkSe')
LengthUom.linkSeT = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[SeT]', tag='linkSeT')
LengthUom.linkUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='link[US]', tag='linkUS')
LengthUom.m = LengthUom._CF_enumeration.addEnumeration(unicode_value='m', tag='m')
LengthUom.mGer = LengthUom._CF_enumeration.addEnumeration(unicode_value='m[Ger]', tag='mGer')
LengthUom.mi = LengthUom._CF_enumeration.addEnumeration(unicode_value='mi', tag='mi')
LengthUom.minaut = LengthUom._CF_enumeration.addEnumeration(unicode_value='mi[naut]', tag='minaut')
LengthUom.minautUK = LengthUom._CF_enumeration.addEnumeration(unicode_value='mi[nautUK]', tag='minautUK')
LengthUom.miUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='mi[US]', tag='miUS')
LengthUom.mil = LengthUom._CF_enumeration.addEnumeration(unicode_value='mil', tag='mil')
LengthUom.mm = LengthUom._CF_enumeration.addEnumeration(unicode_value='mm', tag='mm')
LengthUom.Mm = LengthUom._CF_enumeration.addEnumeration(unicode_value='Mm', tag='Mm')
LengthUom.nm = LengthUom._CF_enumeration.addEnumeration(unicode_value='nm', tag='nm')
LengthUom.pm = LengthUom._CF_enumeration.addEnumeration(unicode_value='pm', tag='pm')
LengthUom.rodUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='rod[US]', tag='rodUS')
LengthUom.Tm = LengthUom._CF_enumeration.addEnumeration(unicode_value='Tm', tag='Tm')
LengthUom.um = LengthUom._CF_enumeration.addEnumeration(unicode_value='um', tag='um')
LengthUom.yd = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd', tag='yd')
LengthUom.ydBnA = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[BnA]', tag='ydBnA')
LengthUom.ydBnB = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[BnB]', tag='ydBnB')
LengthUom.ydCla = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Cla]', tag='ydCla')
LengthUom.ydInd = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Ind]', tag='ydInd')
LengthUom.ydInd37 = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Ind37]', tag='ydInd37')
LengthUom.ydInd62 = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Ind62]', tag='ydInd62')
LengthUom.ydInd75 = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Ind75]', tag='ydInd75')
LengthUom.ydSe = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[Se]', tag='ydSe')
LengthUom.ydSeT = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[SeT]', tag='ydSeT')
LengthUom.ydUS = LengthUom._CF_enumeration.addEnumeration(unicode_value='yd[US]', tag='ydUS')
LengthUom._InitializeFacetMap(LengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthUom', LengthUom)
_module_typeBindings.LengthUom = LengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerMassUom
class AreaPerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4532, 1)
    _Documentation = None
AreaPerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerMassUom, enum_prefix=None)
AreaPerMassUom.cm2g = AreaPerMassUom._CF_enumeration.addEnumeration(unicode_value='cm2/g', tag='cm2g')
AreaPerMassUom.ft2lbm = AreaPerMassUom._CF_enumeration.addEnumeration(unicode_value='ft2/lbm', tag='ft2lbm')
AreaPerMassUom.m2g = AreaPerMassUom._CF_enumeration.addEnumeration(unicode_value='m2/g', tag='m2g')
AreaPerMassUom.m2kg = AreaPerMassUom._CF_enumeration.addEnumeration(unicode_value='m2/kg', tag='m2kg')
AreaPerMassUom._InitializeFacetMap(AreaPerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerMassUom', AreaPerMassUom)
_module_typeBindings.AreaPerMassUom = AreaPerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceUom
class ThermalResistanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalResistanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4556, 1)
    _Documentation = None
ThermalResistanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalResistanceUom, enum_prefix=None)
ThermalResistanceUom.deltaKW = ThermalResistanceUom._CF_enumeration.addEnumeration(unicode_value='deltaK/W', tag='deltaKW')
ThermalResistanceUom._InitializeFacetMap(ThermalResistanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalResistanceUom', ThermalResistanceUom)
_module_typeBindings.ThermalResistanceUom = ThermalResistanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerForceUom
class ForcePerForceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerForceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4565, 1)
    _Documentation = None
ForcePerForceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerForceUom, enum_prefix=None)
ForcePerForceUom.emptyString = ForcePerForceUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
ForcePerForceUom.Euc = ForcePerForceUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
ForcePerForceUom.kgfkgf = ForcePerForceUom._CF_enumeration.addEnumeration(unicode_value='kgf/kgf', tag='kgfkgf')
ForcePerForceUom.lbflbf = ForcePerForceUom._CF_enumeration.addEnumeration(unicode_value='lbf/lbf', tag='lbflbf')
ForcePerForceUom.NN = ForcePerForceUom._CF_enumeration.addEnumeration(unicode_value='N/N', tag='NN')
ForcePerForceUom._InitializeFacetMap(ForcePerForceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerForceUom', ForcePerForceUom)
_module_typeBindings.ForcePerForceUom = ForcePerForceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassUom
class MassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4612, 1)
    _Documentation = None
MassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassUom, enum_prefix=None)
MassUom.ag = MassUom._CF_enumeration.addEnumeration(unicode_value='ag', tag='ag')
MassUom.cg = MassUom._CF_enumeration.addEnumeration(unicode_value='cg', tag='cg')
MassUom.ct = MassUom._CF_enumeration.addEnumeration(unicode_value='ct', tag='ct')
MassUom.cwtUK = MassUom._CF_enumeration.addEnumeration(unicode_value='cwt[UK]', tag='cwtUK')
MassUom.cwtUS = MassUom._CF_enumeration.addEnumeration(unicode_value='cwt[US]', tag='cwtUS')
MassUom.Eg = MassUom._CF_enumeration.addEnumeration(unicode_value='Eg', tag='Eg')
MassUom.fg = MassUom._CF_enumeration.addEnumeration(unicode_value='fg', tag='fg')
MassUom.g = MassUom._CF_enumeration.addEnumeration(unicode_value='g', tag='g')
MassUom.Gg = MassUom._CF_enumeration.addEnumeration(unicode_value='Gg', tag='Gg')
MassUom.grain = MassUom._CF_enumeration.addEnumeration(unicode_value='grain', tag='grain')
MassUom.hg = MassUom._CF_enumeration.addEnumeration(unicode_value='hg', tag='hg')
MassUom.kg = MassUom._CF_enumeration.addEnumeration(unicode_value='kg', tag='kg')
MassUom.klbm = MassUom._CF_enumeration.addEnumeration(unicode_value='klbm', tag='klbm')
MassUom.lbm = MassUom._CF_enumeration.addEnumeration(unicode_value='lbm', tag='lbm')
MassUom.mg = MassUom._CF_enumeration.addEnumeration(unicode_value='mg', tag='mg')
MassUom.Mg = MassUom._CF_enumeration.addEnumeration(unicode_value='Mg', tag='Mg')
MassUom.ng = MassUom._CF_enumeration.addEnumeration(unicode_value='ng', tag='ng')
MassUom.ozm = MassUom._CF_enumeration.addEnumeration(unicode_value='ozm', tag='ozm')
MassUom.ozmtroy = MassUom._CF_enumeration.addEnumeration(unicode_value='ozm[troy]', tag='ozmtroy')
MassUom.pg = MassUom._CF_enumeration.addEnumeration(unicode_value='pg', tag='pg')
MassUom.sack94lbm = MassUom._CF_enumeration.addEnumeration(unicode_value='sack[94lbm]', tag='sack94lbm')
MassUom.t = MassUom._CF_enumeration.addEnumeration(unicode_value='t', tag='t')
MassUom.Tg = MassUom._CF_enumeration.addEnumeration(unicode_value='Tg', tag='Tg')
MassUom.tonUK = MassUom._CF_enumeration.addEnumeration(unicode_value='ton[UK]', tag='tonUK')
MassUom.tonUS = MassUom._CF_enumeration.addEnumeration(unicode_value='ton[US]', tag='tonUS')
MassUom.ug = MassUom._CF_enumeration.addEnumeration(unicode_value='ug', tag='ug')
MassUom._InitializeFacetMap(MassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassUom', MassUom)
_module_typeBindings.MassUom = MassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityUom
class SpecificHeatCapacityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecificHeatCapacityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4746, 1)
    _Documentation = None
SpecificHeatCapacityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SpecificHeatCapacityUom, enum_prefix=None)
SpecificHeatCapacityUom.BtuITlbm_deltaF = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbm.deltaF)', tag='BtuITlbm_deltaF')
SpecificHeatCapacityUom.BtuITlbm_deltaR = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(lbm.deltaR)', tag='BtuITlbm_deltaR')
SpecificHeatCapacityUom.calthg_deltaK = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(g.deltaK)', tag='calthg_deltaK')
SpecificHeatCapacityUom.Jg_deltaK = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='J/(g.deltaK)', tag='Jg_deltaK')
SpecificHeatCapacityUom.Jkg_deltaK = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='J/(kg.deltaK)', tag='Jkg_deltaK')
SpecificHeatCapacityUom.kcalthkg_deltaC = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/(kg.deltaC)', tag='kcalthkg_deltaC')
SpecificHeatCapacityUom.kJkg_deltaK = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='kJ/(kg.deltaK)', tag='kJkg_deltaK')
SpecificHeatCapacityUom.kW_hkg_deltaC = SpecificHeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='kW.h/(kg.deltaC)', tag='kW_hkg_deltaC')
SpecificHeatCapacityUom._InitializeFacetMap(SpecificHeatCapacityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SpecificHeatCapacityUom', SpecificHeatCapacityUom)
_module_typeBindings.SpecificHeatCapacityUom = SpecificHeatCapacityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerMassUom
class LengthPerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4793, 1)
    _Documentation = None
LengthPerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerMassUom, enum_prefix=None)
LengthPerMassUom.ftlbm = LengthPerMassUom._CF_enumeration.addEnumeration(unicode_value='ft/lbm', tag='ftlbm')
LengthPerMassUom.mkg = LengthPerMassUom._CF_enumeration.addEnumeration(unicode_value='m/kg', tag='mkg')
LengthPerMassUom._InitializeFacetMap(LengthPerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerMassUom', LengthPerMassUom)
_module_typeBindings.LengthPerMassUom = LengthPerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaUom
class AmountOfSubstancePerTimePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4807, 1)
    _Documentation = None
AmountOfSubstancePerTimePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerTimePerAreaUom, enum_prefix=None)
AmountOfSubstancePerTimePerAreaUom.lbmolh_ft2 = AmountOfSubstancePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbmol/(h.ft2)', tag='lbmolh_ft2')
AmountOfSubstancePerTimePerAreaUom.lbmols_ft2 = AmountOfSubstancePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbmol/(s.ft2)', tag='lbmols_ft2')
AmountOfSubstancePerTimePerAreaUom.mols_m2 = AmountOfSubstancePerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='mol/(s.m2)', tag='mols_m2')
AmountOfSubstancePerTimePerAreaUom._InitializeFacetMap(AmountOfSubstancePerTimePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimePerAreaUom', AmountOfSubstancePerTimePerAreaUom)
_module_typeBindings.AmountOfSubstancePerTimePerAreaUom = AmountOfSubstancePerTimePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureUom
class ThermodynamicTemperatureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperatureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4829, 1)
    _Documentation = None
ThermodynamicTemperatureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermodynamicTemperatureUom, enum_prefix=None)
ThermodynamicTemperatureUom.degC = ThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degC', tag='degC')
ThermodynamicTemperatureUom.degF = ThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degF', tag='degF')
ThermodynamicTemperatureUom.degR = ThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degR', tag='degR')
ThermodynamicTemperatureUom.K = ThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
ThermodynamicTemperatureUom._InitializeFacetMap(ThermodynamicTemperatureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperatureUom', ThermodynamicTemperatureUom)
_module_typeBindings.ThermodynamicTemperatureUom = ThermodynamicTemperatureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionUom
class LinearThermalExpansionUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearThermalExpansionUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4859, 1)
    _Documentation = None
LinearThermalExpansionUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LinearThermalExpansionUom, enum_prefix=None)
LinearThermalExpansionUom.n1deltaK = LinearThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='1/deltaK', tag='n1deltaK')
LinearThermalExpansionUom.inin_deltaF = LinearThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='in/(in.deltaF)', tag='inin_deltaF')
LinearThermalExpansionUom.mm_deltaK = LinearThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='m/(m.deltaK)', tag='mm_deltaK')
LinearThermalExpansionUom.mmmm_deltaK = LinearThermalExpansionUom._CF_enumeration.addEnumeration(unicode_value='mm/(mm.deltaK)', tag='mmmm_deltaK')
LinearThermalExpansionUom._InitializeFacetMap(LinearThermalExpansionUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LinearThermalExpansionUom', LinearThermalExpansionUom)
_module_typeBindings.LinearThermalExpansionUom = LinearThermalExpansionUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerLengthUom
class MassPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4883, 1)
    _Documentation = None
MassPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerLengthUom, enum_prefix=None)
MassPerLengthUom.kg_mcm2 = MassPerLengthUom._CF_enumeration.addEnumeration(unicode_value='kg.m/cm2', tag='kg_mcm2')
MassPerLengthUom.kgm = MassPerLengthUom._CF_enumeration.addEnumeration(unicode_value='kg/m', tag='kgm')
MassPerLengthUom.klbmin = MassPerLengthUom._CF_enumeration.addEnumeration(unicode_value='klbm/in', tag='klbmin')
MassPerLengthUom.lbmft = MassPerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/ft', tag='lbmft')
MassPerLengthUom.Mgin = MassPerLengthUom._CF_enumeration.addEnumeration(unicode_value='Mg/in', tag='Mgin')
MassPerLengthUom._InitializeFacetMap(MassPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerLengthUom', MassPerLengthUom)
_module_typeBindings.MassPerLengthUom = MassPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityUom
class ElectricalResistivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4912, 1)
    _Documentation = None
ElectricalResistivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricalResistivityUom, enum_prefix=None)
ElectricalResistivityUom.kohm_m = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='kohm.m', tag='kohm_m')
ElectricalResistivityUom.nohm_mil2ft = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='nohm.mil2/ft', tag='nohm_mil2ft')
ElectricalResistivityUom.nohm_mm2m = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='nohm.mm2/m', tag='nohm_mm2m')
ElectricalResistivityUom.ohm_cm = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='ohm.cm', tag='ohm_cm')
ElectricalResistivityUom.ohm_m = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='ohm.m', tag='ohm_m')
ElectricalResistivityUom.ohm_m2m = ElectricalResistivityUom._CF_enumeration.addEnumeration(unicode_value='ohm.m2/m', tag='ohm_m2m')
ElectricalResistivityUom._InitializeFacetMap(ElectricalResistivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricalResistivityUom', ElectricalResistivityUom)
_module_typeBindings.ElectricalResistivityUom = ElectricalResistivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerMassUom
class MassPerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4946, 1)
    _Documentation = None
MassPerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerMassUom, enum_prefix=None)
MassPerMassUom.emptyString = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
MassPerMassUom.mass = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='%[mass]', tag='mass')
MassPerMassUom.Euc = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
MassPerMassUom.gkg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='g/kg', tag='gkg')
MassPerMassUom.gt = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='g/t', tag='gt')
MassPerMassUom.kgkg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='kg/kg', tag='kgkg')
MassPerMassUom.kgsack94lbm = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='kg/sack[94lbm]', tag='kgsack94lbm')
MassPerMassUom.kgt = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='kg/t', tag='kgt')
MassPerMassUom.mgg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='mg/g', tag='mgg')
MassPerMassUom.mgkg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='mg/kg', tag='mgkg')
MassPerMassUom.ngg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ng/g', tag='ngg')
MassPerMassUom.ngmg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ng/mg', tag='ngmg')
MassPerMassUom.ppk = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ppk', tag='ppk')
MassPerMassUom.ppm = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
MassPerMassUom.ppmmass = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ppm[mass]', tag='ppmmass')
MassPerMassUom.ugg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ug/g', tag='ugg')
MassPerMassUom.ugmg = MassPerMassUom._CF_enumeration.addEnumeration(unicode_value='ug/mg', tag='ugmg')
MassPerMassUom._InitializeFacetMap(MassPerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerMassUom', MassPerMassUom)
_module_typeBindings.MassPerMassUom = MassPerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaUom
class PressureSquaredPerForceTimePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredPerForceTimePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5041, 1)
    _Documentation = None
PressureSquaredPerForceTimePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureSquaredPerForceTimePerAreaUom, enum_prefix=None)
PressureSquaredPerForceTimePerAreaUom.n0_001_kPa2cP = PressureSquaredPerForceTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='0.001 kPa2/cP', tag='n0_001_kPa2cP')
PressureSquaredPerForceTimePerAreaUom.bar2cP = PressureSquaredPerForceTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='bar2/cP', tag='bar2cP')
PressureSquaredPerForceTimePerAreaUom.kPa2cP = PressureSquaredPerForceTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='kPa2/cP', tag='kPa2cP')
PressureSquaredPerForceTimePerAreaUom.Pa2Pa_s = PressureSquaredPerForceTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='Pa2/(Pa.s)', tag='Pa2Pa_s')
PressureSquaredPerForceTimePerAreaUom.psi2cP = PressureSquaredPerForceTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='psi2/cP', tag='psi2cP')
PressureSquaredPerForceTimePerAreaUom._InitializeFacetMap(PressureSquaredPerForceTimePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureSquaredPerForceTimePerAreaUom', PressureSquaredPerForceTimePerAreaUom)
_module_typeBindings.PressureSquaredPerForceTimePerAreaUom = PressureSquaredPerForceTimePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousFluxUom
class LuminousFluxUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousFluxUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5082, 1)
    _Documentation = None
LuminousFluxUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousFluxUom, enum_prefix=None)
LuminousFluxUom.lm = LuminousFluxUom._CF_enumeration.addEnumeration(unicode_value='lm', tag='lm')
LuminousFluxUom._InitializeFacetMap(LuminousFluxUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousFluxUom', LuminousFluxUom)
_module_typeBindings.LuminousFluxUom = LuminousFluxUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureUom
class VolumePerTimePerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5091, 1)
    _Documentation = None
VolumePerTimePerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerPressureUom, enum_prefix=None)
VolumePerTimePerPressureUom.n1000_ft3psi_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='1000 ft3/(psi.d)', tag='n1000_ft3psi_d')
VolumePerTimePerPressureUom.bblkPa_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='bbl/(kPa.d)', tag='bblkPa_d')
VolumePerTimePerPressureUom.bblpsi_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='bbl/(psi.d)', tag='bblpsi_d')
VolumePerTimePerPressureUom.Lbar_min = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='L/(bar.min)', tag='Lbar_min')
VolumePerTimePerPressureUom.m3bar_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(bar.d)', tag='m3bar_d')
VolumePerTimePerPressureUom.m3bar_h = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(bar.h)', tag='m3bar_h')
VolumePerTimePerPressureUom.m3bar_min = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(bar.min)', tag='m3bar_min')
VolumePerTimePerPressureUom.m3kPa_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(kPa.d)', tag='m3kPa_d')
VolumePerTimePerPressureUom.m3kPa_h = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(kPa.h)', tag='m3kPa_h')
VolumePerTimePerPressureUom.m3Pa_s = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(Pa.s)', tag='m3Pa_s')
VolumePerTimePerPressureUom.m3psi_d = VolumePerTimePerPressureUom._CF_enumeration.addEnumeration(unicode_value='m3/(psi.d)', tag='m3psi_d')
VolumePerTimePerPressureUom._InitializeFacetMap(VolumePerTimePerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureUom', VolumePerTimePerPressureUom)
_module_typeBindings.VolumePerTimePerPressureUom = VolumePerTimePerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeUom
class AmountOfSubstancePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5150, 1)
    _Documentation = None
AmountOfSubstancePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerVolumeUom, enum_prefix=None)
AmountOfSubstancePerVolumeUom.kmolm3 = AmountOfSubstancePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kmol/m3', tag='kmolm3')
AmountOfSubstancePerVolumeUom.lbmolft3 = AmountOfSubstancePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbmol/ft3', tag='lbmolft3')
AmountOfSubstancePerVolumeUom.lbmolgalUK = AmountOfSubstancePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbmol/gal[UK]', tag='lbmolgalUK')
AmountOfSubstancePerVolumeUom.lbmolgalUS = AmountOfSubstancePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbmol/gal[US]', tag='lbmolgalUS')
AmountOfSubstancePerVolumeUom.molm3 = AmountOfSubstancePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mol/m3', tag='molm3')
AmountOfSubstancePerVolumeUom._InitializeFacetMap(AmountOfSubstancePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerVolumeUom', AmountOfSubstancePerVolumeUom)
_module_typeBindings.AmountOfSubstancePerVolumeUom = AmountOfSubstancePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassUom
class EnergyPerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5182, 1)
    _Documentation = None
EnergyPerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerMassUom, enum_prefix=None)
EnergyPerMassUom.BtuITlbm = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/lbm', tag='BtuITlbm')
EnergyPerMassUom.calthg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/g', tag='calthg')
EnergyPerMassUom.calthkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/kg', tag='calthkg')
EnergyPerMassUom.calthlbm = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/lbm', tag='calthlbm')
EnergyPerMassUom.ergg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='erg/g', tag='ergg')
EnergyPerMassUom.ergkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='erg/kg', tag='ergkg')
EnergyPerMassUom.hp_hlbm = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='hp.h/lbm', tag='hp_hlbm')
EnergyPerMassUom.Jg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='J/g', tag='Jg')
EnergyPerMassUom.Jkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='J/kg', tag='Jkg')
EnergyPerMassUom.kcalthg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/g', tag='kcalthg')
EnergyPerMassUom.kcalthkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/kg', tag='kcalthkg')
EnergyPerMassUom.kJkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='kJ/kg', tag='kJkg')
EnergyPerMassUom.kW_hkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='kW.h/kg', tag='kW_hkg')
EnergyPerMassUom.lbf_ftlbm = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/lbm', tag='lbf_ftlbm')
EnergyPerMassUom.MJkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='MJ/kg', tag='MJkg')
EnergyPerMassUom.MW_hkg = EnergyPerMassUom._CF_enumeration.addEnumeration(unicode_value='MW.h/kg', tag='MW_hkg')
EnergyPerMassUom._InitializeFacetMap(EnergyPerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassUom', EnergyPerMassUom)
_module_typeBindings.EnergyPerMassUom = EnergyPerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PermittivityUom
class PermittivityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermittivityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5266, 1)
    _Documentation = None
PermittivityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermittivityUom, enum_prefix=None)
PermittivityUom.Fm = PermittivityUom._CF_enumeration.addEnumeration(unicode_value='F/m', tag='Fm')
PermittivityUom.uFm = PermittivityUom._CF_enumeration.addEnumeration(unicode_value='uF/m', tag='uFm')
PermittivityUom._InitializeFacetMap(PermittivityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermittivityUom', PermittivityUom)
_module_typeBindings.PermittivityUom = PermittivityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentUom
class ElectromagneticMomentUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectromagneticMomentUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5286, 1)
    _Documentation = None
ElectromagneticMomentUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectromagneticMomentUom, enum_prefix=None)
ElectromagneticMomentUom.A_m2 = ElectromagneticMomentUom._CF_enumeration.addEnumeration(unicode_value='A.m2', tag='A_m2')
ElectromagneticMomentUom._InitializeFacetMap(ElectromagneticMomentUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectromagneticMomentUom', ElectromagneticMomentUom)
_module_typeBindings.ElectromagneticMomentUom = ElectromagneticMomentUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceUom
class ThermalInsulanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalInsulanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5298, 1)
    _Documentation = None
ThermalInsulanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalInsulanceUom, enum_prefix=None)
ThermalInsulanceUom.deltaC_m2_hkcalth = ThermalInsulanceUom._CF_enumeration.addEnumeration(unicode_value='deltaC.m2.h/kcal[th]', tag='deltaC_m2_hkcalth')
ThermalInsulanceUom.deltaF_ft2_hBtuIT = ThermalInsulanceUom._CF_enumeration.addEnumeration(unicode_value='deltaF.ft2.h/Btu[IT]', tag='deltaF_ft2_hBtuIT')
ThermalInsulanceUom.deltaK_m2kW = ThermalInsulanceUom._CF_enumeration.addEnumeration(unicode_value='deltaK.m2/kW', tag='deltaK_m2kW')
ThermalInsulanceUom.deltaK_m2W = ThermalInsulanceUom._CF_enumeration.addEnumeration(unicode_value='deltaK.m2/W', tag='deltaK_m2W')
ThermalInsulanceUom._InitializeFacetMap(ThermalInsulanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalInsulanceUom', ThermalInsulanceUom)
_module_typeBindings.ThermalInsulanceUom = ThermalInsulanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaUom
class PowerPerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5322, 1)
    _Documentation = None
PowerPerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerAreaUom, enum_prefix=None)
PowerPerAreaUom.BtuITh_ft2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft2)', tag='BtuITh_ft2')
PowerPerAreaUom.BtuITs_ft2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft2)', tag='BtuITs_ft2')
PowerPerAreaUom.calthh_cm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm2)', tag='calthh_cm2')
PowerPerAreaUom.hpin2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='hp/in2', tag='hpin2')
PowerPerAreaUom.hphydin2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='hp[hyd]/in2', tag='hphydin2')
PowerPerAreaUom.kWcm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='kW/cm2', tag='kWcm2')
PowerPerAreaUom.kWm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='kW/m2', tag='kWm2')
PowerPerAreaUom.mWm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='mW/m2', tag='mWm2')
PowerPerAreaUom.ucalths_cm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='ucal[th]/(s.cm2)', tag='ucalths_cm2')
PowerPerAreaUom.Wcm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='W/cm2', tag='Wcm2')
PowerPerAreaUom.Wm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='W/m2', tag='Wm2')
PowerPerAreaUom.Wmm2 = PowerPerAreaUom._CF_enumeration.addEnumeration(unicode_value='W/mm2', tag='Wmm2')
PowerPerAreaUom._InitializeFacetMap(PowerPerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerAreaUom', PowerPerAreaUom)
_module_typeBindings.PowerPerAreaUom = PowerPerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerAreaUom
class MassPerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5392, 1)
    _Documentation = None
MassPerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerAreaUom, enum_prefix=None)
MassPerAreaUom.n0_01_lbmft2 = MassPerAreaUom._CF_enumeration.addEnumeration(unicode_value='0.01 lbm/ft2', tag='n0_01_lbmft2')
MassPerAreaUom.kgm2 = MassPerAreaUom._CF_enumeration.addEnumeration(unicode_value='kg/m2', tag='kgm2')
MassPerAreaUom.lbmft2 = MassPerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbm/ft2', tag='lbmft2')
MassPerAreaUom.Mgm2 = MassPerAreaUom._CF_enumeration.addEnumeration(unicode_value='Mg/m2', tag='Mgm2')
MassPerAreaUom.tonUSft2 = MassPerAreaUom._CF_enumeration.addEnumeration(unicode_value='ton[US]/ft2', tag='tonUSft2')
MassPerAreaUom._InitializeFacetMap(MassPerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerAreaUom', MassPerAreaUom)
_module_typeBindings.MassPerAreaUom = MassPerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}IlluminanceUom
class IlluminanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IlluminanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5427, 1)
    _Documentation = None
IlluminanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IlluminanceUom, enum_prefix=None)
IlluminanceUom.footcandle = IlluminanceUom._CF_enumeration.addEnumeration(unicode_value='footcandle', tag='footcandle')
IlluminanceUom.klx = IlluminanceUom._CF_enumeration.addEnumeration(unicode_value='klx', tag='klx')
IlluminanceUom.lmm2 = IlluminanceUom._CF_enumeration.addEnumeration(unicode_value='lm/m2', tag='lmm2')
IlluminanceUom.lx = IlluminanceUom._CF_enumeration.addEnumeration(unicode_value='lx', tag='lx')
IlluminanceUom._InitializeFacetMap(IlluminanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IlluminanceUom', IlluminanceUom)
_module_typeBindings.IlluminanceUom = IlluminanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeUom
class AreaPerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5451, 1)
    _Documentation = None
AreaPerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerVolumeUom, enum_prefix=None)
AreaPerVolumeUom.n1m = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/m', tag='n1m')
AreaPerVolumeUom.bcm3 = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='b/cm3', tag='bcm3')
AreaPerVolumeUom.cu = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cu', tag='cu')
AreaPerVolumeUom.ft2in3 = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft2/in3', tag='ft2in3')
AreaPerVolumeUom.m2cm3 = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m2/cm3', tag='m2cm3')
AreaPerVolumeUom.m2m3 = AreaPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m2/m3', tag='m2m3')
AreaPerVolumeUom._InitializeFacetMap(AreaPerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerVolumeUom', AreaPerVolumeUom)
_module_typeBindings.AreaPerVolumeUom = AreaPerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeUom
class TemperatureIntervalPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5485, 1)
    _Documentation = None
TemperatureIntervalPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerTimeUom, enum_prefix=None)
TemperatureIntervalPerTimeUom.deltaCh = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaC/h', tag='deltaCh')
TemperatureIntervalPerTimeUom.deltaCmin = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaC/min', tag='deltaCmin')
TemperatureIntervalPerTimeUom.deltaCs = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaC/s', tag='deltaCs')
TemperatureIntervalPerTimeUom.deltaFh = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaF/h', tag='deltaFh')
TemperatureIntervalPerTimeUom.deltaFmin = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaF/min', tag='deltaFmin')
TemperatureIntervalPerTimeUom.deltaFs = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaF/s', tag='deltaFs')
TemperatureIntervalPerTimeUom.deltaKs = TemperatureIntervalPerTimeUom._CF_enumeration.addEnumeration(unicode_value='deltaK/s', tag='deltaKs')
TemperatureIntervalPerTimeUom._InitializeFacetMap(TemperatureIntervalPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerTimeUom', TemperatureIntervalPerTimeUom)
_module_typeBindings.TemperatureIntervalPerTimeUom = TemperatureIntervalPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceUom
class AmountOfSubstancePerAmountOfSubstanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAmountOfSubstanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5524, 1)
    _Documentation = None
AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerAmountOfSubstanceUom, enum_prefix=None)
AmountOfSubstancePerAmountOfSubstanceUom.emptyString = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
AmountOfSubstancePerAmountOfSubstanceUom.molar = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='%[molar]', tag='molar')
AmountOfSubstancePerAmountOfSubstanceUom.Euc = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
AmountOfSubstancePerAmountOfSubstanceUom.molmol = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='mol/mol', tag='molmol')
AmountOfSubstancePerAmountOfSubstanceUom.nEuc = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='nEuc', tag='nEuc')
AmountOfSubstancePerAmountOfSubstanceUom.ppk = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='ppk', tag='ppk')
AmountOfSubstancePerAmountOfSubstanceUom.ppm = AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
AmountOfSubstancePerAmountOfSubstanceUom._InitializeFacetMap(AmountOfSubstancePerAmountOfSubstanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAmountOfSubstanceUom', AmountOfSubstancePerAmountOfSubstanceUom)
_module_typeBindings.AmountOfSubstancePerAmountOfSubstanceUom = AmountOfSubstancePerAmountOfSubstanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}RadianceUom
class RadianceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadianceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5566, 1)
    _Documentation = None
RadianceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RadianceUom, enum_prefix=None)
RadianceUom.Wm2_sr = RadianceUom._CF_enumeration.addEnumeration(unicode_value='W/(m2.sr)', tag='Wm2_sr')
RadianceUom._InitializeFacetMap(RadianceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RadianceUom', RadianceUom)
_module_typeBindings.RadianceUom = RadianceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateUom
class HeatFlowRateUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatFlowRateUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5578, 1)
    _Documentation = None
HeatFlowRateUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatFlowRateUom, enum_prefix=None)
HeatFlowRateUom.n1E6_BtuITh = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='1E6 Btu[IT]/h', tag='n1E6_BtuITh')
HeatFlowRateUom.BtuITh = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/h', tag='BtuITh')
HeatFlowRateUom.BtuITmin = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/min', tag='BtuITmin')
HeatFlowRateUom.BtuITs = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/s', tag='BtuITs')
HeatFlowRateUom.calthh = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/h', tag='calthh')
HeatFlowRateUom.EJa = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='EJ/a', tag='EJa')
HeatFlowRateUom.erga = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='erg/a', tag='erga')
HeatFlowRateUom.GW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='GW', tag='GW')
HeatFlowRateUom.Js = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='J/s', tag='Js')
HeatFlowRateUom.kcalthh = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/h', tag='kcalthh')
HeatFlowRateUom.kW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='kW', tag='kW')
HeatFlowRateUom.lbf_ftmin = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/min', tag='lbf_ftmin')
HeatFlowRateUom.lbf_fts = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/s', tag='lbf_fts')
HeatFlowRateUom.MJa = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='MJ/a', tag='MJa')
HeatFlowRateUom.mW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='mW', tag='mW')
HeatFlowRateUom.MW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='MW', tag='MW')
HeatFlowRateUom.nW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='nW', tag='nW')
HeatFlowRateUom.quada = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='quad/a', tag='quada')
HeatFlowRateUom.TJa = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='TJ/a', tag='TJa')
HeatFlowRateUom.TW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='TW', tag='TW')
HeatFlowRateUom.ucalths = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='ucal[th]/s', tag='ucalths')
HeatFlowRateUom.uW = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='uW', tag='uW')
HeatFlowRateUom.W = HeatFlowRateUom._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
HeatFlowRateUom._InitializeFacetMap(HeatFlowRateUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatFlowRateUom', HeatFlowRateUom)
_module_typeBindings.HeatFlowRateUom = HeatFlowRateUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentUom
class DoseEquivalentUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoseEquivalentUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5703, 1)
    _Documentation = None
DoseEquivalentUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DoseEquivalentUom, enum_prefix=None)
DoseEquivalentUom.mrem = DoseEquivalentUom._CF_enumeration.addEnumeration(unicode_value='mrem', tag='mrem')
DoseEquivalentUom.mSv = DoseEquivalentUom._CF_enumeration.addEnumeration(unicode_value='mSv', tag='mSv')
DoseEquivalentUom.rem = DoseEquivalentUom._CF_enumeration.addEnumeration(unicode_value='rem', tag='rem')
DoseEquivalentUom.Sv = DoseEquivalentUom._CF_enumeration.addEnumeration(unicode_value='Sv', tag='Sv')
DoseEquivalentUom._InitializeFacetMap(DoseEquivalentUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DoseEquivalentUom', DoseEquivalentUom)
_module_typeBindings.DoseEquivalentUom = DoseEquivalentUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerUom
class PowerPerPowerUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerPowerUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5730, 1)
    _Documentation = None
PowerPerPowerUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerPowerUom, enum_prefix=None)
PowerPerPowerUom.emptyString = PowerPerPowerUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
PowerPerPowerUom.BtuIThp_h = PowerPerPowerUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(hp.h)', tag='BtuIThp_h')
PowerPerPowerUom.Euc = PowerPerPowerUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
PowerPerPowerUom.WkW = PowerPerPowerUom._CF_enumeration.addEnumeration(unicode_value='W/kW', tag='WkW')
PowerPerPowerUom.WW = PowerPerPowerUom._CF_enumeration.addEnumeration(unicode_value='W/W', tag='WW')
PowerPerPowerUom._InitializeFacetMap(PowerPerPowerUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerPowerUom', PowerPerPowerUom)
_module_typeBindings.PowerPerPowerUom = PowerPerPowerUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassUom
class ElectricChargePerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5759, 1)
    _Documentation = None
ElectricChargePerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerMassUom, enum_prefix=None)
ElectricChargePerMassUom.A_skg = ElectricChargePerMassUom._CF_enumeration.addEnumeration(unicode_value='A.s/kg', tag='A_skg')
ElectricChargePerMassUom.Cg = ElectricChargePerMassUom._CF_enumeration.addEnumeration(unicode_value='C/g', tag='Cg')
ElectricChargePerMassUom.Ckg = ElectricChargePerMassUom._CF_enumeration.addEnumeration(unicode_value='C/kg', tag='Ckg')
ElectricChargePerMassUom._InitializeFacetMap(ElectricChargePerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerMassUom', ElectricChargePerMassUom)
_module_typeBindings.ElectricChargePerMassUom = ElectricChargePerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthUom
class MassPerVolumePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5778, 1)
    _Documentation = None
MassPerVolumePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerLengthUom, enum_prefix=None)
MassPerVolumePerLengthUom.gcm4 = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='g/cm4', tag='gcm4')
MassPerVolumePerLengthUom.kgdm4 = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='kg/dm4', tag='kgdm4')
MassPerVolumePerLengthUom.kgm4 = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='kg/m4', tag='kgm4')
MassPerVolumePerLengthUom.lbmgalUK_ft = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/(gal[UK].ft)', tag='lbmgalUK_ft')
MassPerVolumePerLengthUom.lbmgalUS_ft = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/(gal[US].ft)', tag='lbmgalUS_ft')
MassPerVolumePerLengthUom.lbmft4 = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm/ft4', tag='lbmft4')
MassPerVolumePerLengthUom.Pa_s2m3 = MassPerVolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='Pa.s2/m3', tag='Pa_s2m3')
MassPerVolumePerLengthUom._InitializeFacetMap(MassPerVolumePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerLengthUom', MassPerVolumePerLengthUom)
_module_typeBindings.MassPerVolumePerLengthUom = MassPerVolumePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassLengthUom
class MassLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5829, 1)
    _Documentation = None
MassLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassLengthUom, enum_prefix=None)
MassLengthUom.kg_m = MassLengthUom._CF_enumeration.addEnumeration(unicode_value='kg.m', tag='kg_m')
MassLengthUom.lbm_ft = MassLengthUom._CF_enumeration.addEnumeration(unicode_value='lbm.ft', tag='lbm_ft')
MassLengthUom._InitializeFacetMap(MassLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassLengthUom', MassLengthUom)
_module_typeBindings.MassLengthUom = MassLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeUom
class ForcePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5843, 1)
    _Documentation = None
ForcePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerVolumeUom, enum_prefix=None)
ForcePerVolumeUom.n0_001_psift = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 psi/ft', tag='n0_001_psift')
ForcePerVolumeUom.n0_01_psift = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.01 psi/ft', tag='n0_01_psift')
ForcePerVolumeUom.atmft = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='atm/ft', tag='atmft')
ForcePerVolumeUom.atmhm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='atm/hm', tag='atmhm')
ForcePerVolumeUom.atmm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='atm/m', tag='atmm')
ForcePerVolumeUom.barkm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bar/km', tag='barkm')
ForcePerVolumeUom.barm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bar/m', tag='barm')
ForcePerVolumeUom.GPacm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='GPa/cm', tag='GPacm')
ForcePerVolumeUom.kPahm = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kPa/hm', tag='kPahm')
ForcePerVolumeUom.kPam = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kPa/m', tag='kPam')
ForcePerVolumeUom.lbfft3 = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbf/ft3', tag='lbfft3')
ForcePerVolumeUom.lbfgalUS = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbf/gal[US]', tag='lbfgalUS')
ForcePerVolumeUom.MPam = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='MPa/m', tag='MPam')
ForcePerVolumeUom.Nm3 = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='N/m3', tag='Nm3')
ForcePerVolumeUom.Pam = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Pa/m', tag='Pam')
ForcePerVolumeUom.psift = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='psi/ft', tag='psift')
ForcePerVolumeUom.psim = ForcePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='psi/m', tag='psim')
ForcePerVolumeUom._InitializeFacetMap(ForcePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerVolumeUom', ForcePerVolumeUom)
_module_typeBindings.ForcePerVolumeUom = ForcePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeUom
class ElectricChargePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5932, 1)
    _Documentation = None
ElectricChargePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerVolumeUom, enum_prefix=None)
ElectricChargePerVolumeUom.A_sm3 = ElectricChargePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='A.s/m3', tag='A_sm3')
ElectricChargePerVolumeUom.Ccm3 = ElectricChargePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='C/cm3', tag='Ccm3')
ElectricChargePerVolumeUom.Cm3 = ElectricChargePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='C/m3', tag='Cm3')
ElectricChargePerVolumeUom.Cmm3 = ElectricChargePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='C/mm3', tag='Cmm3')
ElectricChargePerVolumeUom._InitializeFacetMap(ElectricChargePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerVolumeUom', ElectricChargePerVolumeUom)
_module_typeBindings.ElectricChargePerVolumeUom = ElectricChargePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}APIGravityUom
class APIGravityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGravityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5962, 1)
    _Documentation = None
APIGravityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APIGravityUom, enum_prefix=None)
APIGravityUom.dAPI = APIGravityUom._CF_enumeration.addEnumeration(unicode_value='dAPI', tag='dAPI')
APIGravityUom._InitializeFacetMap(APIGravityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APIGravityUom', APIGravityUom)
_module_typeBindings.APIGravityUom = APIGravityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReluctanceUom
class ReluctanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReluctanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5977, 1)
    _Documentation = None
ReluctanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReluctanceUom, enum_prefix=None)
ReluctanceUom.n1H = ReluctanceUom._CF_enumeration.addEnumeration(unicode_value='1/H', tag='n1H')
ReluctanceUom._InitializeFacetMap(ReluctanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReluctanceUom', ReluctanceUom)
_module_typeBindings.ReluctanceUom = ReluctanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureUom
class LengthPerTemperatureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTemperatureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5992, 1)
    _Documentation = None
LengthPerTemperatureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerTemperatureUom, enum_prefix=None)
LengthPerTemperatureUom.ftdeltaF = LengthPerTemperatureUom._CF_enumeration.addEnumeration(unicode_value='ft/deltaF', tag='ftdeltaF')
LengthPerTemperatureUom.mdeltaK = LengthPerTemperatureUom._CF_enumeration.addEnumeration(unicode_value='m/deltaK', tag='mdeltaK')
LengthPerTemperatureUom._InitializeFacetMap(LengthPerTemperatureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerTemperatureUom', LengthPerTemperatureUom)
_module_typeBindings.LengthPerTemperatureUom = LengthPerTemperatureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthUom
class VolumePerTimePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6006, 1)
    _Documentation = None
VolumePerTimePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerLengthUom, enum_prefix=None)
VolumePerTimePerLengthUom.n1000_ft3d_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1000 ft3/(d.ft)', tag='n1000_ft3d_ft')
VolumePerTimePerLengthUom.n1000_m3d_m = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1000 m3/(d.m)', tag='n1000_m3d_m')
VolumePerTimePerLengthUom.n1000_m3h_m = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1000 m3/(h.m)', tag='n1000_m3h_m')
VolumePerTimePerLengthUom.bbld_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='bbl/(d.ft)', tag='bbld_ft')
VolumePerTimePerLengthUom.ft3d_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft3/(d.ft)', tag='ft3d_ft')
VolumePerTimePerLengthUom.galUKh_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.ft)', tag='galUKh_ft')
VolumePerTimePerLengthUom.galUKh_in = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(h.in)', tag='galUKh_in')
VolumePerTimePerLengthUom.galUKmin_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/(min.ft)', tag='galUKmin_ft')
VolumePerTimePerLengthUom.galUSh_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.ft)', tag='galUSh_ft')
VolumePerTimePerLengthUom.galUSh_in = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(h.in)', tag='galUSh_in')
VolumePerTimePerLengthUom.galUSmin_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/(min.ft)', tag='galUSmin_ft')
VolumePerTimePerLengthUom.m3d_m = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/(d.m)', tag='m3d_m')
VolumePerTimePerLengthUom.m3h_m = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/(h.m)', tag='m3h_m')
VolumePerTimePerLengthUom.m3s_ft = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/(s.ft)', tag='m3s_ft')
VolumePerTimePerLengthUom.m3s_m = VolumePerTimePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/(s.m)', tag='m3s_m')
VolumePerTimePerLengthUom._InitializeFacetMap(VolumePerTimePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerLengthUom', VolumePerTimePerLengthUom)
_module_typeBindings.VolumePerTimePerLengthUom = VolumePerTimePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationUom
class LinearAccelerationUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearAccelerationUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6085, 1)
    _Documentation = None
LinearAccelerationUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LinearAccelerationUom, enum_prefix=None)
LinearAccelerationUom.cms2 = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='cm/s2', tag='cms2')
LinearAccelerationUom.fts2 = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='ft/s2', tag='fts2')
LinearAccelerationUom.Gal = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='Gal', tag='Gal')
LinearAccelerationUom.gn = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='gn', tag='gn')
LinearAccelerationUom.ins2 = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='in/s2', tag='ins2')
LinearAccelerationUom.ms2 = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='m/s2', tag='ms2')
LinearAccelerationUom.mGal = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='mGal', tag='mGal')
LinearAccelerationUom.mgn = LinearAccelerationUom._CF_enumeration.addEnumeration(unicode_value='mgn', tag='mgn')
LinearAccelerationUom._InitializeFacetMap(LinearAccelerationUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LinearAccelerationUom', LinearAccelerationUom)
_module_typeBindings.LinearAccelerationUom = LinearAccelerationUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DimensionlessUom
class DimensionlessUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionlessUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6129, 1)
    _Documentation = None
DimensionlessUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DimensionlessUom, enum_prefix=None)
DimensionlessUom.emptyString = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
DimensionlessUom.cEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='cEuc', tag='cEuc')
DimensionlessUom.dEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='dEuc', tag='dEuc')
DimensionlessUom.EEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='EEuc', tag='EEuc')
DimensionlessUom.Euc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
DimensionlessUom.fEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='fEuc', tag='fEuc')
DimensionlessUom.GEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='GEuc', tag='GEuc')
DimensionlessUom.kEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='kEuc', tag='kEuc')
DimensionlessUom.MEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='MEuc', tag='MEuc')
DimensionlessUom.mEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='mEuc', tag='mEuc')
DimensionlessUom.nEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='nEuc', tag='nEuc')
DimensionlessUom.pEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='pEuc', tag='pEuc')
DimensionlessUom.ppk = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='ppk', tag='ppk')
DimensionlessUom.ppm = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
DimensionlessUom.TEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='TEuc', tag='TEuc')
DimensionlessUom.uEuc = DimensionlessUom._CF_enumeration.addEnumeration(unicode_value='uEuc', tag='uEuc')
DimensionlessUom._InitializeFacetMap(DimensionlessUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DimensionlessUom', DimensionlessUom)
_module_typeBindings.DimensionlessUom = DimensionlessUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyUom
class EnergyUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6225, 1)
    _Documentation = None
EnergyUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyUom, enum_prefix=None)
EnergyUom.n1E6_BtuIT = EnergyUom._CF_enumeration.addEnumeration(unicode_value='1E6 Btu[IT]', tag='n1E6_BtuIT')
EnergyUom.aJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='aJ', tag='aJ')
EnergyUom.BtuIT = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]', tag='BtuIT')
EnergyUom.Btuth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Btu[th]', tag='Btuth')
EnergyUom.BtuUK = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Btu[UK]', tag='BtuUK')
EnergyUom.calIT = EnergyUom._CF_enumeration.addEnumeration(unicode_value='cal[IT]', tag='calIT')
EnergyUom.calth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='cal[th]', tag='calth')
EnergyUom.ccalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='ccal[th]', tag='ccalth')
EnergyUom.ceV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='ceV', tag='ceV')
EnergyUom.cJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='cJ', tag='cJ')
EnergyUom.dcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='dcal[th]', tag='dcalth')
EnergyUom.deV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='deV', tag='deV')
EnergyUom.dJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='dJ', tag='dJ')
EnergyUom.Ecalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Ecal[th]', tag='Ecalth')
EnergyUom.EeV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='EeV', tag='EeV')
EnergyUom.EJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='EJ', tag='EJ')
EnergyUom.erg = EnergyUom._CF_enumeration.addEnumeration(unicode_value='erg', tag='erg')
EnergyUom.eV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='eV', tag='eV')
EnergyUom.fcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='fcal[th]', tag='fcalth')
EnergyUom.feV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='feV', tag='feV')
EnergyUom.fJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='fJ', tag='fJ')
EnergyUom.Gcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Gcal[th]', tag='Gcalth')
EnergyUom.GeV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='GeV', tag='GeV')
EnergyUom.GJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='GJ', tag='GJ')
EnergyUom.GW_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='GW.h', tag='GW_h')
EnergyUom.hp_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='hp.h', tag='hp_h')
EnergyUom.hpmetric_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='hp[metric].h', tag='hpmetric_h')
EnergyUom.J = EnergyUom._CF_enumeration.addEnumeration(unicode_value='J', tag='J')
EnergyUom.kcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]', tag='kcalth')
EnergyUom.keV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='keV', tag='keV')
EnergyUom.kJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='kJ', tag='kJ')
EnergyUom.kW_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='kW.h', tag='kW_h')
EnergyUom.mcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='mcal[th]', tag='mcalth')
EnergyUom.Mcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Mcal[th]', tag='Mcalth')
EnergyUom.meV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='meV', tag='meV')
EnergyUom.MeV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='MeV', tag='MeV')
EnergyUom.MJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='MJ', tag='MJ')
EnergyUom.mJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='mJ', tag='mJ')
EnergyUom.MW_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='MW.h', tag='MW_h')
EnergyUom.ncalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='ncal[th]', tag='ncalth')
EnergyUom.neV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='neV', tag='neV')
EnergyUom.nJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='nJ', tag='nJ')
EnergyUom.pcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='pcal[th]', tag='pcalth')
EnergyUom.peV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='peV', tag='peV')
EnergyUom.pJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='pJ', tag='pJ')
EnergyUom.quad = EnergyUom._CF_enumeration.addEnumeration(unicode_value='quad', tag='quad')
EnergyUom.Tcalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='Tcal[th]', tag='Tcalth')
EnergyUom.TeV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='TeV', tag='TeV')
EnergyUom.thermEC = EnergyUom._CF_enumeration.addEnumeration(unicode_value='therm[EC]', tag='thermEC')
EnergyUom.thermUK = EnergyUom._CF_enumeration.addEnumeration(unicode_value='therm[UK]', tag='thermUK')
EnergyUom.thermUS = EnergyUom._CF_enumeration.addEnumeration(unicode_value='therm[US]', tag='thermUS')
EnergyUom.TJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='TJ', tag='TJ')
EnergyUom.TW_h = EnergyUom._CF_enumeration.addEnumeration(unicode_value='TW.h', tag='TW_h')
EnergyUom.ucalth = EnergyUom._CF_enumeration.addEnumeration(unicode_value='ucal[th]', tag='ucalth')
EnergyUom.ueV = EnergyUom._CF_enumeration.addEnumeration(unicode_value='ueV', tag='ueV')
EnergyUom.uJ = EnergyUom._CF_enumeration.addEnumeration(unicode_value='uJ', tag='uJ')
EnergyUom._InitializeFacetMap(EnergyUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyUom', EnergyUom)
_module_typeBindings.EnergyUom = EnergyUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthUom
class AnglePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6509, 1)
    _Documentation = None
AnglePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AnglePerLengthUom, enum_prefix=None)
AnglePerLengthUom.n0_01_degaft = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 dega/ft', tag='n0_01_degaft')
AnglePerLengthUom.n130_degaft = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1/30 dega/ft', tag='n130_degaft')
AnglePerLengthUom.n130_degam = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1/30 dega/m', tag='n130_degam')
AnglePerLengthUom.degaft = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='dega/ft', tag='degaft')
AnglePerLengthUom.degam = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='dega/m', tag='degam')
AnglePerLengthUom.radft = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='rad/ft', tag='radft')
AnglePerLengthUom.radm = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='rad/m', tag='radm')
AnglePerLengthUom.revft = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='rev/ft', tag='revft')
AnglePerLengthUom.revm = AnglePerLengthUom._CF_enumeration.addEnumeration(unicode_value='rev/m', tag='revm')
AnglePerLengthUom._InitializeFacetMap(AnglePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AnglePerLengthUom', AnglePerLengthUom)
_module_typeBindings.AnglePerLengthUom = AnglePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateUom
class VerticalCoordinateUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """The units of measure that are valid for vertical gravity based coordinates (i.e., elevation or vertical depth)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalCoordinateUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6561, 1)
    _Documentation = 'The units of measure that are valid for vertical gravity based coordinates (i.e., elevation or vertical depth).'
VerticalCoordinateUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VerticalCoordinateUom, enum_prefix=None)
VerticalCoordinateUom.m = VerticalCoordinateUom._CF_enumeration.addEnumeration(unicode_value='m', tag='m')
VerticalCoordinateUom.ft = VerticalCoordinateUom._CF_enumeration.addEnumeration(unicode_value='ft', tag='ft')
VerticalCoordinateUom.ftUS = VerticalCoordinateUom._CF_enumeration.addEnumeration(unicode_value='ftUS', tag='ftUS')
VerticalCoordinateUom.ftBr65 = VerticalCoordinateUom._CF_enumeration.addEnumeration(unicode_value='ftBr(65)', tag='ftBr65')
VerticalCoordinateUom._InitializeFacetMap(VerticalCoordinateUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VerticalCoordinateUom', VerticalCoordinateUom)
_module_typeBindings.VerticalCoordinateUom = VerticalCoordinateUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthUom
class VolumePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6588, 1)
    _Documentation = None
VolumePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerLengthUom, enum_prefix=None)
VolumePerLengthUom.n0_01_dm3km = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 dm3/km', tag='n0_01_dm3km')
VolumePerLengthUom.n0_01_Lkm = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 L/km', tag='n0_01_Lkm')
VolumePerLengthUom.bblft = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='bbl/ft', tag='bblft')
VolumePerLengthUom.bblin = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='bbl/in', tag='bblin')
VolumePerLengthUom.bblmi = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='bbl/mi', tag='bblmi')
VolumePerLengthUom.dm3m = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='dm3/m', tag='dm3m')
VolumePerLengthUom.ft3ft = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ft3/ft', tag='ft3ft')
VolumePerLengthUom.galUKmi = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/mi', tag='galUKmi')
VolumePerLengthUom.galUSft = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/ft', tag='galUSft')
VolumePerLengthUom.galUSmi = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/mi', tag='galUSmi')
VolumePerLengthUom.in3ft = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='in3/ft', tag='in3ft')
VolumePerLengthUom.Lm = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='L/m', tag='Lm')
VolumePerLengthUom.m3km = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/km', tag='m3km')
VolumePerLengthUom.m3m = VolumePerLengthUom._CF_enumeration.addEnumeration(unicode_value='m3/m', tag='m3m')
VolumePerLengthUom._InitializeFacetMap(VolumePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerLengthUom', VolumePerLengthUom)
_module_typeBindings.VolumePerLengthUom = VolumePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeUom
class EnergyPerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6662, 1)
    _Documentation = None
EnergyPerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerVolumeUom, enum_prefix=None)
EnergyPerVolumeUom.BtuITbbl = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/bbl', tag='BtuITbbl')
EnergyPerVolumeUom.BtuITft3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/ft3', tag='BtuITft3')
EnergyPerVolumeUom.BtuITgalUK = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/gal[UK]', tag='BtuITgalUK')
EnergyPerVolumeUom.BtuITgalUS = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/gal[US]', tag='BtuITgalUS')
EnergyPerVolumeUom.calthcm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/cm3', tag='calthcm3')
EnergyPerVolumeUom.calthmL = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/mL', tag='calthmL')
EnergyPerVolumeUom.calthmm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/mm3', tag='calthmm3')
EnergyPerVolumeUom.ergcm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='erg/cm3', tag='ergcm3')
EnergyPerVolumeUom.ergm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='erg/m3', tag='ergm3')
EnergyPerVolumeUom.hp_hbbl = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='hp.h/bbl', tag='hp_hbbl')
EnergyPerVolumeUom.Jdm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='J/dm3', tag='Jdm3')
EnergyPerVolumeUom.Jm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='J/m3', tag='Jm3')
EnergyPerVolumeUom.kcalthcm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/cm3', tag='kcalthcm3')
EnergyPerVolumeUom.kcalthm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/m3', tag='kcalthm3')
EnergyPerVolumeUom.kJdm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kJ/dm3', tag='kJdm3')
EnergyPerVolumeUom.kJm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kJ/m3', tag='kJm3')
EnergyPerVolumeUom.kW_hdm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kW.h/dm3', tag='kW_hdm3')
EnergyPerVolumeUom.kW_hm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kW.h/m3', tag='kW_hm3')
EnergyPerVolumeUom.lbf_ftbbl = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/bbl', tag='lbf_ftbbl')
EnergyPerVolumeUom.lbf_ftgalUS = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/gal[US]', tag='lbf_ftgalUS')
EnergyPerVolumeUom.MJm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='MJ/m3', tag='MJm3')
EnergyPerVolumeUom.MW_hm3 = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='MW.h/m3', tag='MW_hm3')
EnergyPerVolumeUom.tonfUS_mibbl = EnergyPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='tonf[US].mi/bbl', tag='tonfUS_mibbl')
EnergyPerVolumeUom._InitializeFacetMap(EnergyPerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerVolumeUom', EnergyPerVolumeUom)
_module_typeBindings.EnergyPerVolumeUom = EnergyPerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityUom
class MagneticPermeabilityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticPermeabilityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6781, 1)
    _Documentation = None
MagneticPermeabilityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticPermeabilityUom, enum_prefix=None)
MagneticPermeabilityUom.Hm = MagneticPermeabilityUom._CF_enumeration.addEnumeration(unicode_value='H/m', tag='Hm')
MagneticPermeabilityUom.uHm = MagneticPermeabilityUom._CF_enumeration.addEnumeration(unicode_value='uH/m', tag='uHm')
MagneticPermeabilityUom._InitializeFacetMap(MagneticPermeabilityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticPermeabilityUom', MagneticPermeabilityUom)
_module_typeBindings.MagneticPermeabilityUom = MagneticPermeabilityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassUom
class ReciprocalMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6795, 1)
    _Documentation = None
ReciprocalMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalMassUom, enum_prefix=None)
ReciprocalMassUom.n1g = ReciprocalMassUom._CF_enumeration.addEnumeration(unicode_value='1/g', tag='n1g')
ReciprocalMassUom.n1kg = ReciprocalMassUom._CF_enumeration.addEnumeration(unicode_value='1/kg', tag='n1kg')
ReciprocalMassUom.n1lbm = ReciprocalMassUom._CF_enumeration.addEnumeration(unicode_value='1/lbm', tag='n1lbm')
ReciprocalMassUom._InitializeFacetMap(ReciprocalMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassUom', ReciprocalMassUom)
_module_typeBindings.ReciprocalMassUom = ReciprocalMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityUom
class DynamicViscosityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicViscosityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6814, 1)
    _Documentation = None
DynamicViscosityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DynamicViscosityUom, enum_prefix=None)
DynamicViscosityUom.cP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='cP', tag='cP')
DynamicViscosityUom.dP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='dP', tag='dP')
DynamicViscosityUom.dyne_scm2 = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='dyne.s/cm2', tag='dyne_scm2')
DynamicViscosityUom.EP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='EP', tag='EP')
DynamicViscosityUom.fP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='fP', tag='fP')
DynamicViscosityUom.GP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='GP', tag='GP')
DynamicViscosityUom.kgf_sm2 = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='kgf.s/m2', tag='kgf_sm2')
DynamicViscosityUom.kP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='kP', tag='kP')
DynamicViscosityUom.lbf_sft2 = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='lbf.s/ft2', tag='lbf_sft2')
DynamicViscosityUom.lbf_sin2 = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='lbf.s/in2', tag='lbf_sin2')
DynamicViscosityUom.mP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='mP', tag='mP')
DynamicViscosityUom.MP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='MP', tag='MP')
DynamicViscosityUom.mPa_s = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='mPa.s', tag='mPa_s')
DynamicViscosityUom.N_sm2 = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='N.s/m2', tag='N_sm2')
DynamicViscosityUom.nP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='nP', tag='nP')
DynamicViscosityUom.P = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
DynamicViscosityUom.Pa_s = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='Pa.s', tag='Pa_s')
DynamicViscosityUom.pP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='pP', tag='pP')
DynamicViscosityUom.psi_s = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='psi.s', tag='psi_s')
DynamicViscosityUom.TP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='TP', tag='TP')
DynamicViscosityUom.uP = DynamicViscosityUom._CF_enumeration.addEnumeration(unicode_value='uP', tag='uP')
DynamicViscosityUom._InitializeFacetMap(DynamicViscosityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DynamicViscosityUom', DynamicViscosityUom)
_module_typeBindings.DynamicViscosityUom = DynamicViscosityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropUom
class PotentialDifferencePerPowerDropUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PotentialDifferencePerPowerDropUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6923, 1)
    _Documentation = None
PotentialDifferencePerPowerDropUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PotentialDifferencePerPowerDropUom, enum_prefix=None)
PotentialDifferencePerPowerDropUom.VB = PotentialDifferencePerPowerDropUom._CF_enumeration.addEnumeration(unicode_value='V/B', tag='VB')
PotentialDifferencePerPowerDropUom.VdB = PotentialDifferencePerPowerDropUom._CF_enumeration.addEnumeration(unicode_value='V/dB', tag='VdB')
PotentialDifferencePerPowerDropUom._InitializeFacetMap(PotentialDifferencePerPowerDropUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PotentialDifferencePerPowerDropUom', PotentialDifferencePerPowerDropUom)
_module_typeBindings.PotentialDifferencePerPowerDropUom = PotentialDifferencePerPowerDropUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeUom
class AreaPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6937, 1)
    _Documentation = None
AreaPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerTimeUom, enum_prefix=None)
AreaPerTimeUom.cm2s = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='cm2/s', tag='cm2s')
AreaPerTimeUom.ft2h = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft2/h', tag='ft2h')
AreaPerTimeUom.ft2s = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='ft2/s', tag='ft2s')
AreaPerTimeUom.in2s = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='in2/s', tag='in2s')
AreaPerTimeUom.m2d = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m2/d', tag='m2d')
AreaPerTimeUom.m2h = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m2/h', tag='m2h')
AreaPerTimeUom.m2s = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='m2/s', tag='m2s')
AreaPerTimeUom.mm2s = AreaPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mm2/s', tag='mm2s')
AreaPerTimeUom._InitializeFacetMap(AreaPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerTimeUom', AreaPerTimeUom)
_module_typeBindings.AreaPerTimeUom = AreaPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}HeatCapacityUom
class HeatCapacityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6981, 1)
    _Documentation = None
HeatCapacityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatCapacityUom, enum_prefix=None)
HeatCapacityUom.JdeltaK = HeatCapacityUom._CF_enumeration.addEnumeration(unicode_value='J/deltaK', tag='JdeltaK')
HeatCapacityUom._InitializeFacetMap(HeatCapacityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatCapacityUom', HeatCapacityUom)
_module_typeBindings.HeatCapacityUom = HeatCapacityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureUom
class ThermodynamicTemperaturePerThermodynamicTemperatureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperaturePerThermodynamicTemperatureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6999, 1)
    _Documentation = None
ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermodynamicTemperaturePerThermodynamicTemperatureUom, enum_prefix=None)
ThermodynamicTemperaturePerThermodynamicTemperatureUom.degCdegC = ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degC/degC', tag='degCdegC')
ThermodynamicTemperaturePerThermodynamicTemperatureUom.degFdegF = ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degF/degF', tag='degFdegF')
ThermodynamicTemperaturePerThermodynamicTemperatureUom.degRdegR = ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='degR/degR', tag='degRdegR')
ThermodynamicTemperaturePerThermodynamicTemperatureUom.Euc = ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
ThermodynamicTemperaturePerThermodynamicTemperatureUom.KK = ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration.addEnumeration(unicode_value='K/K', tag='KK')
ThermodynamicTemperaturePerThermodynamicTemperatureUom._InitializeFacetMap(ThermodynamicTemperaturePerThermodynamicTemperatureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperaturePerThermodynamicTemperatureUom', ThermodynamicTemperaturePerThermodynamicTemperatureUom)
_module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureUom = ThermodynamicTemperaturePerThermodynamicTemperatureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MolarEnergyUom
class MolarEnergyUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarEnergyUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7031, 1)
    _Documentation = None
MolarEnergyUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarEnergyUom, enum_prefix=None)
MolarEnergyUom.BtuITlbmol = MolarEnergyUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/lbmol', tag='BtuITlbmol')
MolarEnergyUom.Jmol = MolarEnergyUom._CF_enumeration.addEnumeration(unicode_value='J/mol', tag='Jmol')
MolarEnergyUom.kcalthmol = MolarEnergyUom._CF_enumeration.addEnumeration(unicode_value='kcal[th]/mol', tag='kcalthmol')
MolarEnergyUom.kJkmol = MolarEnergyUom._CF_enumeration.addEnumeration(unicode_value='kJ/kmol', tag='kJkmol')
MolarEnergyUom.MJkmol = MolarEnergyUom._CF_enumeration.addEnumeration(unicode_value='MJ/kmol', tag='MJkmol')
MolarEnergyUom._InitializeFacetMap(MolarEnergyUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarEnergyUom', MolarEnergyUom)
_module_typeBindings.MolarEnergyUom = MolarEnergyUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceUom
class ElectricConductanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7060, 1)
    _Documentation = None
ElectricConductanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricConductanceUom, enum_prefix=None)
ElectricConductanceUom.cS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='cS', tag='cS')
ElectricConductanceUom.dS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='dS', tag='dS')
ElectricConductanceUom.ES = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='ES', tag='ES')
ElectricConductanceUom.fS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='fS', tag='fS')
ElectricConductanceUom.GS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='GS', tag='GS')
ElectricConductanceUom.kS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='kS', tag='kS')
ElectricConductanceUom.mS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='mS', tag='mS')
ElectricConductanceUom.MS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='MS', tag='MS')
ElectricConductanceUom.nS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='nS', tag='nS')
ElectricConductanceUom.pS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='pS', tag='pS')
ElectricConductanceUom.S = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
ElectricConductanceUom.TS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='TS', tag='TS')
ElectricConductanceUom.uS = ElectricConductanceUom._CF_enumeration.addEnumeration(unicode_value='uS', tag='uS')
ElectricConductanceUom._InitializeFacetMap(ElectricConductanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricConductanceUom', ElectricConductanceUom)
_module_typeBindings.ElectricConductanceUom = ElectricConductanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MomentumUom
class MomentumUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentumUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7129, 1)
    _Documentation = None
MomentumUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentumUom, enum_prefix=None)
MomentumUom.kg_ms = MomentumUom._CF_enumeration.addEnumeration(unicode_value='kg.m/s', tag='kg_ms')
MomentumUom.lbm_fts = MomentumUom._CF_enumeration.addEnumeration(unicode_value='lbm.ft/s', tag='lbm_fts')
MomentumUom._InitializeFacetMap(MomentumUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentumUom', MomentumUom)
_module_typeBindings.MomentumUom = MomentumUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaUom
class MassPerTimePerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7143, 1)
    _Documentation = None
MassPerTimePerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimePerAreaUom, enum_prefix=None)
MassPerTimePerAreaUom.g_ftcm3_s = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='g.ft/(cm3.s)', tag='g_ftcm3_s')
MassPerTimePerAreaUom.g_mcm3_s = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='g.m/(cm3.s)', tag='g_mcm3_s')
MassPerTimePerAreaUom.kgm2_s = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='kg/(m2.s)', tag='kgm2_s')
MassPerTimePerAreaUom.kPa_sm = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='kPa.s/m', tag='kPa_sm')
MassPerTimePerAreaUom.lbmft2_h = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbm/(ft2.h)', tag='lbmft2_h')
MassPerTimePerAreaUom.lbmft2_s = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbm/(ft2.s)', tag='lbmft2_s')
MassPerTimePerAreaUom.MPa_sm = MassPerTimePerAreaUom._CF_enumeration.addEnumeration(unicode_value='MPa.s/m', tag='MPa_sm')
MassPerTimePerAreaUom._InitializeFacetMap(MassPerTimePerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerAreaUom', MassPerTimePerAreaUom)
_module_typeBindings.MassPerTimePerAreaUom = MassPerTimePerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeUom
class PowerPerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7191, 1)
    _Documentation = None
PowerPerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerVolumeUom, enum_prefix=None)
PowerPerVolumeUom.BtuITh_ft3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft3)', tag='BtuITh_ft3')
PowerPerVolumeUom.BtuITs_ft3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft3)', tag='BtuITs_ft3')
PowerPerVolumeUom.calthh_cm3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(h.cm3)', tag='calthh_cm3')
PowerPerVolumeUom.calths_cm3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cal[th]/(s.cm3)', tag='calths_cm3')
PowerPerVolumeUom.hpft3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='hp/ft3', tag='hpft3')
PowerPerVolumeUom.kWm3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='kW/m3', tag='kWm3')
PowerPerVolumeUom.uWm3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='uW/m3', tag='uWm3')
PowerPerVolumeUom.Wm3 = PowerPerVolumeUom._CF_enumeration.addEnumeration(unicode_value='W/m3', tag='Wm3')
PowerPerVolumeUom._InitializeFacetMap(PowerPerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerVolumeUom', PowerPerVolumeUom)
_module_typeBindings.PowerPerVolumeUom = PowerPerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}FrequencyUom
class FrequencyUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7241, 1)
    _Documentation = None
FrequencyUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FrequencyUom, enum_prefix=None)
FrequencyUom.cHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='cHz', tag='cHz')
FrequencyUom.dHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='dHz', tag='dHz')
FrequencyUom.EHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='EHz', tag='EHz')
FrequencyUom.fHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='fHz', tag='fHz')
FrequencyUom.GHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='GHz', tag='GHz')
FrequencyUom.Hz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='Hz', tag='Hz')
FrequencyUom.kHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='kHz', tag='kHz')
FrequencyUom.mHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='mHz', tag='mHz')
FrequencyUom.MHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='MHz', tag='MHz')
FrequencyUom.nHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='nHz', tag='nHz')
FrequencyUom.pHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='pHz', tag='pHz')
FrequencyUom.THz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='THz', tag='THz')
FrequencyUom.uHz = FrequencyUom._CF_enumeration.addEnumeration(unicode_value='uHz', tag='uHz')
FrequencyUom._InitializeFacetMap(FrequencyUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FrequencyUom', FrequencyUom)
_module_typeBindings.FrequencyUom = FrequencyUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityUom
class LuminousIntensityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousIntensityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7316, 1)
    _Documentation = None
LuminousIntensityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousIntensityUom, enum_prefix=None)
LuminousIntensityUom.cd = LuminousIntensityUom._CF_enumeration.addEnumeration(unicode_value='cd', tag='cd')
LuminousIntensityUom.kcd = LuminousIntensityUom._CF_enumeration.addEnumeration(unicode_value='kcd', tag='kcd')
LuminousIntensityUom._InitializeFacetMap(LuminousIntensityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousIntensityUom', LuminousIntensityUom)
_module_typeBindings.LuminousIntensityUom = LuminousIntensityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseUom
class AbsorbedDoseUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorbedDoseUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7330, 1)
    _Documentation = None
AbsorbedDoseUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AbsorbedDoseUom, enum_prefix=None)
AbsorbedDoseUom.cGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='cGy', tag='cGy')
AbsorbedDoseUom.crd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='crd', tag='crd')
AbsorbedDoseUom.dGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='dGy', tag='dGy')
AbsorbedDoseUom.drd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='drd', tag='drd')
AbsorbedDoseUom.EGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='EGy', tag='EGy')
AbsorbedDoseUom.Erd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='Erd', tag='Erd')
AbsorbedDoseUom.fGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='fGy', tag='fGy')
AbsorbedDoseUom.frd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='frd', tag='frd')
AbsorbedDoseUom.GGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='GGy', tag='GGy')
AbsorbedDoseUom.Grd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='Grd', tag='Grd')
AbsorbedDoseUom.Gy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='Gy', tag='Gy')
AbsorbedDoseUom.kGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='kGy', tag='kGy')
AbsorbedDoseUom.krd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='krd', tag='krd')
AbsorbedDoseUom.mGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='mGy', tag='mGy')
AbsorbedDoseUom.MGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='MGy', tag='MGy')
AbsorbedDoseUom.Mrd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='Mrd', tag='Mrd')
AbsorbedDoseUom.mrd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='mrd', tag='mrd')
AbsorbedDoseUom.nGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='nGy', tag='nGy')
AbsorbedDoseUom.nrd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='nrd', tag='nrd')
AbsorbedDoseUom.pGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='pGy', tag='pGy')
AbsorbedDoseUom.prd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='prd', tag='prd')
AbsorbedDoseUom.rd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='rd', tag='rd')
AbsorbedDoseUom.TGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='TGy', tag='TGy')
AbsorbedDoseUom.Trd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='Trd', tag='Trd')
AbsorbedDoseUom.uGy = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='uGy', tag='uGy')
AbsorbedDoseUom.urd = AbsorbedDoseUom._CF_enumeration.addEnumeration(unicode_value='urd', tag='urd')
AbsorbedDoseUom._InitializeFacetMap(AbsorbedDoseUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AbsorbedDoseUom', AbsorbedDoseUom)
_module_typeBindings.AbsorbedDoseUom = AbsorbedDoseUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerMassUom
class TimePerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7464, 1)
    _Documentation = None
TimePerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerMassUom, enum_prefix=None)
TimePerMassUom.skg = TimePerMassUom._CF_enumeration.addEnumeration(unicode_value='s/kg', tag='skg')
TimePerMassUom._InitializeFacetMap(TimePerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerMassUom', TimePerMassUom)
_module_typeBindings.TimePerMassUom = TimePerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientUom
class VolumetricHeatTransferCoefficientUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricHeatTransferCoefficientUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7473, 1)
    _Documentation = None
VolumetricHeatTransferCoefficientUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumetricHeatTransferCoefficientUom, enum_prefix=None)
VolumetricHeatTransferCoefficientUom.BtuITh_ft3_deltaF = VolumetricHeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(h.ft3.deltaF)', tag='BtuITh_ft3_deltaF')
VolumetricHeatTransferCoefficientUom.BtuITs_ft3_deltaF = VolumetricHeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT]/(s.ft3.deltaF)', tag='BtuITs_ft3_deltaF')
VolumetricHeatTransferCoefficientUom.kWm3_deltaK = VolumetricHeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='kW/(m3.deltaK)', tag='kWm3_deltaK')
VolumetricHeatTransferCoefficientUom.Wm3_deltaK = VolumetricHeatTransferCoefficientUom._CF_enumeration.addEnumeration(unicode_value='W/(m3.deltaK)', tag='Wm3_deltaK')
VolumetricHeatTransferCoefficientUom._InitializeFacetMap(VolumetricHeatTransferCoefficientUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumetricHeatTransferCoefficientUom', VolumetricHeatTransferCoefficientUom)
_module_typeBindings.VolumetricHeatTransferCoefficientUom = VolumetricHeatTransferCoefficientUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerUom
class NormalizedPowerUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NormalizedPowerUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7497, 1)
    _Documentation = None
NormalizedPowerUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NormalizedPowerUom, enum_prefix=None)
NormalizedPowerUom.B_W = NormalizedPowerUom._CF_enumeration.addEnumeration(unicode_value='B.W', tag='B_W')
NormalizedPowerUom.dB_mW = NormalizedPowerUom._CF_enumeration.addEnumeration(unicode_value='dB.mW', tag='dB_mW')
NormalizedPowerUom.dB_MW = NormalizedPowerUom._CF_enumeration.addEnumeration(unicode_value='dB.MW', tag='dB_MW')
NormalizedPowerUom.dB_W = NormalizedPowerUom._CF_enumeration.addEnumeration(unicode_value='dB.W', tag='dB_W')
NormalizedPowerUom._InitializeFacetMap(NormalizedPowerUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NormalizedPowerUom', NormalizedPowerUom)
_module_typeBindings.NormalizedPowerUom = NormalizedPowerUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureUom
class EnergyLengthPerTimeAreaTemperatureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerTimeAreaTemperatureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7521, 1)
    _Documentation = None
EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyLengthPerTimeAreaTemperatureUom, enum_prefix=None)
EnergyLengthPerTimeAreaTemperatureUom.BtuIT_inh_ft2_deltaF = EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration.addEnumeration(unicode_value='Btu[IT].in/(h.ft2.deltaF)', tag='BtuIT_inh_ft2_deltaF')
EnergyLengthPerTimeAreaTemperatureUom.J_ms_m2_deltaK = EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration.addEnumeration(unicode_value='J.m/(s.m2.deltaK)', tag='J_ms_m2_deltaK')
EnergyLengthPerTimeAreaTemperatureUom.kJ_mh_m2_deltaK = EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration.addEnumeration(unicode_value='kJ.m/(h.m2.deltaK)', tag='kJ_mh_m2_deltaK')
EnergyLengthPerTimeAreaTemperatureUom.Wm_deltaK = EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration.addEnumeration(unicode_value='W/(m.deltaK)', tag='Wm_deltaK')
EnergyLengthPerTimeAreaTemperatureUom._InitializeFacetMap(EnergyLengthPerTimeAreaTemperatureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerTimeAreaTemperatureUom', EnergyLengthPerTimeAreaTemperatureUom)
_module_typeBindings.EnergyLengthPerTimeAreaTemperatureUom = EnergyLengthPerTimeAreaTemperatureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeUom
class PressureTimePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureTimePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7548, 1)
    _Documentation = None
PressureTimePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureTimePerVolumeUom, enum_prefix=None)
PressureTimePerVolumeUom.Pa_sm3 = PressureTimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Pa.s/m3', tag='Pa_sm3')
PressureTimePerVolumeUom.psi_dbbl = PressureTimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='psi.d/bbl', tag='psi_dbbl')
PressureTimePerVolumeUom._InitializeFacetMap(PressureTimePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureTimePerVolumeUom', PressureTimePerVolumeUom)
_module_typeBindings.PressureTimePerVolumeUom = PressureTimePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeUom
class VolumePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7562, 1)
    _Documentation = None
VolumePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerVolumeUom, enum_prefix=None)
VolumePerVolumeUom.emptyString = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
VolumePerVolumeUom.vol = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='%[vol]', tag='vol')
VolumePerVolumeUom.n0_001_bblft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 bbl/ft3', tag='n0_001_bblft3')
VolumePerVolumeUom.n0_001_bblm3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 bbl/m3', tag='n0_001_bblm3')
VolumePerVolumeUom.n0_001_galUKbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 gal[UK]/bbl', tag='n0_001_galUKbbl')
VolumePerVolumeUom.n0_001_galUKgalUK = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 gal[UK]/gal[UK]', tag='n0_001_galUKgalUK')
VolumePerVolumeUom.n0_001_galUSbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/bbl', tag='n0_001_galUSbbl')
VolumePerVolumeUom.n0_001_galUSft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/ft3', tag='n0_001_galUSft3')
VolumePerVolumeUom.n0_001_galUSgalUS = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 gal[US]/gal[US]', tag='n0_001_galUSgalUS')
VolumePerVolumeUom.n0_001_ptUKbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 pt[UK]/bbl', tag='n0_001_ptUKbbl')
VolumePerVolumeUom.n0_01_bblbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.01 bbl/bbl', tag='n0_01_bblbbl')
VolumePerVolumeUom.n0_1_galUSbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.1 gal[US]/bbl', tag='n0_1_galUSbbl')
VolumePerVolumeUom.n0_1_Lbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.1 L/bbl', tag='n0_1_Lbbl')
VolumePerVolumeUom.n0_1_ptUSbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.1 pt[US]/bbl', tag='n0_1_ptUSbbl')
VolumePerVolumeUom.n1000_ft3bbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 ft3/bbl', tag='n1000_ft3bbl')
VolumePerVolumeUom.n1000_m3m3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1000 m3/m3', tag='n1000_m3m3')
VolumePerVolumeUom.n1E_6_acre_ftbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E-6 acre.ft/bbl', tag='n1E_6_acre_ftbbl')
VolumePerVolumeUom.n1E_6_bblft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E-6 bbl/ft3', tag='n1E_6_bblft3')
VolumePerVolumeUom.n1E_6_bblm3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E-6 bbl/m3', tag='n1E_6_bblm3')
VolumePerVolumeUom.n1E6_bblacre_ft = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 bbl/(acre.ft)', tag='n1E6_bblacre_ft')
VolumePerVolumeUom.n1E6_ft3acre_ft = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/(acre.ft)', tag='n1E6_ft3acre_ft')
VolumePerVolumeUom.n1E6_ft3bbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='1E6 ft3/bbl', tag='n1E6_ft3bbl')
VolumePerVolumeUom.bblacre_ft = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl/(acre.ft)', tag='bblacre_ft')
VolumePerVolumeUom.bblbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl/bbl', tag='bblbbl')
VolumePerVolumeUom.bblft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl/ft3', tag='bblft3')
VolumePerVolumeUom.bblm3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='bbl/m3', tag='bblm3')
VolumePerVolumeUom.cEuc = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cEuc', tag='cEuc')
VolumePerVolumeUom.cm3cm3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cm3/cm3', tag='cm3cm3')
VolumePerVolumeUom.cm3L = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cm3/L', tag='cm3L')
VolumePerVolumeUom.cm3m3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='cm3/m3', tag='cm3m3')
VolumePerVolumeUom.dm3m3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='dm3/m3', tag='dm3m3')
VolumePerVolumeUom.Euc = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
VolumePerVolumeUom.ft3bbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft3/bbl', tag='ft3bbl')
VolumePerVolumeUom.ft3ft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ft3/ft3', tag='ft3ft3')
VolumePerVolumeUom.galUKft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/ft3', tag='galUKft3')
VolumePerVolumeUom.galUSbbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/bbl', tag='galUSbbl')
VolumePerVolumeUom.galUSft3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/ft3', tag='galUSft3')
VolumePerVolumeUom.Lm3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='L/m3', tag='Lm3')
VolumePerVolumeUom.m3ha_m = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/(ha.m)', tag='m3ha_m')
VolumePerVolumeUom.m3bbl = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/bbl', tag='m3bbl')
VolumePerVolumeUom.m3m3 = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='m3/m3', tag='m3m3')
VolumePerVolumeUom.mLgalUK = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mL/gal[UK]', tag='mLgalUK')
VolumePerVolumeUom.mLgalUS = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mL/gal[US]', tag='mLgalUS')
VolumePerVolumeUom.mLmL = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='mL/mL', tag='mLmL')
VolumePerVolumeUom.ppk = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ppk', tag='ppk')
VolumePerVolumeUom.ppm = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
VolumePerVolumeUom.ppmvol = VolumePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='ppm[vol]', tag='ppmvol')
VolumePerVolumeUom._InitializeFacetMap(VolumePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerVolumeUom', VolumePerVolumeUom)
_module_typeBindings.VolumePerVolumeUom = VolumePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeUom
class AnglePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7801, 1)
    _Documentation = None
AnglePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AnglePerVolumeUom, enum_prefix=None)
AnglePerVolumeUom.radft3 = AnglePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='rad/ft3', tag='radft3')
AnglePerVolumeUom.radm3 = AnglePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='rad/m3', tag='radm3')
AnglePerVolumeUom._InitializeFacetMap(AnglePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AnglePerVolumeUom', AnglePerVolumeUom)
_module_typeBindings.AnglePerVolumeUom = AnglePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientUom
class DiffusionCoefficientUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusionCoefficientUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7815, 1)
    _Documentation = None
DiffusionCoefficientUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DiffusionCoefficientUom, enum_prefix=None)
DiffusionCoefficientUom.m2s = DiffusionCoefficientUom._CF_enumeration.addEnumeration(unicode_value='m2/s', tag='m2s')
DiffusionCoefficientUom._InitializeFacetMap(DiffusionCoefficientUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DiffusionCoefficientUom', DiffusionCoefficientUom)
_module_typeBindings.DiffusionCoefficientUom = DiffusionCoefficientUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerTimeUom
class TimePerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7827, 1)
    _Documentation = None
TimePerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerTimeUom, enum_prefix=None)
TimePerTimeUom.emptyString = TimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
TimePerTimeUom.Euc = TimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
TimePerTimeUom.mss = TimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='ms/s', tag='mss')
TimePerTimeUom.ss = TimePerTimeUom._CF_enumeration.addEnumeration(unicode_value='s/s', tag='ss')
TimePerTimeUom._InitializeFacetMap(TimePerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerTimeUom', TimePerTimeUom)
_module_typeBindings.TimePerTimeUom = TimePerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureUom
class PressurePerPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7851, 1)
    _Documentation = None
PressurePerPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerPressureUom, enum_prefix=None)
PressurePerPressureUom.atmatm = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='atm/atm', tag='atmatm')
PressurePerPressureUom.barbar = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='bar/bar', tag='barbar')
PressurePerPressureUom.Euc = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
PressurePerPressureUom.kPakPa = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='kPa/kPa', tag='kPakPa')
PressurePerPressureUom.MPaMPa = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='MPa/MPa', tag='MPaMPa')
PressurePerPressureUom.PaPa = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='Pa/Pa', tag='PaPa')
PressurePerPressureUom.psipsi = PressurePerPressureUom._CF_enumeration.addEnumeration(unicode_value='psi/psi', tag='psipsi')
PressurePerPressureUom._InitializeFacetMap(PressurePerPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerPressureUom', PressurePerPressureUom)
_module_typeBindings.PressurePerPressureUom = PressurePerPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeUom
class EnergyPerMassPerTimeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassPerTimeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7893, 1)
    _Documentation = None
EnergyPerMassPerTimeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerMassPerTimeUom, enum_prefix=None)
EnergyPerMassPerTimeUom.mremh = EnergyPerMassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mrem/h', tag='mremh')
EnergyPerMassPerTimeUom.mSvh = EnergyPerMassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='mSv/h', tag='mSvh')
EnergyPerMassPerTimeUom.remh = EnergyPerMassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='rem/h', tag='remh')
EnergyPerMassPerTimeUom.Svh = EnergyPerMassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Sv/h', tag='Svh')
EnergyPerMassPerTimeUom.Svs = EnergyPerMassPerTimeUom._CF_enumeration.addEnumeration(unicode_value='Sv/s', tag='Svs')
EnergyPerMassPerTimeUom._InitializeFacetMap(EnergyPerMassPerTimeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassPerTimeUom', EnergyPerMassPerTimeUom)
_module_typeBindings.EnergyPerMassPerTimeUom = EnergyPerMassPerTimeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerMassUom
class VolumePerMassUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerMassUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7925, 1)
    _Documentation = None
VolumePerMassUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerMassUom, enum_prefix=None)
VolumePerMassUom.n0_01_Lkg = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='0.01 L/kg', tag='n0_01_Lkg')
VolumePerMassUom.bbltonUK = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='bbl/ton[UK]', tag='bbltonUK')
VolumePerMassUom.bbltonUS = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='bbl/ton[US]', tag='bbltonUS')
VolumePerMassUom.cm3g = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='cm3/g', tag='cm3g')
VolumePerMassUom.dm3kg = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='dm3/kg', tag='dm3kg')
VolumePerMassUom.dm3t = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='dm3/t', tag='dm3t')
VolumePerMassUom.ft3kg = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='ft3/kg', tag='ft3kg')
VolumePerMassUom.ft3lbm = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='ft3/lbm', tag='ft3lbm')
VolumePerMassUom.ft3sack94lbm = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='ft3/sack[94lbm]', tag='ft3sack94lbm')
VolumePerMassUom.galUKlbm = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='gal[UK]/lbm', tag='galUKlbm')
VolumePerMassUom.galUSlbm = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/lbm', tag='galUSlbm')
VolumePerMassUom.galUSsack94lbm = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/sack[94lbm]', tag='galUSsack94lbm')
VolumePerMassUom.galUStonUK = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/ton[UK]', tag='galUStonUK')
VolumePerMassUom.galUStonUS = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='gal[US]/ton[US]', tag='galUStonUS')
VolumePerMassUom.Lkg = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='L/kg', tag='Lkg')
VolumePerMassUom.Lt = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='L/t', tag='Lt')
VolumePerMassUom.LtonUK = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='L/ton[UK]', tag='LtonUK')
VolumePerMassUom.m3g = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='m3/g', tag='m3g')
VolumePerMassUom.m3kg = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='m3/kg', tag='m3kg')
VolumePerMassUom.m3t = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='m3/t', tag='m3t')
VolumePerMassUom.m3tonUK = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='m3/ton[UK]', tag='m3tonUK')
VolumePerMassUom.m3tonUS = VolumePerMassUom._CF_enumeration.addEnumeration(unicode_value='m3/ton[US]', tag='m3tonUS')
VolumePerMassUom._InitializeFacetMap(VolumePerMassUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerMassUom', VolumePerMassUom)
_module_typeBindings.VolumePerMassUom = VolumePerMassUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthUom
class TemperatureIntervalPerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8039, 1)
    _Documentation = None
TemperatureIntervalPerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerLengthUom, enum_prefix=None)
TemperatureIntervalPerLengthUom.n0_01_deltaFft = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 deltaF/ft', tag='n0_01_deltaFft')
TemperatureIntervalPerLengthUom.deltaCft = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaC/ft', tag='deltaCft')
TemperatureIntervalPerLengthUom.deltaChm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaC/hm', tag='deltaChm')
TemperatureIntervalPerLengthUom.deltaCkm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaC/km', tag='deltaCkm')
TemperatureIntervalPerLengthUom.deltaCm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaC/m', tag='deltaCm')
TemperatureIntervalPerLengthUom.deltaFft = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaF/ft', tag='deltaFft')
TemperatureIntervalPerLengthUom.deltaFm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaF/m', tag='deltaFm')
TemperatureIntervalPerLengthUom.deltaKkm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaK/km', tag='deltaKkm')
TemperatureIntervalPerLengthUom.deltaKm = TemperatureIntervalPerLengthUom._CF_enumeration.addEnumeration(unicode_value='deltaK/m', tag='deltaKm')
TemperatureIntervalPerLengthUom._InitializeFacetMap(TemperatureIntervalPerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerLengthUom', TemperatureIntervalPerLengthUom)
_module_typeBindings.TemperatureIntervalPerLengthUom = TemperatureIntervalPerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalUom
class AttenuationPerFrequencyIntervalUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttenuationPerFrequencyIntervalUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8088, 1)
    _Documentation = None
AttenuationPerFrequencyIntervalUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AttenuationPerFrequencyIntervalUom, enum_prefix=None)
AttenuationPerFrequencyIntervalUom.BO = AttenuationPerFrequencyIntervalUom._CF_enumeration.addEnumeration(unicode_value='B/O', tag='BO')
AttenuationPerFrequencyIntervalUom.dBO = AttenuationPerFrequencyIntervalUom._CF_enumeration.addEnumeration(unicode_value='dB/O', tag='dBO')
AttenuationPerFrequencyIntervalUom._InitializeFacetMap(AttenuationPerFrequencyIntervalUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AttenuationPerFrequencyIntervalUom', AttenuationPerFrequencyIntervalUom)
_module_typeBindings.AttenuationPerFrequencyIntervalUom = AttenuationPerFrequencyIntervalUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityUom
class IsothermalCompressibilityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IsothermalCompressibilityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8102, 1)
    _Documentation = None
IsothermalCompressibilityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IsothermalCompressibilityUom, enum_prefix=None)
IsothermalCompressibilityUom.dm3kW_h = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='dm3/(kW.h)', tag='dm3kW_h')
IsothermalCompressibilityUom.dm3MJ = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='dm3/MJ', tag='dm3MJ')
IsothermalCompressibilityUom.m3kW_h = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='m3/(kW.h)', tag='m3kW_h')
IsothermalCompressibilityUom.m3J = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='m3/J', tag='m3J')
IsothermalCompressibilityUom.mm3J = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='mm3/J', tag='mm3J')
IsothermalCompressibilityUom.ptUKhp_h = IsothermalCompressibilityUom._CF_enumeration.addEnumeration(unicode_value='pt[UK]/(hp.h)', tag='ptUKhp_h')
IsothermalCompressibilityUom._InitializeFacetMap(IsothermalCompressibilityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IsothermalCompressibilityUom', IsothermalCompressibilityUom)
_module_typeBindings.IsothermalCompressibilityUom = IsothermalCompressibilityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceUom
class ElectricResistanceUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistanceUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8136, 1)
    _Documentation = None
ElectricResistanceUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricResistanceUom, enum_prefix=None)
ElectricResistanceUom.cohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='cohm', tag='cohm')
ElectricResistanceUom.dohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='dohm', tag='dohm')
ElectricResistanceUom.Eohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='Eohm', tag='Eohm')
ElectricResistanceUom.fohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='fohm', tag='fohm')
ElectricResistanceUom.Gohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='Gohm', tag='Gohm')
ElectricResistanceUom.kohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='kohm', tag='kohm')
ElectricResistanceUom.Mohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='Mohm', tag='Mohm')
ElectricResistanceUom.mohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='mohm', tag='mohm')
ElectricResistanceUom.nohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='nohm', tag='nohm')
ElectricResistanceUom.ohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='ohm', tag='ohm')
ElectricResistanceUom.pohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='pohm', tag='pohm')
ElectricResistanceUom.Tohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='Tohm', tag='Tohm')
ElectricResistanceUom.uohm = ElectricResistanceUom._CF_enumeration.addEnumeration(unicode_value='uohm', tag='uohm')
ElectricResistanceUom._InitializeFacetMap(ElectricResistanceUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricResistanceUom', ElectricResistanceUom)
_module_typeBindings.ElectricResistanceUom = ElectricResistanceUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeUom
class ReciprocalVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8208, 1)
    _Documentation = None
ReciprocalVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalVolumeUom, enum_prefix=None)
ReciprocalVolumeUom.n1bbl = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/bbl', tag='n1bbl')
ReciprocalVolumeUom.n1ft3 = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/ft3', tag='n1ft3')
ReciprocalVolumeUom.n1galUK = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/gal[UK]', tag='n1galUK')
ReciprocalVolumeUom.n1galUS = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/gal[US]', tag='n1galUS')
ReciprocalVolumeUom.n1L = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/L', tag='n1L')
ReciprocalVolumeUom.n1m3 = ReciprocalVolumeUom._CF_enumeration.addEnumeration(unicode_value='1/m3', tag='n1m3')
ReciprocalVolumeUom._InitializeFacetMap(ReciprocalVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalVolumeUom', ReciprocalVolumeUom)
_module_typeBindings.ReciprocalVolumeUom = ReciprocalVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}PressureUom
class PressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8242, 1)
    _Documentation = None
PressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureUom, enum_prefix=None)
PressureUom.n0_01_lbfft2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='0.01 lbf/ft2', tag='n0_01_lbfft2')
PressureUom.at = PressureUom._CF_enumeration.addEnumeration(unicode_value='at', tag='at')
PressureUom.atm = PressureUom._CF_enumeration.addEnumeration(unicode_value='atm', tag='atm')
PressureUom.bar = PressureUom._CF_enumeration.addEnumeration(unicode_value='bar', tag='bar')
PressureUom.cmH2O4degC = PressureUom._CF_enumeration.addEnumeration(unicode_value='cmH2O[4degC]', tag='cmH2O4degC')
PressureUom.cPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='cPa', tag='cPa')
PressureUom.dPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='dPa', tag='dPa')
PressureUom.dynecm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='dyne/cm2', tag='dynecm2')
PressureUom.EPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='EPa', tag='EPa')
PressureUom.fPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='fPa', tag='fPa')
PressureUom.GPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='GPa', tag='GPa')
PressureUom.hbar = PressureUom._CF_enumeration.addEnumeration(unicode_value='hbar', tag='hbar')
PressureUom.inH2O39degF = PressureUom._CF_enumeration.addEnumeration(unicode_value='inH2O[39degF]', tag='inH2O39degF')
PressureUom.inH2O60degF = PressureUom._CF_enumeration.addEnumeration(unicode_value='inH2O[60degF]', tag='inH2O60degF')
PressureUom.inHg32degF = PressureUom._CF_enumeration.addEnumeration(unicode_value='inHg[32degF]', tag='inHg32degF')
PressureUom.inHg60degF = PressureUom._CF_enumeration.addEnumeration(unicode_value='inHg[60degF]', tag='inHg60degF')
PressureUom.kgfcm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='kgf/cm2', tag='kgfcm2')
PressureUom.kgfm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='kgf/m2', tag='kgfm2')
PressureUom.kgfmm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='kgf/mm2', tag='kgfmm2')
PressureUom.kNm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='kN/m2', tag='kNm2')
PressureUom.kPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='kPa', tag='kPa')
PressureUom.kpsi = PressureUom._CF_enumeration.addEnumeration(unicode_value='kpsi', tag='kpsi')
PressureUom.lbfft2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='lbf/ft2', tag='lbfft2')
PressureUom.mbar = PressureUom._CF_enumeration.addEnumeration(unicode_value='mbar', tag='mbar')
PressureUom.mmHg0degC = PressureUom._CF_enumeration.addEnumeration(unicode_value='mmHg[0degC]', tag='mmHg0degC')
PressureUom.mPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='mPa', tag='mPa')
PressureUom.MPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='MPa', tag='MPa')
PressureUom.Mpsi = PressureUom._CF_enumeration.addEnumeration(unicode_value='Mpsi', tag='Mpsi')
PressureUom.Nm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='N/m2', tag='Nm2')
PressureUom.Nmm2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='N/mm2', tag='Nmm2')
PressureUom.nPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='nPa', tag='nPa')
PressureUom.Pa = PressureUom._CF_enumeration.addEnumeration(unicode_value='Pa', tag='Pa')
PressureUom.pPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='pPa', tag='pPa')
PressureUom.psi = PressureUom._CF_enumeration.addEnumeration(unicode_value='psi', tag='psi')
PressureUom.tonfUKft2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='tonf[UK]/ft2', tag='tonfUKft2')
PressureUom.tonfUSft2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='tonf[US]/ft2', tag='tonfUSft2')
PressureUom.tonfUSin2 = PressureUom._CF_enumeration.addEnumeration(unicode_value='tonf[US]/in2', tag='tonfUSin2')
PressureUom.torr = PressureUom._CF_enumeration.addEnumeration(unicode_value='torr', tag='torr')
PressureUom.TPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='TPa', tag='TPa')
PressureUom.ubar = PressureUom._CF_enumeration.addEnumeration(unicode_value='ubar', tag='ubar')
PressureUom.umHg0degC = PressureUom._CF_enumeration.addEnumeration(unicode_value='umHg[0degC]', tag='umHg0degC')
PressureUom.uPa = PressureUom._CF_enumeration.addEnumeration(unicode_value='uPa', tag='uPa')
PressureUom.upsi = PressureUom._CF_enumeration.addEnumeration(unicode_value='upsi', tag='upsi')
PressureUom._InitializeFacetMap(PressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureUom', PressureUom)
_module_typeBindings.PressureUom = PressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaUom
class AreaPerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8461, 1)
    _Documentation = None
AreaPerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerAreaUom, enum_prefix=None)
AreaPerAreaUom.emptyString = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
AreaPerAreaUom.area = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='%[area]', tag='area')
AreaPerAreaUom.cEuc = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='cEuc', tag='cEuc')
AreaPerAreaUom.Euc = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='Euc', tag='Euc')
AreaPerAreaUom.in2ft2 = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='in2/ft2', tag='in2ft2')
AreaPerAreaUom.in2in2 = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='in2/in2', tag='in2in2')
AreaPerAreaUom.m2m2 = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='m2/m2', tag='m2m2')
AreaPerAreaUom.mm2mm2 = AreaPerAreaUom._CF_enumeration.addEnumeration(unicode_value='mm2/mm2', tag='mm2mm2')
AreaPerAreaUom._InitializeFacetMap(AreaPerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerAreaUom', AreaPerAreaUom)
_module_typeBindings.AreaPerAreaUom = AreaPerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}AngularVelocityUom
class AngularVelocityUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularVelocityUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8508, 1)
    _Documentation = None
AngularVelocityUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AngularVelocityUom, enum_prefix=None)
AngularVelocityUom.degah = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='dega/h', tag='degah')
AngularVelocityUom.degamin = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='dega/min', tag='degamin')
AngularVelocityUom.degas = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='dega/s', tag='degas')
AngularVelocityUom.rads = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='rad/s', tag='rads')
AngularVelocityUom.revs = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='rev/s', tag='revs')
AngularVelocityUom.rpm = AngularVelocityUom._CF_enumeration.addEnumeration(unicode_value='rpm', tag='rpm')
AngularVelocityUom._InitializeFacetMap(AngularVelocityUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AngularVelocityUom', AngularVelocityUom)
_module_typeBindings.AngularVelocityUom = AngularVelocityUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeUom
class TimePerVolumeUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerVolumeUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8548, 1)
    _Documentation = None
TimePerVolumeUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerVolumeUom, enum_prefix=None)
TimePerVolumeUom.n0_001_dft3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='0.001 d/ft3', tag='n0_001_dft3')
TimePerVolumeUom.dbbl = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='d/bbl', tag='dbbl')
TimePerVolumeUom.dft3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='d/ft3', tag='dft3')
TimePerVolumeUom.dm3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='d/m3', tag='dm3')
TimePerVolumeUom.hft3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='h/ft3', tag='hft3')
TimePerVolumeUom.hm3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='h/m3', tag='hm3')
TimePerVolumeUom.sft3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='s/ft3', tag='sft3')
TimePerVolumeUom.sL = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='s/L', tag='sL')
TimePerVolumeUom.sm3 = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='s/m3', tag='sm3')
TimePerVolumeUom.sqtUK = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='s/qt[UK]', tag='sqtUK')
TimePerVolumeUom.sqtUS = TimePerVolumeUom._CF_enumeration.addEnumeration(unicode_value='s/qt[US]', tag='sqtUS')
TimePerVolumeUom._InitializeFacetMap(TimePerVolumeUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerVolumeUom', TimePerVolumeUom)
_module_typeBindings.TimePerVolumeUom = TimePerVolumeUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaUom
class EnergyLengthPerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8610, 1)
    _Documentation = None
EnergyLengthPerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyLengthPerAreaUom, enum_prefix=None)
EnergyLengthPerAreaUom.J_mm2 = EnergyLengthPerAreaUom._CF_enumeration.addEnumeration(unicode_value='J.m/m2', tag='J_mm2')
EnergyLengthPerAreaUom.kcalth_mcm2 = EnergyLengthPerAreaUom._CF_enumeration.addEnumeration(unicode_value='kcal[th].m/cm2', tag='kcalth_mcm2')
EnergyLengthPerAreaUom._InitializeFacetMap(EnergyLengthPerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerAreaUom', EnergyLengthPerAreaUom)
_module_typeBindings.EnergyLengthPerAreaUom = EnergyLengthPerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthUom
class ElectricResistancePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistancePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8624, 1)
    _Documentation = None
ElectricResistancePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricResistancePerLengthUom, enum_prefix=None)
ElectricResistancePerLengthUom.ohmm = ElectricResistancePerLengthUom._CF_enumeration.addEnumeration(unicode_value='ohm/m', tag='ohmm')
ElectricResistancePerLengthUom.uohmft = ElectricResistancePerLengthUom._CF_enumeration.addEnumeration(unicode_value='uohm/ft', tag='uohmft')
ElectricResistancePerLengthUom.uohmm = ElectricResistancePerLengthUom._CF_enumeration.addEnumeration(unicode_value='uohm/m', tag='uohmm')
ElectricResistancePerLengthUom._InitializeFacetMap(ElectricResistancePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricResistancePerLengthUom', ElectricResistancePerLengthUom)
_module_typeBindings.ElectricResistancePerLengthUom = ElectricResistancePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthUom
class ForcePerLengthUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerLengthUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8643, 1)
    _Documentation = None
ForcePerLengthUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerLengthUom, enum_prefix=None)
ForcePerLengthUom.n0_01_lbfft = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='0.01 lbf/ft', tag='n0_01_lbfft')
ForcePerLengthUom.n130_lbfm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1/30 lbf/m', tag='n130_lbfm')
ForcePerLengthUom.n130_Nm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='1/30 N/m', tag='n130_Nm')
ForcePerLengthUom.dynecm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='dyne/cm', tag='dynecm')
ForcePerLengthUom.kgfcm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='kgf/cm', tag='kgfcm')
ForcePerLengthUom.kNm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='kN/m', tag='kNm')
ForcePerLengthUom.lbfft = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbf/ft', tag='lbfft')
ForcePerLengthUom.lbfin = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='lbf/in', tag='lbfin')
ForcePerLengthUom.mNkm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='mN/km', tag='mNkm')
ForcePerLengthUom.mNm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='mN/m', tag='mNm')
ForcePerLengthUom.Nm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='N/m', tag='Nm')
ForcePerLengthUom.pdlcm = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='pdl/cm', tag='pdlcm')
ForcePerLengthUom.tonfUKft = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='tonf[UK]/ft', tag='tonfUKft')
ForcePerLengthUom.tonfUSft = ForcePerLengthUom._CF_enumeration.addEnumeration(unicode_value='tonf[US]/ft', tag='tonfUSft')
ForcePerLengthUom._InitializeFacetMap(ForcePerLengthUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerLengthUom', ForcePerLengthUom)
_module_typeBindings.ForcePerLengthUom = ForcePerLengthUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureUom
class ReciprocalPressureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalPressureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8723, 1)
    _Documentation = None
ReciprocalPressureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalPressureUom, enum_prefix=None)
ReciprocalPressureUom.n1bar = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/bar', tag='n1bar')
ReciprocalPressureUom.n1kPa = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/kPa', tag='n1kPa')
ReciprocalPressureUom.n1Pa = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/Pa', tag='n1Pa')
ReciprocalPressureUom.n1pPa = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/pPa', tag='n1pPa')
ReciprocalPressureUom.n1psi = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/psi', tag='n1psi')
ReciprocalPressureUom.n1upsi = ReciprocalPressureUom._CF_enumeration.addEnumeration(unicode_value='1/upsi', tag='n1upsi')
ReciprocalPressureUom._InitializeFacetMap(ReciprocalPressureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalPressureUom', ReciprocalPressureUom)
_module_typeBindings.ReciprocalPressureUom = ReciprocalPressureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LightExposureUom
class LightExposureUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LightExposureUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8769, 1)
    _Documentation = None
LightExposureUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LightExposureUom, enum_prefix=None)
LightExposureUom.footcandle_s = LightExposureUom._CF_enumeration.addEnumeration(unicode_value='footcandle.s', tag='footcandle_s')
LightExposureUom.lx_s = LightExposureUom._CF_enumeration.addEnumeration(unicode_value='lx.s', tag='lx_s')
LightExposureUom._InitializeFacetMap(LightExposureUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LightExposureUom', LightExposureUom)
_module_typeBindings.LightExposureUom = LightExposureUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaUom
class EnergyPerAreaUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerAreaUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8789, 1)
    _Documentation = None
EnergyPerAreaUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerAreaUom, enum_prefix=None)
EnergyPerAreaUom.ergcm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='erg/cm2', tag='ergcm2')
EnergyPerAreaUom.Jcm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='J/cm2', tag='Jcm2')
EnergyPerAreaUom.Jm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='J/m2', tag='Jm2')
EnergyPerAreaUom.kgf_mcm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='kgf.m/cm2', tag='kgf_mcm2')
EnergyPerAreaUom.lbf_ftin2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='lbf.ft/in2', tag='lbf_ftin2')
EnergyPerAreaUom.mJcm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='mJ/cm2', tag='mJcm2')
EnergyPerAreaUom.mJm2 = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='mJ/m2', tag='mJm2')
EnergyPerAreaUom.Nm = EnergyPerAreaUom._CF_enumeration.addEnumeration(unicode_value='N/m', tag='Nm')
EnergyPerAreaUom._InitializeFacetMap(EnergyPerAreaUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerAreaUom', EnergyPerAreaUom)
_module_typeBindings.EnergyPerAreaUom = EnergyPerAreaUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentUom
class MagneticDipoleMomentUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticDipoleMomentUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8833, 1)
    _Documentation = None
MagneticDipoleMomentUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticDipoleMomentUom, enum_prefix=None)
MagneticDipoleMomentUom.Wb_m = MagneticDipoleMomentUom._CF_enumeration.addEnumeration(unicode_value='Wb.m', tag='Wb_m')
MagneticDipoleMomentUom._InitializeFacetMap(MagneticDipoleMomentUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticDipoleMomentUom', MagneticDipoleMomentUom)
_module_typeBindings.MagneticDipoleMomentUom = MagneticDipoleMomentUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}DigitalStorageUom
class DigitalStorageUom (UomEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalStorageUom')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8857, 1)
    _Documentation = None
DigitalStorageUom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DigitalStorageUom, enum_prefix=None)
DigitalStorageUom.bit = DigitalStorageUom._CF_enumeration.addEnumeration(unicode_value='bit', tag='bit')
DigitalStorageUom.byte = DigitalStorageUom._CF_enumeration.addEnumeration(unicode_value='byte', tag='byte')
DigitalStorageUom.Kibyte = DigitalStorageUom._CF_enumeration.addEnumeration(unicode_value='Kibyte', tag='Kibyte')
DigitalStorageUom.Mibyte = DigitalStorageUom._CF_enumeration.addEnumeration(unicode_value='Mibyte', tag='Mibyte')
DigitalStorageUom._InitializeFacetMap(DigitalStorageUom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DigitalStorageUom', DigitalStorageUom)
_module_typeBindings.DigitalStorageUom = DigitalStorageUom

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ExistenceKind
class ExistenceKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """A list of lifecycle states like actual, required, planned, predicted, etc. These are used to qualify any top-level element (from Epicentre 2.1)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExistenceKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 19, 1)
    _Documentation = 'A list of lifecycle states like actual, required, planned, predicted, etc. These are used to qualify any top-level element (from Epicentre 2.1).'
ExistenceKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ExistenceKind, enum_prefix=None)
ExistenceKind.actual = ExistenceKind._CF_enumeration.addEnumeration(unicode_value='actual', tag='actual')
ExistenceKind.planned = ExistenceKind._CF_enumeration.addEnumeration(unicode_value='planned', tag='planned')
ExistenceKind.simulated = ExistenceKind._CF_enumeration.addEnumeration(unicode_value='simulated', tag='simulated')
ExistenceKind._InitializeFacetMap(ExistenceKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ExistenceKind', ExistenceKind)
_module_typeBindings.ExistenceKind = ExistenceKind

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MatrixCementKind
class MatrixCementKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Lithology matrix/cement description. The list of standard values is contained in the WITSML enumValues.xml file."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MatrixCementKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 41, 1)
    _Documentation = 'Lithology matrix/cement description. The list of standard values is contained in the WITSML enumValues.xml file.'
MatrixCementKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MatrixCementKind, enum_prefix=None)
MatrixCementKind.ankerite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='ankerite', tag='ankerite')
MatrixCementKind.calcite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='calcite', tag='calcite')
MatrixCementKind.chlorite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='chlorite', tag='chlorite')
MatrixCementKind.dolomite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='dolomite', tag='dolomite')
MatrixCementKind.illite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='illite', tag='illite')
MatrixCementKind.kaolinite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='kaolinite', tag='kaolinite')
MatrixCementKind.quartz = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='quartz', tag='quartz')
MatrixCementKind.siderite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='siderite', tag='siderite')
MatrixCementKind.smectite = MatrixCementKind._CF_enumeration.addEnumeration(unicode_value='smectite', tag='smectite')
MatrixCementKind._InitializeFacetMap(MatrixCementKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MatrixCementKind', MatrixCementKind)
_module_typeBindings.MatrixCementKind = MatrixCementKind

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}MeasureClass
class MeasureClass (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Measure class values. The list of standard values is contained in the WITSML enumValues.xml file."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasureClass')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 60, 1)
    _Documentation = 'Measure class values. The list of standard values is contained in the WITSML enumValues.xml file.'
MeasureClass._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MeasureClass, enum_prefix=None)
MeasureClass.absorbed_dose = MeasureClass._CF_enumeration.addEnumeration(unicode_value='absorbed dose', tag='absorbed_dose')
MeasureClass.activity_of_radioactivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='activity of radioactivity', tag='activity_of_radioactivity')
MeasureClass.amount_of_substance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance', tag='amount_of_substance')
MeasureClass.amount_of_substance_per_amount_of_substance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance per amount of substance', tag='amount_of_substance_per_amount_of_substance')
MeasureClass.amount_of_substance_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance per area', tag='amount_of_substance_per_area')
MeasureClass.amount_of_substance_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance per time', tag='amount_of_substance_per_time')
MeasureClass.amount_of_substance_per_time_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance per time per area', tag='amount_of_substance_per_time_per_area')
MeasureClass.amount_of_substance_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='amount of substance per volume', tag='amount_of_substance_per_volume')
MeasureClass.angle_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='angle per length', tag='angle_per_length')
MeasureClass.angle_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='angle per volume', tag='angle_per_volume')
MeasureClass.angular_acceleration = MeasureClass._CF_enumeration.addEnumeration(unicode_value='angular acceleration', tag='angular_acceleration')
MeasureClass.angular_velocity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='angular velocity', tag='angular_velocity')
MeasureClass.api_gamma_ray = MeasureClass._CF_enumeration.addEnumeration(unicode_value='api gamma ray', tag='api_gamma_ray')
MeasureClass.api_gravity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='api gravity', tag='api_gravity')
MeasureClass.api_neutron = MeasureClass._CF_enumeration.addEnumeration(unicode_value='api neutron', tag='api_neutron')
MeasureClass.area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area', tag='area')
MeasureClass.area_per_amount_of_substance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per amount of substance', tag='area_per_amount_of_substance')
MeasureClass.area_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per area', tag='area_per_area')
MeasureClass.area_per_count = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per count', tag='area_per_count')
MeasureClass.area_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per mass', tag='area_per_mass')
MeasureClass.area_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per time', tag='area_per_time')
MeasureClass.area_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='area per volume', tag='area_per_volume')
MeasureClass.attenuation_per_frequency_interval = MeasureClass._CF_enumeration.addEnumeration(unicode_value='attenuation per frequency interval', tag='attenuation_per_frequency_interval')
MeasureClass.capacitance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='capacitance', tag='capacitance')
MeasureClass.cation_exchange_capacity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='cation exchange capacity', tag='cation_exchange_capacity')
MeasureClass.data_transfer_speed = MeasureClass._CF_enumeration.addEnumeration(unicode_value='data transfer speed', tag='data_transfer_speed')
MeasureClass.diffusion_coefficient = MeasureClass._CF_enumeration.addEnumeration(unicode_value='diffusion coefficient', tag='diffusion_coefficient')
MeasureClass.diffusive_time_of_flight = MeasureClass._CF_enumeration.addEnumeration(unicode_value='diffusive time of flight', tag='diffusive_time_of_flight')
MeasureClass.digital_storage = MeasureClass._CF_enumeration.addEnumeration(unicode_value='digital storage', tag='digital_storage')
MeasureClass.dimensionless = MeasureClass._CF_enumeration.addEnumeration(unicode_value='dimensionless', tag='dimensionless')
MeasureClass.dipole_moment = MeasureClass._CF_enumeration.addEnumeration(unicode_value='dipole moment', tag='dipole_moment')
MeasureClass.dose_equivalent = MeasureClass._CF_enumeration.addEnumeration(unicode_value='dose equivalent', tag='dose_equivalent')
MeasureClass.dynamic_viscosity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='dynamic viscosity', tag='dynamic_viscosity')
MeasureClass.electric_charge = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric charge', tag='electric_charge')
MeasureClass.electric_charge_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric charge per area', tag='electric_charge_per_area')
MeasureClass.electric_charge_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric charge per mass', tag='electric_charge_per_mass')
MeasureClass.electric_charge_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric charge per volume', tag='electric_charge_per_volume')
MeasureClass.electric_conductance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric conductance', tag='electric_conductance')
MeasureClass.electric_conductivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric conductivity', tag='electric_conductivity')
MeasureClass.electric_current = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric current', tag='electric_current')
MeasureClass.electric_current_density = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric current density', tag='electric_current_density')
MeasureClass.electric_field_strength = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric field strength', tag='electric_field_strength')
MeasureClass.electric_potential_difference = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric potential difference', tag='electric_potential_difference')
MeasureClass.electric_resistance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric resistance', tag='electric_resistance')
MeasureClass.electric_resistance_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electric resistance per length', tag='electric_resistance_per_length')
MeasureClass.electrical_resistivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electrical resistivity', tag='electrical_resistivity')
MeasureClass.electromagnetic_moment = MeasureClass._CF_enumeration.addEnumeration(unicode_value='electromagnetic moment', tag='electromagnetic_moment')
MeasureClass.energy = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy', tag='energy')
MeasureClass.energy_length_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy length per area', tag='energy_length_per_area')
MeasureClass.energy_length_per_time_area_temperature = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy length per time area temperature', tag='energy_length_per_time_area_temperature')
MeasureClass.energy_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy per area', tag='energy_per_area')
MeasureClass.energy_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy per length', tag='energy_per_length')
MeasureClass.energy_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy per mass', tag='energy_per_mass')
MeasureClass.energy_per_mass_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy per mass per time', tag='energy_per_mass_per_time')
MeasureClass.energy_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='energy per volume', tag='energy_per_volume')
MeasureClass.force = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force', tag='force')
MeasureClass.force_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force area', tag='force_area')
MeasureClass.force_length_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force length per length', tag='force_length_per_length')
MeasureClass.force_per_force = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force per force', tag='force_per_force')
MeasureClass.force_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force per length', tag='force_per_length')
MeasureClass.force_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='force per volume', tag='force_per_volume')
MeasureClass.frequency = MeasureClass._CF_enumeration.addEnumeration(unicode_value='frequency', tag='frequency')
MeasureClass.frequency_interval = MeasureClass._CF_enumeration.addEnumeration(unicode_value='frequency interval', tag='frequency_interval')
MeasureClass.heat_capacity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='heat capacity', tag='heat_capacity')
MeasureClass.heat_flow_rate = MeasureClass._CF_enumeration.addEnumeration(unicode_value='heat flow rate', tag='heat_flow_rate')
MeasureClass.heat_transfer_coefficient = MeasureClass._CF_enumeration.addEnumeration(unicode_value='heat transfer coefficient', tag='heat_transfer_coefficient')
MeasureClass.illuminance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='illuminance', tag='illuminance')
MeasureClass.inductance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='inductance', tag='inductance')
MeasureClass.isothermal_compressibility = MeasureClass._CF_enumeration.addEnumeration(unicode_value='isothermal compressibility', tag='isothermal_compressibility')
MeasureClass.kinematic_viscosity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='kinematic viscosity', tag='kinematic_viscosity')
MeasureClass.length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length', tag='length')
MeasureClass.length_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per length', tag='length_per_length')
MeasureClass.length_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per mass', tag='length_per_mass')
MeasureClass.length_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per pressure', tag='length_per_pressure')
MeasureClass.length_per_temperature = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per temperature', tag='length_per_temperature')
MeasureClass.length_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per time', tag='length_per_time')
MeasureClass.length_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='length per volume', tag='length_per_volume')
MeasureClass.light_exposure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='light exposure', tag='light_exposure')
MeasureClass.linear_acceleration = MeasureClass._CF_enumeration.addEnumeration(unicode_value='linear acceleration', tag='linear_acceleration')
MeasureClass.linear_thermal_expansion = MeasureClass._CF_enumeration.addEnumeration(unicode_value='linear thermal expansion', tag='linear_thermal_expansion')
MeasureClass.logarithmic_power_ratio = MeasureClass._CF_enumeration.addEnumeration(unicode_value='logarithmic power ratio', tag='logarithmic_power_ratio')
MeasureClass.logarithmic_power_ratio_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='logarithmic power ratio per length', tag='logarithmic_power_ratio_per_length')
MeasureClass.luminance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='luminance', tag='luminance')
MeasureClass.luminous_efficacy = MeasureClass._CF_enumeration.addEnumeration(unicode_value='luminous efficacy', tag='luminous_efficacy')
MeasureClass.luminous_flux = MeasureClass._CF_enumeration.addEnumeration(unicode_value='luminous flux', tag='luminous_flux')
MeasureClass.luminous_intensity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='luminous intensity', tag='luminous_intensity')
MeasureClass.magnetic_dipole_moment = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic dipole moment', tag='magnetic_dipole_moment')
MeasureClass.magnetic_field_strength = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic field strength', tag='magnetic_field_strength')
MeasureClass.magnetic_flux = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic flux', tag='magnetic_flux')
MeasureClass.magnetic_flux_density = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic flux density', tag='magnetic_flux_density')
MeasureClass.magnetic_flux_density_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic flux density per length', tag='magnetic_flux_density_per_length')
MeasureClass.magnetic_permeability = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic permeability', tag='magnetic_permeability')
MeasureClass.magnetic_vector_potential = MeasureClass._CF_enumeration.addEnumeration(unicode_value='magnetic vector potential', tag='magnetic_vector_potential')
MeasureClass.mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass', tag='mass')
MeasureClass.mass_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass length', tag='mass_length')
MeasureClass.mass_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per area', tag='mass_per_area')
MeasureClass.mass_per_energy = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per energy', tag='mass_per_energy')
MeasureClass.mass_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per length', tag='mass_per_length')
MeasureClass.mass_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per mass', tag='mass_per_mass')
MeasureClass.mass_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per time', tag='mass_per_time')
MeasureClass.mass_per_time_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per time per area', tag='mass_per_time_per_area')
MeasureClass.mass_per_time_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per time per length', tag='mass_per_time_per_length')
MeasureClass.mass_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per volume', tag='mass_per_volume')
MeasureClass.mass_per_volume_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per volume per length', tag='mass_per_volume_per_length')
MeasureClass.mass_per_volume_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per volume per pressure', tag='mass_per_volume_per_pressure')
MeasureClass.mass_per_volume_per_temperature = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mass per volume per temperature', tag='mass_per_volume_per_temperature')
MeasureClass.mobility = MeasureClass._CF_enumeration.addEnumeration(unicode_value='mobility', tag='mobility')
MeasureClass.molar_energy = MeasureClass._CF_enumeration.addEnumeration(unicode_value='molar energy', tag='molar_energy')
MeasureClass.molar_heat_capacity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='molar heat capacity', tag='molar_heat_capacity')
MeasureClass.molar_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='molar volume', tag='molar_volume')
MeasureClass.molecular_weight = MeasureClass._CF_enumeration.addEnumeration(unicode_value='molecular weight', tag='molecular_weight')
MeasureClass.moment_of_force = MeasureClass._CF_enumeration.addEnumeration(unicode_value='moment of force', tag='moment_of_force')
MeasureClass.moment_of_inertia = MeasureClass._CF_enumeration.addEnumeration(unicode_value='moment of inertia', tag='moment_of_inertia')
MeasureClass.momentum = MeasureClass._CF_enumeration.addEnumeration(unicode_value='momentum', tag='momentum')
MeasureClass.normalized_power = MeasureClass._CF_enumeration.addEnumeration(unicode_value='normalized power', tag='normalized_power')
MeasureClass.permeability_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='permeability length', tag='permeability_length')
MeasureClass.permeability_rock = MeasureClass._CF_enumeration.addEnumeration(unicode_value='permeability rock', tag='permeability_rock')
MeasureClass.permittivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='permittivity', tag='permittivity')
MeasureClass.plane_angle = MeasureClass._CF_enumeration.addEnumeration(unicode_value='plane angle', tag='plane_angle')
MeasureClass.potential_difference_per_power_drop = MeasureClass._CF_enumeration.addEnumeration(unicode_value='potential difference per power drop', tag='potential_difference_per_power_drop')
MeasureClass.power = MeasureClass._CF_enumeration.addEnumeration(unicode_value='power', tag='power')
MeasureClass.power_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='power per area', tag='power_per_area')
MeasureClass.power_per_power = MeasureClass._CF_enumeration.addEnumeration(unicode_value='power per power', tag='power_per_power')
MeasureClass.power_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='power per volume', tag='power_per_volume')
MeasureClass.pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure', tag='pressure')
MeasureClass.pressure_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure per pressure', tag='pressure_per_pressure')
MeasureClass.pressure_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure per time', tag='pressure_per_time')
MeasureClass.pressure_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure per volume', tag='pressure_per_volume')
MeasureClass.pressure_squared = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure squared', tag='pressure_squared')
MeasureClass.pressure_squared_per_force_time_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure squared per force time per area', tag='pressure_squared_per_force_time_per_area')
MeasureClass.pressure_time_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='pressure time per volume', tag='pressure_time_per_volume')
MeasureClass.quantity_of_light = MeasureClass._CF_enumeration.addEnumeration(unicode_value='quantity of light', tag='quantity_of_light')
MeasureClass.radiance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='radiance', tag='radiance')
MeasureClass.radiant_intensity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='radiant intensity', tag='radiant_intensity')
MeasureClass.reciprocal_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal area', tag='reciprocal_area')
MeasureClass.reciprocal_electric_potential_difference = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal electric potential difference', tag='reciprocal_electric_potential_difference')
MeasureClass.reciprocal_force = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal force', tag='reciprocal_force')
MeasureClass.reciprocal_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal length', tag='reciprocal_length')
MeasureClass.reciprocal_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal mass', tag='reciprocal_mass')
MeasureClass.reciprocal_mass_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal mass time', tag='reciprocal_mass_time')
MeasureClass.reciprocal_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal pressure', tag='reciprocal_pressure')
MeasureClass.reciprocal_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal time', tag='reciprocal_time')
MeasureClass.reciprocal_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reciprocal volume', tag='reciprocal_volume')
MeasureClass.reluctance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='reluctance', tag='reluctance')
MeasureClass.second_moment_of_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='second moment of area', tag='second_moment_of_area')
MeasureClass.signaling_event_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='signaling event per time', tag='signaling_event_per_time')
MeasureClass.solid_angle = MeasureClass._CF_enumeration.addEnumeration(unicode_value='solid angle', tag='solid_angle')
MeasureClass.specific_heat_capacity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='specific heat capacity', tag='specific_heat_capacity')
MeasureClass.temperature_interval = MeasureClass._CF_enumeration.addEnumeration(unicode_value='temperature interval', tag='temperature_interval')
MeasureClass.temperature_interval_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='temperature interval per length', tag='temperature_interval_per_length')
MeasureClass.temperature_interval_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='temperature interval per pressure', tag='temperature_interval_per_pressure')
MeasureClass.temperature_interval_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='temperature interval per time', tag='temperature_interval_per_time')
MeasureClass.thermal_conductance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermal conductance', tag='thermal_conductance')
MeasureClass.thermal_conductivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermal conductivity', tag='thermal_conductivity')
MeasureClass.thermal_diffusivity = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermal diffusivity', tag='thermal_diffusivity')
MeasureClass.thermal_insulance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermal insulance', tag='thermal_insulance')
MeasureClass.thermal_resistance = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermal resistance', tag='thermal_resistance')
MeasureClass.thermodynamic_temperature = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermodynamic temperature', tag='thermodynamic_temperature')
MeasureClass.thermodynamic_temperature_per_thermodynamic_temperature = MeasureClass._CF_enumeration.addEnumeration(unicode_value='thermodynamic temperature per thermodynamic temperature', tag='thermodynamic_temperature_per_thermodynamic_temperature')
MeasureClass.time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='time', tag='time')
MeasureClass.time_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='time per length', tag='time_per_length')
MeasureClass.time_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='time per mass', tag='time_per_mass')
MeasureClass.time_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='time per time', tag='time_per_time')
MeasureClass.time_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='time per volume', tag='time_per_volume')
MeasureClass.vertical_coordinate = MeasureClass._CF_enumeration.addEnumeration(unicode_value='vertical coordinate', tag='vertical_coordinate')
MeasureClass.volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume', tag='volume')
MeasureClass.volume_flow_rate_per_volume_flow_rate = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume flow rate per volume flow rate', tag='volume_flow_rate_per_volume_flow_rate')
MeasureClass.volume_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per area', tag='volume_per_area')
MeasureClass.volume_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per length', tag='volume_per_length')
MeasureClass.volume_per_mass = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per mass', tag='volume_per_mass')
MeasureClass.volume_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per pressure', tag='volume_per_pressure')
MeasureClass.volume_per_rotation = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per rotation', tag='volume_per_rotation')
MeasureClass.volume_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time', tag='volume_per_time')
MeasureClass.volume_per_time_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time length', tag='volume_per_time_length')
MeasureClass.volume_per_time_per_area = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per area', tag='volume_per_time_per_area')
MeasureClass.volume_per_time_per_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per length', tag='volume_per_time_per_length')
MeasureClass.volume_per_time_per_pressure = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per pressure', tag='volume_per_time_per_pressure')
MeasureClass.volume_per_time_per_pressure_length = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per pressure length', tag='volume_per_time_per_pressure_length')
MeasureClass.volume_per_time_per_time = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per time', tag='volume_per_time_per_time')
MeasureClass.volume_per_time_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per time per volume', tag='volume_per_time_per_volume')
MeasureClass.volume_per_volume = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volume per volume', tag='volume_per_volume')
MeasureClass.volumetric_heat_transfer_coefficient = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volumetric heat transfer coefficient', tag='volumetric_heat_transfer_coefficient')
MeasureClass.volumetric_thermal_expansion = MeasureClass._CF_enumeration.addEnumeration(unicode_value='volumetric thermal expansion', tag='volumetric_thermal_expansion')
MeasureClass.unitless = MeasureClass._CF_enumeration.addEnumeration(unicode_value='unitless', tag='unitless')
MeasureClass._InitializeFacetMap(MeasureClass._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MeasureClass', MeasureClass)
_module_typeBindings.MeasureClass = MeasureClass

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LithostratigraphicRank
class LithostratigraphicRank (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Specifies the unit of lithostratigraphy."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LithostratigraphicRank')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 251, 1)
    _Documentation = 'Specifies the unit of lithostratigraphy.'
LithostratigraphicRank._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LithostratigraphicRank, enum_prefix=None)
LithostratigraphicRank.group = LithostratigraphicRank._CF_enumeration.addEnumeration(unicode_value='group', tag='group')
LithostratigraphicRank.formation = LithostratigraphicRank._CF_enumeration.addEnumeration(unicode_value='formation', tag='formation')
LithostratigraphicRank.member = LithostratigraphicRank._CF_enumeration.addEnumeration(unicode_value='member', tag='member')
LithostratigraphicRank.bed = LithostratigraphicRank._CF_enumeration.addEnumeration(unicode_value='bed', tag='bed')
LithostratigraphicRank._InitializeFacetMap(LithostratigraphicRank._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LithostratigraphicRank', LithostratigraphicRank)
_module_typeBindings.LithostratigraphicRank = LithostratigraphicRank

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}UnitOfMeasureExt
# superclasses pyxb.binding.datatypes.anySimpleType
class UnitOfMeasureExt (pyxb.binding.basis.STD_union):

    """A variant of UnitOfMeasure which has been extended to allow any user-defined unit of measure which follows an authority:unit pattern; the colon is mandatory.

This class is implemented in XML as a union between the list of valid units per the prevailing Energistics Units of Measure Specification and an XML pattern which mandates the central colon."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitOfMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 299, 1)
    _Documentation = 'A variant of UnitOfMeasure which has been extended to allow any user-defined unit of measure which follows an authority:unit pattern; the colon is mandatory.\n\nThis class is implemented in XML as a union between the list of valid units per the prevailing Energistics Units of Measure Specification and an XML pattern which mandates the central colon.'

    _MemberTypes = ( UnitOfMeasure, EnumExtensionPattern, )
UnitOfMeasureExt._CF_pattern = pyxb.binding.facets.CF_pattern()
UnitOfMeasureExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=UnitOfMeasureExt)
UnitOfMeasureExt.emptyString = '%'                # originally UnitOfMeasure.emptyString
UnitOfMeasureExt.area = '%[area]'                 # originally UnitOfMeasure.area
UnitOfMeasureExt.mass = '%[mass]'                 # originally UnitOfMeasure.mass
UnitOfMeasureExt.molar = '%[molar]'               # originally UnitOfMeasure.molar
UnitOfMeasureExt.vol = '%[vol]'                   # originally UnitOfMeasure.vol
UnitOfMeasureExt.bbldbbld = '(bbl/d)/(bbl/d)'     # originally UnitOfMeasure.bbldbbld
UnitOfMeasureExt.m3dm3d = '(m3/d)/(m3/d)'         # originally UnitOfMeasure.m3dm3d
UnitOfMeasureExt.m3sm3s = '(m3/s)/(m3/s)'         # originally UnitOfMeasure.m3sm3s
UnitOfMeasureExt.n0_001_bblft3 = '0.001 bbl/ft3'  # originally UnitOfMeasure.n0_001_bblft3
UnitOfMeasureExt.n0_001_bblm3 = '0.001 bbl/m3'    # originally UnitOfMeasure.n0_001_bblm3
UnitOfMeasureExt.n0_001_dft3 = '0.001 d/ft3'      # originally UnitOfMeasure.n0_001_dft3
UnitOfMeasureExt.n0_001_galUKbbl = '0.001 gal[UK]/bbl'# originally UnitOfMeasure.n0_001_galUKbbl
UnitOfMeasureExt.n0_001_galUKgalUK = '0.001 gal[UK]/gal[UK]'# originally UnitOfMeasure.n0_001_galUKgalUK
UnitOfMeasureExt.n0_001_galUSbbl = '0.001 gal[US]/bbl'# originally UnitOfMeasure.n0_001_galUSbbl
UnitOfMeasureExt.n0_001_galUSft3 = '0.001 gal[US]/ft3'# originally UnitOfMeasure.n0_001_galUSft3
UnitOfMeasureExt.n0_001_galUSgalUS = '0.001 gal[US]/gal[US]'# originally UnitOfMeasure.n0_001_galUSgalUS
UnitOfMeasureExt.n0_001_hft = '0.001 h/ft'        # originally UnitOfMeasure.n0_001_hft
UnitOfMeasureExt.n0_001_kPa2cP = '0.001 kPa2/cP'  # originally UnitOfMeasure.n0_001_kPa2cP
UnitOfMeasureExt.n0_001_lbmbbl = '0.001 lbm/bbl'  # originally UnitOfMeasure.n0_001_lbmbbl
UnitOfMeasureExt.n0_001_lbmgalUK = '0.001 lbm/gal[UK]'# originally UnitOfMeasure.n0_001_lbmgalUK
UnitOfMeasureExt.n0_001_lbmgalUS = '0.001 lbm/gal[US]'# originally UnitOfMeasure.n0_001_lbmgalUS
UnitOfMeasureExt.n0_001_psift = '0.001 psi/ft'    # originally UnitOfMeasure.n0_001_psift
UnitOfMeasureExt.n0_001_ptUKbbl = '0.001 pt[UK]/bbl'# originally UnitOfMeasure.n0_001_ptUKbbl
UnitOfMeasureExt.n0_001_seca = '0.001 seca'       # originally UnitOfMeasure.n0_001_seca
UnitOfMeasureExt.n0_01_bblbbl = '0.01 bbl/bbl'    # originally UnitOfMeasure.n0_01_bblbbl
UnitOfMeasureExt.n0_01_degaft = '0.01 dega/ft'    # originally UnitOfMeasure.n0_01_degaft
UnitOfMeasureExt.n0_01_degFft = '0.01 degF/ft'    # originally UnitOfMeasure.n0_01_degFft
UnitOfMeasureExt.n0_01_dm3km = '0.01 dm3/km'      # originally UnitOfMeasure.n0_01_dm3km
UnitOfMeasureExt.n0_01_ftft = '0.01 ft/ft'        # originally UnitOfMeasure.n0_01_ftft
UnitOfMeasureExt.n0_01_grainft3 = '0.01 grain/ft3'# originally UnitOfMeasure.n0_01_grainft3
UnitOfMeasureExt.n0_01_Lkg = '0.01 L/kg'          # originally UnitOfMeasure.n0_01_Lkg
UnitOfMeasureExt.n0_01_Lkm = '0.01 L/km'          # originally UnitOfMeasure.n0_01_Lkm
UnitOfMeasureExt.n0_01_lbfft = '0.01 lbf/ft'      # originally UnitOfMeasure.n0_01_lbfft
UnitOfMeasureExt.n0_01_lbfft2 = '0.01 lbf/ft2'    # originally UnitOfMeasure.n0_01_lbfft2
UnitOfMeasureExt.n0_01_lbmft2 = '0.01 lbm/ft2'    # originally UnitOfMeasure.n0_01_lbmft2
UnitOfMeasureExt.n0_01_psift = '0.01 psi/ft'      # originally UnitOfMeasure.n0_01_psift
UnitOfMeasureExt.n0_1_ft = '0.1 ft'               # originally UnitOfMeasure.n0_1_ft
UnitOfMeasureExt.n0_1_ftUS = '0.1 ft[US]'         # originally UnitOfMeasure.n0_1_ftUS
UnitOfMeasureExt.n0_1_galUSbbl = '0.1 gal[US]/bbl'# originally UnitOfMeasure.n0_1_galUSbbl
UnitOfMeasureExt.n0_1_in = '0.1 in'               # originally UnitOfMeasure.n0_1_in
UnitOfMeasureExt.n0_1_Lbbl = '0.1 L/bbl'          # originally UnitOfMeasure.n0_1_Lbbl
UnitOfMeasureExt.n0_1_lbmbbl = '0.1 lbm/bbl'      # originally UnitOfMeasure.n0_1_lbmbbl
UnitOfMeasureExt.n0_1_ptUSbbl = '0.1 pt[US]/bbl'  # originally UnitOfMeasure.n0_1_ptUSbbl
UnitOfMeasureExt.n0_1_yd = '0.1 yd'               # originally UnitOfMeasure.n0_1_yd
UnitOfMeasureExt.n1kg_s = '1/(kg.s)'              # originally UnitOfMeasure.n1kg_s
UnitOfMeasureExt.n116_in = '1/16 in'              # originally UnitOfMeasure.n116_in
UnitOfMeasureExt.n12_ft = '1/2 ft'                # originally UnitOfMeasure.n12_ft
UnitOfMeasureExt.n12_ms = '1/2 ms'                # originally UnitOfMeasure.n12_ms
UnitOfMeasureExt.n130_cm3min = '1/30 cm3/min'     # originally UnitOfMeasure.n130_cm3min
UnitOfMeasureExt.n130_degaft = '1/30 dega/ft'     # originally UnitOfMeasure.n130_degaft
UnitOfMeasureExt.n130_degam = '1/30 dega/m'       # originally UnitOfMeasure.n130_degam
UnitOfMeasureExt.n130_lbfm = '1/30 lbf/m'         # originally UnitOfMeasure.n130_lbfm
UnitOfMeasureExt.n130_mm = '1/30 m/m'             # originally UnitOfMeasure.n130_mm
UnitOfMeasureExt.n130_Nm = '1/30 N/m'             # originally UnitOfMeasure.n130_Nm
UnitOfMeasureExt.n132_in = '1/32 in'              # originally UnitOfMeasure.n132_in
UnitOfMeasureExt.n164_in = '1/64 in'              # originally UnitOfMeasure.n164_in
UnitOfMeasureExt.n1a = '1/a'                      # originally UnitOfMeasure.n1a
UnitOfMeasureExt.n1angstrom = '1/angstrom'        # originally UnitOfMeasure.n1angstrom
UnitOfMeasureExt.n1bar = '1/bar'                  # originally UnitOfMeasure.n1bar
UnitOfMeasureExt.n1bbl = '1/bbl'                  # originally UnitOfMeasure.n1bbl
UnitOfMeasureExt.n1cm = '1/cm'                    # originally UnitOfMeasure.n1cm
UnitOfMeasureExt.n1d = '1/d'                      # originally UnitOfMeasure.n1d
UnitOfMeasureExt.n1degC = '1/degC'                # originally UnitOfMeasure.n1degC
UnitOfMeasureExt.n1degF = '1/degF'                # originally UnitOfMeasure.n1degF
UnitOfMeasureExt.n1degR = '1/degR'                # originally UnitOfMeasure.n1degR
UnitOfMeasureExt.n1ft = '1/ft'                    # originally UnitOfMeasure.n1ft
UnitOfMeasureExt.n1ft2 = '1/ft2'                  # originally UnitOfMeasure.n1ft2
UnitOfMeasureExt.n1ft3 = '1/ft3'                  # originally UnitOfMeasure.n1ft3
UnitOfMeasureExt.n1g = '1/g'                      # originally UnitOfMeasure.n1g
UnitOfMeasureExt.n1galUK = '1/gal[UK]'            # originally UnitOfMeasure.n1galUK
UnitOfMeasureExt.n1galUS = '1/gal[US]'            # originally UnitOfMeasure.n1galUS
UnitOfMeasureExt.n1h = '1/h'                      # originally UnitOfMeasure.n1h
UnitOfMeasureExt.n1H = '1/H'                      # originally UnitOfMeasure.n1H
UnitOfMeasureExt.n1in = '1/in'                    # originally UnitOfMeasure.n1in
UnitOfMeasureExt.n1K = '1/K'                      # originally UnitOfMeasure.n1K
UnitOfMeasureExt.n1kg = '1/kg'                    # originally UnitOfMeasure.n1kg
UnitOfMeasureExt.n1km2 = '1/km2'                  # originally UnitOfMeasure.n1km2
UnitOfMeasureExt.n1kPa = '1/kPa'                  # originally UnitOfMeasure.n1kPa
UnitOfMeasureExt.n1L = '1/L'                      # originally UnitOfMeasure.n1L
UnitOfMeasureExt.n1lbf = '1/lbf'                  # originally UnitOfMeasure.n1lbf
UnitOfMeasureExt.n1lbm = '1/lbm'                  # originally UnitOfMeasure.n1lbm
UnitOfMeasureExt.n1m = '1/m'                      # originally UnitOfMeasure.n1m
UnitOfMeasureExt.n1m2 = '1/m2'                    # originally UnitOfMeasure.n1m2
UnitOfMeasureExt.n1m3 = '1/m3'                    # originally UnitOfMeasure.n1m3
UnitOfMeasureExt.n1mi = '1/mi'                    # originally UnitOfMeasure.n1mi
UnitOfMeasureExt.n1mi2 = '1/mi2'                  # originally UnitOfMeasure.n1mi2
UnitOfMeasureExt.n1min = '1/min'                  # originally UnitOfMeasure.n1min
UnitOfMeasureExt.n1mm = '1/mm'                    # originally UnitOfMeasure.n1mm
UnitOfMeasureExt.n1ms = '1/ms'                    # originally UnitOfMeasure.n1ms
UnitOfMeasureExt.n1N = '1/N'                      # originally UnitOfMeasure.n1N
UnitOfMeasureExt.n1nm = '1/nm'                    # originally UnitOfMeasure.n1nm
UnitOfMeasureExt.n1Pa = '1/Pa'                    # originally UnitOfMeasure.n1Pa
UnitOfMeasureExt.n1pPa = '1/pPa'                  # originally UnitOfMeasure.n1pPa
UnitOfMeasureExt.n1psi = '1/psi'                  # originally UnitOfMeasure.n1psi
UnitOfMeasureExt.n1s = '1/s'                      # originally UnitOfMeasure.n1s
UnitOfMeasureExt.n1upsi = '1/upsi'                # originally UnitOfMeasure.n1upsi
UnitOfMeasureExt.n1us = '1/us'                    # originally UnitOfMeasure.n1us
UnitOfMeasureExt.n1uV = '1/uV'                    # originally UnitOfMeasure.n1uV
UnitOfMeasureExt.n1V = '1/V'                      # originally UnitOfMeasure.n1V
UnitOfMeasureExt.n1wk = '1/wk'                    # originally UnitOfMeasure.n1wk
UnitOfMeasureExt.n1yd = '1/yd'                    # originally UnitOfMeasure.n1yd
UnitOfMeasureExt.n10_ft = '10 ft'                 # originally UnitOfMeasure.n10_ft
UnitOfMeasureExt.n10_in = '10 in'                 # originally UnitOfMeasure.n10_in
UnitOfMeasureExt.n10_km = '10 km'                 # originally UnitOfMeasure.n10_km
UnitOfMeasureExt.n10_kN = '10 kN'                 # originally UnitOfMeasure.n10_kN
UnitOfMeasureExt.n10_Mgm3 = '10 Mg/m3'            # originally UnitOfMeasure.n10_Mgm3
UnitOfMeasureExt.n100_ft = '100 ft'               # originally UnitOfMeasure.n100_ft
UnitOfMeasureExt.n100_kat = '100 ka[t]'           # originally UnitOfMeasure.n100_kat
UnitOfMeasureExt.n100_km = '100 km'               # originally UnitOfMeasure.n100_km
UnitOfMeasureExt.n1000_bbl = '1000 bbl'           # originally UnitOfMeasure.n1000_bbl
UnitOfMeasureExt.n1000_bbl_ftd = '1000 bbl.ft/d'  # originally UnitOfMeasure.n1000_bbl_ftd
UnitOfMeasureExt.n1000_bbld = '1000 bbl/d'        # originally UnitOfMeasure.n1000_bbld
UnitOfMeasureExt.n1000_ft = '1000 ft'             # originally UnitOfMeasure.n1000_ft
UnitOfMeasureExt.n1000_fth = '1000 ft/h'          # originally UnitOfMeasure.n1000_fth
UnitOfMeasureExt.n1000_fts = '1000 ft/s'          # originally UnitOfMeasure.n1000_fts
UnitOfMeasureExt.n1000_ft3 = '1000 ft3'           # originally UnitOfMeasure.n1000_ft3
UnitOfMeasureExt.n1000_ft3d_ft = '1000 ft3/(d.ft)'# originally UnitOfMeasure.n1000_ft3d_ft
UnitOfMeasureExt.n1000_ft3psi_d = '1000 ft3/(psi.d)'# originally UnitOfMeasure.n1000_ft3psi_d
UnitOfMeasureExt.n1000_ft3bbl = '1000 ft3/bbl'    # originally UnitOfMeasure.n1000_ft3bbl
UnitOfMeasureExt.n1000_ft3d = '1000 ft3/d'        # originally UnitOfMeasure.n1000_ft3d
UnitOfMeasureExt.n1000_galUK = '1000 gal[UK]'     # originally UnitOfMeasure.n1000_galUK
UnitOfMeasureExt.n1000_galUS = '1000 gal[US]'     # originally UnitOfMeasure.n1000_galUS
UnitOfMeasureExt.n1000_lbf_ft = '1000 lbf.ft'     # originally UnitOfMeasure.n1000_lbf_ft
UnitOfMeasureExt.n1000_m3 = '1000 m3'             # originally UnitOfMeasure.n1000_m3
UnitOfMeasureExt.n1000_m3d_m = '1000 m3/(d.m)'    # originally UnitOfMeasure.n1000_m3d_m
UnitOfMeasureExt.n1000_m3h_m = '1000 m3/(h.m)'    # originally UnitOfMeasure.n1000_m3h_m
UnitOfMeasureExt.n1000_m3d = '1000 m3/d'          # originally UnitOfMeasure.n1000_m3d
UnitOfMeasureExt.n1000_m3h = '1000 m3/h'          # originally UnitOfMeasure.n1000_m3h
UnitOfMeasureExt.n1000_m3m3 = '1000 m3/m3'        # originally UnitOfMeasure.n1000_m3m3
UnitOfMeasureExt.n1000_m4d = '1000 m4/d'          # originally UnitOfMeasure.n1000_m4d
UnitOfMeasureExt.n1E12_ft3 = '1E12 ft3'           # originally UnitOfMeasure.n1E12_ft3
UnitOfMeasureExt.n1E6_ft3dbbld = '1E6 (ft3/d)/(bbl/d)'# originally UnitOfMeasure.n1E6_ft3dbbld
UnitOfMeasureExt.n1E_6_acre_ftbbl = '1E-6 acre.ft/bbl'# originally UnitOfMeasure.n1E_6_acre_ftbbl
UnitOfMeasureExt.n1E6_bbl = '1E6 bbl'             # originally UnitOfMeasure.n1E6_bbl
UnitOfMeasureExt.n1E6_bblacre_ft = '1E6 bbl/(acre.ft)'# originally UnitOfMeasure.n1E6_bblacre_ft
UnitOfMeasureExt.n1E6_bblacre = '1E6 bbl/acre'    # originally UnitOfMeasure.n1E6_bblacre
UnitOfMeasureExt.n1E6_bbld = '1E6 bbl/d'          # originally UnitOfMeasure.n1E6_bbld
UnitOfMeasureExt.n1E_6_bblft3 = '1E-6 bbl/ft3'    # originally UnitOfMeasure.n1E_6_bblft3
UnitOfMeasureExt.n1E_6_bblm3 = '1E-6 bbl/m3'      # originally UnitOfMeasure.n1E_6_bblm3
UnitOfMeasureExt.n1E6_BtuIT = '1E6 Btu[IT]'       # originally UnitOfMeasure.n1E6_BtuIT
UnitOfMeasureExt.n1E6_BtuITh = '1E6 Btu[IT]/h'    # originally UnitOfMeasure.n1E6_BtuITh
UnitOfMeasureExt.n1E6_ft3 = '1E6 ft3'             # originally UnitOfMeasure.n1E6_ft3
UnitOfMeasureExt.n1E6_ft3acre_ft = '1E6 ft3/(acre.ft)'# originally UnitOfMeasure.n1E6_ft3acre_ft
UnitOfMeasureExt.n1E6_ft3bbl = '1E6 ft3/bbl'      # originally UnitOfMeasure.n1E6_ft3bbl
UnitOfMeasureExt.n1E6_ft3d = '1E6 ft3/d'          # originally UnitOfMeasure.n1E6_ft3d
UnitOfMeasureExt.n1E_6_galUS = '1E-6 gal[US]'     # originally UnitOfMeasure.n1E_6_galUS
UnitOfMeasureExt.n1E6_lbma = '1E6 lbm/a'          # originally UnitOfMeasure.n1E6_lbma
UnitOfMeasureExt.n1E6_m3 = '1E6 m3'               # originally UnitOfMeasure.n1E6_m3
UnitOfMeasureExt.n1E_6_m3m3_degC = '1E-6 m3/(m3.degC)'# originally UnitOfMeasure.n1E_6_m3m3_degC
UnitOfMeasureExt.n1E_6_m3m3_degF = '1E-6 m3/(m3.degF)'# originally UnitOfMeasure.n1E_6_m3m3_degF
UnitOfMeasureExt.n1E6_m3d = '1E6 m3/d'            # originally UnitOfMeasure.n1E6_m3d
UnitOfMeasureExt.n1E_9_1ft = '1E-9 1/ft'          # originally UnitOfMeasure.n1E_9_1ft
UnitOfMeasureExt.n1E9_bbl = '1E9 bbl'             # originally UnitOfMeasure.n1E9_bbl
UnitOfMeasureExt.n1E9_ft3 = '1E9 ft3'             # originally UnitOfMeasure.n1E9_ft3
UnitOfMeasureExt.n30_ft = '30 ft'                 # originally UnitOfMeasure.n30_ft
UnitOfMeasureExt.n30_m = '30 m'                   # originally UnitOfMeasure.n30_m
UnitOfMeasureExt.A = 'A'                          # originally UnitOfMeasure.A
UnitOfMeasureExt.a = 'a'                          # originally UnitOfMeasure.a
UnitOfMeasureExt.A_h = 'A.h'                      # originally UnitOfMeasure.A_h
UnitOfMeasureExt.A_m2 = 'A.m2'                    # originally UnitOfMeasure.A_m2
UnitOfMeasureExt.A_s = 'A.s'                      # originally UnitOfMeasure.A_s
UnitOfMeasureExt.A_skg = 'A.s/kg'                 # originally UnitOfMeasure.A_skg
UnitOfMeasureExt.A_sm3 = 'A.s/m3'                 # originally UnitOfMeasure.A_sm3
UnitOfMeasureExt.Acm2 = 'A/cm2'                   # originally UnitOfMeasure.Acm2
UnitOfMeasureExt.Aft2 = 'A/ft2'                   # originally UnitOfMeasure.Aft2
UnitOfMeasureExt.Am = 'A/m'                       # originally UnitOfMeasure.Am
UnitOfMeasureExt.Am2 = 'A/m2'                     # originally UnitOfMeasure.Am2
UnitOfMeasureExt.Amm = 'A/mm'                     # originally UnitOfMeasure.Amm
UnitOfMeasureExt.Amm2 = 'A/mm2'                   # originally UnitOfMeasure.Amm2
UnitOfMeasureExt.at = 'a[t]'                      # originally UnitOfMeasure.at
UnitOfMeasureExt.acre = 'acre'                    # originally UnitOfMeasure.acre
UnitOfMeasureExt.acre_ft = 'acre.ft'              # originally UnitOfMeasure.acre_ft
UnitOfMeasureExt.ag = 'ag'                        # originally UnitOfMeasure.ag
UnitOfMeasureExt.aJ = 'aJ'                        # originally UnitOfMeasure.aJ
UnitOfMeasureExt.angstrom = 'angstrom'            # originally UnitOfMeasure.angstrom
UnitOfMeasureExt.at_ = 'at'                       # originally UnitOfMeasure.at_
UnitOfMeasureExt.atm = 'atm'                      # originally UnitOfMeasure.atm
UnitOfMeasureExt.atmft = 'atm/ft'                 # originally UnitOfMeasure.atmft
UnitOfMeasureExt.atmh = 'atm/h'                   # originally UnitOfMeasure.atmh
UnitOfMeasureExt.atmhm = 'atm/hm'                 # originally UnitOfMeasure.atmhm
UnitOfMeasureExt.atmm = 'atm/m'                   # originally UnitOfMeasure.atmm
UnitOfMeasureExt.b = 'b'                          # originally UnitOfMeasure.b
UnitOfMeasureExt.B = 'B'                          # originally UnitOfMeasure.B
UnitOfMeasureExt.B_W = 'B.W'                      # originally UnitOfMeasure.B_W
UnitOfMeasureExt.bcm3 = 'b/cm3'                   # originally UnitOfMeasure.bcm3
UnitOfMeasureExt.Bm = 'B/m'                       # originally UnitOfMeasure.Bm
UnitOfMeasureExt.BO = 'B/O'                       # originally UnitOfMeasure.BO
UnitOfMeasureExt.bar = 'bar'                      # originally UnitOfMeasure.bar
UnitOfMeasureExt.barh = 'bar/h'                   # originally UnitOfMeasure.barh
UnitOfMeasureExt.barkm = 'bar/km'                 # originally UnitOfMeasure.barkm
UnitOfMeasureExt.barm = 'bar/m'                   # originally UnitOfMeasure.barm
UnitOfMeasureExt.bar2 = 'bar2'                    # originally UnitOfMeasure.bar2
UnitOfMeasureExt.bar2cP = 'bar2/cP'               # originally UnitOfMeasure.bar2cP
UnitOfMeasureExt.bbl = 'bbl'                      # originally UnitOfMeasure.bbl
UnitOfMeasureExt.bblacre_ft = 'bbl/(acre.ft)'     # originally UnitOfMeasure.bblacre_ft
UnitOfMeasureExt.bbld_acre_ft = 'bbl/(d.acre.ft)' # originally UnitOfMeasure.bbld_acre_ft
UnitOfMeasureExt.bbld_ft = 'bbl/(d.ft)'           # originally UnitOfMeasure.bbld_ft
UnitOfMeasureExt.bblft_psi_d = 'bbl/(ft.psi.d)'   # originally UnitOfMeasure.bblft_psi_d
UnitOfMeasureExt.bblkPa_d = 'bbl/(kPa.d)'         # originally UnitOfMeasure.bblkPa_d
UnitOfMeasureExt.bblpsi_d = 'bbl/(psi.d)'         # originally UnitOfMeasure.bblpsi_d
UnitOfMeasureExt.bblacre = 'bbl/acre'             # originally UnitOfMeasure.bblacre
UnitOfMeasureExt.bblbbl = 'bbl/bbl'               # originally UnitOfMeasure.bblbbl
UnitOfMeasureExt.bbld = 'bbl/d'                   # originally UnitOfMeasure.bbld
UnitOfMeasureExt.bbld2 = 'bbl/d2'                 # originally UnitOfMeasure.bbld2
UnitOfMeasureExt.bblft = 'bbl/ft'                 # originally UnitOfMeasure.bblft
UnitOfMeasureExt.bblft3 = 'bbl/ft3'               # originally UnitOfMeasure.bblft3
UnitOfMeasureExt.bblh = 'bbl/h'                   # originally UnitOfMeasure.bblh
UnitOfMeasureExt.bblh2 = 'bbl/h2'                 # originally UnitOfMeasure.bblh2
UnitOfMeasureExt.bblin = 'bbl/in'                 # originally UnitOfMeasure.bblin
UnitOfMeasureExt.bblm3 = 'bbl/m3'                 # originally UnitOfMeasure.bblm3
UnitOfMeasureExt.bblmi = 'bbl/mi'                 # originally UnitOfMeasure.bblmi
UnitOfMeasureExt.bblmin = 'bbl/min'               # originally UnitOfMeasure.bblmin
UnitOfMeasureExt.bblpsi = 'bbl/psi'               # originally UnitOfMeasure.bblpsi
UnitOfMeasureExt.bbltonUK = 'bbl/ton[UK]'         # originally UnitOfMeasure.bbltonUK
UnitOfMeasureExt.bbltonUS = 'bbl/ton[US]'         # originally UnitOfMeasure.bbltonUS
UnitOfMeasureExt.Bd = 'Bd'                        # originally UnitOfMeasure.Bd
UnitOfMeasureExt.bit = 'bit'                      # originally UnitOfMeasure.bit
UnitOfMeasureExt.bits = 'bit/s'                   # originally UnitOfMeasure.bits
UnitOfMeasureExt.Bq = 'Bq'                        # originally UnitOfMeasure.Bq
UnitOfMeasureExt.Bqkg = 'Bq/kg'                   # originally UnitOfMeasure.Bqkg
UnitOfMeasureExt.BtuIT = 'Btu[IT]'                # originally UnitOfMeasure.BtuIT
UnitOfMeasureExt.BtuIT_inh_ft2_degF = 'Btu[IT].in/(h.ft2.degF)'# originally UnitOfMeasure.BtuIT_inh_ft2_degF
UnitOfMeasureExt.BtuITh_ft_degF = 'Btu[IT]/(h.ft.degF)'# originally UnitOfMeasure.BtuITh_ft_degF
UnitOfMeasureExt.BtuITh_ft2 = 'Btu[IT]/(h.ft2)'   # originally UnitOfMeasure.BtuITh_ft2
UnitOfMeasureExt.BtuITh_ft2_degF = 'Btu[IT]/(h.ft2.degF)'# originally UnitOfMeasure.BtuITh_ft2_degF
UnitOfMeasureExt.BtuITh_ft2_degR = 'Btu[IT]/(h.ft2.degR)'# originally UnitOfMeasure.BtuITh_ft2_degR
UnitOfMeasureExt.BtuITh_ft3 = 'Btu[IT]/(h.ft3)'   # originally UnitOfMeasure.BtuITh_ft3
UnitOfMeasureExt.BtuITh_ft3_degF = 'Btu[IT]/(h.ft3.degF)'# originally UnitOfMeasure.BtuITh_ft3_degF
UnitOfMeasureExt.BtuITh_m2_degC = 'Btu[IT]/(h.m2.degC)'# originally UnitOfMeasure.BtuITh_m2_degC
UnitOfMeasureExt.BtuIThp_h = 'Btu[IT]/(hp.h)'     # originally UnitOfMeasure.BtuIThp_h
UnitOfMeasureExt.BtuITlbm_degF = 'Btu[IT]/(lbm.degF)'# originally UnitOfMeasure.BtuITlbm_degF
UnitOfMeasureExt.BtuITlbm_degR = 'Btu[IT]/(lbm.degR)'# originally UnitOfMeasure.BtuITlbm_degR
UnitOfMeasureExt.BtuITlbmol_degF = 'Btu[IT]/(lbmol.degF)'# originally UnitOfMeasure.BtuITlbmol_degF
UnitOfMeasureExt.BtuITs_ft2 = 'Btu[IT]/(s.ft2)'   # originally UnitOfMeasure.BtuITs_ft2
UnitOfMeasureExt.BtuITs_ft2_degF = 'Btu[IT]/(s.ft2.degF)'# originally UnitOfMeasure.BtuITs_ft2_degF
UnitOfMeasureExt.BtuITs_ft3 = 'Btu[IT]/(s.ft3)'   # originally UnitOfMeasure.BtuITs_ft3
UnitOfMeasureExt.BtuITs_ft3_degF = 'Btu[IT]/(s.ft3.degF)'# originally UnitOfMeasure.BtuITs_ft3_degF
UnitOfMeasureExt.BtuITbbl = 'Btu[IT]/bbl'         # originally UnitOfMeasure.BtuITbbl
UnitOfMeasureExt.BtuITft3 = 'Btu[IT]/ft3'         # originally UnitOfMeasure.BtuITft3
UnitOfMeasureExt.BtuITgalUK = 'Btu[IT]/gal[UK]'   # originally UnitOfMeasure.BtuITgalUK
UnitOfMeasureExt.BtuITgalUS = 'Btu[IT]/gal[US]'   # originally UnitOfMeasure.BtuITgalUS
UnitOfMeasureExt.BtuITh = 'Btu[IT]/h'             # originally UnitOfMeasure.BtuITh
UnitOfMeasureExt.BtuITlbm = 'Btu[IT]/lbm'         # originally UnitOfMeasure.BtuITlbm
UnitOfMeasureExt.BtuITlbmol = 'Btu[IT]/lbmol'     # originally UnitOfMeasure.BtuITlbmol
UnitOfMeasureExt.BtuITmin = 'Btu[IT]/min'         # originally UnitOfMeasure.BtuITmin
UnitOfMeasureExt.BtuITs = 'Btu[IT]/s'             # originally UnitOfMeasure.BtuITs
UnitOfMeasureExt.Btuth = 'Btu[th]'                # originally UnitOfMeasure.Btuth
UnitOfMeasureExt.BtuUK = 'Btu[UK]'                # originally UnitOfMeasure.BtuUK
UnitOfMeasureExt.byte = 'byte'                    # originally UnitOfMeasure.byte
UnitOfMeasureExt.bytes = 'byte/s'                 # originally UnitOfMeasure.bytes
UnitOfMeasureExt.C = 'C'                          # originally UnitOfMeasure.C
UnitOfMeasureExt.C_m = 'C.m'                      # originally UnitOfMeasure.C_m
UnitOfMeasureExt.Ccm2 = 'C/cm2'                   # originally UnitOfMeasure.Ccm2
UnitOfMeasureExt.Ccm3 = 'C/cm3'                   # originally UnitOfMeasure.Ccm3
UnitOfMeasureExt.Cg = 'C/g'                       # originally UnitOfMeasure.Cg
UnitOfMeasureExt.Ckg = 'C/kg'                     # originally UnitOfMeasure.Ckg
UnitOfMeasureExt.Cm2 = 'C/m2'                     # originally UnitOfMeasure.Cm2
UnitOfMeasureExt.Cm3 = 'C/m3'                     # originally UnitOfMeasure.Cm3
UnitOfMeasureExt.Cmm2 = 'C/mm2'                   # originally UnitOfMeasure.Cmm2
UnitOfMeasureExt.Cmm3 = 'C/mm3'                   # originally UnitOfMeasure.Cmm3
UnitOfMeasureExt.ca = 'ca'                        # originally UnitOfMeasure.ca
UnitOfMeasureExt.cA = 'cA'                        # originally UnitOfMeasure.cA
UnitOfMeasureExt.calIT = 'cal[IT]'                # originally UnitOfMeasure.calIT
UnitOfMeasureExt.calth = 'cal[th]'                # originally UnitOfMeasure.calth
UnitOfMeasureExt.calthg_K = 'cal[th]/(g.K)'       # originally UnitOfMeasure.calthg_K
UnitOfMeasureExt.calthh_cm_degC = 'cal[th]/(h.cm.degC)'# originally UnitOfMeasure.calthh_cm_degC
UnitOfMeasureExt.calthh_cm2 = 'cal[th]/(h.cm2)'   # originally UnitOfMeasure.calthh_cm2
UnitOfMeasureExt.calthh_cm2_degC = 'cal[th]/(h.cm2.degC)'# originally UnitOfMeasure.calthh_cm2_degC
UnitOfMeasureExt.calthh_cm3 = 'cal[th]/(h.cm3)'   # originally UnitOfMeasure.calthh_cm3
UnitOfMeasureExt.calthmol_degC = 'cal[th]/(mol.degC)'# originally UnitOfMeasure.calthmol_degC
UnitOfMeasureExt.calths_cm_degC = 'cal[th]/(s.cm.degC)'# originally UnitOfMeasure.calths_cm_degC
UnitOfMeasureExt.calths_cm2_degC = 'cal[th]/(s.cm2.degC)'# originally UnitOfMeasure.calths_cm2_degC
UnitOfMeasureExt.calths_cm3 = 'cal[th]/(s.cm3)'   # originally UnitOfMeasure.calths_cm3
UnitOfMeasureExt.calthcm3 = 'cal[th]/cm3'         # originally UnitOfMeasure.calthcm3
UnitOfMeasureExt.calthg = 'cal[th]/g'             # originally UnitOfMeasure.calthg
UnitOfMeasureExt.calthh = 'cal[th]/h'             # originally UnitOfMeasure.calthh
UnitOfMeasureExt.calthkg = 'cal[th]/kg'           # originally UnitOfMeasure.calthkg
UnitOfMeasureExt.calthlbm = 'cal[th]/lbm'         # originally UnitOfMeasure.calthlbm
UnitOfMeasureExt.calthmL = 'cal[th]/mL'           # originally UnitOfMeasure.calthmL
UnitOfMeasureExt.calthmm3 = 'cal[th]/mm3'         # originally UnitOfMeasure.calthmm3
UnitOfMeasureExt.cC = 'cC'                        # originally UnitOfMeasure.cC
UnitOfMeasureExt.ccalth = 'ccal[th]'              # originally UnitOfMeasure.ccalth
UnitOfMeasureExt.ccgr = 'ccgr'                    # originally UnitOfMeasure.ccgr
UnitOfMeasureExt.cd = 'cd'                        # originally UnitOfMeasure.cd
UnitOfMeasureExt.cdm2 = 'cd/m2'                   # originally UnitOfMeasure.cdm2
UnitOfMeasureExt.cEuc = 'cEuc'                    # originally UnitOfMeasure.cEuc
UnitOfMeasureExt.ceV = 'ceV'                      # originally UnitOfMeasure.ceV
UnitOfMeasureExt.cF = 'cF'                        # originally UnitOfMeasure.cF
UnitOfMeasureExt.cg = 'cg'                        # originally UnitOfMeasure.cg
UnitOfMeasureExt.cgauss = 'cgauss'                # originally UnitOfMeasure.cgauss
UnitOfMeasureExt.cgr = 'cgr'                      # originally UnitOfMeasure.cgr
UnitOfMeasureExt.cGy = 'cGy'                      # originally UnitOfMeasure.cGy
UnitOfMeasureExt.cH = 'cH'                        # originally UnitOfMeasure.cH
UnitOfMeasureExt.chain = 'chain'                  # originally UnitOfMeasure.chain
UnitOfMeasureExt.chainBnA = 'chain[BnA]'          # originally UnitOfMeasure.chainBnA
UnitOfMeasureExt.chainBnB = 'chain[BnB]'          # originally UnitOfMeasure.chainBnB
UnitOfMeasureExt.chainCla = 'chain[Cla]'          # originally UnitOfMeasure.chainCla
UnitOfMeasureExt.chainInd37 = 'chain[Ind37]'      # originally UnitOfMeasure.chainInd37
UnitOfMeasureExt.chainSe = 'chain[Se]'            # originally UnitOfMeasure.chainSe
UnitOfMeasureExt.chainSeT = 'chain[SeT]'          # originally UnitOfMeasure.chainSeT
UnitOfMeasureExt.chainUS = 'chain[US]'            # originally UnitOfMeasure.chainUS
UnitOfMeasureExt.cHz = 'cHz'                      # originally UnitOfMeasure.cHz
UnitOfMeasureExt.Ci = 'Ci'                        # originally UnitOfMeasure.Ci
UnitOfMeasureExt.cJ = 'cJ'                        # originally UnitOfMeasure.cJ
UnitOfMeasureExt.cm = 'cm'                        # originally UnitOfMeasure.cm
UnitOfMeasureExt.cma = 'cm/a'                     # originally UnitOfMeasure.cma
UnitOfMeasureExt.cms = 'cm/s'                     # originally UnitOfMeasure.cms
UnitOfMeasureExt.cms2 = 'cm/s2'                   # originally UnitOfMeasure.cms2
UnitOfMeasureExt.cm2 = 'cm2'                      # originally UnitOfMeasure.cm2
UnitOfMeasureExt.cm2g = 'cm2/g'                   # originally UnitOfMeasure.cm2g
UnitOfMeasureExt.cm2s = 'cm2/s'                   # originally UnitOfMeasure.cm2s
UnitOfMeasureExt.cm3 = 'cm3'                      # originally UnitOfMeasure.cm3
UnitOfMeasureExt.cm3cm3 = 'cm3/cm3'               # originally UnitOfMeasure.cm3cm3
UnitOfMeasureExt.cm3g = 'cm3/g'                   # originally UnitOfMeasure.cm3g
UnitOfMeasureExt.cm3h = 'cm3/h'                   # originally UnitOfMeasure.cm3h
UnitOfMeasureExt.cm3L = 'cm3/L'                   # originally UnitOfMeasure.cm3L
UnitOfMeasureExt.cm3m3 = 'cm3/m3'                 # originally UnitOfMeasure.cm3m3
UnitOfMeasureExt.cm3min = 'cm3/min'               # originally UnitOfMeasure.cm3min
UnitOfMeasureExt.cm3s = 'cm3/s'                   # originally UnitOfMeasure.cm3s
UnitOfMeasureExt.cm4 = 'cm4'                      # originally UnitOfMeasure.cm4
UnitOfMeasureExt.cmH2O4degC = 'cmH2O[4degC]'      # originally UnitOfMeasure.cmH2O4degC
UnitOfMeasureExt.cN = 'cN'                        # originally UnitOfMeasure.cN
UnitOfMeasureExt.cohm = 'cohm'                    # originally UnitOfMeasure.cohm
UnitOfMeasureExt.cP = 'cP'                        # originally UnitOfMeasure.cP
UnitOfMeasureExt.cPa = 'cPa'                      # originally UnitOfMeasure.cPa
UnitOfMeasureExt.crd = 'crd'                      # originally UnitOfMeasure.crd
UnitOfMeasureExt.cS = 'cS'                        # originally UnitOfMeasure.cS
UnitOfMeasureExt.cs = 'cs'                        # originally UnitOfMeasure.cs
UnitOfMeasureExt.cSt = 'cSt'                      # originally UnitOfMeasure.cSt
UnitOfMeasureExt.ct = 'ct'                        # originally UnitOfMeasure.ct
UnitOfMeasureExt.cT = 'cT'                        # originally UnitOfMeasure.cT
UnitOfMeasureExt.cu = 'cu'                        # originally UnitOfMeasure.cu
UnitOfMeasureExt.cV = 'cV'                        # originally UnitOfMeasure.cV
UnitOfMeasureExt.cW = 'cW'                        # originally UnitOfMeasure.cW
UnitOfMeasureExt.cWb = 'cWb'                      # originally UnitOfMeasure.cWb
UnitOfMeasureExt.cwtUK = 'cwt[UK]'                # originally UnitOfMeasure.cwtUK
UnitOfMeasureExt.cwtUS = 'cwt[US]'                # originally UnitOfMeasure.cwtUS
UnitOfMeasureExt.D = 'D'                          # originally UnitOfMeasure.D
UnitOfMeasureExt.d = 'd'                          # originally UnitOfMeasure.d
UnitOfMeasureExt.D_ft = 'D.ft'                    # originally UnitOfMeasure.D_ft
UnitOfMeasureExt.D_m = 'D.m'                      # originally UnitOfMeasure.D_m
UnitOfMeasureExt.DPa_s = 'D/(Pa.s)'               # originally UnitOfMeasure.DPa_s
UnitOfMeasureExt.dbbl = 'd/bbl'                   # originally UnitOfMeasure.dbbl
UnitOfMeasureExt.DcP = 'D/cP'                     # originally UnitOfMeasure.DcP
UnitOfMeasureExt.dft3 = 'd/ft3'                   # originally UnitOfMeasure.dft3
UnitOfMeasureExt.dm3 = 'd/m3'                     # originally UnitOfMeasure.dm3
UnitOfMeasureExt.DAPI = 'D[API]'                  # originally UnitOfMeasure.DAPI
UnitOfMeasureExt.dA = 'dA'                        # originally UnitOfMeasure.dA
UnitOfMeasureExt.dam = 'dam'                      # originally UnitOfMeasure.dam
UnitOfMeasureExt.daN = 'daN'                      # originally UnitOfMeasure.daN
UnitOfMeasureExt.daN_m = 'daN.m'                  # originally UnitOfMeasure.daN_m
UnitOfMeasureExt.dAPI = 'dAPI'                    # originally UnitOfMeasure.dAPI
UnitOfMeasureExt.dB = 'dB'                        # originally UnitOfMeasure.dB
UnitOfMeasureExt.dB_mW = 'dB.mW'                  # originally UnitOfMeasure.dB_mW
UnitOfMeasureExt.dB_MW = 'dB.MW'                  # originally UnitOfMeasure.dB_MW
UnitOfMeasureExt.dB_W = 'dB.W'                    # originally UnitOfMeasure.dB_W
UnitOfMeasureExt.dBft = 'dB/ft'                   # originally UnitOfMeasure.dBft
UnitOfMeasureExt.dBkm = 'dB/km'                   # originally UnitOfMeasure.dBkm
UnitOfMeasureExt.dBm = 'dB/m'                     # originally UnitOfMeasure.dBm
UnitOfMeasureExt.dBO = 'dB/O'                     # originally UnitOfMeasure.dBO
UnitOfMeasureExt.dC = 'dC'                        # originally UnitOfMeasure.dC
UnitOfMeasureExt.dcalth = 'dcal[th]'              # originally UnitOfMeasure.dcalth
UnitOfMeasureExt.dega = 'dega'                    # originally UnitOfMeasure.dega
UnitOfMeasureExt.degaft = 'dega/ft'               # originally UnitOfMeasure.degaft
UnitOfMeasureExt.degah = 'dega/h'                 # originally UnitOfMeasure.degah
UnitOfMeasureExt.degam = 'dega/m'                 # originally UnitOfMeasure.degam
UnitOfMeasureExt.degamin = 'dega/min'             # originally UnitOfMeasure.degamin
UnitOfMeasureExt.degas = 'dega/s'                 # originally UnitOfMeasure.degas
UnitOfMeasureExt.degC = 'degC'                    # originally UnitOfMeasure.degC
UnitOfMeasureExt.degC_m2_hkcalth = 'degC.m2.h/kcal[th]'# originally UnitOfMeasure.degC_m2_hkcalth
UnitOfMeasureExt.degCft = 'degC/ft'               # originally UnitOfMeasure.degCft
UnitOfMeasureExt.degCh = 'degC/h'                 # originally UnitOfMeasure.degCh
UnitOfMeasureExt.degChm = 'degC/hm'               # originally UnitOfMeasure.degChm
UnitOfMeasureExt.degCkm = 'degC/km'               # originally UnitOfMeasure.degCkm
UnitOfMeasureExt.degCkPa = 'degC/kPa'             # originally UnitOfMeasure.degCkPa
UnitOfMeasureExt.degCm = 'degC/m'                 # originally UnitOfMeasure.degCm
UnitOfMeasureExt.degCmin = 'degC/min'             # originally UnitOfMeasure.degCmin
UnitOfMeasureExt.degCs = 'degC/s'                 # originally UnitOfMeasure.degCs
UnitOfMeasureExt.degF = 'degF'                    # originally UnitOfMeasure.degF
UnitOfMeasureExt.degF_ft2_hBtuIT = 'degF.ft2.h/Btu[IT]'# originally UnitOfMeasure.degF_ft2_hBtuIT
UnitOfMeasureExt.degFft = 'degF/ft'               # originally UnitOfMeasure.degFft
UnitOfMeasureExt.degFh = 'degF/h'                 # originally UnitOfMeasure.degFh
UnitOfMeasureExt.degFm = 'degF/m'                 # originally UnitOfMeasure.degFm
UnitOfMeasureExt.degFmin = 'degF/min'             # originally UnitOfMeasure.degFmin
UnitOfMeasureExt.degFpsi = 'degF/psi'             # originally UnitOfMeasure.degFpsi
UnitOfMeasureExt.degFs = 'degF/s'                 # originally UnitOfMeasure.degFs
UnitOfMeasureExt.degR = 'degR'                    # originally UnitOfMeasure.degR
UnitOfMeasureExt.dEuc = 'dEuc'                    # originally UnitOfMeasure.dEuc
UnitOfMeasureExt.deV = 'deV'                      # originally UnitOfMeasure.deV
UnitOfMeasureExt.dF = 'dF'                        # originally UnitOfMeasure.dF
UnitOfMeasureExt.dgauss = 'dgauss'                # originally UnitOfMeasure.dgauss
UnitOfMeasureExt.dGy = 'dGy'                      # originally UnitOfMeasure.dGy
UnitOfMeasureExt.dH = 'dH'                        # originally UnitOfMeasure.dH
UnitOfMeasureExt.dHz = 'dHz'                      # originally UnitOfMeasure.dHz
UnitOfMeasureExt.dJ = 'dJ'                        # originally UnitOfMeasure.dJ
UnitOfMeasureExt.dm = 'dm'                        # originally UnitOfMeasure.dm
UnitOfMeasureExt.dms = 'dm/s'                     # originally UnitOfMeasure.dms
UnitOfMeasureExt.dm3_ = 'dm3'                     # originally UnitOfMeasure.dm3_
UnitOfMeasureExt.dm3kW_h = 'dm3/(kW.h)'           # originally UnitOfMeasure.dm3kW_h
UnitOfMeasureExt.dm3kg = 'dm3/kg'                 # originally UnitOfMeasure.dm3kg
UnitOfMeasureExt.dm3kmol = 'dm3/kmol'             # originally UnitOfMeasure.dm3kmol
UnitOfMeasureExt.dm3m = 'dm3/m'                   # originally UnitOfMeasure.dm3m
UnitOfMeasureExt.dm3m3 = 'dm3/m3'                 # originally UnitOfMeasure.dm3m3
UnitOfMeasureExt.dm3MJ = 'dm3/MJ'                 # originally UnitOfMeasure.dm3MJ
UnitOfMeasureExt.dm3s = 'dm3/s'                   # originally UnitOfMeasure.dm3s
UnitOfMeasureExt.dm3s2 = 'dm3/s2'                 # originally UnitOfMeasure.dm3s2
UnitOfMeasureExt.dm3t = 'dm3/t'                   # originally UnitOfMeasure.dm3t
UnitOfMeasureExt.dN = 'dN'                        # originally UnitOfMeasure.dN
UnitOfMeasureExt.dN_m = 'dN.m'                    # originally UnitOfMeasure.dN_m
UnitOfMeasureExt.dohm = 'dohm'                    # originally UnitOfMeasure.dohm
UnitOfMeasureExt.dP = 'dP'                        # originally UnitOfMeasure.dP
UnitOfMeasureExt.dPa = 'dPa'                      # originally UnitOfMeasure.dPa
UnitOfMeasureExt.drd = 'drd'                      # originally UnitOfMeasure.drd
UnitOfMeasureExt.ds = 'ds'                        # originally UnitOfMeasure.ds
UnitOfMeasureExt.dS = 'dS'                        # originally UnitOfMeasure.dS
UnitOfMeasureExt.dT = 'dT'                        # originally UnitOfMeasure.dT
UnitOfMeasureExt.dV = 'dV'                        # originally UnitOfMeasure.dV
UnitOfMeasureExt.dW = 'dW'                        # originally UnitOfMeasure.dW
UnitOfMeasureExt.dWb = 'dWb'                      # originally UnitOfMeasure.dWb
UnitOfMeasureExt.dyne = 'dyne'                    # originally UnitOfMeasure.dyne
UnitOfMeasureExt.dyne_cm2 = 'dyne.cm2'            # originally UnitOfMeasure.dyne_cm2
UnitOfMeasureExt.dyne_scm2 = 'dyne.s/cm2'         # originally UnitOfMeasure.dyne_scm2
UnitOfMeasureExt.dynecm = 'dyne/cm'               # originally UnitOfMeasure.dynecm
UnitOfMeasureExt.dynecm2 = 'dyne/cm2'             # originally UnitOfMeasure.dynecm2
UnitOfMeasureExt.EA = 'EA'                        # originally UnitOfMeasure.EA
UnitOfMeasureExt.Eat = 'Ea[t]'                    # originally UnitOfMeasure.Eat
UnitOfMeasureExt.EC = 'EC'                        # originally UnitOfMeasure.EC
UnitOfMeasureExt.Ecalth = 'Ecal[th]'              # originally UnitOfMeasure.Ecalth
UnitOfMeasureExt.EEuc = 'EEuc'                    # originally UnitOfMeasure.EEuc
UnitOfMeasureExt.EeV = 'EeV'                      # originally UnitOfMeasure.EeV
UnitOfMeasureExt.EF = 'EF'                        # originally UnitOfMeasure.EF
UnitOfMeasureExt.Eg = 'Eg'                        # originally UnitOfMeasure.Eg
UnitOfMeasureExt.Egauss = 'Egauss'                # originally UnitOfMeasure.Egauss
UnitOfMeasureExt.EGy = 'EGy'                      # originally UnitOfMeasure.EGy
UnitOfMeasureExt.EH = 'EH'                        # originally UnitOfMeasure.EH
UnitOfMeasureExt.EHz = 'EHz'                      # originally UnitOfMeasure.EHz
UnitOfMeasureExt.EJ = 'EJ'                        # originally UnitOfMeasure.EJ
UnitOfMeasureExt.EJa = 'EJ/a'                     # originally UnitOfMeasure.EJa
UnitOfMeasureExt.Em = 'Em'                        # originally UnitOfMeasure.Em
UnitOfMeasureExt.EN = 'EN'                        # originally UnitOfMeasure.EN
UnitOfMeasureExt.Eohm = 'Eohm'                    # originally UnitOfMeasure.Eohm
UnitOfMeasureExt.EP = 'EP'                        # originally UnitOfMeasure.EP
UnitOfMeasureExt.EPa = 'EPa'                      # originally UnitOfMeasure.EPa
UnitOfMeasureExt.Erd = 'Erd'                      # originally UnitOfMeasure.Erd
UnitOfMeasureExt.erg = 'erg'                      # originally UnitOfMeasure.erg
UnitOfMeasureExt.erga = 'erg/a'                   # originally UnitOfMeasure.erga
UnitOfMeasureExt.ergcm2 = 'erg/cm2'               # originally UnitOfMeasure.ergcm2
UnitOfMeasureExt.ergcm3 = 'erg/cm3'               # originally UnitOfMeasure.ergcm3
UnitOfMeasureExt.ergg = 'erg/g'                   # originally UnitOfMeasure.ergg
UnitOfMeasureExt.ergkg = 'erg/kg'                 # originally UnitOfMeasure.ergkg
UnitOfMeasureExt.ergm3 = 'erg/m3'                 # originally UnitOfMeasure.ergm3
UnitOfMeasureExt.ES = 'ES'                        # originally UnitOfMeasure.ES
UnitOfMeasureExt.ET = 'ET'                        # originally UnitOfMeasure.ET
UnitOfMeasureExt.Euc = 'Euc'                      # originally UnitOfMeasure.Euc
UnitOfMeasureExt.eV = 'eV'                        # originally UnitOfMeasure.eV
UnitOfMeasureExt.EW = 'EW'                        # originally UnitOfMeasure.EW
UnitOfMeasureExt.EWb = 'EWb'                      # originally UnitOfMeasure.EWb
UnitOfMeasureExt.F = 'F'                          # originally UnitOfMeasure.F
UnitOfMeasureExt.Fm = 'F/m'                       # originally UnitOfMeasure.Fm
UnitOfMeasureExt.fa = 'fa'                        # originally UnitOfMeasure.fa
UnitOfMeasureExt.fA = 'fA'                        # originally UnitOfMeasure.fA
UnitOfMeasureExt.fathom = 'fathom'                # originally UnitOfMeasure.fathom
UnitOfMeasureExt.fC = 'fC'                        # originally UnitOfMeasure.fC
UnitOfMeasureExt.fcalth = 'fcal[th]'              # originally UnitOfMeasure.fcalth
UnitOfMeasureExt.fEuc = 'fEuc'                    # originally UnitOfMeasure.fEuc
UnitOfMeasureExt.feV = 'feV'                      # originally UnitOfMeasure.feV
UnitOfMeasureExt.fF = 'fF'                        # originally UnitOfMeasure.fF
UnitOfMeasureExt.fg = 'fg'                        # originally UnitOfMeasure.fg
UnitOfMeasureExt.fgauss = 'fgauss'                # originally UnitOfMeasure.fgauss
UnitOfMeasureExt.fGy = 'fGy'                      # originally UnitOfMeasure.fGy
UnitOfMeasureExt.fH = 'fH'                        # originally UnitOfMeasure.fH
UnitOfMeasureExt.fHz = 'fHz'                      # originally UnitOfMeasure.fHz
UnitOfMeasureExt.fJ = 'fJ'                        # originally UnitOfMeasure.fJ
UnitOfMeasureExt.flozUK = 'floz[UK]'              # originally UnitOfMeasure.flozUK
UnitOfMeasureExt.flozUS = 'floz[US]'              # originally UnitOfMeasure.flozUS
UnitOfMeasureExt.fm = 'fm'                        # originally UnitOfMeasure.fm
UnitOfMeasureExt.fN = 'fN'                        # originally UnitOfMeasure.fN
UnitOfMeasureExt.fohm = 'fohm'                    # originally UnitOfMeasure.fohm
UnitOfMeasureExt.footcandle = 'footcandle'        # originally UnitOfMeasure.footcandle
UnitOfMeasureExt.footcandle_s = 'footcandle.s'    # originally UnitOfMeasure.footcandle_s
UnitOfMeasureExt.fP = 'fP'                        # originally UnitOfMeasure.fP
UnitOfMeasureExt.fPa = 'fPa'                      # originally UnitOfMeasure.fPa
UnitOfMeasureExt.frd = 'frd'                      # originally UnitOfMeasure.frd
UnitOfMeasureExt.fS = 'fS'                        # originally UnitOfMeasure.fS
UnitOfMeasureExt.ft = 'ft'                        # originally UnitOfMeasure.ft
UnitOfMeasureExt.fT = 'fT'                        # originally UnitOfMeasure.fT
UnitOfMeasureExt.ftbbl = 'ft/bbl'                 # originally UnitOfMeasure.ftbbl
UnitOfMeasureExt.ftd = 'ft/d'                     # originally UnitOfMeasure.ftd
UnitOfMeasureExt.ftdegF = 'ft/degF'               # originally UnitOfMeasure.ftdegF
UnitOfMeasureExt.ftft = 'ft/ft'                   # originally UnitOfMeasure.ftft
UnitOfMeasureExt.ftft3 = 'ft/ft3'                 # originally UnitOfMeasure.ftft3
UnitOfMeasureExt.ftgalUS = 'ft/gal[US]'           # originally UnitOfMeasure.ftgalUS
UnitOfMeasureExt.fth = 'ft/h'                     # originally UnitOfMeasure.fth
UnitOfMeasureExt.ftin = 'ft/in'                   # originally UnitOfMeasure.ftin
UnitOfMeasureExt.ftlbm = 'ft/lbm'                 # originally UnitOfMeasure.ftlbm
UnitOfMeasureExt.ftm = 'ft/m'                     # originally UnitOfMeasure.ftm
UnitOfMeasureExt.ftmi = 'ft/mi'                   # originally UnitOfMeasure.ftmi
UnitOfMeasureExt.ftmin = 'ft/min'                 # originally UnitOfMeasure.ftmin
UnitOfMeasureExt.ftms = 'ft/ms'                   # originally UnitOfMeasure.ftms
UnitOfMeasureExt.ftpsi = 'ft/psi'                 # originally UnitOfMeasure.ftpsi
UnitOfMeasureExt.fts = 'ft/s'                     # originally UnitOfMeasure.fts
UnitOfMeasureExt.fts2 = 'ft/s2'                   # originally UnitOfMeasure.fts2
UnitOfMeasureExt.ftus = 'ft/us'                   # originally UnitOfMeasure.ftus
UnitOfMeasureExt.ftBnA = 'ft[BnA]'                # originally UnitOfMeasure.ftBnA
UnitOfMeasureExt.ftBnB = 'ft[BnB]'                # originally UnitOfMeasure.ftBnB
UnitOfMeasureExt.ftBr36 = 'ft[Br36]'              # originally UnitOfMeasure.ftBr36
UnitOfMeasureExt.ftBr65 = 'ft[Br65]'              # originally UnitOfMeasure.ftBr65
UnitOfMeasureExt.ftCla = 'ft[Cla]'                # originally UnitOfMeasure.ftCla
UnitOfMeasureExt.ftGC = 'ft[GC]'                  # originally UnitOfMeasure.ftGC
UnitOfMeasureExt.ftInd = 'ft[Ind]'                # originally UnitOfMeasure.ftInd
UnitOfMeasureExt.ftInd37 = 'ft[Ind37]'            # originally UnitOfMeasure.ftInd37
UnitOfMeasureExt.ftInd62 = 'ft[Ind62]'            # originally UnitOfMeasure.ftInd62
UnitOfMeasureExt.ftInd75 = 'ft[Ind75]'            # originally UnitOfMeasure.ftInd75
UnitOfMeasureExt.ftSe = 'ft[Se]'                  # originally UnitOfMeasure.ftSe
UnitOfMeasureExt.ftSeT = 'ft[SeT]'                # originally UnitOfMeasure.ftSeT
UnitOfMeasureExt.ftUS = 'ft[US]'                  # originally UnitOfMeasure.ftUS
UnitOfMeasureExt.ft2 = 'ft2'                      # originally UnitOfMeasure.ft2
UnitOfMeasureExt.ft2h = 'ft2/h'                   # originally UnitOfMeasure.ft2h
UnitOfMeasureExt.ft2in3 = 'ft2/in3'               # originally UnitOfMeasure.ft2in3
UnitOfMeasureExt.ft2lbm = 'ft2/lbm'               # originally UnitOfMeasure.ft2lbm
UnitOfMeasureExt.ft2s = 'ft2/s'                   # originally UnitOfMeasure.ft2s
UnitOfMeasureExt.ft3 = 'ft3'                      # originally UnitOfMeasure.ft3
UnitOfMeasureExt.ft3d_ft = 'ft3/(d.ft)'           # originally UnitOfMeasure.ft3d_ft
UnitOfMeasureExt.ft3ft_psi_d = 'ft3/(ft.psi.d)'   # originally UnitOfMeasure.ft3ft_psi_d
UnitOfMeasureExt.ft3min_ft2 = 'ft3/(min.ft2)'     # originally UnitOfMeasure.ft3min_ft2
UnitOfMeasureExt.ft3s_ft2 = 'ft3/(s.ft2)'         # originally UnitOfMeasure.ft3s_ft2
UnitOfMeasureExt.ft3bbl = 'ft3/bbl'               # originally UnitOfMeasure.ft3bbl
UnitOfMeasureExt.ft3d = 'ft3/d'                   # originally UnitOfMeasure.ft3d
UnitOfMeasureExt.ft3d2 = 'ft3/d2'                 # originally UnitOfMeasure.ft3d2
UnitOfMeasureExt.ft3ft = 'ft3/ft'                 # originally UnitOfMeasure.ft3ft
UnitOfMeasureExt.ft3ft2 = 'ft3/ft2'               # originally UnitOfMeasure.ft3ft2
UnitOfMeasureExt.ft3ft3 = 'ft3/ft3'               # originally UnitOfMeasure.ft3ft3
UnitOfMeasureExt.ft3h = 'ft3/h'                   # originally UnitOfMeasure.ft3h
UnitOfMeasureExt.ft3h2 = 'ft3/h2'                 # originally UnitOfMeasure.ft3h2
UnitOfMeasureExt.ft3kg = 'ft3/kg'                 # originally UnitOfMeasure.ft3kg
UnitOfMeasureExt.ft3lbm = 'ft3/lbm'               # originally UnitOfMeasure.ft3lbm
UnitOfMeasureExt.ft3lbmol = 'ft3/lbmol'           # originally UnitOfMeasure.ft3lbmol
UnitOfMeasureExt.ft3min = 'ft3/min'               # originally UnitOfMeasure.ft3min
UnitOfMeasureExt.ft3min2 = 'ft3/min2'             # originally UnitOfMeasure.ft3min2
UnitOfMeasureExt.ft3rad = 'ft3/rad'               # originally UnitOfMeasure.ft3rad
UnitOfMeasureExt.ft3s = 'ft3/s'                   # originally UnitOfMeasure.ft3s
UnitOfMeasureExt.ft3s2 = 'ft3/s2'                 # originally UnitOfMeasure.ft3s2
UnitOfMeasureExt.ft3sack94lbm = 'ft3/sack[94lbm]' # originally UnitOfMeasure.ft3sack94lbm
UnitOfMeasureExt.furUS = 'fur[US]'                # originally UnitOfMeasure.furUS
UnitOfMeasureExt.fV = 'fV'                        # originally UnitOfMeasure.fV
UnitOfMeasureExt.fW = 'fW'                        # originally UnitOfMeasure.fW
UnitOfMeasureExt.fWb = 'fWb'                      # originally UnitOfMeasure.fWb
UnitOfMeasureExt.g = 'g'                          # originally UnitOfMeasure.g
UnitOfMeasureExt.g_ftcm3_s = 'g.ft/(cm3.s)'       # originally UnitOfMeasure.g_ftcm3_s
UnitOfMeasureExt.g_mcm3_s = 'g.m/(cm3.s)'         # originally UnitOfMeasure.g_mcm3_s
UnitOfMeasureExt.gcm3 = 'g/cm3'                   # originally UnitOfMeasure.gcm3
UnitOfMeasureExt.gcm4 = 'g/cm4'                   # originally UnitOfMeasure.gcm4
UnitOfMeasureExt.gdm3 = 'g/dm3'                   # originally UnitOfMeasure.gdm3
UnitOfMeasureExt.ggalUK = 'g/gal[UK]'             # originally UnitOfMeasure.ggalUK
UnitOfMeasureExt.ggalUS = 'g/gal[US]'             # originally UnitOfMeasure.ggalUS
UnitOfMeasureExt.gkg = 'g/kg'                     # originally UnitOfMeasure.gkg
UnitOfMeasureExt.gL = 'g/L'                       # originally UnitOfMeasure.gL
UnitOfMeasureExt.gm3 = 'g/m3'                     # originally UnitOfMeasure.gm3
UnitOfMeasureExt.gmol = 'g/mol'                   # originally UnitOfMeasure.gmol
UnitOfMeasureExt.gs = 'g/s'                       # originally UnitOfMeasure.gs
UnitOfMeasureExt.gt = 'g/t'                       # originally UnitOfMeasure.gt
UnitOfMeasureExt.GA = 'GA'                        # originally UnitOfMeasure.GA
UnitOfMeasureExt.Gat = 'Ga[t]'                    # originally UnitOfMeasure.Gat
UnitOfMeasureExt.Gal = 'Gal'                      # originally UnitOfMeasure.Gal
UnitOfMeasureExt.galUK = 'gal[UK]'                # originally UnitOfMeasure.galUK
UnitOfMeasureExt.galUKh_ft = 'gal[UK]/(h.ft)'     # originally UnitOfMeasure.galUKh_ft
UnitOfMeasureExt.galUKh_ft2 = 'gal[UK]/(h.ft2)'   # originally UnitOfMeasure.galUKh_ft2
UnitOfMeasureExt.galUKh_in = 'gal[UK]/(h.in)'     # originally UnitOfMeasure.galUKh_in
UnitOfMeasureExt.galUKh_in2 = 'gal[UK]/(h.in2)'   # originally UnitOfMeasure.galUKh_in2
UnitOfMeasureExt.galUKmin_ft = 'gal[UK]/(min.ft)' # originally UnitOfMeasure.galUKmin_ft
UnitOfMeasureExt.galUKmin_ft2 = 'gal[UK]/(min.ft2)'# originally UnitOfMeasure.galUKmin_ft2
UnitOfMeasureExt.galUKd = 'gal[UK]/d'             # originally UnitOfMeasure.galUKd
UnitOfMeasureExt.galUKft3 = 'gal[UK]/ft3'         # originally UnitOfMeasure.galUKft3
UnitOfMeasureExt.galUKh = 'gal[UK]/h'             # originally UnitOfMeasure.galUKh
UnitOfMeasureExt.galUKh2 = 'gal[UK]/h2'           # originally UnitOfMeasure.galUKh2
UnitOfMeasureExt.galUKlbm = 'gal[UK]/lbm'         # originally UnitOfMeasure.galUKlbm
UnitOfMeasureExt.galUKmi = 'gal[UK]/mi'           # originally UnitOfMeasure.galUKmi
UnitOfMeasureExt.galUKmin = 'gal[UK]/min'         # originally UnitOfMeasure.galUKmin
UnitOfMeasureExt.galUKmin2 = 'gal[UK]/min2'       # originally UnitOfMeasure.galUKmin2
UnitOfMeasureExt.galUS = 'gal[US]'                # originally UnitOfMeasure.galUS
UnitOfMeasureExt.galUSh_ft = 'gal[US]/(h.ft)'     # originally UnitOfMeasure.galUSh_ft
UnitOfMeasureExt.galUSh_ft2 = 'gal[US]/(h.ft2)'   # originally UnitOfMeasure.galUSh_ft2
UnitOfMeasureExt.galUSh_in = 'gal[US]/(h.in)'     # originally UnitOfMeasure.galUSh_in
UnitOfMeasureExt.galUSh_in2 = 'gal[US]/(h.in2)'   # originally UnitOfMeasure.galUSh_in2
UnitOfMeasureExt.galUSmin_ft = 'gal[US]/(min.ft)' # originally UnitOfMeasure.galUSmin_ft
UnitOfMeasureExt.galUSmin_ft2 = 'gal[US]/(min.ft2)'# originally UnitOfMeasure.galUSmin_ft2
UnitOfMeasureExt.galUSbbl = 'gal[US]/bbl'         # originally UnitOfMeasure.galUSbbl
UnitOfMeasureExt.galUSd = 'gal[US]/d'             # originally UnitOfMeasure.galUSd
UnitOfMeasureExt.galUSft = 'gal[US]/ft'           # originally UnitOfMeasure.galUSft
UnitOfMeasureExt.galUSft3 = 'gal[US]/ft3'         # originally UnitOfMeasure.galUSft3
UnitOfMeasureExt.galUSh = 'gal[US]/h'             # originally UnitOfMeasure.galUSh
UnitOfMeasureExt.galUSh2 = 'gal[US]/h2'           # originally UnitOfMeasure.galUSh2
UnitOfMeasureExt.galUSlbm = 'gal[US]/lbm'         # originally UnitOfMeasure.galUSlbm
UnitOfMeasureExt.galUSmi = 'gal[US]/mi'           # originally UnitOfMeasure.galUSmi
UnitOfMeasureExt.galUSmin = 'gal[US]/min'         # originally UnitOfMeasure.galUSmin
UnitOfMeasureExt.galUSmin2 = 'gal[US]/min2'       # originally UnitOfMeasure.galUSmin2
UnitOfMeasureExt.galUSsack94lbm = 'gal[US]/sack[94lbm]'# originally UnitOfMeasure.galUSsack94lbm
UnitOfMeasureExt.galUStonUK = 'gal[US]/ton[UK]'   # originally UnitOfMeasure.galUStonUK
UnitOfMeasureExt.galUStonUS = 'gal[US]/ton[US]'   # originally UnitOfMeasure.galUStonUS
UnitOfMeasureExt.gAPI = 'gAPI'                    # originally UnitOfMeasure.gAPI
UnitOfMeasureExt.gauss = 'gauss'                  # originally UnitOfMeasure.gauss
UnitOfMeasureExt.gausscm = 'gauss/cm'             # originally UnitOfMeasure.gausscm
UnitOfMeasureExt.GBq = 'GBq'                      # originally UnitOfMeasure.GBq
UnitOfMeasureExt.GC = 'GC'                        # originally UnitOfMeasure.GC
UnitOfMeasureExt.Gcalth = 'Gcal[th]'              # originally UnitOfMeasure.Gcalth
UnitOfMeasureExt.GEuc = 'GEuc'                    # originally UnitOfMeasure.GEuc
UnitOfMeasureExt.GeV = 'GeV'                      # originally UnitOfMeasure.GeV
UnitOfMeasureExt.gf = 'gf'                        # originally UnitOfMeasure.gf
UnitOfMeasureExt.GF = 'GF'                        # originally UnitOfMeasure.GF
UnitOfMeasureExt.Gg = 'Gg'                        # originally UnitOfMeasure.Gg
UnitOfMeasureExt.Ggauss = 'Ggauss'                # originally UnitOfMeasure.Ggauss
UnitOfMeasureExt.GGy = 'GGy'                      # originally UnitOfMeasure.GGy
UnitOfMeasureExt.GH = 'GH'                        # originally UnitOfMeasure.GH
UnitOfMeasureExt.GHz = 'GHz'                      # originally UnitOfMeasure.GHz
UnitOfMeasureExt.GJ = 'GJ'                        # originally UnitOfMeasure.GJ
UnitOfMeasureExt.Gm = 'Gm'                        # originally UnitOfMeasure.Gm
UnitOfMeasureExt.GN = 'GN'                        # originally UnitOfMeasure.GN
UnitOfMeasureExt.gn = 'gn'                        # originally UnitOfMeasure.gn
UnitOfMeasureExt.Gohm = 'Gohm'                    # originally UnitOfMeasure.Gohm
UnitOfMeasureExt.gon = 'gon'                      # originally UnitOfMeasure.gon
UnitOfMeasureExt.GP = 'GP'                        # originally UnitOfMeasure.GP
UnitOfMeasureExt.GPa = 'GPa'                      # originally UnitOfMeasure.GPa
UnitOfMeasureExt.GPacm = 'GPa/cm'                 # originally UnitOfMeasure.GPacm
UnitOfMeasureExt.GPa2 = 'GPa2'                    # originally UnitOfMeasure.GPa2
UnitOfMeasureExt.grain = 'grain'                  # originally UnitOfMeasure.grain
UnitOfMeasureExt.grainft3 = 'grain/ft3'           # originally UnitOfMeasure.grainft3
UnitOfMeasureExt.graingalUS = 'grain/gal[US]'     # originally UnitOfMeasure.graingalUS
UnitOfMeasureExt.Grd = 'Grd'                      # originally UnitOfMeasure.Grd
UnitOfMeasureExt.GS = 'GS'                        # originally UnitOfMeasure.GS
UnitOfMeasureExt.GT = 'GT'                        # originally UnitOfMeasure.GT
UnitOfMeasureExt.GV = 'GV'                        # originally UnitOfMeasure.GV
UnitOfMeasureExt.GW = 'GW'                        # originally UnitOfMeasure.GW
UnitOfMeasureExt.GW_h = 'GW.h'                    # originally UnitOfMeasure.GW_h
UnitOfMeasureExt.GWb = 'GWb'                      # originally UnitOfMeasure.GWb
UnitOfMeasureExt.Gy = 'Gy'                        # originally UnitOfMeasure.Gy
UnitOfMeasureExt.H = 'H'                          # originally UnitOfMeasure.H
UnitOfMeasureExt.h = 'h'                          # originally UnitOfMeasure.h
UnitOfMeasureExt.hft3 = 'h/ft3'                   # originally UnitOfMeasure.hft3
UnitOfMeasureExt.hkm = 'h/km'                     # originally UnitOfMeasure.hkm
UnitOfMeasureExt.Hm = 'H/m'                       # originally UnitOfMeasure.Hm
UnitOfMeasureExt.hm3 = 'h/m3'                     # originally UnitOfMeasure.hm3
UnitOfMeasureExt.ha = 'ha'                        # originally UnitOfMeasure.ha
UnitOfMeasureExt.ha_m = 'ha.m'                    # originally UnitOfMeasure.ha_m
UnitOfMeasureExt.hbar = 'hbar'                    # originally UnitOfMeasure.hbar
UnitOfMeasureExt.hg = 'hg'                        # originally UnitOfMeasure.hg
UnitOfMeasureExt.hL = 'hL'                        # originally UnitOfMeasure.hL
UnitOfMeasureExt.hm = 'hm'                        # originally UnitOfMeasure.hm
UnitOfMeasureExt.hN = 'hN'                        # originally UnitOfMeasure.hN
UnitOfMeasureExt.hp = 'hp'                        # originally UnitOfMeasure.hp
UnitOfMeasureExt.hp_h = 'hp.h'                    # originally UnitOfMeasure.hp_h
UnitOfMeasureExt.hp_hbbl = 'hp.h/bbl'             # originally UnitOfMeasure.hp_hbbl
UnitOfMeasureExt.hp_hlbm = 'hp.h/lbm'             # originally UnitOfMeasure.hp_hlbm
UnitOfMeasureExt.hpft3 = 'hp/ft3'                 # originally UnitOfMeasure.hpft3
UnitOfMeasureExt.hpin2 = 'hp/in2'                 # originally UnitOfMeasure.hpin2
UnitOfMeasureExt.hpelec = 'hp[elec]'              # originally UnitOfMeasure.hpelec
UnitOfMeasureExt.hphyd = 'hp[hyd]'                # originally UnitOfMeasure.hphyd
UnitOfMeasureExt.hphydin2 = 'hp[hyd]/in2'         # originally UnitOfMeasure.hphydin2
UnitOfMeasureExt.hpmetric = 'hp[metric]'          # originally UnitOfMeasure.hpmetric
UnitOfMeasureExt.hpmetric_h = 'hp[metric].h'      # originally UnitOfMeasure.hpmetric_h
UnitOfMeasureExt.hs = 'hs'                        # originally UnitOfMeasure.hs
UnitOfMeasureExt.Hz = 'Hz'                        # originally UnitOfMeasure.Hz
UnitOfMeasureExt.in_ = 'in'                       # originally UnitOfMeasure.in_
UnitOfMeasureExt.inin_degF = 'in/(in.degF)'       # originally UnitOfMeasure.inin_degF
UnitOfMeasureExt.ina = 'in/a'                     # originally UnitOfMeasure.ina
UnitOfMeasureExt.inmin = 'in/min'                 # originally UnitOfMeasure.inmin
UnitOfMeasureExt.ins = 'in/s'                     # originally UnitOfMeasure.ins
UnitOfMeasureExt.ins2 = 'in/s2'                   # originally UnitOfMeasure.ins2
UnitOfMeasureExt.inUS = 'in[US]'                  # originally UnitOfMeasure.inUS
UnitOfMeasureExt.in2 = 'in2'                      # originally UnitOfMeasure.in2
UnitOfMeasureExt.in2ft2 = 'in2/ft2'               # originally UnitOfMeasure.in2ft2
UnitOfMeasureExt.in2in2 = 'in2/in2'               # originally UnitOfMeasure.in2in2
UnitOfMeasureExt.in2s = 'in2/s'                   # originally UnitOfMeasure.in2s
UnitOfMeasureExt.in3 = 'in3'                      # originally UnitOfMeasure.in3
UnitOfMeasureExt.in3ft = 'in3/ft'                 # originally UnitOfMeasure.in3ft
UnitOfMeasureExt.in4 = 'in4'                      # originally UnitOfMeasure.in4
UnitOfMeasureExt.inH2O39degF = 'inH2O[39degF]'    # originally UnitOfMeasure.inH2O39degF
UnitOfMeasureExt.inH2O60degF = 'inH2O[60degF]'    # originally UnitOfMeasure.inH2O60degF
UnitOfMeasureExt.inHg32degF = 'inHg[32degF]'      # originally UnitOfMeasure.inHg32degF
UnitOfMeasureExt.inHg60degF = 'inHg[60degF]'      # originally UnitOfMeasure.inHg60degF
UnitOfMeasureExt.J = 'J'                          # originally UnitOfMeasure.J
UnitOfMeasureExt.J_ms_m2_K = 'J.m/(s.m2.K)'       # originally UnitOfMeasure.J_ms_m2_K
UnitOfMeasureExt.J_mm2 = 'J.m/m2'                 # originally UnitOfMeasure.J_mm2
UnitOfMeasureExt.Jg_K = 'J/(g.K)'                 # originally UnitOfMeasure.Jg_K
UnitOfMeasureExt.Jkg_K = 'J/(kg.K)'               # originally UnitOfMeasure.Jkg_K
UnitOfMeasureExt.Jmol_K = 'J/(mol.K)'             # originally UnitOfMeasure.Jmol_K
UnitOfMeasureExt.Js_m2_degC = 'J/(s.m2.degC)'     # originally UnitOfMeasure.Js_m2_degC
UnitOfMeasureExt.Jcm2 = 'J/cm2'                   # originally UnitOfMeasure.Jcm2
UnitOfMeasureExt.Jdm3 = 'J/dm3'                   # originally UnitOfMeasure.Jdm3
UnitOfMeasureExt.Jg = 'J/g'                       # originally UnitOfMeasure.Jg
UnitOfMeasureExt.JK = 'J/K'                       # originally UnitOfMeasure.JK
UnitOfMeasureExt.Jkg = 'J/kg'                     # originally UnitOfMeasure.Jkg
UnitOfMeasureExt.Jm = 'J/m'                       # originally UnitOfMeasure.Jm
UnitOfMeasureExt.Jm2 = 'J/m2'                     # originally UnitOfMeasure.Jm2
UnitOfMeasureExt.Jm3 = 'J/m3'                     # originally UnitOfMeasure.Jm3
UnitOfMeasureExt.Jmol = 'J/mol'                   # originally UnitOfMeasure.Jmol
UnitOfMeasureExt.Js = 'J/s'                       # originally UnitOfMeasure.Js
UnitOfMeasureExt.K = 'K'                          # originally UnitOfMeasure.K
UnitOfMeasureExt.K_m2kW = 'K.m2/kW'               # originally UnitOfMeasure.K_m2kW
UnitOfMeasureExt.K_m2W = 'K.m2/W'                 # originally UnitOfMeasure.K_m2W
UnitOfMeasureExt.Kkm = 'K/km'                     # originally UnitOfMeasure.Kkm
UnitOfMeasureExt.Km = 'K/m'                       # originally UnitOfMeasure.Km
UnitOfMeasureExt.KPa = 'K/Pa'                     # originally UnitOfMeasure.KPa
UnitOfMeasureExt.Ks = 'K/s'                       # originally UnitOfMeasure.Ks
UnitOfMeasureExt.KW = 'K/W'                       # originally UnitOfMeasure.KW
UnitOfMeasureExt.kA = 'kA'                        # originally UnitOfMeasure.kA
UnitOfMeasureExt.kat = 'ka[t]'                    # originally UnitOfMeasure.kat
UnitOfMeasureExt.kC = 'kC'                        # originally UnitOfMeasure.kC
UnitOfMeasureExt.kcalth = 'kcal[th]'              # originally UnitOfMeasure.kcalth
UnitOfMeasureExt.kcalth_mcm2 = 'kcal[th].m/cm2'   # originally UnitOfMeasure.kcalth_mcm2
UnitOfMeasureExt.kcalthh_m_degC = 'kcal[th]/(h.m.degC)'# originally UnitOfMeasure.kcalthh_m_degC
UnitOfMeasureExt.kcalthh_m2_degC = 'kcal[th]/(h.m2.degC)'# originally UnitOfMeasure.kcalthh_m2_degC
UnitOfMeasureExt.kcalthkg_degC = 'kcal[th]/(kg.degC)'# originally UnitOfMeasure.kcalthkg_degC
UnitOfMeasureExt.kcalthcm3 = 'kcal[th]/cm3'       # originally UnitOfMeasure.kcalthcm3
UnitOfMeasureExt.kcalthg = 'kcal[th]/g'           # originally UnitOfMeasure.kcalthg
UnitOfMeasureExt.kcalthh = 'kcal[th]/h'           # originally UnitOfMeasure.kcalthh
UnitOfMeasureExt.kcalthkg = 'kcal[th]/kg'         # originally UnitOfMeasure.kcalthkg
UnitOfMeasureExt.kcalthm3 = 'kcal[th]/m3'         # originally UnitOfMeasure.kcalthm3
UnitOfMeasureExt.kcalthmol = 'kcal[th]/mol'       # originally UnitOfMeasure.kcalthmol
UnitOfMeasureExt.kcd = 'kcd'                      # originally UnitOfMeasure.kcd
UnitOfMeasureExt.kdyne = 'kdyne'                  # originally UnitOfMeasure.kdyne
UnitOfMeasureExt.kEuc = 'kEuc'                    # originally UnitOfMeasure.kEuc
UnitOfMeasureExt.keV = 'keV'                      # originally UnitOfMeasure.keV
UnitOfMeasureExt.kF = 'kF'                        # originally UnitOfMeasure.kF
UnitOfMeasureExt.kg = 'kg'                        # originally UnitOfMeasure.kg
UnitOfMeasureExt.kg_m = 'kg.m'                    # originally UnitOfMeasure.kg_m
UnitOfMeasureExt.kg_mcm2 = 'kg.m/cm2'             # originally UnitOfMeasure.kg_mcm2
UnitOfMeasureExt.kg_ms = 'kg.m/s'                 # originally UnitOfMeasure.kg_ms
UnitOfMeasureExt.kg_m2 = 'kg.m2'                  # originally UnitOfMeasure.kg_m2
UnitOfMeasureExt.kgkW_h = 'kg/(kW.h)'             # originally UnitOfMeasure.kgkW_h
UnitOfMeasureExt.kgm_s = 'kg/(m.s)'               # originally UnitOfMeasure.kgm_s
UnitOfMeasureExt.kgm2_s = 'kg/(m2.s)'             # originally UnitOfMeasure.kgm2_s
UnitOfMeasureExt.kgd = 'kg/d'                     # originally UnitOfMeasure.kgd
UnitOfMeasureExt.kgdm3 = 'kg/dm3'                 # originally UnitOfMeasure.kgdm3
UnitOfMeasureExt.kgdm4 = 'kg/dm4'                 # originally UnitOfMeasure.kgdm4
UnitOfMeasureExt.kgh = 'kg/h'                     # originally UnitOfMeasure.kgh
UnitOfMeasureExt.kgJ = 'kg/J'                     # originally UnitOfMeasure.kgJ
UnitOfMeasureExt.kgkg = 'kg/kg'                   # originally UnitOfMeasure.kgkg
UnitOfMeasureExt.kgL = 'kg/L'                     # originally UnitOfMeasure.kgL
UnitOfMeasureExt.kgm = 'kg/m'                     # originally UnitOfMeasure.kgm
UnitOfMeasureExt.kgm2 = 'kg/m2'                   # originally UnitOfMeasure.kgm2
UnitOfMeasureExt.kgm3 = 'kg/m3'                   # originally UnitOfMeasure.kgm3
UnitOfMeasureExt.kgm4 = 'kg/m4'                   # originally UnitOfMeasure.kgm4
UnitOfMeasureExt.kgmin = 'kg/min'                 # originally UnitOfMeasure.kgmin
UnitOfMeasureExt.kgMJ = 'kg/MJ'                   # originally UnitOfMeasure.kgMJ
UnitOfMeasureExt.kgmol = 'kg/mol'                 # originally UnitOfMeasure.kgmol
UnitOfMeasureExt.kgs = 'kg/s'                     # originally UnitOfMeasure.kgs
UnitOfMeasureExt.kgsack94lbm = 'kg/sack[94lbm]'   # originally UnitOfMeasure.kgsack94lbm
UnitOfMeasureExt.kgt = 'kg/t'                     # originally UnitOfMeasure.kgt
UnitOfMeasureExt.kgauss = 'kgauss'                # originally UnitOfMeasure.kgauss
UnitOfMeasureExt.kgf = 'kgf'                      # originally UnitOfMeasure.kgf
UnitOfMeasureExt.kgf_m = 'kgf.m'                  # originally UnitOfMeasure.kgf_m
UnitOfMeasureExt.kgf_mcm2 = 'kgf.m/cm2'           # originally UnitOfMeasure.kgf_mcm2
UnitOfMeasureExt.kgf_mm = 'kgf.m/m'               # originally UnitOfMeasure.kgf_mm
UnitOfMeasureExt.kgf_m2 = 'kgf.m2'                # originally UnitOfMeasure.kgf_m2
UnitOfMeasureExt.kgf_sm2 = 'kgf.s/m2'             # originally UnitOfMeasure.kgf_sm2
UnitOfMeasureExt.kgfcm = 'kgf/cm'                 # originally UnitOfMeasure.kgfcm
UnitOfMeasureExt.kgfcm2 = 'kgf/cm2'               # originally UnitOfMeasure.kgfcm2
UnitOfMeasureExt.kgfkgf = 'kgf/kgf'               # originally UnitOfMeasure.kgfkgf
UnitOfMeasureExt.kgfm2 = 'kgf/m2'                 # originally UnitOfMeasure.kgfm2
UnitOfMeasureExt.kgfmm2 = 'kgf/mm2'               # originally UnitOfMeasure.kgfmm2
UnitOfMeasureExt.kGy = 'kGy'                      # originally UnitOfMeasure.kGy
UnitOfMeasureExt.kH = 'kH'                        # originally UnitOfMeasure.kH
UnitOfMeasureExt.kHz = 'kHz'                      # originally UnitOfMeasure.kHz
UnitOfMeasureExt.Kibyte = 'Kibyte'                # originally UnitOfMeasure.Kibyte
UnitOfMeasureExt.kJ = 'kJ'                        # originally UnitOfMeasure.kJ
UnitOfMeasureExt.kJ_mh_m2_K = 'kJ.m/(h.m2.K)'     # originally UnitOfMeasure.kJ_mh_m2_K
UnitOfMeasureExt.kJh_m2_K = 'kJ/(h.m2.K)'         # originally UnitOfMeasure.kJh_m2_K
UnitOfMeasureExt.kJkg_K = 'kJ/(kg.K)'             # originally UnitOfMeasure.kJkg_K
UnitOfMeasureExt.kJkmol_K = 'kJ/(kmol.K)'         # originally UnitOfMeasure.kJkmol_K
UnitOfMeasureExt.kJdm3 = 'kJ/dm3'                 # originally UnitOfMeasure.kJdm3
UnitOfMeasureExt.kJkg = 'kJ/kg'                   # originally UnitOfMeasure.kJkg
UnitOfMeasureExt.kJkmol = 'kJ/kmol'               # originally UnitOfMeasure.kJkmol
UnitOfMeasureExt.kJm3 = 'kJ/m3'                   # originally UnitOfMeasure.kJm3
UnitOfMeasureExt.klbf = 'klbf'                    # originally UnitOfMeasure.klbf
UnitOfMeasureExt.klbm = 'klbm'                    # originally UnitOfMeasure.klbm
UnitOfMeasureExt.klbmin = 'klbm/in'               # originally UnitOfMeasure.klbmin
UnitOfMeasureExt.klx = 'klx'                      # originally UnitOfMeasure.klx
UnitOfMeasureExt.km = 'km'                        # originally UnitOfMeasure.km
UnitOfMeasureExt.kmcm = 'km/cm'                   # originally UnitOfMeasure.kmcm
UnitOfMeasureExt.kmdm3 = 'km/dm3'                 # originally UnitOfMeasure.kmdm3
UnitOfMeasureExt.kmh = 'km/h'                     # originally UnitOfMeasure.kmh
UnitOfMeasureExt.kmL = 'km/L'                     # originally UnitOfMeasure.kmL
UnitOfMeasureExt.kms = 'km/s'                     # originally UnitOfMeasure.kms
UnitOfMeasureExt.km2 = 'km2'                      # originally UnitOfMeasure.km2
UnitOfMeasureExt.km3 = 'km3'                      # originally UnitOfMeasure.km3
UnitOfMeasureExt.kmol = 'kmol'                    # originally UnitOfMeasure.kmol
UnitOfMeasureExt.kmolh = 'kmol/h'                 # originally UnitOfMeasure.kmolh
UnitOfMeasureExt.kmolm3 = 'kmol/m3'               # originally UnitOfMeasure.kmolm3
UnitOfMeasureExt.kmols = 'kmol/s'                 # originally UnitOfMeasure.kmols
UnitOfMeasureExt.kN = 'kN'                        # originally UnitOfMeasure.kN
UnitOfMeasureExt.kN_m = 'kN.m'                    # originally UnitOfMeasure.kN_m
UnitOfMeasureExt.kN_m2 = 'kN.m2'                  # originally UnitOfMeasure.kN_m2
UnitOfMeasureExt.kNm = 'kN/m'                     # originally UnitOfMeasure.kNm
UnitOfMeasureExt.kNm2 = 'kN/m2'                   # originally UnitOfMeasure.kNm2
UnitOfMeasureExt.knot = 'knot'                    # originally UnitOfMeasure.knot
UnitOfMeasureExt.kohm = 'kohm'                    # originally UnitOfMeasure.kohm
UnitOfMeasureExt.kohm_m = 'kohm.m'                # originally UnitOfMeasure.kohm_m
UnitOfMeasureExt.kP = 'kP'                        # originally UnitOfMeasure.kP
UnitOfMeasureExt.kPa = 'kPa'                      # originally UnitOfMeasure.kPa
UnitOfMeasureExt.kPa_sm = 'kPa.s/m'               # originally UnitOfMeasure.kPa_sm
UnitOfMeasureExt.kPah = 'kPa/h'                   # originally UnitOfMeasure.kPah
UnitOfMeasureExt.kPahm = 'kPa/hm'                 # originally UnitOfMeasure.kPahm
UnitOfMeasureExt.kPam = 'kPa/m'                   # originally UnitOfMeasure.kPam
UnitOfMeasureExt.kPamin = 'kPa/min'               # originally UnitOfMeasure.kPamin
UnitOfMeasureExt.kPa2 = 'kPa2'                    # originally UnitOfMeasure.kPa2
UnitOfMeasureExt.kPa2cP = 'kPa2/cP'               # originally UnitOfMeasure.kPa2cP
UnitOfMeasureExt.kpsi = 'kpsi'                    # originally UnitOfMeasure.kpsi
UnitOfMeasureExt.kpsi2 = 'kpsi2'                  # originally UnitOfMeasure.kpsi2
UnitOfMeasureExt.krad = 'krad'                    # originally UnitOfMeasure.krad
UnitOfMeasureExt.krd = 'krd'                      # originally UnitOfMeasure.krd
UnitOfMeasureExt.kS = 'kS'                        # originally UnitOfMeasure.kS
UnitOfMeasureExt.kSm = 'kS/m'                     # originally UnitOfMeasure.kSm
UnitOfMeasureExt.kT = 'kT'                        # originally UnitOfMeasure.kT
UnitOfMeasureExt.kV = 'kV'                        # originally UnitOfMeasure.kV
UnitOfMeasureExt.kW = 'kW'                        # originally UnitOfMeasure.kW
UnitOfMeasureExt.kW_h = 'kW.h'                    # originally UnitOfMeasure.kW_h
UnitOfMeasureExt.kW_hkg_degC = 'kW.h/(kg.degC)'   # originally UnitOfMeasure.kW_hkg_degC
UnitOfMeasureExt.kW_hdm3 = 'kW.h/dm3'             # originally UnitOfMeasure.kW_hdm3
UnitOfMeasureExt.kW_hkg = 'kW.h/kg'               # originally UnitOfMeasure.kW_hkg
UnitOfMeasureExt.kW_hm3 = 'kW.h/m3'               # originally UnitOfMeasure.kW_hm3
UnitOfMeasureExt.kWm2_K = 'kW/(m2.K)'             # originally UnitOfMeasure.kWm2_K
UnitOfMeasureExt.kWm3_K = 'kW/(m3.K)'             # originally UnitOfMeasure.kWm3_K
UnitOfMeasureExt.kWcm2 = 'kW/cm2'                 # originally UnitOfMeasure.kWcm2
UnitOfMeasureExt.kWm2 = 'kW/m2'                   # originally UnitOfMeasure.kWm2
UnitOfMeasureExt.kWm3 = 'kW/m3'                   # originally UnitOfMeasure.kWm3
UnitOfMeasureExt.kWb = 'kWb'                      # originally UnitOfMeasure.kWb
UnitOfMeasureExt.L = 'L'                          # originally UnitOfMeasure.L
UnitOfMeasureExt.Lbar_min = 'L/(bar.min)'         # originally UnitOfMeasure.Lbar_min
UnitOfMeasureExt.Lh = 'L/h'                       # originally UnitOfMeasure.Lh
UnitOfMeasureExt.Lkg = 'L/kg'                     # originally UnitOfMeasure.Lkg
UnitOfMeasureExt.Lkmol = 'L/kmol'                 # originally UnitOfMeasure.Lkmol
UnitOfMeasureExt.Lm = 'L/m'                       # originally UnitOfMeasure.Lm
UnitOfMeasureExt.Lm3 = 'L/m3'                     # originally UnitOfMeasure.Lm3
UnitOfMeasureExt.Lmin = 'L/min'                   # originally UnitOfMeasure.Lmin
UnitOfMeasureExt.Lmol = 'L/mol'                   # originally UnitOfMeasure.Lmol
UnitOfMeasureExt.Ls = 'L/s'                       # originally UnitOfMeasure.Ls
UnitOfMeasureExt.Ls2 = 'L/s2'                     # originally UnitOfMeasure.Ls2
UnitOfMeasureExt.Lt = 'L/t'                       # originally UnitOfMeasure.Lt
UnitOfMeasureExt.LtonUK = 'L/ton[UK]'             # originally UnitOfMeasure.LtonUK
UnitOfMeasureExt.lbf = 'lbf'                      # originally UnitOfMeasure.lbf
UnitOfMeasureExt.lbf_ft = 'lbf.ft'                # originally UnitOfMeasure.lbf_ft
UnitOfMeasureExt.lbf_ftbbl = 'lbf.ft/bbl'         # originally UnitOfMeasure.lbf_ftbbl
UnitOfMeasureExt.lbf_ftgalUS = 'lbf.ft/gal[US]'   # originally UnitOfMeasure.lbf_ftgalUS
UnitOfMeasureExt.lbf_ftin = 'lbf.ft/in'           # originally UnitOfMeasure.lbf_ftin
UnitOfMeasureExt.lbf_ftin2 = 'lbf.ft/in2'         # originally UnitOfMeasure.lbf_ftin2
UnitOfMeasureExt.lbf_ftlbm = 'lbf.ft/lbm'         # originally UnitOfMeasure.lbf_ftlbm
UnitOfMeasureExt.lbf_ftmin = 'lbf.ft/min'         # originally UnitOfMeasure.lbf_ftmin
UnitOfMeasureExt.lbf_fts = 'lbf.ft/s'             # originally UnitOfMeasure.lbf_fts
UnitOfMeasureExt.lbf_in = 'lbf.in'                # originally UnitOfMeasure.lbf_in
UnitOfMeasureExt.lbf_inin = 'lbf.in/in'           # originally UnitOfMeasure.lbf_inin
UnitOfMeasureExt.lbf_in2 = 'lbf.in2'              # originally UnitOfMeasure.lbf_in2
UnitOfMeasureExt.lbf_sft2 = 'lbf.s/ft2'           # originally UnitOfMeasure.lbf_sft2
UnitOfMeasureExt.lbf_sin2 = 'lbf.s/in2'           # originally UnitOfMeasure.lbf_sin2
UnitOfMeasureExt.lbfft = 'lbf/ft'                 # originally UnitOfMeasure.lbfft
UnitOfMeasureExt.lbfft2 = 'lbf/ft2'               # originally UnitOfMeasure.lbfft2
UnitOfMeasureExt.lbfft3 = 'lbf/ft3'               # originally UnitOfMeasure.lbfft3
UnitOfMeasureExt.lbfgalUS = 'lbf/gal[US]'         # originally UnitOfMeasure.lbfgalUS
UnitOfMeasureExt.lbfin = 'lbf/in'                 # originally UnitOfMeasure.lbfin
UnitOfMeasureExt.lbflbf = 'lbf/lbf'               # originally UnitOfMeasure.lbflbf
UnitOfMeasureExt.lbm = 'lbm'                      # originally UnitOfMeasure.lbm
UnitOfMeasureExt.lbm_ft = 'lbm.ft'                # originally UnitOfMeasure.lbm_ft
UnitOfMeasureExt.lbm_fts = 'lbm.ft/s'             # originally UnitOfMeasure.lbm_fts
UnitOfMeasureExt.lbm_ft2 = 'lbm.ft2'              # originally UnitOfMeasure.lbm_ft2
UnitOfMeasureExt.lbm_ft2s2 = 'lbm.ft2/s2'         # originally UnitOfMeasure.lbm_ft2s2
UnitOfMeasureExt.lbmft_h = 'lbm/(ft.h)'           # originally UnitOfMeasure.lbmft_h
UnitOfMeasureExt.lbmft_s = 'lbm/(ft.s)'           # originally UnitOfMeasure.lbmft_s
UnitOfMeasureExt.lbmft2_h = 'lbm/(ft2.h)'         # originally UnitOfMeasure.lbmft2_h
UnitOfMeasureExt.lbmft2_s = 'lbm/(ft2.s)'         # originally UnitOfMeasure.lbmft2_s
UnitOfMeasureExt.lbmgalUK_ft = 'lbm/(gal[UK].ft)' # originally UnitOfMeasure.lbmgalUK_ft
UnitOfMeasureExt.lbmgalUS_ft = 'lbm/(gal[US].ft)' # originally UnitOfMeasure.lbmgalUS_ft
UnitOfMeasureExt.lbmhp_h = 'lbm/(hp.h)'           # originally UnitOfMeasure.lbmhp_h
UnitOfMeasureExt.lbmbbl = 'lbm/bbl'               # originally UnitOfMeasure.lbmbbl
UnitOfMeasureExt.lbmd = 'lbm/d'                   # originally UnitOfMeasure.lbmd
UnitOfMeasureExt.lbmft = 'lbm/ft'                 # originally UnitOfMeasure.lbmft
UnitOfMeasureExt.lbmft2 = 'lbm/ft2'               # originally UnitOfMeasure.lbmft2
UnitOfMeasureExt.lbmft3 = 'lbm/ft3'               # originally UnitOfMeasure.lbmft3
UnitOfMeasureExt.lbmft4 = 'lbm/ft4'               # originally UnitOfMeasure.lbmft4
UnitOfMeasureExt.lbmgalUK = 'lbm/gal[UK]'         # originally UnitOfMeasure.lbmgalUK
UnitOfMeasureExt.lbmgalUS = 'lbm/gal[US]'         # originally UnitOfMeasure.lbmgalUS
UnitOfMeasureExt.lbmh = 'lbm/h'                   # originally UnitOfMeasure.lbmh
UnitOfMeasureExt.lbmin3 = 'lbm/in3'               # originally UnitOfMeasure.lbmin3
UnitOfMeasureExt.lbmlbmol = 'lbm/lbmol'           # originally UnitOfMeasure.lbmlbmol
UnitOfMeasureExt.lbmmin = 'lbm/min'               # originally UnitOfMeasure.lbmmin
UnitOfMeasureExt.lbms = 'lbm/s'                   # originally UnitOfMeasure.lbms
UnitOfMeasureExt.lbmol = 'lbmol'                  # originally UnitOfMeasure.lbmol
UnitOfMeasureExt.lbmolh_ft2 = 'lbmol/(h.ft2)'     # originally UnitOfMeasure.lbmolh_ft2
UnitOfMeasureExt.lbmols_ft2 = 'lbmol/(s.ft2)'     # originally UnitOfMeasure.lbmols_ft2
UnitOfMeasureExt.lbmolft3 = 'lbmol/ft3'           # originally UnitOfMeasure.lbmolft3
UnitOfMeasureExt.lbmolgalUK = 'lbmol/gal[UK]'     # originally UnitOfMeasure.lbmolgalUK
UnitOfMeasureExt.lbmolgalUS = 'lbmol/gal[US]'     # originally UnitOfMeasure.lbmolgalUS
UnitOfMeasureExt.lbmolh = 'lbmol/h'               # originally UnitOfMeasure.lbmolh
UnitOfMeasureExt.lbmols = 'lbmol/s'               # originally UnitOfMeasure.lbmols
UnitOfMeasureExt.link = 'link'                    # originally UnitOfMeasure.link
UnitOfMeasureExt.linkBnA = 'link[BnA]'            # originally UnitOfMeasure.linkBnA
UnitOfMeasureExt.linkBnB = 'link[BnB]'            # originally UnitOfMeasure.linkBnB
UnitOfMeasureExt.linkCla = 'link[Cla]'            # originally UnitOfMeasure.linkCla
UnitOfMeasureExt.linkSe = 'link[Se]'              # originally UnitOfMeasure.linkSe
UnitOfMeasureExt.linkSeT = 'link[SeT]'            # originally UnitOfMeasure.linkSeT
UnitOfMeasureExt.linkUS = 'link[US]'              # originally UnitOfMeasure.linkUS
UnitOfMeasureExt.lm = 'lm'                        # originally UnitOfMeasure.lm
UnitOfMeasureExt.lm_s = 'lm.s'                    # originally UnitOfMeasure.lm_s
UnitOfMeasureExt.lmm2 = 'lm/m2'                   # originally UnitOfMeasure.lmm2
UnitOfMeasureExt.lmW = 'lm/W'                     # originally UnitOfMeasure.lmW
UnitOfMeasureExt.lx = 'lx'                        # originally UnitOfMeasure.lx
UnitOfMeasureExt.lx_s = 'lx.s'                    # originally UnitOfMeasure.lx_s
UnitOfMeasureExt.m = 'm'                          # originally UnitOfMeasure.m
UnitOfMeasureExt.mm_K = 'm/(m.K)'                 # originally UnitOfMeasure.mm_K
UnitOfMeasureExt.mcm = 'm/cm'                     # originally UnitOfMeasure.mcm
UnitOfMeasureExt.md = 'm/d'                       # originally UnitOfMeasure.md
UnitOfMeasureExt.mh = 'm/h'                       # originally UnitOfMeasure.mh
UnitOfMeasureExt.mK = 'm/K'                       # originally UnitOfMeasure.mK
UnitOfMeasureExt.mkg = 'm/kg'                     # originally UnitOfMeasure.mkg
UnitOfMeasureExt.mkm = 'm/km'                     # originally UnitOfMeasure.mkm
UnitOfMeasureExt.mkPa = 'm/kPa'                   # originally UnitOfMeasure.mkPa
UnitOfMeasureExt.mm = 'm/m'                       # originally UnitOfMeasure.mm
UnitOfMeasureExt.mm3 = 'm/m3'                     # originally UnitOfMeasure.mm3
UnitOfMeasureExt.mmin = 'm/min'                   # originally UnitOfMeasure.mmin
UnitOfMeasureExt.mms = 'm/ms'                     # originally UnitOfMeasure.mms
UnitOfMeasureExt.mPa = 'm/Pa'                     # originally UnitOfMeasure.mPa
UnitOfMeasureExt.ms = 'm/s'                       # originally UnitOfMeasure.ms
UnitOfMeasureExt.ms2 = 'm/s2'                     # originally UnitOfMeasure.ms2
UnitOfMeasureExt.mGer = 'm[Ger]'                  # originally UnitOfMeasure.mGer
UnitOfMeasureExt.m2 = 'm2'                        # originally UnitOfMeasure.m2
UnitOfMeasureExt.m2kPa_d = 'm2/(kPa.d)'           # originally UnitOfMeasure.m2kPa_d
UnitOfMeasureExt.m2Pa_s = 'm2/(Pa.s)'             # originally UnitOfMeasure.m2Pa_s
UnitOfMeasureExt.m2cm3 = 'm2/cm3'                 # originally UnitOfMeasure.m2cm3
UnitOfMeasureExt.m2d = 'm2/d'                     # originally UnitOfMeasure.m2d
UnitOfMeasureExt.m2g = 'm2/g'                     # originally UnitOfMeasure.m2g
UnitOfMeasureExt.m2h = 'm2/h'                     # originally UnitOfMeasure.m2h
UnitOfMeasureExt.m2kg = 'm2/kg'                   # originally UnitOfMeasure.m2kg
UnitOfMeasureExt.m2m2 = 'm2/m2'                   # originally UnitOfMeasure.m2m2
UnitOfMeasureExt.m2m3 = 'm2/m3'                   # originally UnitOfMeasure.m2m3
UnitOfMeasureExt.m2mol = 'm2/mol'                 # originally UnitOfMeasure.m2mol
UnitOfMeasureExt.m2s = 'm2/s'                     # originally UnitOfMeasure.m2s
UnitOfMeasureExt.m3 = 'm3'                        # originally UnitOfMeasure.m3
UnitOfMeasureExt.m3bar_d = 'm3/(bar.d)'           # originally UnitOfMeasure.m3bar_d
UnitOfMeasureExt.m3bar_h = 'm3/(bar.h)'           # originally UnitOfMeasure.m3bar_h
UnitOfMeasureExt.m3bar_min = 'm3/(bar.min)'       # originally UnitOfMeasure.m3bar_min
UnitOfMeasureExt.m3d_m = 'm3/(d.m)'               # originally UnitOfMeasure.m3d_m
UnitOfMeasureExt.m3h_m = 'm3/(h.m)'               # originally UnitOfMeasure.m3h_m
UnitOfMeasureExt.m3ha_m = 'm3/(ha.m)'             # originally UnitOfMeasure.m3ha_m
UnitOfMeasureExt.m3kPa_d = 'm3/(kPa.d)'           # originally UnitOfMeasure.m3kPa_d
UnitOfMeasureExt.m3kPa_h = 'm3/(kPa.h)'           # originally UnitOfMeasure.m3kPa_h
UnitOfMeasureExt.m3kW_h = 'm3/(kW.h)'             # originally UnitOfMeasure.m3kW_h
UnitOfMeasureExt.m3m3_K = 'm3/(m3.K)'             # originally UnitOfMeasure.m3m3_K
UnitOfMeasureExt.m3Pa_s = 'm3/(Pa.s)'             # originally UnitOfMeasure.m3Pa_s
UnitOfMeasureExt.m3psi_d = 'm3/(psi.d)'           # originally UnitOfMeasure.m3psi_d
UnitOfMeasureExt.m3s_ft = 'm3/(s.ft)'             # originally UnitOfMeasure.m3s_ft
UnitOfMeasureExt.m3s_m = 'm3/(s.m)'               # originally UnitOfMeasure.m3s_m
UnitOfMeasureExt.m3s_m2 = 'm3/(s.m2)'             # originally UnitOfMeasure.m3s_m2
UnitOfMeasureExt.m3s_m3 = 'm3/(s.m3)'             # originally UnitOfMeasure.m3s_m3
UnitOfMeasureExt.m3bbl = 'm3/bbl'                 # originally UnitOfMeasure.m3bbl
UnitOfMeasureExt.m3d = 'm3/d'                     # originally UnitOfMeasure.m3d
UnitOfMeasureExt.m3d2 = 'm3/d2'                   # originally UnitOfMeasure.m3d2
UnitOfMeasureExt.m3g = 'm3/g'                     # originally UnitOfMeasure.m3g
UnitOfMeasureExt.m3h = 'm3/h'                     # originally UnitOfMeasure.m3h
UnitOfMeasureExt.m3J = 'm3/J'                     # originally UnitOfMeasure.m3J
UnitOfMeasureExt.m3kg = 'm3/kg'                   # originally UnitOfMeasure.m3kg
UnitOfMeasureExt.m3km = 'm3/km'                   # originally UnitOfMeasure.m3km
UnitOfMeasureExt.m3kmol = 'm3/kmol'               # originally UnitOfMeasure.m3kmol
UnitOfMeasureExt.m3kPa = 'm3/kPa'                 # originally UnitOfMeasure.m3kPa
UnitOfMeasureExt.m3m = 'm3/m'                     # originally UnitOfMeasure.m3m
UnitOfMeasureExt.m3m2 = 'm3/m2'                   # originally UnitOfMeasure.m3m2
UnitOfMeasureExt.m3m3 = 'm3/m3'                   # originally UnitOfMeasure.m3m3
UnitOfMeasureExt.m3min = 'm3/min'                 # originally UnitOfMeasure.m3min
UnitOfMeasureExt.m3mol = 'm3/mol'                 # originally UnitOfMeasure.m3mol
UnitOfMeasureExt.m3Pa = 'm3/Pa'                   # originally UnitOfMeasure.m3Pa
UnitOfMeasureExt.m3rad = 'm3/rad'                 # originally UnitOfMeasure.m3rad
UnitOfMeasureExt.m3rev = 'm3/rev'                 # originally UnitOfMeasure.m3rev
UnitOfMeasureExt.m3s = 'm3/s'                     # originally UnitOfMeasure.m3s
UnitOfMeasureExt.m3s2 = 'm3/s2'                   # originally UnitOfMeasure.m3s2
UnitOfMeasureExt.m3t = 'm3/t'                     # originally UnitOfMeasure.m3t
UnitOfMeasureExt.m3tonUK = 'm3/ton[UK]'           # originally UnitOfMeasure.m3tonUK
UnitOfMeasureExt.m3tonUS = 'm3/ton[US]'           # originally UnitOfMeasure.m3tonUS
UnitOfMeasureExt.m4 = 'm4'                        # originally UnitOfMeasure.m4
UnitOfMeasureExt.m4s = 'm4/s'                     # originally UnitOfMeasure.m4s
UnitOfMeasureExt.mA = 'mA'                        # originally UnitOfMeasure.mA
UnitOfMeasureExt.MA = 'MA'                        # originally UnitOfMeasure.MA
UnitOfMeasureExt.mAcm2 = 'mA/cm2'                 # originally UnitOfMeasure.mAcm2
UnitOfMeasureExt.mAft2 = 'mA/ft2'                 # originally UnitOfMeasure.mAft2
UnitOfMeasureExt.Mat = 'Ma[t]'                    # originally UnitOfMeasure.Mat
UnitOfMeasureExt.mbar = 'mbar'                    # originally UnitOfMeasure.mbar
UnitOfMeasureExt.MBq = 'MBq'                      # originally UnitOfMeasure.MBq
UnitOfMeasureExt.mC = 'mC'                        # originally UnitOfMeasure.mC
UnitOfMeasureExt.MC = 'MC'                        # originally UnitOfMeasure.MC
UnitOfMeasureExt.mCm2 = 'mC/m2'                   # originally UnitOfMeasure.mCm2
UnitOfMeasureExt.mcalth = 'mcal[th]'              # originally UnitOfMeasure.mcalth
UnitOfMeasureExt.Mcalth = 'Mcal[th]'              # originally UnitOfMeasure.Mcalth
UnitOfMeasureExt.mCi = 'mCi'                      # originally UnitOfMeasure.mCi
UnitOfMeasureExt.mD = 'mD'                        # originally UnitOfMeasure.mD
UnitOfMeasureExt.mD_ft = 'mD.ft'                  # originally UnitOfMeasure.mD_ft
UnitOfMeasureExt.mD_ft2lbf_s = 'mD.ft2/(lbf.s)'   # originally UnitOfMeasure.mD_ft2lbf_s
UnitOfMeasureExt.mD_in2lbf_s = 'mD.in2/(lbf.s)'   # originally UnitOfMeasure.mD_in2lbf_s
UnitOfMeasureExt.mD_m = 'mD.m'                    # originally UnitOfMeasure.mD_m
UnitOfMeasureExt.mDPa_s = 'mD/(Pa.s)'             # originally UnitOfMeasure.mDPa_s
UnitOfMeasureExt.mDcP = 'mD/cP'                   # originally UnitOfMeasure.mDcP
UnitOfMeasureExt.MEuc = 'MEuc'                    # originally UnitOfMeasure.MEuc
UnitOfMeasureExt.mEuc = 'mEuc'                    # originally UnitOfMeasure.mEuc
UnitOfMeasureExt.meV = 'meV'                      # originally UnitOfMeasure.meV
UnitOfMeasureExt.MeV = 'MeV'                      # originally UnitOfMeasure.MeV
UnitOfMeasureExt.MF = 'MF'                        # originally UnitOfMeasure.MF
UnitOfMeasureExt.mF = 'mF'                        # originally UnitOfMeasure.mF
UnitOfMeasureExt.mg = 'mg'                        # originally UnitOfMeasure.mg
UnitOfMeasureExt.Mg = 'Mg'                        # originally UnitOfMeasure.Mg
UnitOfMeasureExt.Mga = 'Mg/a'                     # originally UnitOfMeasure.Mga
UnitOfMeasureExt.Mgd = 'Mg/d'                     # originally UnitOfMeasure.Mgd
UnitOfMeasureExt.mgdm3 = 'mg/dm3'                 # originally UnitOfMeasure.mgdm3
UnitOfMeasureExt.mgg = 'mg/g'                     # originally UnitOfMeasure.mgg
UnitOfMeasureExt.mggalUS = 'mg/gal[US]'           # originally UnitOfMeasure.mggalUS
UnitOfMeasureExt.Mgh = 'Mg/h'                     # originally UnitOfMeasure.Mgh
UnitOfMeasureExt.Mgin = 'Mg/in'                   # originally UnitOfMeasure.Mgin
UnitOfMeasureExt.mgJ = 'mg/J'                     # originally UnitOfMeasure.mgJ
UnitOfMeasureExt.mgkg = 'mg/kg'                   # originally UnitOfMeasure.mgkg
UnitOfMeasureExt.mgL = 'mg/L'                     # originally UnitOfMeasure.mgL
UnitOfMeasureExt.Mgm2 = 'Mg/m2'                   # originally UnitOfMeasure.Mgm2
UnitOfMeasureExt.mgm3 = 'mg/m3'                   # originally UnitOfMeasure.mgm3
UnitOfMeasureExt.Mgm3 = 'Mg/m3'                   # originally UnitOfMeasure.Mgm3
UnitOfMeasureExt.Mgmin = 'Mg/min'                 # originally UnitOfMeasure.Mgmin
UnitOfMeasureExt.mGal = 'mGal'                    # originally UnitOfMeasure.mGal
UnitOfMeasureExt.mgauss = 'mgauss'                # originally UnitOfMeasure.mgauss
UnitOfMeasureExt.Mgauss = 'Mgauss'                # originally UnitOfMeasure.Mgauss
UnitOfMeasureExt.Mgf = 'Mgf'                      # originally UnitOfMeasure.Mgf
UnitOfMeasureExt.mgn = 'mgn'                      # originally UnitOfMeasure.mgn
UnitOfMeasureExt.MGy = 'MGy'                      # originally UnitOfMeasure.MGy
UnitOfMeasureExt.mGy = 'mGy'                      # originally UnitOfMeasure.mGy
UnitOfMeasureExt.mH = 'mH'                        # originally UnitOfMeasure.mH
UnitOfMeasureExt.MH = 'MH'                        # originally UnitOfMeasure.MH
UnitOfMeasureExt.mHz = 'mHz'                      # originally UnitOfMeasure.mHz
UnitOfMeasureExt.MHz = 'MHz'                      # originally UnitOfMeasure.MHz
UnitOfMeasureExt.mi = 'mi'                        # originally UnitOfMeasure.mi
UnitOfMeasureExt.migalUK = 'mi/gal[UK]'           # originally UnitOfMeasure.migalUK
UnitOfMeasureExt.migalUS = 'mi/gal[US]'           # originally UnitOfMeasure.migalUS
UnitOfMeasureExt.mih = 'mi/h'                     # originally UnitOfMeasure.mih
UnitOfMeasureExt.miin = 'mi/in'                   # originally UnitOfMeasure.miin
UnitOfMeasureExt.minaut = 'mi[naut]'              # originally UnitOfMeasure.minaut
UnitOfMeasureExt.minautUK = 'mi[nautUK]'          # originally UnitOfMeasure.minautUK
UnitOfMeasureExt.miUS = 'mi[US]'                  # originally UnitOfMeasure.miUS
UnitOfMeasureExt.miUS2 = 'mi[US]2'                # originally UnitOfMeasure.miUS2
UnitOfMeasureExt.mi2 = 'mi2'                      # originally UnitOfMeasure.mi2
UnitOfMeasureExt.mi3 = 'mi3'                      # originally UnitOfMeasure.mi3
UnitOfMeasureExt.Mibyte = 'Mibyte'                # originally UnitOfMeasure.Mibyte
UnitOfMeasureExt.mil = 'mil'                      # originally UnitOfMeasure.mil
UnitOfMeasureExt.mila = 'mil/a'                   # originally UnitOfMeasure.mila
UnitOfMeasureExt.mila_ = 'mila'                   # originally UnitOfMeasure.mila_
UnitOfMeasureExt.min = 'min'                      # originally UnitOfMeasure.min
UnitOfMeasureExt.minft = 'min/ft'                 # originally UnitOfMeasure.minft
UnitOfMeasureExt.minm = 'min/m'                   # originally UnitOfMeasure.minm
UnitOfMeasureExt.mina = 'mina'                    # originally UnitOfMeasure.mina
UnitOfMeasureExt.mJ = 'mJ'                        # originally UnitOfMeasure.mJ
UnitOfMeasureExt.MJ = 'MJ'                        # originally UnitOfMeasure.MJ
UnitOfMeasureExt.MJa = 'MJ/a'                     # originally UnitOfMeasure.MJa
UnitOfMeasureExt.mJcm2 = 'mJ/cm2'                 # originally UnitOfMeasure.mJcm2
UnitOfMeasureExt.MJkg = 'MJ/kg'                   # originally UnitOfMeasure.MJkg
UnitOfMeasureExt.MJkmol = 'MJ/kmol'               # originally UnitOfMeasure.MJkmol
UnitOfMeasureExt.MJm = 'MJ/m'                     # originally UnitOfMeasure.MJm
UnitOfMeasureExt.mJm2 = 'mJ/m2'                   # originally UnitOfMeasure.mJm2
UnitOfMeasureExt.MJm3 = 'MJ/m3'                   # originally UnitOfMeasure.MJm3
UnitOfMeasureExt.mL = 'mL'                        # originally UnitOfMeasure.mL
UnitOfMeasureExt.mLgalUK = 'mL/gal[UK]'           # originally UnitOfMeasure.mLgalUK
UnitOfMeasureExt.mLgalUS = 'mL/gal[US]'           # originally UnitOfMeasure.mLgalUS
UnitOfMeasureExt.mLmL = 'mL/mL'                   # originally UnitOfMeasure.mLmL
UnitOfMeasureExt.mm_ = 'mm'                       # originally UnitOfMeasure.mm_
UnitOfMeasureExt.Mm = 'Mm'                        # originally UnitOfMeasure.Mm
UnitOfMeasureExt.mmmm_K = 'mm/(mm.K)'             # originally UnitOfMeasure.mmmm_K
UnitOfMeasureExt.mma = 'mm/a'                     # originally UnitOfMeasure.mma
UnitOfMeasureExt.mms_ = 'mm/s'                    # originally UnitOfMeasure.mms_
UnitOfMeasureExt.mm2 = 'mm2'                      # originally UnitOfMeasure.mm2
UnitOfMeasureExt.mm2mm2 = 'mm2/mm2'               # originally UnitOfMeasure.mm2mm2
UnitOfMeasureExt.mm2s = 'mm2/s'                   # originally UnitOfMeasure.mm2s
UnitOfMeasureExt.mm3_ = 'mm3'                     # originally UnitOfMeasure.mm3_
UnitOfMeasureExt.mm3J = 'mm3/J'                   # originally UnitOfMeasure.mm3J
UnitOfMeasureExt.mmHg0degC = 'mmHg[0degC]'        # originally UnitOfMeasure.mmHg0degC
UnitOfMeasureExt.mmol = 'mmol'                    # originally UnitOfMeasure.mmol
UnitOfMeasureExt.MN = 'MN'                        # originally UnitOfMeasure.MN
UnitOfMeasureExt.mN = 'mN'                        # originally UnitOfMeasure.mN
UnitOfMeasureExt.mN_m2 = 'mN.m2'                  # originally UnitOfMeasure.mN_m2
UnitOfMeasureExt.mNkm = 'mN/km'                   # originally UnitOfMeasure.mNkm
UnitOfMeasureExt.mNm = 'mN/m'                     # originally UnitOfMeasure.mNm
UnitOfMeasureExt.Mohm = 'Mohm'                    # originally UnitOfMeasure.Mohm
UnitOfMeasureExt.mohm = 'mohm'                    # originally UnitOfMeasure.mohm
UnitOfMeasureExt.mol = 'mol'                      # originally UnitOfMeasure.mol
UnitOfMeasureExt.mol_m2mol_s = 'mol.m2/(mol.s)'   # originally UnitOfMeasure.mol_m2mol_s
UnitOfMeasureExt.mols_m2 = 'mol/(s.m2)'           # originally UnitOfMeasure.mols_m2
UnitOfMeasureExt.molm2 = 'mol/m2'                 # originally UnitOfMeasure.molm2
UnitOfMeasureExt.molm3 = 'mol/m3'                 # originally UnitOfMeasure.molm3
UnitOfMeasureExt.molmol = 'mol/mol'               # originally UnitOfMeasure.molmol
UnitOfMeasureExt.mols = 'mol/s'                   # originally UnitOfMeasure.mols
UnitOfMeasureExt.MP = 'MP'                        # originally UnitOfMeasure.MP
UnitOfMeasureExt.mP = 'mP'                        # originally UnitOfMeasure.mP
UnitOfMeasureExt.mPa_ = 'mPa'                     # originally UnitOfMeasure.mPa_
UnitOfMeasureExt.MPa = 'MPa'                      # originally UnitOfMeasure.MPa
UnitOfMeasureExt.mPa_s = 'mPa.s'                  # originally UnitOfMeasure.mPa_s
UnitOfMeasureExt.MPa_sm = 'MPa.s/m'               # originally UnitOfMeasure.MPa_sm
UnitOfMeasureExt.MPah = 'MPa/h'                   # originally UnitOfMeasure.MPah
UnitOfMeasureExt.MPam = 'MPa/m'                   # originally UnitOfMeasure.MPam
UnitOfMeasureExt.Mpsi = 'Mpsi'                    # originally UnitOfMeasure.Mpsi
UnitOfMeasureExt.Mrad = 'Mrad'                    # originally UnitOfMeasure.Mrad
UnitOfMeasureExt.mrad = 'mrad'                    # originally UnitOfMeasure.mrad
UnitOfMeasureExt.mrd = 'mrd'                      # originally UnitOfMeasure.mrd
UnitOfMeasureExt.Mrd = 'Mrd'                      # originally UnitOfMeasure.Mrd
UnitOfMeasureExt.mrem = 'mrem'                    # originally UnitOfMeasure.mrem
UnitOfMeasureExt.mremh = 'mrem/h'                 # originally UnitOfMeasure.mremh
UnitOfMeasureExt.ms_ = 'ms'                       # originally UnitOfMeasure.ms_
UnitOfMeasureExt.MS = 'MS'                        # originally UnitOfMeasure.MS
UnitOfMeasureExt.mS = 'mS'                        # originally UnitOfMeasure.mS
UnitOfMeasureExt.mScm = 'mS/cm'                   # originally UnitOfMeasure.mScm
UnitOfMeasureExt.mscm = 'ms/cm'                   # originally UnitOfMeasure.mscm
UnitOfMeasureExt.msft = 'ms/ft'                   # originally UnitOfMeasure.msft
UnitOfMeasureExt.msin = 'ms/in'                   # originally UnitOfMeasure.msin
UnitOfMeasureExt.mSm = 'mS/m'                     # originally UnitOfMeasure.mSm
UnitOfMeasureExt.msm = 'ms/m'                     # originally UnitOfMeasure.msm
UnitOfMeasureExt.mss = 'ms/s'                     # originally UnitOfMeasure.mss
UnitOfMeasureExt.mSv = 'mSv'                      # originally UnitOfMeasure.mSv
UnitOfMeasureExt.mSvh = 'mSv/h'                   # originally UnitOfMeasure.mSvh
UnitOfMeasureExt.mT = 'mT'                        # originally UnitOfMeasure.mT
UnitOfMeasureExt.mTdm = 'mT/dm'                   # originally UnitOfMeasure.mTdm
UnitOfMeasureExt.MV = 'MV'                        # originally UnitOfMeasure.MV
UnitOfMeasureExt.mV = 'mV'                        # originally UnitOfMeasure.mV
UnitOfMeasureExt.mVft = 'mV/ft'                   # originally UnitOfMeasure.mVft
UnitOfMeasureExt.mVm = 'mV/m'                     # originally UnitOfMeasure.mVm
UnitOfMeasureExt.mW = 'mW'                        # originally UnitOfMeasure.mW
UnitOfMeasureExt.MW = 'MW'                        # originally UnitOfMeasure.MW
UnitOfMeasureExt.MW_h = 'MW.h'                    # originally UnitOfMeasure.MW_h
UnitOfMeasureExt.MW_hkg = 'MW.h/kg'               # originally UnitOfMeasure.MW_hkg
UnitOfMeasureExt.MW_hm3 = 'MW.h/m3'               # originally UnitOfMeasure.MW_hm3
UnitOfMeasureExt.mWm2 = 'mW/m2'                   # originally UnitOfMeasure.mWm2
UnitOfMeasureExt.MWb = 'MWb'                      # originally UnitOfMeasure.MWb
UnitOfMeasureExt.mWb = 'mWb'                      # originally UnitOfMeasure.mWb
UnitOfMeasureExt.N = 'N'                          # originally UnitOfMeasure.N
UnitOfMeasureExt.N_m = 'N.m'                      # originally UnitOfMeasure.N_m
UnitOfMeasureExt.N_mm = 'N.m/m'                   # originally UnitOfMeasure.N_mm
UnitOfMeasureExt.N_m2 = 'N.m2'                    # originally UnitOfMeasure.N_m2
UnitOfMeasureExt.N_sm2 = 'N.s/m2'                 # originally UnitOfMeasure.N_sm2
UnitOfMeasureExt.Nm = 'N/m'                       # originally UnitOfMeasure.Nm
UnitOfMeasureExt.Nm2 = 'N/m2'                     # originally UnitOfMeasure.Nm2
UnitOfMeasureExt.Nm3 = 'N/m3'                     # originally UnitOfMeasure.Nm3
UnitOfMeasureExt.Nmm2 = 'N/mm2'                   # originally UnitOfMeasure.Nmm2
UnitOfMeasureExt.NN = 'N/N'                       # originally UnitOfMeasure.NN
UnitOfMeasureExt.na = 'na'                        # originally UnitOfMeasure.na
UnitOfMeasureExt.nA = 'nA'                        # originally UnitOfMeasure.nA
UnitOfMeasureExt.nAPI = 'nAPI'                    # originally UnitOfMeasure.nAPI
UnitOfMeasureExt.nC = 'nC'                        # originally UnitOfMeasure.nC
UnitOfMeasureExt.ncalth = 'ncal[th]'              # originally UnitOfMeasure.ncalth
UnitOfMeasureExt.nCi = 'nCi'                      # originally UnitOfMeasure.nCi
UnitOfMeasureExt.nEuc = 'nEuc'                    # originally UnitOfMeasure.nEuc
UnitOfMeasureExt.neV = 'neV'                      # originally UnitOfMeasure.neV
UnitOfMeasureExt.nF = 'nF'                        # originally UnitOfMeasure.nF
UnitOfMeasureExt.ng = 'ng'                        # originally UnitOfMeasure.ng
UnitOfMeasureExt.ngg = 'ng/g'                     # originally UnitOfMeasure.ngg
UnitOfMeasureExt.ngmg = 'ng/mg'                   # originally UnitOfMeasure.ngmg
UnitOfMeasureExt.ngauss = 'ngauss'                # originally UnitOfMeasure.ngauss
UnitOfMeasureExt.nGy = 'nGy'                      # originally UnitOfMeasure.nGy
UnitOfMeasureExt.nH = 'nH'                        # originally UnitOfMeasure.nH
UnitOfMeasureExt.nHz = 'nHz'                      # originally UnitOfMeasure.nHz
UnitOfMeasureExt.nJ = 'nJ'                        # originally UnitOfMeasure.nJ
UnitOfMeasureExt.nm = 'nm'                        # originally UnitOfMeasure.nm
UnitOfMeasureExt.nms = 'nm/s'                     # originally UnitOfMeasure.nms
UnitOfMeasureExt.nN = 'nN'                        # originally UnitOfMeasure.nN
UnitOfMeasureExt.nohm = 'nohm'                    # originally UnitOfMeasure.nohm
UnitOfMeasureExt.nohm_mil2ft = 'nohm.mil2/ft'     # originally UnitOfMeasure.nohm_mil2ft
UnitOfMeasureExt.nohm_mm2m = 'nohm.mm2/m'         # originally UnitOfMeasure.nohm_mm2m
UnitOfMeasureExt.nP = 'nP'                        # originally UnitOfMeasure.nP
UnitOfMeasureExt.nPa = 'nPa'                      # originally UnitOfMeasure.nPa
UnitOfMeasureExt.nrd = 'nrd'                      # originally UnitOfMeasure.nrd
UnitOfMeasureExt.ns = 'ns'                        # originally UnitOfMeasure.ns
UnitOfMeasureExt.nS = 'nS'                        # originally UnitOfMeasure.nS
UnitOfMeasureExt.nsft = 'ns/ft'                   # originally UnitOfMeasure.nsft
UnitOfMeasureExt.nsm = 'ns/m'                     # originally UnitOfMeasure.nsm
UnitOfMeasureExt.nT = 'nT'                        # originally UnitOfMeasure.nT
UnitOfMeasureExt.nV = 'nV'                        # originally UnitOfMeasure.nV
UnitOfMeasureExt.nW = 'nW'                        # originally UnitOfMeasure.nW
UnitOfMeasureExt.nWb = 'nWb'                      # originally UnitOfMeasure.nWb
UnitOfMeasureExt.O = 'O'                          # originally UnitOfMeasure.O
UnitOfMeasureExt.Oe = 'Oe'                        # originally UnitOfMeasure.Oe
UnitOfMeasureExt.ohm = 'ohm'                      # originally UnitOfMeasure.ohm
UnitOfMeasureExt.ohm_cm = 'ohm.cm'                # originally UnitOfMeasure.ohm_cm
UnitOfMeasureExt.ohm_m = 'ohm.m'                  # originally UnitOfMeasure.ohm_m
UnitOfMeasureExt.ohm_m2m = 'ohm.m2/m'             # originally UnitOfMeasure.ohm_m2m
UnitOfMeasureExt.ohmm = 'ohm/m'                   # originally UnitOfMeasure.ohmm
UnitOfMeasureExt.ozf = 'ozf'                      # originally UnitOfMeasure.ozf
UnitOfMeasureExt.ozm = 'ozm'                      # originally UnitOfMeasure.ozm
UnitOfMeasureExt.ozmtroy = 'ozm[troy]'            # originally UnitOfMeasure.ozmtroy
UnitOfMeasureExt.P = 'P'                          # originally UnitOfMeasure.P
UnitOfMeasureExt.Pa = 'Pa'                        # originally UnitOfMeasure.Pa
UnitOfMeasureExt.pA = 'pA'                        # originally UnitOfMeasure.pA
UnitOfMeasureExt.Pa_s = 'Pa.s'                    # originally UnitOfMeasure.Pa_s
UnitOfMeasureExt.Pa_s_m3kg = 'Pa.s.m3/kg'         # originally UnitOfMeasure.Pa_s_m3kg
UnitOfMeasureExt.Pa_sm3 = 'Pa.s/m3'               # originally UnitOfMeasure.Pa_sm3
UnitOfMeasureExt.Pa_s2m3 = 'Pa.s2/m3'             # originally UnitOfMeasure.Pa_s2m3
UnitOfMeasureExt.Pah = 'Pa/h'                     # originally UnitOfMeasure.Pah
UnitOfMeasureExt.Pam = 'Pa/m'                     # originally UnitOfMeasure.Pam
UnitOfMeasureExt.Pam3 = 'Pa/m3'                   # originally UnitOfMeasure.Pam3
UnitOfMeasureExt.Pas = 'Pa/s'                     # originally UnitOfMeasure.Pas
UnitOfMeasureExt.Pa2 = 'Pa2'                      # originally UnitOfMeasure.Pa2
UnitOfMeasureExt.Pa2Pa_s = 'Pa2/(Pa.s)'           # originally UnitOfMeasure.Pa2Pa_s
UnitOfMeasureExt.pC = 'pC'                        # originally UnitOfMeasure.pC
UnitOfMeasureExt.pcalth = 'pcal[th]'              # originally UnitOfMeasure.pcalth
UnitOfMeasureExt.pCi = 'pCi'                      # originally UnitOfMeasure.pCi
UnitOfMeasureExt.pCig = 'pCi/g'                   # originally UnitOfMeasure.pCig
UnitOfMeasureExt.pdl = 'pdl'                      # originally UnitOfMeasure.pdl
UnitOfMeasureExt.pdl_cm2 = 'pdl.cm2'              # originally UnitOfMeasure.pdl_cm2
UnitOfMeasureExt.pdl_ft = 'pdl.ft'                # originally UnitOfMeasure.pdl_ft
UnitOfMeasureExt.pdlcm = 'pdl/cm'                 # originally UnitOfMeasure.pdlcm
UnitOfMeasureExt.pEuc = 'pEuc'                    # originally UnitOfMeasure.pEuc
UnitOfMeasureExt.peV = 'peV'                      # originally UnitOfMeasure.peV
UnitOfMeasureExt.pF = 'pF'                        # originally UnitOfMeasure.pF
UnitOfMeasureExt.pg = 'pg'                        # originally UnitOfMeasure.pg
UnitOfMeasureExt.pgauss = 'pgauss'                # originally UnitOfMeasure.pgauss
UnitOfMeasureExt.pGy = 'pGy'                      # originally UnitOfMeasure.pGy
UnitOfMeasureExt.pHz = 'pHz'                      # originally UnitOfMeasure.pHz
UnitOfMeasureExt.pJ = 'pJ'                        # originally UnitOfMeasure.pJ
UnitOfMeasureExt.pm = 'pm'                        # originally UnitOfMeasure.pm
UnitOfMeasureExt.pN = 'pN'                        # originally UnitOfMeasure.pN
UnitOfMeasureExt.pohm = 'pohm'                    # originally UnitOfMeasure.pohm
UnitOfMeasureExt.pP = 'pP'                        # originally UnitOfMeasure.pP
UnitOfMeasureExt.pPa = 'pPa'                      # originally UnitOfMeasure.pPa
UnitOfMeasureExt.ppk = 'ppk'                      # originally UnitOfMeasure.ppk
UnitOfMeasureExt.ppm = 'ppm'                      # originally UnitOfMeasure.ppm
UnitOfMeasureExt.ppmmass = 'ppm[mass]'            # originally UnitOfMeasure.ppmmass
UnitOfMeasureExt.ppmvol = 'ppm[vol]'              # originally UnitOfMeasure.ppmvol
UnitOfMeasureExt.ppmvoldegC = 'ppm[vol]/degC'     # originally UnitOfMeasure.ppmvoldegC
UnitOfMeasureExt.ppmvoldegF = 'ppm[vol]/degF'     # originally UnitOfMeasure.ppmvoldegF
UnitOfMeasureExt.prd = 'prd'                      # originally UnitOfMeasure.prd
UnitOfMeasureExt.pS = 'pS'                        # originally UnitOfMeasure.pS
UnitOfMeasureExt.ps = 'ps'                        # originally UnitOfMeasure.ps
UnitOfMeasureExt.psi = 'psi'                      # originally UnitOfMeasure.psi
UnitOfMeasureExt.psi_dbbl = 'psi.d/bbl'           # originally UnitOfMeasure.psi_dbbl
UnitOfMeasureExt.psi_s = 'psi.s'                  # originally UnitOfMeasure.psi_s
UnitOfMeasureExt.psift = 'psi/ft'                 # originally UnitOfMeasure.psift
UnitOfMeasureExt.psih = 'psi/h'                   # originally UnitOfMeasure.psih
UnitOfMeasureExt.psim = 'psi/m'                   # originally UnitOfMeasure.psim
UnitOfMeasureExt.psimin = 'psi/min'               # originally UnitOfMeasure.psimin
UnitOfMeasureExt.psi2 = 'psi2'                    # originally UnitOfMeasure.psi2
UnitOfMeasureExt.psi2_dcP_ft3 = 'psi2.d/(cP.ft3)' # originally UnitOfMeasure.psi2_dcP_ft3
UnitOfMeasureExt.psi2cP = 'psi2/cP'               # originally UnitOfMeasure.psi2cP
UnitOfMeasureExt.pT = 'pT'                        # originally UnitOfMeasure.pT
UnitOfMeasureExt.ptUK = 'pt[UK]'                  # originally UnitOfMeasure.ptUK
UnitOfMeasureExt.ptUKhp_h = 'pt[UK]/(hp.h)'       # originally UnitOfMeasure.ptUKhp_h
UnitOfMeasureExt.ptUS = 'pt[US]'                  # originally UnitOfMeasure.ptUS
UnitOfMeasureExt.pV = 'pV'                        # originally UnitOfMeasure.pV
UnitOfMeasureExt.pW = 'pW'                        # originally UnitOfMeasure.pW
UnitOfMeasureExt.pWb = 'pWb'                      # originally UnitOfMeasure.pWb
UnitOfMeasureExt.qtUK = 'qt[UK]'                  # originally UnitOfMeasure.qtUK
UnitOfMeasureExt.qtUS = 'qt[US]'                  # originally UnitOfMeasure.qtUS
UnitOfMeasureExt.quad = 'quad'                    # originally UnitOfMeasure.quad
UnitOfMeasureExt.quada = 'quad/a'                 # originally UnitOfMeasure.quada
UnitOfMeasureExt.rad = 'rad'                      # originally UnitOfMeasure.rad
UnitOfMeasureExt.radft = 'rad/ft'                 # originally UnitOfMeasure.radft
UnitOfMeasureExt.radft3 = 'rad/ft3'               # originally UnitOfMeasure.radft3
UnitOfMeasureExt.radm = 'rad/m'                   # originally UnitOfMeasure.radm
UnitOfMeasureExt.radm3 = 'rad/m3'                 # originally UnitOfMeasure.radm3
UnitOfMeasureExt.rads = 'rad/s'                   # originally UnitOfMeasure.rads
UnitOfMeasureExt.rads2 = 'rad/s2'                 # originally UnitOfMeasure.rads2
UnitOfMeasureExt.rd = 'rd'                        # originally UnitOfMeasure.rd
UnitOfMeasureExt.rem = 'rem'                      # originally UnitOfMeasure.rem
UnitOfMeasureExt.remh = 'rem/h'                   # originally UnitOfMeasure.remh
UnitOfMeasureExt.rev = 'rev'                      # originally UnitOfMeasure.rev
UnitOfMeasureExt.revft = 'rev/ft'                 # originally UnitOfMeasure.revft
UnitOfMeasureExt.revm = 'rev/m'                   # originally UnitOfMeasure.revm
UnitOfMeasureExt.revs = 'rev/s'                   # originally UnitOfMeasure.revs
UnitOfMeasureExt.rodUS = 'rod[US]'                # originally UnitOfMeasure.rodUS
UnitOfMeasureExt.rpm = 'rpm'                      # originally UnitOfMeasure.rpm
UnitOfMeasureExt.rpms = 'rpm/s'                   # originally UnitOfMeasure.rpms
UnitOfMeasureExt.S = 'S'                          # originally UnitOfMeasure.S
UnitOfMeasureExt.s = 's'                          # originally UnitOfMeasure.s
UnitOfMeasureExt.scm = 's/cm'                     # originally UnitOfMeasure.scm
UnitOfMeasureExt.sft = 's/ft'                     # originally UnitOfMeasure.sft
UnitOfMeasureExt.sft3 = 's/ft3'                   # originally UnitOfMeasure.sft3
UnitOfMeasureExt.sin = 's/in'                     # originally UnitOfMeasure.sin
UnitOfMeasureExt.skg = 's/kg'                     # originally UnitOfMeasure.skg
UnitOfMeasureExt.sL = 's/L'                       # originally UnitOfMeasure.sL
UnitOfMeasureExt.sm = 's/m'                       # originally UnitOfMeasure.sm
UnitOfMeasureExt.Sm = 'S/m'                       # originally UnitOfMeasure.Sm
UnitOfMeasureExt.sm3 = 's/m3'                     # originally UnitOfMeasure.sm3
UnitOfMeasureExt.sqtUK = 's/qt[UK]'               # originally UnitOfMeasure.sqtUK
UnitOfMeasureExt.sqtUS = 's/qt[US]'               # originally UnitOfMeasure.sqtUS
UnitOfMeasureExt.ss = 's/s'                       # originally UnitOfMeasure.ss
UnitOfMeasureExt.sack94lbm = 'sack[94lbm]'        # originally UnitOfMeasure.sack94lbm
UnitOfMeasureExt.seca = 'seca'                    # originally UnitOfMeasure.seca
UnitOfMeasureExt.section = 'section'              # originally UnitOfMeasure.section
UnitOfMeasureExt.sr = 'sr'                        # originally UnitOfMeasure.sr
UnitOfMeasureExt.St = 'St'                        # originally UnitOfMeasure.St
UnitOfMeasureExt.Sv = 'Sv'                        # originally UnitOfMeasure.Sv
UnitOfMeasureExt.Svh = 'Sv/h'                     # originally UnitOfMeasure.Svh
UnitOfMeasureExt.Svs = 'Sv/s'                     # originally UnitOfMeasure.Svs
UnitOfMeasureExt.t = 't'                          # originally UnitOfMeasure.t
UnitOfMeasureExt.T = 'T'                          # originally UnitOfMeasure.T
UnitOfMeasureExt.ta = 't/a'                       # originally UnitOfMeasure.ta
UnitOfMeasureExt.td = 't/d'                       # originally UnitOfMeasure.td
UnitOfMeasureExt.th = 't/h'                       # originally UnitOfMeasure.th
UnitOfMeasureExt.Tm = 'T/m'                       # originally UnitOfMeasure.Tm
UnitOfMeasureExt.tm3 = 't/m3'                     # originally UnitOfMeasure.tm3
UnitOfMeasureExt.tmin = 't/min'                   # originally UnitOfMeasure.tmin
UnitOfMeasureExt.TA = 'TA'                        # originally UnitOfMeasure.TA
UnitOfMeasureExt.Tat = 'Ta[t]'                    # originally UnitOfMeasure.Tat
UnitOfMeasureExt.TBq = 'TBq'                      # originally UnitOfMeasure.TBq
UnitOfMeasureExt.TC = 'TC'                        # originally UnitOfMeasure.TC
UnitOfMeasureExt.Tcalth = 'Tcal[th]'              # originally UnitOfMeasure.Tcalth
UnitOfMeasureExt.TDAPI = 'TD[API]'                # originally UnitOfMeasure.TDAPI
UnitOfMeasureExt.TDAPI_m = 'TD[API].m'            # originally UnitOfMeasure.TDAPI_m
UnitOfMeasureExt.TDAPIPa_s = 'TD[API]/(Pa.s)'     # originally UnitOfMeasure.TDAPIPa_s
UnitOfMeasureExt.TEuc = 'TEuc'                    # originally UnitOfMeasure.TEuc
UnitOfMeasureExt.TeV = 'TeV'                      # originally UnitOfMeasure.TeV
UnitOfMeasureExt.TF = 'TF'                        # originally UnitOfMeasure.TF
UnitOfMeasureExt.Tg = 'Tg'                        # originally UnitOfMeasure.Tg
UnitOfMeasureExt.Tgauss = 'Tgauss'                # originally UnitOfMeasure.Tgauss
UnitOfMeasureExt.TGy = 'TGy'                      # originally UnitOfMeasure.TGy
UnitOfMeasureExt.TH = 'TH'                        # originally UnitOfMeasure.TH
UnitOfMeasureExt.thermEC = 'therm[EC]'            # originally UnitOfMeasure.thermEC
UnitOfMeasureExt.thermUK = 'therm[UK]'            # originally UnitOfMeasure.thermUK
UnitOfMeasureExt.thermUS = 'therm[US]'            # originally UnitOfMeasure.thermUS
UnitOfMeasureExt.THz = 'THz'                      # originally UnitOfMeasure.THz
UnitOfMeasureExt.TJ = 'TJ'                        # originally UnitOfMeasure.TJ
UnitOfMeasureExt.TJa = 'TJ/a'                     # originally UnitOfMeasure.TJa
UnitOfMeasureExt.Tm_ = 'Tm'                       # originally UnitOfMeasure.Tm_
UnitOfMeasureExt.TN = 'TN'                        # originally UnitOfMeasure.TN
UnitOfMeasureExt.Tohm = 'Tohm'                    # originally UnitOfMeasure.Tohm
UnitOfMeasureExt.tonUK = 'ton[UK]'                # originally UnitOfMeasure.tonUK
UnitOfMeasureExt.tonUKa = 'ton[UK]/a'             # originally UnitOfMeasure.tonUKa
UnitOfMeasureExt.tonUKd = 'ton[UK]/d'             # originally UnitOfMeasure.tonUKd
UnitOfMeasureExt.tonUKh = 'ton[UK]/h'             # originally UnitOfMeasure.tonUKh
UnitOfMeasureExt.tonUKmin = 'ton[UK]/min'         # originally UnitOfMeasure.tonUKmin
UnitOfMeasureExt.tonUS = 'ton[US]'                # originally UnitOfMeasure.tonUS
UnitOfMeasureExt.tonUSa = 'ton[US]/a'             # originally UnitOfMeasure.tonUSa
UnitOfMeasureExt.tonUSd = 'ton[US]/d'             # originally UnitOfMeasure.tonUSd
UnitOfMeasureExt.tonUSft2 = 'ton[US]/ft2'         # originally UnitOfMeasure.tonUSft2
UnitOfMeasureExt.tonUSh = 'ton[US]/h'             # originally UnitOfMeasure.tonUSh
UnitOfMeasureExt.tonUSmin = 'ton[US]/min'         # originally UnitOfMeasure.tonUSmin
UnitOfMeasureExt.tonfUK = 'tonf[UK]'              # originally UnitOfMeasure.tonfUK
UnitOfMeasureExt.tonfUK_ft2 = 'tonf[UK].ft2'      # originally UnitOfMeasure.tonfUK_ft2
UnitOfMeasureExt.tonfUKft = 'tonf[UK]/ft'         # originally UnitOfMeasure.tonfUKft
UnitOfMeasureExt.tonfUKft2 = 'tonf[UK]/ft2'       # originally UnitOfMeasure.tonfUKft2
UnitOfMeasureExt.tonfUS = 'tonf[US]'              # originally UnitOfMeasure.tonfUS
UnitOfMeasureExt.tonfUS_ft = 'tonf[US].ft'        # originally UnitOfMeasure.tonfUS_ft
UnitOfMeasureExt.tonfUS_ft2 = 'tonf[US].ft2'      # originally UnitOfMeasure.tonfUS_ft2
UnitOfMeasureExt.tonfUS_mi = 'tonf[US].mi'        # originally UnitOfMeasure.tonfUS_mi
UnitOfMeasureExt.tonfUS_mibbl = 'tonf[US].mi/bbl' # originally UnitOfMeasure.tonfUS_mibbl
UnitOfMeasureExt.tonfUS_mift = 'tonf[US].mi/ft'   # originally UnitOfMeasure.tonfUS_mift
UnitOfMeasureExt.tonfUSft = 'tonf[US]/ft'         # originally UnitOfMeasure.tonfUSft
UnitOfMeasureExt.tonfUSft2 = 'tonf[US]/ft2'       # originally UnitOfMeasure.tonfUSft2
UnitOfMeasureExt.tonfUSin2 = 'tonf[US]/in2'       # originally UnitOfMeasure.tonfUSin2
UnitOfMeasureExt.tonRefrig = 'tonRefrig'          # originally UnitOfMeasure.tonRefrig
UnitOfMeasureExt.torr = 'torr'                    # originally UnitOfMeasure.torr
UnitOfMeasureExt.TP = 'TP'                        # originally UnitOfMeasure.TP
UnitOfMeasureExt.TPa = 'TPa'                      # originally UnitOfMeasure.TPa
UnitOfMeasureExt.Trd = 'Trd'                      # originally UnitOfMeasure.Trd
UnitOfMeasureExt.TS = 'TS'                        # originally UnitOfMeasure.TS
UnitOfMeasureExt.TT = 'TT'                        # originally UnitOfMeasure.TT
UnitOfMeasureExt.TV = 'TV'                        # originally UnitOfMeasure.TV
UnitOfMeasureExt.TW = 'TW'                        # originally UnitOfMeasure.TW
UnitOfMeasureExt.TW_h = 'TW.h'                    # originally UnitOfMeasure.TW_h
UnitOfMeasureExt.TWb = 'TWb'                      # originally UnitOfMeasure.TWb
UnitOfMeasureExt.uA = 'uA'                        # originally UnitOfMeasure.uA
UnitOfMeasureExt.uAcm2 = 'uA/cm2'                 # originally UnitOfMeasure.uAcm2
UnitOfMeasureExt.uAin2 = 'uA/in2'                 # originally UnitOfMeasure.uAin2
UnitOfMeasureExt.ubar = 'ubar'                    # originally UnitOfMeasure.ubar
UnitOfMeasureExt.uC = 'uC'                        # originally UnitOfMeasure.uC
UnitOfMeasureExt.ucalth = 'ucal[th]'              # originally UnitOfMeasure.ucalth
UnitOfMeasureExt.ucalths_cm2 = 'ucal[th]/(s.cm2)' # originally UnitOfMeasure.ucalths_cm2
UnitOfMeasureExt.ucalths = 'ucal[th]/s'           # originally UnitOfMeasure.ucalths
UnitOfMeasureExt.uCi = 'uCi'                      # originally UnitOfMeasure.uCi
UnitOfMeasureExt.uEuc = 'uEuc'                    # originally UnitOfMeasure.uEuc
UnitOfMeasureExt.ueV = 'ueV'                      # originally UnitOfMeasure.ueV
UnitOfMeasureExt.uF = 'uF'                        # originally UnitOfMeasure.uF
UnitOfMeasureExt.uFm = 'uF/m'                     # originally UnitOfMeasure.uFm
UnitOfMeasureExt.ug = 'ug'                        # originally UnitOfMeasure.ug
UnitOfMeasureExt.ugcm3 = 'ug/cm3'                 # originally UnitOfMeasure.ugcm3
UnitOfMeasureExt.ugg = 'ug/g'                     # originally UnitOfMeasure.ugg
UnitOfMeasureExt.ugmg = 'ug/mg'                   # originally UnitOfMeasure.ugmg
UnitOfMeasureExt.ugauss = 'ugauss'                # originally UnitOfMeasure.ugauss
UnitOfMeasureExt.uGy = 'uGy'                      # originally UnitOfMeasure.uGy
UnitOfMeasureExt.uH = 'uH'                        # originally UnitOfMeasure.uH
UnitOfMeasureExt.uHm = 'uH/m'                     # originally UnitOfMeasure.uHm
UnitOfMeasureExt.uHz = 'uHz'                      # originally UnitOfMeasure.uHz
UnitOfMeasureExt.uJ = 'uJ'                        # originally UnitOfMeasure.uJ
UnitOfMeasureExt.um = 'um'                        # originally UnitOfMeasure.um
UnitOfMeasureExt.ums = 'um/s'                     # originally UnitOfMeasure.ums
UnitOfMeasureExt.um2 = 'um2'                      # originally UnitOfMeasure.um2
UnitOfMeasureExt.um2_m = 'um2.m'                  # originally UnitOfMeasure.um2_m
UnitOfMeasureExt.umHg0degC = 'umHg[0degC]'        # originally UnitOfMeasure.umHg0degC
UnitOfMeasureExt.umol = 'umol'                    # originally UnitOfMeasure.umol
UnitOfMeasureExt.uN = 'uN'                        # originally UnitOfMeasure.uN
UnitOfMeasureExt.uohm = 'uohm'                    # originally UnitOfMeasure.uohm
UnitOfMeasureExt.uohmft = 'uohm/ft'               # originally UnitOfMeasure.uohmft
UnitOfMeasureExt.uohmm = 'uohm/m'                 # originally UnitOfMeasure.uohmm
UnitOfMeasureExt.uP = 'uP'                        # originally UnitOfMeasure.uP
UnitOfMeasureExt.uPa = 'uPa'                      # originally UnitOfMeasure.uPa
UnitOfMeasureExt.upsi = 'upsi'                    # originally UnitOfMeasure.upsi
UnitOfMeasureExt.urad = 'urad'                    # originally UnitOfMeasure.urad
UnitOfMeasureExt.urd = 'urd'                      # originally UnitOfMeasure.urd
UnitOfMeasureExt.us = 'us'                        # originally UnitOfMeasure.us
UnitOfMeasureExt.uS = 'uS'                        # originally UnitOfMeasure.uS
UnitOfMeasureExt.usft = 'us/ft'                   # originally UnitOfMeasure.usft
UnitOfMeasureExt.usin = 'us/in'                   # originally UnitOfMeasure.usin
UnitOfMeasureExt.usm = 'us/m'                     # originally UnitOfMeasure.usm
UnitOfMeasureExt.uT = 'uT'                        # originally UnitOfMeasure.uT
UnitOfMeasureExt.uV = 'uV'                        # originally UnitOfMeasure.uV
UnitOfMeasureExt.uVft = 'uV/ft'                   # originally UnitOfMeasure.uVft
UnitOfMeasureExt.uVm = 'uV/m'                     # originally UnitOfMeasure.uVm
UnitOfMeasureExt.uW = 'uW'                        # originally UnitOfMeasure.uW
UnitOfMeasureExt.uWm3 = 'uW/m3'                   # originally UnitOfMeasure.uWm3
UnitOfMeasureExt.uWb = 'uWb'                      # originally UnitOfMeasure.uWb
UnitOfMeasureExt.V = 'V'                          # originally UnitOfMeasure.V
UnitOfMeasureExt.VB = 'V/B'                       # originally UnitOfMeasure.VB
UnitOfMeasureExt.VdB = 'V/dB'                     # originally UnitOfMeasure.VdB
UnitOfMeasureExt.Vm = 'V/m'                       # originally UnitOfMeasure.Vm
UnitOfMeasureExt.W = 'W'                          # originally UnitOfMeasure.W
UnitOfMeasureExt.W_m2_KJ_K = 'W.m2.K/(J.K)'       # originally UnitOfMeasure.W_m2_KJ_K
UnitOfMeasureExt.Wm_K = 'W/(m.K)'                 # originally UnitOfMeasure.Wm_K
UnitOfMeasureExt.Wm2_K = 'W/(m2.K)'               # originally UnitOfMeasure.Wm2_K
UnitOfMeasureExt.Wm2_sr = 'W/(m2.sr)'             # originally UnitOfMeasure.Wm2_sr
UnitOfMeasureExt.Wm3_K = 'W/(m3.K)'               # originally UnitOfMeasure.Wm3_K
UnitOfMeasureExt.Wcm2 = 'W/cm2'                   # originally UnitOfMeasure.Wcm2
UnitOfMeasureExt.WK = 'W/K'                       # originally UnitOfMeasure.WK
UnitOfMeasureExt.WkW = 'W/kW'                     # originally UnitOfMeasure.WkW
UnitOfMeasureExt.Wm2 = 'W/m2'                     # originally UnitOfMeasure.Wm2
UnitOfMeasureExt.Wm3 = 'W/m3'                     # originally UnitOfMeasure.Wm3
UnitOfMeasureExt.Wmm2 = 'W/mm2'                   # originally UnitOfMeasure.Wmm2
UnitOfMeasureExt.Wsr = 'W/sr'                     # originally UnitOfMeasure.Wsr
UnitOfMeasureExt.WW = 'W/W'                       # originally UnitOfMeasure.WW
UnitOfMeasureExt.Wb = 'Wb'                        # originally UnitOfMeasure.Wb
UnitOfMeasureExt.Wb_m = 'Wb.m'                    # originally UnitOfMeasure.Wb_m
UnitOfMeasureExt.Wbm = 'Wb/m'                     # originally UnitOfMeasure.Wbm
UnitOfMeasureExt.Wbmm = 'Wb/mm'                   # originally UnitOfMeasure.Wbmm
UnitOfMeasureExt.wk = 'wk'                        # originally UnitOfMeasure.wk
UnitOfMeasureExt.yd = 'yd'                        # originally UnitOfMeasure.yd
UnitOfMeasureExt.ydBnA = 'yd[BnA]'                # originally UnitOfMeasure.ydBnA
UnitOfMeasureExt.ydBnB = 'yd[BnB]'                # originally UnitOfMeasure.ydBnB
UnitOfMeasureExt.ydCla = 'yd[Cla]'                # originally UnitOfMeasure.ydCla
UnitOfMeasureExt.ydInd = 'yd[Ind]'                # originally UnitOfMeasure.ydInd
UnitOfMeasureExt.ydInd37 = 'yd[Ind37]'            # originally UnitOfMeasure.ydInd37
UnitOfMeasureExt.ydInd62 = 'yd[Ind62]'            # originally UnitOfMeasure.ydInd62
UnitOfMeasureExt.ydInd75 = 'yd[Ind75]'            # originally UnitOfMeasure.ydInd75
UnitOfMeasureExt.ydSe = 'yd[Se]'                  # originally UnitOfMeasure.ydSe
UnitOfMeasureExt.ydSeT = 'yd[SeT]'                # originally UnitOfMeasure.ydSeT
UnitOfMeasureExt.ydUS = 'yd[US]'                  # originally UnitOfMeasure.ydUS
UnitOfMeasureExt.yd2 = 'yd2'                      # originally UnitOfMeasure.yd2
UnitOfMeasureExt.yd3 = 'yd3'                      # originally UnitOfMeasure.yd3
UnitOfMeasureExt._InitializeFacetMap(UnitOfMeasureExt._CF_pattern,
   UnitOfMeasureExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'UnitOfMeasureExt', UnitOfMeasureExt)
_module_typeBindings.UnitOfMeasureExt = UnitOfMeasureExt

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}WellboreDatumReference
class WellboreDatumReference (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Reference location for the measured depth datum (MdDatum).

The type of local or permanent reference datum for vertical gravity based (i.e., elevation and vertical depth) and measured depth coordinates within the context of a well. This list includes local points (e.g., kelly bushing) used as a datum and vertical reference datums (e.g., mean sea level)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WellboreDatumReference')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 307, 1)
    _Documentation = 'Reference location for the measured depth datum (MdDatum).\n\nThe type of local or permanent reference datum for vertical gravity based (i.e., elevation and vertical depth) and measured depth coordinates within the context of a well. This list includes local points (e.g., kelly bushing) used as a datum and vertical reference datums (e.g., mean sea level).'
WellboreDatumReference._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=WellboreDatumReference, enum_prefix=None)
WellboreDatumReference.ground_level = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='ground level', tag='ground_level')
WellboreDatumReference.kelly_bushing = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='kelly bushing', tag='kelly_bushing')
WellboreDatumReference.mean_sea_level = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean sea level', tag='mean_sea_level')
WellboreDatumReference.derrick_floor = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='derrick floor', tag='derrick_floor')
WellboreDatumReference.casing_flange = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='casing flange', tag='casing_flange')
WellboreDatumReference.crown_valve = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='crown valve', tag='crown_valve')
WellboreDatumReference.rotary_bushing = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='rotary bushing', tag='rotary_bushing')
WellboreDatumReference.rotary_table = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='rotary table', tag='rotary_table')
WellboreDatumReference.sea_floor = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='sea floor', tag='sea_floor')
WellboreDatumReference.lowest_astronomical_tide = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='lowest astronomical tide', tag='lowest_astronomical_tide')
WellboreDatumReference.mean_higher_high_water = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean higher high water', tag='mean_higher_high_water')
WellboreDatumReference.mean_high_water = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean high water', tag='mean_high_water')
WellboreDatumReference.mean_lower_low_water = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean lower low water', tag='mean_lower_low_water')
WellboreDatumReference.mean_low_water = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean low water', tag='mean_low_water')
WellboreDatumReference.mean_tide_level = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='mean tide level', tag='mean_tide_level')
WellboreDatumReference.kickoff_point = WellboreDatumReference._CF_enumeration.addEnumeration(unicode_value='kickoff point', tag='kickoff_point')
WellboreDatumReference._InitializeFacetMap(WellboreDatumReference._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'WellboreDatumReference', WellboreDatumReference)
_module_typeBindings.WellboreDatumReference = WellboreDatumReference

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}QuantityClassKind
class QuantityClassKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityClassKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 371, 1)
    _Documentation = None
QuantityClassKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=QuantityClassKind, enum_prefix=None)
QuantityClassKind.absorbed_dose = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='absorbed dose', tag='absorbed_dose')
QuantityClassKind.activity_of_radioactivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='activity of radioactivity', tag='activity_of_radioactivity')
QuantityClassKind.amount_of_substance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance', tag='amount_of_substance')
QuantityClassKind.amount_of_substance_per_amount_of_substance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance per amount of substance', tag='amount_of_substance_per_amount_of_substance')
QuantityClassKind.amount_of_substance_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance per area', tag='amount_of_substance_per_area')
QuantityClassKind.amount_of_substance_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance per time', tag='amount_of_substance_per_time')
QuantityClassKind.amount_of_substance_per_time_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance per time per area', tag='amount_of_substance_per_time_per_area')
QuantityClassKind.amount_of_substance_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='amount of substance per volume', tag='amount_of_substance_per_volume')
QuantityClassKind.angle_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='angle per length', tag='angle_per_length')
QuantityClassKind.angle_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='angle per volume', tag='angle_per_volume')
QuantityClassKind.angular_acceleration = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='angular acceleration', tag='angular_acceleration')
QuantityClassKind.angular_velocity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='angular velocity', tag='angular_velocity')
QuantityClassKind.api_gamma_ray = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='api gamma ray', tag='api_gamma_ray')
QuantityClassKind.api_gravity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='api gravity', tag='api_gravity')
QuantityClassKind.api_neutron = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='api neutron', tag='api_neutron')
QuantityClassKind.area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area', tag='area')
QuantityClassKind.area_per_amount_of_substance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per amount of substance', tag='area_per_amount_of_substance')
QuantityClassKind.area_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per area', tag='area_per_area')
QuantityClassKind.area_per_count = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per count', tag='area_per_count')
QuantityClassKind.area_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per mass', tag='area_per_mass')
QuantityClassKind.area_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per time', tag='area_per_time')
QuantityClassKind.area_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='area per volume', tag='area_per_volume')
QuantityClassKind.attenuation_per_frequency_interval = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='attenuation per frequency interval', tag='attenuation_per_frequency_interval')
QuantityClassKind.capacitance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='capacitance', tag='capacitance')
QuantityClassKind.cation_exchange_capacity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='cation exchange capacity', tag='cation_exchange_capacity')
QuantityClassKind.data_transfer_speed = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='data transfer speed', tag='data_transfer_speed')
QuantityClassKind.diffusion_coefficient = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='diffusion coefficient', tag='diffusion_coefficient')
QuantityClassKind.diffusive_time_of_flight = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='diffusive time of flight', tag='diffusive_time_of_flight')
QuantityClassKind.digital_storage = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='digital storage', tag='digital_storage')
QuantityClassKind.dimensionless = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='dimensionless', tag='dimensionless')
QuantityClassKind.dipole_moment = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='dipole moment', tag='dipole_moment')
QuantityClassKind.dose_equivalent = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='dose equivalent', tag='dose_equivalent')
QuantityClassKind.dynamic_viscosity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='dynamic viscosity', tag='dynamic_viscosity')
QuantityClassKind.electric_charge = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric charge', tag='electric_charge')
QuantityClassKind.electric_charge_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric charge per area', tag='electric_charge_per_area')
QuantityClassKind.electric_charge_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric charge per mass', tag='electric_charge_per_mass')
QuantityClassKind.electric_charge_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric charge per volume', tag='electric_charge_per_volume')
QuantityClassKind.electric_conductance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric conductance', tag='electric_conductance')
QuantityClassKind.electric_conductivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric conductivity', tag='electric_conductivity')
QuantityClassKind.electric_current = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric current', tag='electric_current')
QuantityClassKind.electric_current_density = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric current density', tag='electric_current_density')
QuantityClassKind.electric_field_strength = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric field strength', tag='electric_field_strength')
QuantityClassKind.electric_potential_difference = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric potential difference', tag='electric_potential_difference')
QuantityClassKind.electric_resistance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric resistance', tag='electric_resistance')
QuantityClassKind.electric_resistance_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electric resistance per length', tag='electric_resistance_per_length')
QuantityClassKind.electrical_resistivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electrical resistivity', tag='electrical_resistivity')
QuantityClassKind.electromagnetic_moment = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='electromagnetic moment', tag='electromagnetic_moment')
QuantityClassKind.energy = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy', tag='energy')
QuantityClassKind.energy_length_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy length per area', tag='energy_length_per_area')
QuantityClassKind.energy_length_per_time_area_temperature = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy length per time area temperature', tag='energy_length_per_time_area_temperature')
QuantityClassKind.energy_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy per area', tag='energy_per_area')
QuantityClassKind.energy_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy per length', tag='energy_per_length')
QuantityClassKind.energy_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy per mass', tag='energy_per_mass')
QuantityClassKind.energy_per_mass_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy per mass per time', tag='energy_per_mass_per_time')
QuantityClassKind.energy_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='energy per volume', tag='energy_per_volume')
QuantityClassKind.force = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force', tag='force')
QuantityClassKind.force_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force area', tag='force_area')
QuantityClassKind.force_length_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force length per length', tag='force_length_per_length')
QuantityClassKind.force_per_force = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force per force', tag='force_per_force')
QuantityClassKind.force_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force per length', tag='force_per_length')
QuantityClassKind.force_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='force per volume', tag='force_per_volume')
QuantityClassKind.frequency = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='frequency', tag='frequency')
QuantityClassKind.frequency_interval = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='frequency interval', tag='frequency_interval')
QuantityClassKind.heat_capacity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='heat capacity', tag='heat_capacity')
QuantityClassKind.heat_flow_rate = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='heat flow rate', tag='heat_flow_rate')
QuantityClassKind.heat_transfer_coefficient = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='heat transfer coefficient', tag='heat_transfer_coefficient')
QuantityClassKind.illuminance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='illuminance', tag='illuminance')
QuantityClassKind.inductance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='inductance', tag='inductance')
QuantityClassKind.isothermal_compressibility = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='isothermal compressibility', tag='isothermal_compressibility')
QuantityClassKind.kinematic_viscosity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='kinematic viscosity', tag='kinematic_viscosity')
QuantityClassKind.length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length', tag='length')
QuantityClassKind.length_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per length', tag='length_per_length')
QuantityClassKind.length_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per mass', tag='length_per_mass')
QuantityClassKind.length_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per pressure', tag='length_per_pressure')
QuantityClassKind.length_per_temperature = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per temperature', tag='length_per_temperature')
QuantityClassKind.length_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per time', tag='length_per_time')
QuantityClassKind.length_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='length per volume', tag='length_per_volume')
QuantityClassKind.light_exposure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='light exposure', tag='light_exposure')
QuantityClassKind.linear_acceleration = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='linear acceleration', tag='linear_acceleration')
QuantityClassKind.linear_thermal_expansion = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='linear thermal expansion', tag='linear_thermal_expansion')
QuantityClassKind.logarithmic_power_ratio = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='logarithmic power ratio', tag='logarithmic_power_ratio')
QuantityClassKind.logarithmic_power_ratio_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='logarithmic power ratio per length', tag='logarithmic_power_ratio_per_length')
QuantityClassKind.luminance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='luminance', tag='luminance')
QuantityClassKind.luminous_efficacy = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='luminous efficacy', tag='luminous_efficacy')
QuantityClassKind.luminous_flux = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='luminous flux', tag='luminous_flux')
QuantityClassKind.luminous_intensity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='luminous intensity', tag='luminous_intensity')
QuantityClassKind.magnetic_dipole_moment = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic dipole moment', tag='magnetic_dipole_moment')
QuantityClassKind.magnetic_field_strength = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic field strength', tag='magnetic_field_strength')
QuantityClassKind.magnetic_flux = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic flux', tag='magnetic_flux')
QuantityClassKind.magnetic_flux_density = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic flux density', tag='magnetic_flux_density')
QuantityClassKind.magnetic_flux_density_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic flux density per length', tag='magnetic_flux_density_per_length')
QuantityClassKind.magnetic_permeability = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic permeability', tag='magnetic_permeability')
QuantityClassKind.magnetic_vector_potential = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='magnetic vector potential', tag='magnetic_vector_potential')
QuantityClassKind.mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass', tag='mass')
QuantityClassKind.mass_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass length', tag='mass_length')
QuantityClassKind.mass_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per area', tag='mass_per_area')
QuantityClassKind.mass_per_energy = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per energy', tag='mass_per_energy')
QuantityClassKind.mass_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per length', tag='mass_per_length')
QuantityClassKind.mass_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per mass', tag='mass_per_mass')
QuantityClassKind.mass_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per time', tag='mass_per_time')
QuantityClassKind.mass_per_time_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per time per area', tag='mass_per_time_per_area')
QuantityClassKind.mass_per_time_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per time per length', tag='mass_per_time_per_length')
QuantityClassKind.mass_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per volume', tag='mass_per_volume')
QuantityClassKind.mass_per_volume_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per volume per length', tag='mass_per_volume_per_length')
QuantityClassKind.mass_per_volume_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per volume per pressure', tag='mass_per_volume_per_pressure')
QuantityClassKind.mass_per_volume_per_temperature = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mass per volume per temperature', tag='mass_per_volume_per_temperature')
QuantityClassKind.mobility = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='mobility', tag='mobility')
QuantityClassKind.molar_energy = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='molar energy', tag='molar_energy')
QuantityClassKind.molar_heat_capacity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='molar heat capacity', tag='molar_heat_capacity')
QuantityClassKind.molar_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='molar volume', tag='molar_volume')
QuantityClassKind.molecular_weight = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='molecular weight', tag='molecular_weight')
QuantityClassKind.moment_of_force = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='moment of force', tag='moment_of_force')
QuantityClassKind.moment_of_inertia = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='moment of inertia', tag='moment_of_inertia')
QuantityClassKind.momentum = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='momentum', tag='momentum')
QuantityClassKind.normalized_power = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='normalized power', tag='normalized_power')
QuantityClassKind.permeability_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='permeability length', tag='permeability_length')
QuantityClassKind.permeability_rock = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='permeability rock', tag='permeability_rock')
QuantityClassKind.permittivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='permittivity', tag='permittivity')
QuantityClassKind.plane_angle = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='plane angle', tag='plane_angle')
QuantityClassKind.potential_difference_per_power_drop = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='potential difference per power drop', tag='potential_difference_per_power_drop')
QuantityClassKind.power = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='power', tag='power')
QuantityClassKind.power_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='power per area', tag='power_per_area')
QuantityClassKind.power_per_power = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='power per power', tag='power_per_power')
QuantityClassKind.power_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='power per volume', tag='power_per_volume')
QuantityClassKind.pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure', tag='pressure')
QuantityClassKind.pressure_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure per pressure', tag='pressure_per_pressure')
QuantityClassKind.pressure_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure per time', tag='pressure_per_time')
QuantityClassKind.pressure_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure per volume', tag='pressure_per_volume')
QuantityClassKind.pressure_squared = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure squared', tag='pressure_squared')
QuantityClassKind.pressure_squared_per_force_time_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure squared per force time per area', tag='pressure_squared_per_force_time_per_area')
QuantityClassKind.pressure_time_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='pressure time per volume', tag='pressure_time_per_volume')
QuantityClassKind.quantity_of_light = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='quantity of light', tag='quantity_of_light')
QuantityClassKind.radiance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='radiance', tag='radiance')
QuantityClassKind.radiant_intensity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='radiant intensity', tag='radiant_intensity')
QuantityClassKind.reciprocal_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal area', tag='reciprocal_area')
QuantityClassKind.reciprocal_electric_potential_difference = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal electric potential difference', tag='reciprocal_electric_potential_difference')
QuantityClassKind.reciprocal_force = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal force', tag='reciprocal_force')
QuantityClassKind.reciprocal_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal length', tag='reciprocal_length')
QuantityClassKind.reciprocal_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal mass', tag='reciprocal_mass')
QuantityClassKind.reciprocal_mass_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal mass time', tag='reciprocal_mass_time')
QuantityClassKind.reciprocal_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal pressure', tag='reciprocal_pressure')
QuantityClassKind.reciprocal_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal time', tag='reciprocal_time')
QuantityClassKind.reciprocal_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reciprocal volume', tag='reciprocal_volume')
QuantityClassKind.reluctance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='reluctance', tag='reluctance')
QuantityClassKind.second_moment_of_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='second moment of area', tag='second_moment_of_area')
QuantityClassKind.signaling_event_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='signaling event per time', tag='signaling_event_per_time')
QuantityClassKind.solid_angle = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='solid angle', tag='solid_angle')
QuantityClassKind.specific_heat_capacity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='specific heat capacity', tag='specific_heat_capacity')
QuantityClassKind.temperature_interval = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='temperature interval', tag='temperature_interval')
QuantityClassKind.temperature_interval_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='temperature interval per length', tag='temperature_interval_per_length')
QuantityClassKind.temperature_interval_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='temperature interval per pressure', tag='temperature_interval_per_pressure')
QuantityClassKind.temperature_interval_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='temperature interval per time', tag='temperature_interval_per_time')
QuantityClassKind.thermal_conductance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermal conductance', tag='thermal_conductance')
QuantityClassKind.thermal_conductivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermal conductivity', tag='thermal_conductivity')
QuantityClassKind.thermal_diffusivity = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermal diffusivity', tag='thermal_diffusivity')
QuantityClassKind.thermal_insulance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermal insulance', tag='thermal_insulance')
QuantityClassKind.thermal_resistance = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermal resistance', tag='thermal_resistance')
QuantityClassKind.thermodynamic_temperature = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermodynamic temperature', tag='thermodynamic_temperature')
QuantityClassKind.thermodynamic_temperature_per_thermodynamic_temperature = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='thermodynamic temperature per thermodynamic temperature', tag='thermodynamic_temperature_per_thermodynamic_temperature')
QuantityClassKind.time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='time', tag='time')
QuantityClassKind.time_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='time per length', tag='time_per_length')
QuantityClassKind.time_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='time per mass', tag='time_per_mass')
QuantityClassKind.time_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='time per time', tag='time_per_time')
QuantityClassKind.time_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='time per volume', tag='time_per_volume')
QuantityClassKind.vertical_coordinate = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='vertical coordinate', tag='vertical_coordinate')
QuantityClassKind.volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume', tag='volume')
QuantityClassKind.volume_flow_rate_per_volume_flow_rate = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume flow rate per volume flow rate', tag='volume_flow_rate_per_volume_flow_rate')
QuantityClassKind.volume_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per area', tag='volume_per_area')
QuantityClassKind.volume_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per length', tag='volume_per_length')
QuantityClassKind.volume_per_mass = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per mass', tag='volume_per_mass')
QuantityClassKind.volume_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per pressure', tag='volume_per_pressure')
QuantityClassKind.volume_per_rotation = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per rotation', tag='volume_per_rotation')
QuantityClassKind.volume_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time', tag='volume_per_time')
QuantityClassKind.volume_per_time_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time length', tag='volume_per_time_length')
QuantityClassKind.volume_per_time_per_area = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per area', tag='volume_per_time_per_area')
QuantityClassKind.volume_per_time_per_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per length', tag='volume_per_time_per_length')
QuantityClassKind.volume_per_time_per_pressure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per pressure', tag='volume_per_time_per_pressure')
QuantityClassKind.volume_per_time_per_pressure_length = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per pressure length', tag='volume_per_time_per_pressure_length')
QuantityClassKind.volume_per_time_per_time = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per time', tag='volume_per_time_per_time')
QuantityClassKind.volume_per_time_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per time per volume', tag='volume_per_time_per_volume')
QuantityClassKind.volume_per_volume = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volume per volume', tag='volume_per_volume')
QuantityClassKind.volumetric_heat_transfer_coefficient = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volumetric heat transfer coefficient', tag='volumetric_heat_transfer_coefficient')
QuantityClassKind.volumetric_thermal_expansion = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='volumetric thermal expansion', tag='volumetric_thermal_expansion')
QuantityClassKind.unitless = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='unitless', tag='unitless')
QuantityClassKind.not_a_measure = QuantityClassKind._CF_enumeration.addEnumeration(unicode_value='not a measure', tag='not_a_measure')
QuantityClassKind._InitializeFacetMap(QuantityClassKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'QuantityClassKind', QuantityClassKind)
_module_typeBindings.QuantityClassKind = QuantityClassKind

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReferenceCondition
class ReferenceCondition (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Combinations of standard temperature and pressure including "ambient". The list of standard values is contained in the enumValuesProdml.xml file."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceCondition')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 572, 1)
    _Documentation = 'Combinations of standard temperature and pressure including "ambient". The list of standard values is contained in the enumValuesProdml.xml file.'
ReferenceCondition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReferenceCondition, enum_prefix=None)
ReferenceCondition.n0_degC_1_atm = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='0 degC 1 atm', tag='n0_degC_1_atm')
ReferenceCondition.n0_degC_1_bar = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='0 degC 1 bar', tag='n0_degC_1_bar')
ReferenceCondition.n15_degC_1_atm = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='15 degC 1 atm', tag='n15_degC_1_atm')
ReferenceCondition.n15_degC_1_bar = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='15 degC 1 bar', tag='n15_degC_1_bar')
ReferenceCondition.n20_degC_1_atm = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='20 degC 1 atm', tag='n20_degC_1_atm')
ReferenceCondition.n20_degC_1_bar = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='20 degC 1 bar', tag='n20_degC_1_bar')
ReferenceCondition.n25_degC_1_bar = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='25 degC 1 bar', tag='n25_degC_1_bar')
ReferenceCondition.n60_degF_1_atm = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='60 degF 1 atm', tag='n60_degF_1_atm')
ReferenceCondition.n60_degF_30_in_Hg = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='60 degF 30 in Hg', tag='n60_degF_30_in_Hg')
ReferenceCondition.ambient = ReferenceCondition._CF_enumeration.addEnumeration(unicode_value='ambient', tag='ambient')
ReferenceCondition._InitializeFacetMap(ReferenceCondition._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReferenceCondition', ReferenceCondition)
_module_typeBindings.ReferenceCondition = ReferenceCondition

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LithologyQualifierKind
class LithologyQualifierKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LithologyQualifierKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 601, 1)
    _Documentation = None
LithologyQualifierKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LithologyQualifierKind, enum_prefix=None)
LithologyQualifierKind.alkali_feldspar_rhyolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='alkali feldspar rhyolite', tag='alkali_feldspar_rhyolite')
LithologyQualifierKind.alkali_olivine_basalt = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='alkali olivine basalt', tag='alkali_olivine_basalt')
LithologyQualifierKind.amphibolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='amphibolite', tag='amphibolite')
LithologyQualifierKind.amphibolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='amphibolitic', tag='amphibolitic')
LithologyQualifierKind.andesite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='andesite', tag='andesite')
LithologyQualifierKind.andesitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='andesitic', tag='andesitic')
LithologyQualifierKind.anhydrite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='anhydrite', tag='anhydrite')
LithologyQualifierKind.anhydritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='anhydritic', tag='anhydritic')
LithologyQualifierKind.ankerite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ankerite', tag='ankerite')
LithologyQualifierKind.ankeritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ankeritic', tag='ankeritic')
LithologyQualifierKind.anorthositic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='anorthositic rock', tag='anorthositic_rock')
LithologyQualifierKind.anthracite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='anthracite', tag='anthracite')
LithologyQualifierKind.anthracitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='anthracitic', tag='anthracitic')
LithologyQualifierKind.aplite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='aplite', tag='aplite')
LithologyQualifierKind.aplitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='aplitic', tag='aplitic')
LithologyQualifierKind.arenite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='arenite', tag='arenite')
LithologyQualifierKind.arenitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='arenitic', tag='arenitic')
LithologyQualifierKind.argillaceous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='argillaceous', tag='argillaceous')
LithologyQualifierKind.arkose = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='arkose', tag='arkose')
LithologyQualifierKind.arkosic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='arkosic', tag='arkosic')
LithologyQualifierKind.barite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='barite', tag='barite')
LithologyQualifierKind.baritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='baritic', tag='baritic')
LithologyQualifierKind.basalt = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='basalt', tag='basalt')
LithologyQualifierKind.basaltic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='basaltic', tag='basaltic')
LithologyQualifierKind.basanite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='basanite', tag='basanite')
LithologyQualifierKind.basanitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='basanitic', tag='basanitic')
LithologyQualifierKind.bauxite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bauxite', tag='bauxite')
LithologyQualifierKind.bauxitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bauxitic', tag='bauxitic')
LithologyQualifierKind.belemnites = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='belemnites', tag='belemnites')
LithologyQualifierKind.belemnitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='belemnitic', tag='belemnitic')
LithologyQualifierKind.bioturbated = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bioturbated', tag='bioturbated')
LithologyQualifierKind.bioturbation = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bioturbation', tag='bioturbation')
LithologyQualifierKind.bitumen = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bitumen', tag='bitumen')
LithologyQualifierKind.bituminous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bituminous', tag='bituminous')
LithologyQualifierKind.bituminous_coal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bituminous coal', tag='bituminous_coal')
LithologyQualifierKind.blueschist_metamorphic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='blueschist metamorphic rock', tag='blueschist_metamorphic_rock')
LithologyQualifierKind.boninite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='boninite', tag='boninite')
LithologyQualifierKind.breccia = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='breccia', tag='breccia')
LithologyQualifierKind.brecciated = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='brecciated', tag='brecciated')
LithologyQualifierKind.bryozoan = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bryozoan', tag='bryozoan')
LithologyQualifierKind.bryozoans = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='bryozoans', tag='bryozoans')
LithologyQualifierKind.burrowed = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='burrowed', tag='burrowed')
LithologyQualifierKind.burrows = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='burrows', tag='burrows')
LithologyQualifierKind.calcareous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='calcareous', tag='calcareous')
LithologyQualifierKind.calcite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='calcite', tag='calcite')
LithologyQualifierKind.calcite_concretion = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='calcite concretion', tag='calcite_concretion')
LithologyQualifierKind.calcitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='calcitic', tag='calcitic')
LithologyQualifierKind.carbonaceous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='carbonaceous', tag='carbonaceous')
LithologyQualifierKind.carbonate_ooze = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='carbonate ooze', tag='carbonate_ooze')
LithologyQualifierKind.carbonatite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='carbonatite', tag='carbonatite')
LithologyQualifierKind.carbonatitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='carbonatitic', tag='carbonatitic')
LithologyQualifierKind.chalk = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chalk', tag='chalk')
LithologyQualifierKind.chalky = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chalky', tag='chalky')
LithologyQualifierKind.chamosite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chamosite', tag='chamosite')
LithologyQualifierKind.chamositic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chamositic', tag='chamositic')
LithologyQualifierKind.chert = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chert', tag='chert')
LithologyQualifierKind.cherty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='cherty', tag='cherty')
LithologyQualifierKind.chlorite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chlorite', tag='chlorite')
LithologyQualifierKind.chloritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='chloritic', tag='chloritic')
LithologyQualifierKind.clay = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='clay', tag='clay')
LithologyQualifierKind.claystone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='claystone', tag='claystone')
LithologyQualifierKind.coal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='coal', tag='coal')
LithologyQualifierKind.concretionary = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='concretionary', tag='concretionary')
LithologyQualifierKind.concretions = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='concretions', tag='concretions')
LithologyQualifierKind.conglomerate = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='conglomerate', tag='conglomerate')
LithologyQualifierKind.conglomeratic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='conglomeratic', tag='conglomeratic')
LithologyQualifierKind.coral_fragments = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='coral fragments', tag='coral_fragments')
LithologyQualifierKind.coralline = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='coralline', tag='coralline')
LithologyQualifierKind.crinoidal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='crinoidal', tag='crinoidal')
LithologyQualifierKind.crinoids = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='crinoids', tag='crinoids')
LithologyQualifierKind.dacite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dacite', tag='dacite')
LithologyQualifierKind.dacitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dacitic', tag='dacitic')
LithologyQualifierKind.diabase = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diabase', tag='diabase')
LithologyQualifierKind.diabasic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diabasic', tag='diabasic')
LithologyQualifierKind.diamictite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diamictite', tag='diamictite')
LithologyQualifierKind.diamictitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diamictitic', tag='diamictitic')
LithologyQualifierKind.diatomaceous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diatomaceous', tag='diatomaceous')
LithologyQualifierKind.diatoms = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diatoms', tag='diatoms')
LithologyQualifierKind.diorite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='diorite', tag='diorite')
LithologyQualifierKind.dioritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dioritic', tag='dioritic')
LithologyQualifierKind.dioritoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dioritoid', tag='dioritoid')
LithologyQualifierKind.dioritoidic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dioritoidic', tag='dioritoidic')
LithologyQualifierKind.doleritic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='doleritic rock', tag='doleritic_rock')
LithologyQualifierKind.dolomite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dolomite', tag='dolomite')
LithologyQualifierKind.dolomite_concretion = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dolomite concretion', tag='dolomite_concretion')
LithologyQualifierKind.dolomite_stringer = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dolomite stringer', tag='dolomite_stringer')
LithologyQualifierKind.dolomitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='dolomitic', tag='dolomitic')
LithologyQualifierKind.eclogite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='eclogite', tag='eclogite')
LithologyQualifierKind.eclogitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='eclogitic', tag='eclogitic')
LithologyQualifierKind.exotic_alkaline_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='exotic alkaline rock', tag='exotic_alkaline_rock')
LithologyQualifierKind.feldspar = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='feldspar', tag='feldspar')
LithologyQualifierKind.feldsparic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='feldsparic', tag='feldsparic')
LithologyQualifierKind.feldspathic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='feldspathic', tag='feldspathic')
LithologyQualifierKind.feldspathic_arenite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='feldspathic arenite', tag='feldspathic_arenite')
LithologyQualifierKind.ferruginous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ferruginous', tag='ferruginous')
LithologyQualifierKind.fine_grained_igneous_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='fine grained igneous rock', tag='fine_grained_igneous_rock')
LithologyQualifierKind.foid_dioritoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foid dioritoid', tag='foid_dioritoid')
LithologyQualifierKind.foid_gabbroid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foid gabbroid', tag='foid_gabbroid')
LithologyQualifierKind.foid_syenitoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foid syenitoid', tag='foid_syenitoid')
LithologyQualifierKind.foidite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foidite', tag='foidite')
LithologyQualifierKind.foiditic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foiditic', tag='foiditic')
LithologyQualifierKind.foiditoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foiditoid', tag='foiditoid')
LithologyQualifierKind.foidolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foidolite', tag='foidolite')
LithologyQualifierKind.foidolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foidolitic', tag='foidolitic')
LithologyQualifierKind.foliated_metamorphic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foliated metamorphic rock', tag='foliated_metamorphic_rock')
LithologyQualifierKind.foraminifera = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foraminifera', tag='foraminifera')
LithologyQualifierKind.foraminiferous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='foraminiferous', tag='foraminiferous')
LithologyQualifierKind.forams = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='forams', tag='forams')
LithologyQualifierKind.fossil_fragments = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='fossil fragments', tag='fossil_fragments')
LithologyQualifierKind.fossiliferous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='fossiliferous', tag='fossiliferous')
LithologyQualifierKind.fossils_undifferentiated = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='fossils undifferentiated', tag='fossils_undifferentiated')
LithologyQualifierKind.fragmental_igneous_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='fragmental igneous rock', tag='fragmental_igneous_rock')
LithologyQualifierKind.gabbro = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gabbro', tag='gabbro')
LithologyQualifierKind.gabbroic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gabbroic', tag='gabbroic')
LithologyQualifierKind.gabbroic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gabbroic rock', tag='gabbroic_rock')
LithologyQualifierKind.gabbroid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gabbroid', tag='gabbroid')
LithologyQualifierKind.gabbroidic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gabbroidic', tag='gabbroidic')
LithologyQualifierKind.gilsonite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gilsonite', tag='gilsonite')
LithologyQualifierKind.gilsonitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gilsonitic', tag='gilsonitic')
LithologyQualifierKind.glauconite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='glauconite', tag='glauconite')
LithologyQualifierKind.glauconitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='glauconitic', tag='glauconitic')
LithologyQualifierKind.gneiss = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gneiss', tag='gneiss')
LithologyQualifierKind.gneissic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gneissic', tag='gneissic')
LithologyQualifierKind.granite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granite', tag='granite')
LithologyQualifierKind.granitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granitic', tag='granitic')
LithologyQualifierKind.granodiorite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granodiorite', tag='granodiorite')
LithologyQualifierKind.granodioritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granodioritic', tag='granodioritic')
LithologyQualifierKind.granofels = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granofels', tag='granofels')
LithologyQualifierKind.granulite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granulite', tag='granulite')
LithologyQualifierKind.granulitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='granulitic', tag='granulitic')
LithologyQualifierKind.gravel = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gravel', tag='gravel')
LithologyQualifierKind.gravelly = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gravelly', tag='gravelly')
LithologyQualifierKind.greenstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='greenstone', tag='greenstone')
LithologyQualifierKind.gumbo = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gumbo', tag='gumbo')
LithologyQualifierKind.gypsiferous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gypsiferous', tag='gypsiferous')
LithologyQualifierKind.gypsum = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='gypsum', tag='gypsum')
LithologyQualifierKind.halite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='halite', tag='halite')
LithologyQualifierKind.halitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='halitic', tag='halitic')
LithologyQualifierKind.hornfels = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='hornfels', tag='hornfels')
LithologyQualifierKind.hornfelsic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='hornfelsic', tag='hornfelsic')
LithologyQualifierKind.igneous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='igneous', tag='igneous')
LithologyQualifierKind.igneous_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='igneous rock', tag='igneous_rock')
LithologyQualifierKind.illite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='illite', tag='illite')
LithologyQualifierKind.illitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='illitic', tag='illitic')
LithologyQualifierKind.impact_generated_material = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='impact generated material', tag='impact_generated_material')
LithologyQualifierKind.impure_dolomite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='impure dolomite', tag='impure_dolomite')
LithologyQualifierKind.impure_limestone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='impure limestone', tag='impure_limestone')
LithologyQualifierKind.intrusive_rock_plutonic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='intrusive rock (plutonic)', tag='intrusive_rock_plutonic')
LithologyQualifierKind.iron_rich_sedimentary_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='iron rich sedimentary rock', tag='iron_rich_sedimentary_rock')
LithologyQualifierKind.kalsilitic_and_melilitic_rocks = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='kalsilitic and melilitic rocks', tag='kalsilitic_and_melilitic_rocks')
LithologyQualifierKind.kaolinite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='kaolinite', tag='kaolinite')
LithologyQualifierKind.kaolinitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='kaolinitic', tag='kaolinitic')
LithologyQualifierKind.komatiitic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='komatiitic rock', tag='komatiitic_rock')
LithologyQualifierKind.latitic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='latitic rock', tag='latitic_rock')
LithologyQualifierKind.lignite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lignite', tag='lignite')
LithologyQualifierKind.lignitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lignitic', tag='lignitic')
LithologyQualifierKind.lime_boundstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime boundstone', tag='lime_boundstone')
LithologyQualifierKind.lime_framestone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime framestone', tag='lime_framestone')
LithologyQualifierKind.lime_grainstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime grainstone', tag='lime_grainstone')
LithologyQualifierKind.lime_mudstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime mudstone', tag='lime_mudstone')
LithologyQualifierKind.lime_packstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime packstone', tag='lime_packstone')
LithologyQualifierKind.lime_wackestone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lime wackestone', tag='lime_wackestone')
LithologyQualifierKind.limestone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='limestone', tag='limestone')
LithologyQualifierKind.limestone_stringer = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='limestone stringer', tag='limestone_stringer')
LithologyQualifierKind.lithic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lithic', tag='lithic')
LithologyQualifierKind.lithic_fragments = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='lithic fragments', tag='lithic_fragments')
LithologyQualifierKind.marble = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='marble', tag='marble')
LithologyQualifierKind.marcasite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='marcasite', tag='marcasite')
LithologyQualifierKind.marcasitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='marcasitic', tag='marcasitic')
LithologyQualifierKind.marl = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='marl', tag='marl')
LithologyQualifierKind.marly = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='marly', tag='marly')
LithologyQualifierKind.metamorphic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='metamorphic rock', tag='metamorphic_rock')
LithologyQualifierKind.mica = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='mica', tag='mica')
LithologyQualifierKind.mica_schist = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='mica schist', tag='mica_schist')
LithologyQualifierKind.micaceous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='micaceous', tag='micaceous')
LithologyQualifierKind.microfossiliferous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='microfossiliferous', tag='microfossiliferous')
LithologyQualifierKind.microfossils = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='microfossils', tag='microfossils')
LithologyQualifierKind.migmatite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='migmatite', tag='migmatite')
LithologyQualifierKind.migmatitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='migmatitic', tag='migmatitic')
LithologyQualifierKind.monzogabbro = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='monzogabbro', tag='monzogabbro')
LithologyQualifierKind.monzogabbroic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='monzogabbroic', tag='monzogabbroic')
LithologyQualifierKind.mud = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='mud', tag='mud')
LithologyQualifierKind.muddy = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='muddy', tag='muddy')
LithologyQualifierKind.mudstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='mudstone', tag='mudstone')
LithologyQualifierKind.mylonitic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='mylonitic rock', tag='mylonitic_rock')
LithologyQualifierKind.no_sample = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='no sample', tag='no_sample')
LithologyQualifierKind.oncolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='oncolite', tag='oncolite')
LithologyQualifierKind.oncoliths = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='oncoliths', tag='oncoliths')
LithologyQualifierKind.oncolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='oncolitic', tag='oncolitic')
LithologyQualifierKind.ooids = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ooids', tag='ooids')
LithologyQualifierKind.ooliths = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ooliths', tag='ooliths')
LithologyQualifierKind.oolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='oolitic', tag='oolitic')
LithologyQualifierKind.ooze = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ooze', tag='ooze')
LithologyQualifierKind.ophiolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ophiolite', tag='ophiolite')
LithologyQualifierKind.ophiolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ophiolitic', tag='ophiolitic')
LithologyQualifierKind.organic_bearing_mudstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='organic bearing mudstone', tag='organic_bearing_mudstone')
LithologyQualifierKind.ostracodal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ostracodal', tag='ostracodal')
LithologyQualifierKind.ostracods = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ostracods', tag='ostracods')
LithologyQualifierKind.peat = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peat', tag='peat')
LithologyQualifierKind.peaty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peaty', tag='peaty')
LithologyQualifierKind.pebble = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pebble', tag='pebble')
LithologyQualifierKind.pebbly = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pebbly', tag='pebbly')
LithologyQualifierKind.pegmatite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pegmatite', tag='pegmatite')
LithologyQualifierKind.pegmatitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pegmatitic', tag='pegmatitic')
LithologyQualifierKind.pelletal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pelletal', tag='pelletal')
LithologyQualifierKind.pellets = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pellets', tag='pellets')
LithologyQualifierKind.peloidal = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peloidal', tag='peloidal')
LithologyQualifierKind.peloids = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peloids', tag='peloids')
LithologyQualifierKind.peridotite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peridotite', tag='peridotite')
LithologyQualifierKind.peridotitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='peridotitic', tag='peridotitic')
LithologyQualifierKind.phaneritic_igneous_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phaneritic igneous rock', tag='phaneritic_igneous_rock')
LithologyQualifierKind.phonolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phonolite', tag='phonolite')
LithologyQualifierKind.phonolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phonolitic', tag='phonolitic')
LithologyQualifierKind.phonolitoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phonolitoid', tag='phonolitoid')
LithologyQualifierKind.phosphate = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phosphate', tag='phosphate')
LithologyQualifierKind.phosphate_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phosphate rock', tag='phosphate_rock')
LithologyQualifierKind.phosphatic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phosphatic', tag='phosphatic')
LithologyQualifierKind.phyllite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phyllite', tag='phyllite')
LithologyQualifierKind.phyllitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='phyllitic', tag='phyllitic')
LithologyQualifierKind.pisolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pisolite', tag='pisolite')
LithologyQualifierKind.pisoliths = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pisoliths', tag='pisoliths')
LithologyQualifierKind.pisolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pisolitic', tag='pisolitic')
LithologyQualifierKind.plant_remains = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='plant remains', tag='plant_remains')
LithologyQualifierKind.porphyritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='porphyritic', tag='porphyritic')
LithologyQualifierKind.porphyry = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='porphyry', tag='porphyry')
LithologyQualifierKind.potassium_and_magnesium_salts = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='potassium and magnesium salts', tag='potassium_and_magnesium_salts')
LithologyQualifierKind.pyrite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyrite', tag='pyrite')
LithologyQualifierKind.pyritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyritic', tag='pyritic')
LithologyQualifierKind.pyroclastic_breccia = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyroclastic breccia', tag='pyroclastic_breccia')
LithologyQualifierKind.pyroclastic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyroclastic rock', tag='pyroclastic_rock')
LithologyQualifierKind.pyroxenite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyroxenite', tag='pyroxenite')
LithologyQualifierKind.pyroxenitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='pyroxenitic', tag='pyroxenitic')
LithologyQualifierKind.quartiferous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='quartiferous', tag='quartiferous')
LithologyQualifierKind.quartz = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='quartz', tag='quartz')
LithologyQualifierKind.quartz_arenite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='quartz arenite', tag='quartz_arenite')
LithologyQualifierKind.quartzite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='quartzite', tag='quartzite')
LithologyQualifierKind.quartzitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='quartzitic', tag='quartzitic')
LithologyQualifierKind.radiolaria = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='radiolaria', tag='radiolaria')
LithologyQualifierKind.radiolarian = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='radiolarian', tag='radiolarian')
LithologyQualifierKind.rhyolite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='rhyolite', tag='rhyolite')
LithologyQualifierKind.rhyolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='rhyolitic', tag='rhyolitic')
LithologyQualifierKind.rock_salt = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='rock salt', tag='rock_salt')
LithologyQualifierKind.rootlets = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='rootlets', tag='rootlets')
LithologyQualifierKind.salty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='salty', tag='salty')
LithologyQualifierKind.sand = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sand', tag='sand')
LithologyQualifierKind.sandstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sandstone', tag='sandstone')
LithologyQualifierKind.sandy = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sandy', tag='sandy')
LithologyQualifierKind.sapropel = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sapropel', tag='sapropel')
LithologyQualifierKind.sapropelic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sapropelic', tag='sapropelic')
LithologyQualifierKind.schist = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='schist', tag='schist')
LithologyQualifierKind.schisty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='schisty', tag='schisty')
LithologyQualifierKind.sepentinitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sepentinitic', tag='sepentinitic')
LithologyQualifierKind.serpentinite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='serpentinite', tag='serpentinite')
LithologyQualifierKind.shale = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='shale', tag='shale')
LithologyQualifierKind.shaly = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='shaly', tag='shaly')
LithologyQualifierKind.shell_fragments = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='shell fragments', tag='shell_fragments')
LithologyQualifierKind.shelly = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='shelly', tag='shelly')
LithologyQualifierKind.siderite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='siderite', tag='siderite')
LithologyQualifierKind.siderite_concretion = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='siderite concretion', tag='siderite_concretion')
LithologyQualifierKind.sideritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sideritic', tag='sideritic')
LithologyQualifierKind.siliceous_ooze = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='siliceous ooze', tag='siliceous_ooze')
LithologyQualifierKind.silt = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='silt', tag='silt')
LithologyQualifierKind.siltstone = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='siltstone', tag='siltstone')
LithologyQualifierKind.silty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='silty', tag='silty')
LithologyQualifierKind.skarn = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='skarn', tag='skarn')
LithologyQualifierKind.skarny = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='skarny', tag='skarny')
LithologyQualifierKind.slate = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='slate', tag='slate')
LithologyQualifierKind.slaty = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='slaty', tag='slaty')
LithologyQualifierKind.smectite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='smectite', tag='smectite')
LithologyQualifierKind.smectitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='smectitic', tag='smectitic')
LithologyQualifierKind.spicular = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='spicular', tag='spicular')
LithologyQualifierKind.spicules = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='spicules', tag='spicules')
LithologyQualifierKind.spilite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='spilite', tag='spilite')
LithologyQualifierKind.spilitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='spilitic', tag='spilitic')
LithologyQualifierKind.stylolites = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='stylolites', tag='stylolites')
LithologyQualifierKind.stylolitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='stylolitic', tag='stylolitic')
LithologyQualifierKind.syenite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='syenite', tag='syenite')
LithologyQualifierKind.syenitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='syenitic', tag='syenitic')
LithologyQualifierKind.syenitoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='syenitoid', tag='syenitoid')
LithologyQualifierKind.sylvite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sylvite', tag='sylvite')
LithologyQualifierKind.sylvitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='sylvitic', tag='sylvitic')
LithologyQualifierKind.tarry = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tarry', tag='tarry')
LithologyQualifierKind.tephrite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tephrite', tag='tephrite')
LithologyQualifierKind.tephritic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tephritic', tag='tephritic')
LithologyQualifierKind.tephritoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tephritoid', tag='tephritoid')
LithologyQualifierKind.tholeiitic_basalt = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tholeiitic basalt', tag='tholeiitic_basalt')
LithologyQualifierKind.tonalite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tonalite', tag='tonalite')
LithologyQualifierKind.tonalitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tonalitic', tag='tonalitic')
LithologyQualifierKind.trachyte = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='trachyte', tag='trachyte')
LithologyQualifierKind.trachytic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='trachytic', tag='trachytic')
LithologyQualifierKind.trachytic_rock = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='trachytic rock', tag='trachytic_rock')
LithologyQualifierKind.trachytoid = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='trachytoid', tag='trachytoid')
LithologyQualifierKind.travertine = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='travertine', tag='travertine')
LithologyQualifierKind.tuff = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tuff', tag='tuff')
LithologyQualifierKind.tuffaceous = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tuffaceous', tag='tuffaceous')
LithologyQualifierKind.tuffite = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tuffite', tag='tuffite')
LithologyQualifierKind.tuffitic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='tuffitic', tag='tuffitic')
LithologyQualifierKind.ultrabasic = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='ultrabasic', tag='ultrabasic')
LithologyQualifierKind.undifferentiated = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='undifferentiated', tag='undifferentiated')
LithologyQualifierKind.unknown = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
LithologyQualifierKind.wacke = LithologyQualifierKind._CF_enumeration.addEnumeration(unicode_value='wacke', tag='wacke')
LithologyQualifierKind._InitializeFacetMap(LithologyQualifierKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LithologyQualifierKind', LithologyQualifierKind)
_module_typeBindings.LithologyQualifierKind = LithologyQualifierKind

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}WellStatus
class WellStatus (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """These values represent the status of a well or wellbore."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WellStatus')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 906, 1)
    _Documentation = 'These values represent the status of a well or wellbore.'
WellStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=WellStatus, enum_prefix=None)
WellStatus.abandoned = WellStatus._CF_enumeration.addEnumeration(unicode_value='abandoned', tag='abandoned')
WellStatus.active = WellStatus._CF_enumeration.addEnumeration(unicode_value='active', tag='active')
WellStatus.active____injecting = WellStatus._CF_enumeration.addEnumeration(unicode_value='active -- injecting', tag='active____injecting')
WellStatus.active____producing = WellStatus._CF_enumeration.addEnumeration(unicode_value='active -- producing', tag='active____producing')
WellStatus.completed = WellStatus._CF_enumeration.addEnumeration(unicode_value='completed', tag='completed')
WellStatus.drilling = WellStatus._CF_enumeration.addEnumeration(unicode_value='drilling', tag='drilling')
WellStatus.partially_plugged = WellStatus._CF_enumeration.addEnumeration(unicode_value='partially plugged', tag='partially_plugged')
WellStatus.permitted = WellStatus._CF_enumeration.addEnumeration(unicode_value='permitted', tag='permitted')
WellStatus.plugged_and_abandoned = WellStatus._CF_enumeration.addEnumeration(unicode_value='plugged and abandoned', tag='plugged_and_abandoned')
WellStatus.proposed = WellStatus._CF_enumeration.addEnumeration(unicode_value='proposed', tag='proposed')
WellStatus.sold = WellStatus._CF_enumeration.addEnumeration(unicode_value='sold', tag='sold')
WellStatus.suspended = WellStatus._CF_enumeration.addEnumeration(unicode_value='suspended', tag='suspended')
WellStatus.temporarily_abandoned = WellStatus._CF_enumeration.addEnumeration(unicode_value='temporarily abandoned', tag='temporarily_abandoned')
WellStatus.testing = WellStatus._CF_enumeration.addEnumeration(unicode_value='testing', tag='testing')
WellStatus.tight = WellStatus._CF_enumeration.addEnumeration(unicode_value='tight', tag='tight')
WellStatus.working_over = WellStatus._CF_enumeration.addEnumeration(unicode_value='working over', tag='working_over')
WellStatus.unknown = WellStatus._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
WellStatus._InitializeFacetMap(WellStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'WellStatus', WellStatus)
_module_typeBindings.WellStatus = WellStatus

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}GeochronologicalRank
class GeochronologicalRank (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """Qualifier for the geological time denoted by the GeochronologicalUnit: eon, era, epoch, etc."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeochronologicalRank')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 2482, 1)
    _Documentation = 'Qualifier for the geological time denoted by the GeochronologicalUnit: eon, era, epoch, etc.'
GeochronologicalRank._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GeochronologicalRank, enum_prefix=None)
GeochronologicalRank.eon = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='eon', tag='eon')
GeochronologicalRank.era = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='era', tag='era')
GeochronologicalRank.period = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='period', tag='period')
GeochronologicalRank.epoch = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='epoch', tag='epoch')
GeochronologicalRank.age = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='age', tag='age')
GeochronologicalRank.chron = GeochronologicalRank._CF_enumeration.addEnumeration(unicode_value='chron', tag='chron')
GeochronologicalRank._InitializeFacetMap(GeochronologicalRank._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'GeochronologicalRank', GeochronologicalRank)
_module_typeBindings.GeochronologicalRank = GeochronologicalRank

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}LithologyKind
class LithologyKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """A description of minerals or accessories that constitute a fractional part of a lithology description"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LithologyKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 2495, 1)
    _Documentation = 'A description of minerals or accessories that constitute a fractional part of a lithology description'
LithologyKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LithologyKind, enum_prefix=None)
LithologyKind.alkali_feldspar_rhyolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='alkali feldspar rhyolite', tag='alkali_feldspar_rhyolite')
LithologyKind.alkali_olivine_basalt = LithologyKind._CF_enumeration.addEnumeration(unicode_value='alkali olivine basalt', tag='alkali_olivine_basalt')
LithologyKind.amphibolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='amphibolite', tag='amphibolite')
LithologyKind.andesite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='andesite', tag='andesite')
LithologyKind.anhydrite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='anhydrite', tag='anhydrite')
LithologyKind.anorthositic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='anorthositic rock', tag='anorthositic_rock')
LithologyKind.anthracite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='anthracite', tag='anthracite')
LithologyKind.aplite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='aplite', tag='aplite')
LithologyKind.arenite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='arenite', tag='arenite')
LithologyKind.argillaceous = LithologyKind._CF_enumeration.addEnumeration(unicode_value='argillaceous', tag='argillaceous')
LithologyKind.arkose = LithologyKind._CF_enumeration.addEnumeration(unicode_value='arkose', tag='arkose')
LithologyKind.basalt = LithologyKind._CF_enumeration.addEnumeration(unicode_value='basalt', tag='basalt')
LithologyKind.basanite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='basanite', tag='basanite')
LithologyKind.bauxite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='bauxite', tag='bauxite')
LithologyKind.bituminous_coal = LithologyKind._CF_enumeration.addEnumeration(unicode_value='bituminous coal', tag='bituminous_coal')
LithologyKind.blueschist_metamorphic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='blueschist metamorphic rock', tag='blueschist_metamorphic_rock')
LithologyKind.boninite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='boninite', tag='boninite')
LithologyKind.breccia = LithologyKind._CF_enumeration.addEnumeration(unicode_value='breccia', tag='breccia')
LithologyKind.carbonate_ooze = LithologyKind._CF_enumeration.addEnumeration(unicode_value='carbonate ooze', tag='carbonate_ooze')
LithologyKind.carbonatite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='carbonatite', tag='carbonatite')
LithologyKind.chalk = LithologyKind._CF_enumeration.addEnumeration(unicode_value='chalk', tag='chalk')
LithologyKind.chert = LithologyKind._CF_enumeration.addEnumeration(unicode_value='chert', tag='chert')
LithologyKind.clay = LithologyKind._CF_enumeration.addEnumeration(unicode_value='clay', tag='clay')
LithologyKind.claystone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='claystone', tag='claystone')
LithologyKind.coal = LithologyKind._CF_enumeration.addEnumeration(unicode_value='coal', tag='coal')
LithologyKind.conglomerate = LithologyKind._CF_enumeration.addEnumeration(unicode_value='conglomerate', tag='conglomerate')
LithologyKind.dacite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='dacite', tag='dacite')
LithologyKind.diabase = LithologyKind._CF_enumeration.addEnumeration(unicode_value='diabase', tag='diabase')
LithologyKind.diamictite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='diamictite', tag='diamictite')
LithologyKind.diorite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='diorite', tag='diorite')
LithologyKind.dioritoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='dioritoid', tag='dioritoid')
LithologyKind.doleritic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='doleritic rock', tag='doleritic_rock')
LithologyKind.dolomite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='dolomite', tag='dolomite')
LithologyKind.dolomitic = LithologyKind._CF_enumeration.addEnumeration(unicode_value='dolomitic', tag='dolomitic')
LithologyKind.eclogite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='eclogite', tag='eclogite')
LithologyKind.exotic_alkaline_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='exotic alkaline rock', tag='exotic_alkaline_rock')
LithologyKind.feldspar = LithologyKind._CF_enumeration.addEnumeration(unicode_value='feldspar', tag='feldspar')
LithologyKind.feldspathic_arenite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='feldspathic arenite', tag='feldspathic_arenite')
LithologyKind.fine_grained_igneous_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='fine grained igneous rock', tag='fine_grained_igneous_rock')
LithologyKind.foid_dioritoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foid dioritoid', tag='foid_dioritoid')
LithologyKind.foid_gabbroid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foid gabbroid', tag='foid_gabbroid')
LithologyKind.foid_syenitoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foid syenitoid', tag='foid_syenitoid')
LithologyKind.foidite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foidite', tag='foidite')
LithologyKind.foiditoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foiditoid', tag='foiditoid')
LithologyKind.foidolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foidolite', tag='foidolite')
LithologyKind.foliated_metamorphic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='foliated metamorphic rock', tag='foliated_metamorphic_rock')
LithologyKind.fragmental_igneous_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='fragmental igneous rock', tag='fragmental_igneous_rock')
LithologyKind.gabbro = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gabbro', tag='gabbro')
LithologyKind.gabbroic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gabbroic rock', tag='gabbroic_rock')
LithologyKind.gabbroid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gabbroid', tag='gabbroid')
LithologyKind.glauconite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='glauconite', tag='glauconite')
LithologyKind.gneiss = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gneiss', tag='gneiss')
LithologyKind.granite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='granite', tag='granite')
LithologyKind.granodiorite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='granodiorite', tag='granodiorite')
LithologyKind.granofels = LithologyKind._CF_enumeration.addEnumeration(unicode_value='granofels', tag='granofels')
LithologyKind.granulite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='granulite', tag='granulite')
LithologyKind.gravel = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gravel', tag='gravel')
LithologyKind.greenstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='greenstone', tag='greenstone')
LithologyKind.gumbo = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gumbo', tag='gumbo')
LithologyKind.gypsum = LithologyKind._CF_enumeration.addEnumeration(unicode_value='gypsum', tag='gypsum')
LithologyKind.halite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='halite', tag='halite')
LithologyKind.hornfels = LithologyKind._CF_enumeration.addEnumeration(unicode_value='hornfels', tag='hornfels')
LithologyKind.igneous_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='igneous rock', tag='igneous_rock')
LithologyKind.impact_generated_material = LithologyKind._CF_enumeration.addEnumeration(unicode_value='impact generated material', tag='impact_generated_material')
LithologyKind.impure_dolomite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='impure dolomite', tag='impure_dolomite')
LithologyKind.impure_limestone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='impure limestone', tag='impure_limestone')
LithologyKind.intrusive_rock_plutonic = LithologyKind._CF_enumeration.addEnumeration(unicode_value='intrusive rock (plutonic)', tag='intrusive_rock_plutonic')
LithologyKind.iron_rich_sedimentary_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='iron rich sedimentary rock', tag='iron_rich_sedimentary_rock')
LithologyKind.kalsilitic_and_melilitic_rocks = LithologyKind._CF_enumeration.addEnumeration(unicode_value='kalsilitic and melilitic rocks', tag='kalsilitic_and_melilitic_rocks')
LithologyKind.komatiitic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='komatiitic rock', tag='komatiitic_rock')
LithologyKind.latitic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='latitic rock', tag='latitic_rock')
LithologyKind.lignite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lignite', tag='lignite')
LithologyKind.lime_boundstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime boundstone', tag='lime_boundstone')
LithologyKind.lime_framestone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime framestone', tag='lime_framestone')
LithologyKind.lime_grainstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime grainstone', tag='lime_grainstone')
LithologyKind.lime_mudstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime mudstone', tag='lime_mudstone')
LithologyKind.lime_packstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime packstone', tag='lime_packstone')
LithologyKind.lime_wackestone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='lime wackestone', tag='lime_wackestone')
LithologyKind.limestone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='limestone', tag='limestone')
LithologyKind.marble = LithologyKind._CF_enumeration.addEnumeration(unicode_value='marble', tag='marble')
LithologyKind.marl = LithologyKind._CF_enumeration.addEnumeration(unicode_value='marl', tag='marl')
LithologyKind.metamorphic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='metamorphic rock', tag='metamorphic_rock')
LithologyKind.mica_schist = LithologyKind._CF_enumeration.addEnumeration(unicode_value='mica schist', tag='mica_schist')
LithologyKind.migmatite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='migmatite', tag='migmatite')
LithologyKind.monzogabbro = LithologyKind._CF_enumeration.addEnumeration(unicode_value='monzogabbro', tag='monzogabbro')
LithologyKind.mud = LithologyKind._CF_enumeration.addEnumeration(unicode_value='mud', tag='mud')
LithologyKind.mudstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='mudstone', tag='mudstone')
LithologyKind.mylonitic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='mylonitic rock', tag='mylonitic_rock')
LithologyKind.no_description = LithologyKind._CF_enumeration.addEnumeration(unicode_value='no description', tag='no_description')
LithologyKind.no_sample = LithologyKind._CF_enumeration.addEnumeration(unicode_value='no sample', tag='no_sample')
LithologyKind.ooze = LithologyKind._CF_enumeration.addEnumeration(unicode_value='ooze', tag='ooze')
LithologyKind.ophiolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='ophiolite', tag='ophiolite')
LithologyKind.organic_bearing_mudstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='organic bearing mudstone', tag='organic_bearing_mudstone')
LithologyKind.peat = LithologyKind._CF_enumeration.addEnumeration(unicode_value='peat', tag='peat')
LithologyKind.pegmatite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='pegmatite', tag='pegmatite')
LithologyKind.peridotite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='peridotite', tag='peridotite')
LithologyKind.phaneritic_igneous_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phaneritic igneous rock', tag='phaneritic_igneous_rock')
LithologyKind.phonolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phonolite', tag='phonolite')
LithologyKind.phonolitoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phonolitoid', tag='phonolitoid')
LithologyKind.phosphate = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phosphate', tag='phosphate')
LithologyKind.phosphate_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phosphate rock', tag='phosphate_rock')
LithologyKind.phyllite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='phyllite', tag='phyllite')
LithologyKind.porphyry = LithologyKind._CF_enumeration.addEnumeration(unicode_value='porphyry', tag='porphyry')
LithologyKind.potassium_and_magnesium_salts = LithologyKind._CF_enumeration.addEnumeration(unicode_value='potassium and magnesium salts', tag='potassium_and_magnesium_salts')
LithologyKind.pyroclastic_breccia = LithologyKind._CF_enumeration.addEnumeration(unicode_value='pyroclastic breccia', tag='pyroclastic_breccia')
LithologyKind.pyroclastic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='pyroclastic rock', tag='pyroclastic_rock')
LithologyKind.pyroxenite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='pyroxenite', tag='pyroxenite')
LithologyKind.quartz_arenite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='quartz arenite', tag='quartz_arenite')
LithologyKind.quartzite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='quartzite', tag='quartzite')
LithologyKind.rhyolite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='rhyolite', tag='rhyolite')
LithologyKind.rock_salt = LithologyKind._CF_enumeration.addEnumeration(unicode_value='rock salt', tag='rock_salt')
LithologyKind.sand = LithologyKind._CF_enumeration.addEnumeration(unicode_value='sand', tag='sand')
LithologyKind.sandstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='sandstone', tag='sandstone')
LithologyKind.sandy = LithologyKind._CF_enumeration.addEnumeration(unicode_value='sandy', tag='sandy')
LithologyKind.sapropel = LithologyKind._CF_enumeration.addEnumeration(unicode_value='sapropel', tag='sapropel')
LithologyKind.schist = LithologyKind._CF_enumeration.addEnumeration(unicode_value='schist', tag='schist')
LithologyKind.serpentinite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='serpentinite', tag='serpentinite')
LithologyKind.shale = LithologyKind._CF_enumeration.addEnumeration(unicode_value='shale', tag='shale')
LithologyKind.siliceous_ooze = LithologyKind._CF_enumeration.addEnumeration(unicode_value='siliceous ooze', tag='siliceous_ooze')
LithologyKind.silt = LithologyKind._CF_enumeration.addEnumeration(unicode_value='silt', tag='silt')
LithologyKind.siltstone = LithologyKind._CF_enumeration.addEnumeration(unicode_value='siltstone', tag='siltstone')
LithologyKind.skarn = LithologyKind._CF_enumeration.addEnumeration(unicode_value='skarn', tag='skarn')
LithologyKind.slate = LithologyKind._CF_enumeration.addEnumeration(unicode_value='slate', tag='slate')
LithologyKind.spilite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='spilite', tag='spilite')
LithologyKind.syenite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='syenite', tag='syenite')
LithologyKind.syenitoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='syenitoid', tag='syenitoid')
LithologyKind.sylvite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='sylvite', tag='sylvite')
LithologyKind.tephrite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tephrite', tag='tephrite')
LithologyKind.tephritoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tephritoid', tag='tephritoid')
LithologyKind.tholeiitic_basalt = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tholeiitic basalt', tag='tholeiitic_basalt')
LithologyKind.tonalite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tonalite', tag='tonalite')
LithologyKind.trachyte = LithologyKind._CF_enumeration.addEnumeration(unicode_value='trachyte', tag='trachyte')
LithologyKind.trachytic_rock = LithologyKind._CF_enumeration.addEnumeration(unicode_value='trachytic rock', tag='trachytic_rock')
LithologyKind.trachytoid = LithologyKind._CF_enumeration.addEnumeration(unicode_value='trachytoid', tag='trachytoid')
LithologyKind.travertine = LithologyKind._CF_enumeration.addEnumeration(unicode_value='travertine', tag='travertine')
LithologyKind.tuff = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tuff', tag='tuff')
LithologyKind.tuffite = LithologyKind._CF_enumeration.addEnumeration(unicode_value='tuffite', tag='tuffite')
LithologyKind.ultrabasic = LithologyKind._CF_enumeration.addEnumeration(unicode_value='ultrabasic', tag='ultrabasic')
LithologyKind.undifferentiated = LithologyKind._CF_enumeration.addEnumeration(unicode_value='undifferentiated', tag='undifferentiated')
LithologyKind.unknown = LithologyKind._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
LithologyKind.wacke = LithologyKind._CF_enumeration.addEnumeration(unicode_value='wacke', tag='wacke')
LithologyKind._InitializeFacetMap(LithologyKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LithologyKind', LithologyKind)
_module_typeBindings.LithologyKind = LithologyKind

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 22, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerMassUom, EnumExtensionPattern, )
LengthPerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerMassUomExt)
LengthPerMassUomExt.ftlbm = 'ft/lbm'              # originally LengthPerMassUom.ftlbm
LengthPerMassUomExt.mkg = 'm/kg'                  # originally LengthPerMassUom.mkg
LengthPerMassUomExt._InitializeFacetMap(LengthPerMassUomExt._CF_pattern,
   LengthPerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerMassUomExt', LengthPerMassUomExt)
_module_typeBindings.LengthPerMassUomExt = LengthPerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DiffusionCoefficientUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DiffusionCoefficientUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusionCoefficientUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 25, 1)
    _Documentation = None

    _MemberTypes = ( DiffusionCoefficientUom, EnumExtensionPattern, )
DiffusionCoefficientUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DiffusionCoefficientUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DiffusionCoefficientUomExt)
DiffusionCoefficientUomExt.m2s = 'm2/s'           # originally DiffusionCoefficientUom.m2s
DiffusionCoefficientUomExt._InitializeFacetMap(DiffusionCoefficientUomExt._CF_pattern,
   DiffusionCoefficientUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DiffusionCoefficientUomExt', DiffusionCoefficientUomExt)
_module_typeBindings.DiffusionCoefficientUomExt = DiffusionCoefficientUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 42, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerTimeUom, EnumExtensionPattern, )
AreaPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerTimeUomExt)
AreaPerTimeUomExt.cm2s = 'cm2/s'                  # originally AreaPerTimeUom.cm2s
AreaPerTimeUomExt.ft2h = 'ft2/h'                  # originally AreaPerTimeUom.ft2h
AreaPerTimeUomExt.ft2s = 'ft2/s'                  # originally AreaPerTimeUom.ft2s
AreaPerTimeUomExt.in2s = 'in2/s'                  # originally AreaPerTimeUom.in2s
AreaPerTimeUomExt.m2d = 'm2/d'                    # originally AreaPerTimeUom.m2d
AreaPerTimeUomExt.m2h = 'm2/h'                    # originally AreaPerTimeUom.m2h
AreaPerTimeUomExt.m2s = 'm2/s'                    # originally AreaPerTimeUom.m2s
AreaPerTimeUomExt.mm2s = 'mm2/s'                  # originally AreaPerTimeUom.mm2s
AreaPerTimeUomExt._InitializeFacetMap(AreaPerTimeUomExt._CF_pattern,
   AreaPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerTimeUomExt', AreaPerTimeUomExt)
_module_typeBindings.AreaPerTimeUomExt = AreaPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 45, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimeUom, EnumExtensionPattern, )
VolumePerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimeUomExt)
VolumePerTimeUomExt.n130_cm3min = '1/30 cm3/min'  # originally VolumePerTimeUom.n130_cm3min
VolumePerTimeUomExt.n1000_bbld = '1000 bbl/d'     # originally VolumePerTimeUom.n1000_bbld
VolumePerTimeUomExt.n1000_ft3d = '1000 ft3/d'     # originally VolumePerTimeUom.n1000_ft3d
VolumePerTimeUomExt.n1000_m3d = '1000 m3/d'       # originally VolumePerTimeUom.n1000_m3d
VolumePerTimeUomExt.n1000_m3h = '1000 m3/h'       # originally VolumePerTimeUom.n1000_m3h
VolumePerTimeUomExt.n1E6_bbld = '1E6 bbl/d'       # originally VolumePerTimeUom.n1E6_bbld
VolumePerTimeUomExt.n1E6_ft3d = '1E6 ft3/d'       # originally VolumePerTimeUom.n1E6_ft3d
VolumePerTimeUomExt.n1E6_m3d = '1E6 m3/d'         # originally VolumePerTimeUom.n1E6_m3d
VolumePerTimeUomExt.bbld = 'bbl/d'                # originally VolumePerTimeUom.bbld
VolumePerTimeUomExt.bblh = 'bbl/h'                # originally VolumePerTimeUom.bblh
VolumePerTimeUomExt.bblmin = 'bbl/min'            # originally VolumePerTimeUom.bblmin
VolumePerTimeUomExt.cm3h = 'cm3/h'                # originally VolumePerTimeUom.cm3h
VolumePerTimeUomExt.cm3min = 'cm3/min'            # originally VolumePerTimeUom.cm3min
VolumePerTimeUomExt.cm3s = 'cm3/s'                # originally VolumePerTimeUom.cm3s
VolumePerTimeUomExt.dm3s = 'dm3/s'                # originally VolumePerTimeUom.dm3s
VolumePerTimeUomExt.ft3d = 'ft3/d'                # originally VolumePerTimeUom.ft3d
VolumePerTimeUomExt.ft3h = 'ft3/h'                # originally VolumePerTimeUom.ft3h
VolumePerTimeUomExt.ft3min = 'ft3/min'            # originally VolumePerTimeUom.ft3min
VolumePerTimeUomExt.ft3s = 'ft3/s'                # originally VolumePerTimeUom.ft3s
VolumePerTimeUomExt.galUKd = 'gal[UK]/d'          # originally VolumePerTimeUom.galUKd
VolumePerTimeUomExt.galUKh = 'gal[UK]/h'          # originally VolumePerTimeUom.galUKh
VolumePerTimeUomExt.galUKmin = 'gal[UK]/min'      # originally VolumePerTimeUom.galUKmin
VolumePerTimeUomExt.galUSd = 'gal[US]/d'          # originally VolumePerTimeUom.galUSd
VolumePerTimeUomExt.galUSh = 'gal[US]/h'          # originally VolumePerTimeUom.galUSh
VolumePerTimeUomExt.galUSmin = 'gal[US]/min'      # originally VolumePerTimeUom.galUSmin
VolumePerTimeUomExt.Lh = 'L/h'                    # originally VolumePerTimeUom.Lh
VolumePerTimeUomExt.Lmin = 'L/min'                # originally VolumePerTimeUom.Lmin
VolumePerTimeUomExt.Ls = 'L/s'                    # originally VolumePerTimeUom.Ls
VolumePerTimeUomExt.m3d = 'm3/d'                  # originally VolumePerTimeUom.m3d
VolumePerTimeUomExt.m3h = 'm3/h'                  # originally VolumePerTimeUom.m3h
VolumePerTimeUomExt.m3min = 'm3/min'              # originally VolumePerTimeUom.m3min
VolumePerTimeUomExt.m3s = 'm3/s'                  # originally VolumePerTimeUom.m3s
VolumePerTimeUomExt._InitializeFacetMap(VolumePerTimeUomExt._CF_pattern,
   VolumePerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeUomExt', VolumePerTimeUomExt)
_module_typeBindings.VolumePerTimeUomExt = VolumePerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 48, 1)
    _Documentation = None

    _MemberTypes = ( EnergyUom, EnumExtensionPattern, )
EnergyUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyUomExt)
EnergyUomExt.n1E6_BtuIT = '1E6 Btu[IT]'           # originally EnergyUom.n1E6_BtuIT
EnergyUomExt.aJ = 'aJ'                            # originally EnergyUom.aJ
EnergyUomExt.BtuIT = 'Btu[IT]'                    # originally EnergyUom.BtuIT
EnergyUomExt.Btuth = 'Btu[th]'                    # originally EnergyUom.Btuth
EnergyUomExt.BtuUK = 'Btu[UK]'                    # originally EnergyUom.BtuUK
EnergyUomExt.calIT = 'cal[IT]'                    # originally EnergyUom.calIT
EnergyUomExt.calth = 'cal[th]'                    # originally EnergyUom.calth
EnergyUomExt.ccalth = 'ccal[th]'                  # originally EnergyUom.ccalth
EnergyUomExt.ceV = 'ceV'                          # originally EnergyUom.ceV
EnergyUomExt.cJ = 'cJ'                            # originally EnergyUom.cJ
EnergyUomExt.dcalth = 'dcal[th]'                  # originally EnergyUom.dcalth
EnergyUomExt.deV = 'deV'                          # originally EnergyUom.deV
EnergyUomExt.dJ = 'dJ'                            # originally EnergyUom.dJ
EnergyUomExt.Ecalth = 'Ecal[th]'                  # originally EnergyUom.Ecalth
EnergyUomExt.EeV = 'EeV'                          # originally EnergyUom.EeV
EnergyUomExt.EJ = 'EJ'                            # originally EnergyUom.EJ
EnergyUomExt.erg = 'erg'                          # originally EnergyUom.erg
EnergyUomExt.eV = 'eV'                            # originally EnergyUom.eV
EnergyUomExt.fcalth = 'fcal[th]'                  # originally EnergyUom.fcalth
EnergyUomExt.feV = 'feV'                          # originally EnergyUom.feV
EnergyUomExt.fJ = 'fJ'                            # originally EnergyUom.fJ
EnergyUomExt.Gcalth = 'Gcal[th]'                  # originally EnergyUom.Gcalth
EnergyUomExt.GeV = 'GeV'                          # originally EnergyUom.GeV
EnergyUomExt.GJ = 'GJ'                            # originally EnergyUom.GJ
EnergyUomExt.GW_h = 'GW.h'                        # originally EnergyUom.GW_h
EnergyUomExt.hp_h = 'hp.h'                        # originally EnergyUom.hp_h
EnergyUomExt.hpmetric_h = 'hp[metric].h'          # originally EnergyUom.hpmetric_h
EnergyUomExt.J = 'J'                              # originally EnergyUom.J
EnergyUomExt.kcalth = 'kcal[th]'                  # originally EnergyUom.kcalth
EnergyUomExt.keV = 'keV'                          # originally EnergyUom.keV
EnergyUomExt.kJ = 'kJ'                            # originally EnergyUom.kJ
EnergyUomExt.kW_h = 'kW.h'                        # originally EnergyUom.kW_h
EnergyUomExt.mcalth = 'mcal[th]'                  # originally EnergyUom.mcalth
EnergyUomExt.Mcalth = 'Mcal[th]'                  # originally EnergyUom.Mcalth
EnergyUomExt.meV = 'meV'                          # originally EnergyUom.meV
EnergyUomExt.MeV = 'MeV'                          # originally EnergyUom.MeV
EnergyUomExt.MJ = 'MJ'                            # originally EnergyUom.MJ
EnergyUomExt.mJ = 'mJ'                            # originally EnergyUom.mJ
EnergyUomExt.MW_h = 'MW.h'                        # originally EnergyUom.MW_h
EnergyUomExt.ncalth = 'ncal[th]'                  # originally EnergyUom.ncalth
EnergyUomExt.neV = 'neV'                          # originally EnergyUom.neV
EnergyUomExt.nJ = 'nJ'                            # originally EnergyUom.nJ
EnergyUomExt.pcalth = 'pcal[th]'                  # originally EnergyUom.pcalth
EnergyUomExt.peV = 'peV'                          # originally EnergyUom.peV
EnergyUomExt.pJ = 'pJ'                            # originally EnergyUom.pJ
EnergyUomExt.quad = 'quad'                        # originally EnergyUom.quad
EnergyUomExt.Tcalth = 'Tcal[th]'                  # originally EnergyUom.Tcalth
EnergyUomExt.TeV = 'TeV'                          # originally EnergyUom.TeV
EnergyUomExt.thermEC = 'therm[EC]'                # originally EnergyUom.thermEC
EnergyUomExt.thermUK = 'therm[UK]'                # originally EnergyUom.thermUK
EnergyUomExt.thermUS = 'therm[US]'                # originally EnergyUom.thermUS
EnergyUomExt.TJ = 'TJ'                            # originally EnergyUom.TJ
EnergyUomExt.TW_h = 'TW.h'                        # originally EnergyUom.TW_h
EnergyUomExt.ucalth = 'ucal[th]'                  # originally EnergyUom.ucalth
EnergyUomExt.ueV = 'ueV'                          # originally EnergyUom.ueV
EnergyUomExt.uJ = 'uJ'                            # originally EnergyUom.uJ
EnergyUomExt._InitializeFacetMap(EnergyUomExt._CF_pattern,
   EnergyUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyUomExt', EnergyUomExt)
_module_typeBindings.EnergyUomExt = EnergyUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricCurrentDensityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricCurrentDensityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentDensityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 51, 1)
    _Documentation = None

    _MemberTypes = ( ElectricCurrentDensityUom, EnumExtensionPattern, )
ElectricCurrentDensityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricCurrentDensityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricCurrentDensityUomExt)
ElectricCurrentDensityUomExt.Acm2 = 'A/cm2'       # originally ElectricCurrentDensityUom.Acm2
ElectricCurrentDensityUomExt.Aft2 = 'A/ft2'       # originally ElectricCurrentDensityUom.Aft2
ElectricCurrentDensityUomExt.Am2 = 'A/m2'         # originally ElectricCurrentDensityUom.Am2
ElectricCurrentDensityUomExt.Amm2 = 'A/mm2'       # originally ElectricCurrentDensityUom.Amm2
ElectricCurrentDensityUomExt.mAcm2 = 'mA/cm2'     # originally ElectricCurrentDensityUom.mAcm2
ElectricCurrentDensityUomExt.mAft2 = 'mA/ft2'     # originally ElectricCurrentDensityUom.mAft2
ElectricCurrentDensityUomExt.uAcm2 = 'uA/cm2'     # originally ElectricCurrentDensityUom.uAcm2
ElectricCurrentDensityUomExt.uAin2 = 'uA/in2'     # originally ElectricCurrentDensityUom.uAin2
ElectricCurrentDensityUomExt._InitializeFacetMap(ElectricCurrentDensityUomExt._CF_pattern,
   ElectricCurrentDensityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentDensityUomExt', ElectricCurrentDensityUomExt)
_module_typeBindings.ElectricCurrentDensityUomExt = ElectricCurrentDensityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TimePerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TimePerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 54, 1)
    _Documentation = None

    _MemberTypes = ( TimePerMassUom, EnumExtensionPattern, )
TimePerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TimePerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerMassUomExt)
TimePerMassUomExt.skg = 's/kg'                    # originally TimePerMassUom.skg
TimePerMassUomExt._InitializeFacetMap(TimePerMassUomExt._CF_pattern,
   TimePerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerMassUomExt', TimePerMassUomExt)
_module_typeBindings.TimePerMassUomExt = TimePerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class HeatFlowRateUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of HeatFlowRateUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatFlowRateUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 57, 1)
    _Documentation = None

    _MemberTypes = ( HeatFlowRateUom, EnumExtensionPattern, )
HeatFlowRateUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
HeatFlowRateUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatFlowRateUomExt)
HeatFlowRateUomExt.n1E6_BtuITh = '1E6 Btu[IT]/h'  # originally HeatFlowRateUom.n1E6_BtuITh
HeatFlowRateUomExt.BtuITh = 'Btu[IT]/h'           # originally HeatFlowRateUom.BtuITh
HeatFlowRateUomExt.BtuITmin = 'Btu[IT]/min'       # originally HeatFlowRateUom.BtuITmin
HeatFlowRateUomExt.BtuITs = 'Btu[IT]/s'           # originally HeatFlowRateUom.BtuITs
HeatFlowRateUomExt.calthh = 'cal[th]/h'           # originally HeatFlowRateUom.calthh
HeatFlowRateUomExt.EJa = 'EJ/a'                   # originally HeatFlowRateUom.EJa
HeatFlowRateUomExt.erga = 'erg/a'                 # originally HeatFlowRateUom.erga
HeatFlowRateUomExt.GW = 'GW'                      # originally HeatFlowRateUom.GW
HeatFlowRateUomExt.Js = 'J/s'                     # originally HeatFlowRateUom.Js
HeatFlowRateUomExt.kcalthh = 'kcal[th]/h'         # originally HeatFlowRateUom.kcalthh
HeatFlowRateUomExt.kW = 'kW'                      # originally HeatFlowRateUom.kW
HeatFlowRateUomExt.lbf_ftmin = 'lbf.ft/min'       # originally HeatFlowRateUom.lbf_ftmin
HeatFlowRateUomExt.lbf_fts = 'lbf.ft/s'           # originally HeatFlowRateUom.lbf_fts
HeatFlowRateUomExt.MJa = 'MJ/a'                   # originally HeatFlowRateUom.MJa
HeatFlowRateUomExt.mW = 'mW'                      # originally HeatFlowRateUom.mW
HeatFlowRateUomExt.MW = 'MW'                      # originally HeatFlowRateUom.MW
HeatFlowRateUomExt.nW = 'nW'                      # originally HeatFlowRateUom.nW
HeatFlowRateUomExt.quada = 'quad/a'               # originally HeatFlowRateUom.quada
HeatFlowRateUomExt.TJa = 'TJ/a'                   # originally HeatFlowRateUom.TJa
HeatFlowRateUomExt.TW = 'TW'                      # originally HeatFlowRateUom.TW
HeatFlowRateUomExt.ucalths = 'ucal[th]/s'         # originally HeatFlowRateUom.ucalths
HeatFlowRateUomExt.uW = 'uW'                      # originally HeatFlowRateUom.uW
HeatFlowRateUomExt.W = 'W'                        # originally HeatFlowRateUom.W
HeatFlowRateUomExt._InitializeFacetMap(HeatFlowRateUomExt._CF_pattern,
   HeatFlowRateUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatFlowRateUomExt', HeatFlowRateUomExt)
_module_typeBindings.HeatFlowRateUomExt = HeatFlowRateUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricChargeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricChargeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 94, 1)
    _Documentation = None

    _MemberTypes = ( ElectricChargeUom, EnumExtensionPattern, )
ElectricChargeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricChargeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargeUomExt)
ElectricChargeUomExt.A_h = 'A.h'                  # originally ElectricChargeUom.A_h
ElectricChargeUomExt.A_s = 'A.s'                  # originally ElectricChargeUom.A_s
ElectricChargeUomExt.C = 'C'                      # originally ElectricChargeUom.C
ElectricChargeUomExt.cC = 'cC'                    # originally ElectricChargeUom.cC
ElectricChargeUomExt.dC = 'dC'                    # originally ElectricChargeUom.dC
ElectricChargeUomExt.EC = 'EC'                    # originally ElectricChargeUom.EC
ElectricChargeUomExt.fC = 'fC'                    # originally ElectricChargeUom.fC
ElectricChargeUomExt.GC = 'GC'                    # originally ElectricChargeUom.GC
ElectricChargeUomExt.kC = 'kC'                    # originally ElectricChargeUom.kC
ElectricChargeUomExt.MC = 'MC'                    # originally ElectricChargeUom.MC
ElectricChargeUomExt.mC = 'mC'                    # originally ElectricChargeUom.mC
ElectricChargeUomExt.nC = 'nC'                    # originally ElectricChargeUom.nC
ElectricChargeUomExt.pC = 'pC'                    # originally ElectricChargeUom.pC
ElectricChargeUomExt.TC = 'TC'                    # originally ElectricChargeUom.TC
ElectricChargeUomExt.uC = 'uC'                    # originally ElectricChargeUom.uC
ElectricChargeUomExt._InitializeFacetMap(ElectricChargeUomExt._CF_pattern,
   ElectricChargeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargeUomExt', ElectricChargeUomExt)
_module_typeBindings.ElectricChargeUomExt = ElectricChargeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 97, 1)
    _Documentation = None

    _MemberTypes = ( TimeUom, EnumExtensionPattern, )
TimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimeUomExt)
TimeUomExt.n12_ms = '1/2 ms'                      # originally TimeUom.n12_ms
TimeUomExt.n100_kat = '100 ka[t]'                 # originally TimeUom.n100_kat
TimeUomExt.a = 'a'                                # originally TimeUom.a
TimeUomExt.at = 'a[t]'                            # originally TimeUom.at
TimeUomExt.ca = 'ca'                              # originally TimeUom.ca
TimeUomExt.cs = 'cs'                              # originally TimeUom.cs
TimeUomExt.d = 'd'                                # originally TimeUom.d
TimeUomExt.ds = 'ds'                              # originally TimeUom.ds
TimeUomExt.Eat = 'Ea[t]'                          # originally TimeUom.Eat
TimeUomExt.fa = 'fa'                              # originally TimeUom.fa
TimeUomExt.Gat = 'Ga[t]'                          # originally TimeUom.Gat
TimeUomExt.h = 'h'                                # originally TimeUom.h
TimeUomExt.hs = 'hs'                              # originally TimeUom.hs
TimeUomExt.kat = 'ka[t]'                          # originally TimeUom.kat
TimeUomExt.Mat = 'Ma[t]'                          # originally TimeUom.Mat
TimeUomExt.min = 'min'                            # originally TimeUom.min
TimeUomExt.ms = 'ms'                              # originally TimeUom.ms
TimeUomExt.na = 'na'                              # originally TimeUom.na
TimeUomExt.ns = 'ns'                              # originally TimeUom.ns
TimeUomExt.ps = 'ps'                              # originally TimeUom.ps
TimeUomExt.s = 's'                                # originally TimeUom.s
TimeUomExt.Tat = 'Ta[t]'                          # originally TimeUom.Tat
TimeUomExt.us = 'us'                              # originally TimeUom.us
TimeUomExt.wk = 'wk'                              # originally TimeUom.wk
TimeUomExt._InitializeFacetMap(TimeUomExt._CF_pattern,
   TimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimeUomExt', TimeUomExt)
_module_typeBindings.TimeUomExt = TimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstancePerAmountOfSubstanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstancePerAmountOfSubstanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAmountOfSubstanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 124, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstancePerAmountOfSubstanceUom, EnumExtensionPattern, )
AmountOfSubstancePerAmountOfSubstanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstancePerAmountOfSubstanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerAmountOfSubstanceUomExt)
AmountOfSubstancePerAmountOfSubstanceUomExt.emptyString = '%'# originally AmountOfSubstancePerAmountOfSubstanceUom.emptyString
AmountOfSubstancePerAmountOfSubstanceUomExt.molar = '%[molar]'# originally AmountOfSubstancePerAmountOfSubstanceUom.molar
AmountOfSubstancePerAmountOfSubstanceUomExt.Euc = 'Euc'# originally AmountOfSubstancePerAmountOfSubstanceUom.Euc
AmountOfSubstancePerAmountOfSubstanceUomExt.molmol = 'mol/mol'# originally AmountOfSubstancePerAmountOfSubstanceUom.molmol
AmountOfSubstancePerAmountOfSubstanceUomExt.nEuc = 'nEuc'# originally AmountOfSubstancePerAmountOfSubstanceUom.nEuc
AmountOfSubstancePerAmountOfSubstanceUomExt.ppk = 'ppk'# originally AmountOfSubstancePerAmountOfSubstanceUom.ppk
AmountOfSubstancePerAmountOfSubstanceUomExt.ppm = 'ppm'# originally AmountOfSubstancePerAmountOfSubstanceUom.ppm
AmountOfSubstancePerAmountOfSubstanceUomExt._InitializeFacetMap(AmountOfSubstancePerAmountOfSubstanceUomExt._CF_pattern,
   AmountOfSubstancePerAmountOfSubstanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAmountOfSubstanceUomExt', AmountOfSubstancePerAmountOfSubstanceUomExt)
_module_typeBindings.AmountOfSubstancePerAmountOfSubstanceUomExt = AmountOfSubstancePerAmountOfSubstanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ActivityOfRadioactivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ActivityOfRadioactivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActivityOfRadioactivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 127, 1)
    _Documentation = None

    _MemberTypes = ( ActivityOfRadioactivityUom, EnumExtensionPattern, )
ActivityOfRadioactivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ActivityOfRadioactivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ActivityOfRadioactivityUomExt)
ActivityOfRadioactivityUomExt.Bq = 'Bq'           # originally ActivityOfRadioactivityUom.Bq
ActivityOfRadioactivityUomExt.Ci = 'Ci'           # originally ActivityOfRadioactivityUom.Ci
ActivityOfRadioactivityUomExt.GBq = 'GBq'         # originally ActivityOfRadioactivityUom.GBq
ActivityOfRadioactivityUomExt.MBq = 'MBq'         # originally ActivityOfRadioactivityUom.MBq
ActivityOfRadioactivityUomExt.mCi = 'mCi'         # originally ActivityOfRadioactivityUom.mCi
ActivityOfRadioactivityUomExt.nCi = 'nCi'         # originally ActivityOfRadioactivityUom.nCi
ActivityOfRadioactivityUomExt.pCi = 'pCi'         # originally ActivityOfRadioactivityUom.pCi
ActivityOfRadioactivityUomExt.TBq = 'TBq'         # originally ActivityOfRadioactivityUom.TBq
ActivityOfRadioactivityUomExt.uCi = 'uCi'         # originally ActivityOfRadioactivityUom.uCi
ActivityOfRadioactivityUomExt._InitializeFacetMap(ActivityOfRadioactivityUomExt._CF_pattern,
   ActivityOfRadioactivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ActivityOfRadioactivityUomExt', ActivityOfRadioactivityUomExt)
_module_typeBindings.ActivityOfRadioactivityUomExt = ActivityOfRadioactivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyPerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyPerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 130, 1)
    _Documentation = None

    _MemberTypes = ( EnergyPerAreaUom, EnumExtensionPattern, )
EnergyPerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyPerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerAreaUomExt)
EnergyPerAreaUomExt.ergcm2 = 'erg/cm2'            # originally EnergyPerAreaUom.ergcm2
EnergyPerAreaUomExt.Jcm2 = 'J/cm2'                # originally EnergyPerAreaUom.Jcm2
EnergyPerAreaUomExt.Jm2 = 'J/m2'                  # originally EnergyPerAreaUom.Jm2
EnergyPerAreaUomExt.kgf_mcm2 = 'kgf.m/cm2'        # originally EnergyPerAreaUom.kgf_mcm2
EnergyPerAreaUomExt.lbf_ftin2 = 'lbf.ft/in2'      # originally EnergyPerAreaUom.lbf_ftin2
EnergyPerAreaUomExt.mJcm2 = 'mJ/cm2'              # originally EnergyPerAreaUom.mJcm2
EnergyPerAreaUomExt.mJm2 = 'mJ/m2'                # originally EnergyPerAreaUom.mJm2
EnergyPerAreaUomExt.Nm = 'N/m'                    # originally EnergyPerAreaUom.Nm
EnergyPerAreaUomExt._InitializeFacetMap(EnergyPerAreaUomExt._CF_pattern,
   EnergyPerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerAreaUomExt', EnergyPerAreaUomExt)
_module_typeBindings.EnergyPerAreaUomExt = EnergyPerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LuminousEfficacyUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LuminousEfficacyUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousEfficacyUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 211, 1)
    _Documentation = None

    _MemberTypes = ( LuminousEfficacyUom, EnumExtensionPattern, )
LuminousEfficacyUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LuminousEfficacyUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousEfficacyUomExt)
LuminousEfficacyUomExt.lmW = 'lm/W'               # originally LuminousEfficacyUom.lmW
LuminousEfficacyUomExt._InitializeFacetMap(LuminousEfficacyUomExt._CF_pattern,
   LuminousEfficacyUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousEfficacyUomExt', LuminousEfficacyUomExt)
_module_typeBindings.LuminousEfficacyUomExt = LuminousEfficacyUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricResistancePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricResistancePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistancePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 214, 1)
    _Documentation = None

    _MemberTypes = ( ElectricResistancePerLengthUom, EnumExtensionPattern, )
ElectricResistancePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricResistancePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricResistancePerLengthUomExt)
ElectricResistancePerLengthUomExt.ohmm = 'ohm/m'  # originally ElectricResistancePerLengthUom.ohmm
ElectricResistancePerLengthUomExt.uohmft = 'uohm/ft'# originally ElectricResistancePerLengthUom.uohmft
ElectricResistancePerLengthUomExt.uohmm = 'uohm/m'# originally ElectricResistancePerLengthUom.uohmm
ElectricResistancePerLengthUomExt._InitializeFacetMap(ElectricResistancePerLengthUomExt._CF_pattern,
   ElectricResistancePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricResistancePerLengthUomExt', ElectricResistancePerLengthUomExt)
_module_typeBindings.ElectricResistancePerLengthUomExt = ElectricResistancePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LightExposureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LightExposureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LightExposureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LightExposureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 217, 1)
    _Documentation = None

    _MemberTypes = ( LightExposureUom, EnumExtensionPattern, )
LightExposureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LightExposureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LightExposureUomExt)
LightExposureUomExt.footcandle_s = 'footcandle.s' # originally LightExposureUom.footcandle_s
LightExposureUomExt.lx_s = 'lx.s'                 # originally LightExposureUom.lx_s
LightExposureUomExt._InitializeFacetMap(LightExposureUomExt._CF_pattern,
   LightExposureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LightExposureUomExt', LightExposureUomExt)
_module_typeBindings.LightExposureUomExt = LightExposureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 259, 1)
    _Documentation = None

    _MemberTypes = ( EnergyPerLengthUom, EnumExtensionPattern, )
EnergyPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerLengthUomExt)
EnergyPerLengthUomExt.Jm = 'J/m'                  # originally EnergyPerLengthUom.Jm
EnergyPerLengthUomExt.MJm = 'MJ/m'                # originally EnergyPerLengthUom.MJm
EnergyPerLengthUomExt._InitializeFacetMap(EnergyPerLengthUomExt._CF_pattern,
   EnergyPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerLengthUomExt', EnergyPerLengthUomExt)
_module_typeBindings.EnergyPerLengthUomExt = EnergyPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class CationExchangeCapacityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of CationExchangeCapacityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CationExchangeCapacityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 262, 1)
    _Documentation = None

    _MemberTypes = ( CationExchangeCapacityUom, EnumExtensionPattern, )
CationExchangeCapacityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
CationExchangeCapacityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CationExchangeCapacityUomExt)
CationExchangeCapacityUomExt.n01_meqg = '.01 meq/g'# originally CationExchangeCapacityUom.n01_meqg
CationExchangeCapacityUomExt._InitializeFacetMap(CationExchangeCapacityUomExt._CF_pattern,
   CationExchangeCapacityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CationExchangeCapacityUomExt', CationExchangeCapacityUomExt)
_module_typeBindings.CationExchangeCapacityUomExt = CationExchangeCapacityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyPerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyPerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 499, 1)
    _Documentation = None

    _MemberTypes = ( EnergyPerMassUom, EnumExtensionPattern, )
EnergyPerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyPerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerMassUomExt)
EnergyPerMassUomExt.BtuITlbm = 'Btu[IT]/lbm'      # originally EnergyPerMassUom.BtuITlbm
EnergyPerMassUomExt.calthg = 'cal[th]/g'          # originally EnergyPerMassUom.calthg
EnergyPerMassUomExt.calthkg = 'cal[th]/kg'        # originally EnergyPerMassUom.calthkg
EnergyPerMassUomExt.calthlbm = 'cal[th]/lbm'      # originally EnergyPerMassUom.calthlbm
EnergyPerMassUomExt.ergg = 'erg/g'                # originally EnergyPerMassUom.ergg
EnergyPerMassUomExt.ergkg = 'erg/kg'              # originally EnergyPerMassUom.ergkg
EnergyPerMassUomExt.hp_hlbm = 'hp.h/lbm'          # originally EnergyPerMassUom.hp_hlbm
EnergyPerMassUomExt.Jg = 'J/g'                    # originally EnergyPerMassUom.Jg
EnergyPerMassUomExt.Jkg = 'J/kg'                  # originally EnergyPerMassUom.Jkg
EnergyPerMassUomExt.kcalthg = 'kcal[th]/g'        # originally EnergyPerMassUom.kcalthg
EnergyPerMassUomExt.kcalthkg = 'kcal[th]/kg'      # originally EnergyPerMassUom.kcalthkg
EnergyPerMassUomExt.kJkg = 'kJ/kg'                # originally EnergyPerMassUom.kJkg
EnergyPerMassUomExt.kW_hkg = 'kW.h/kg'            # originally EnergyPerMassUom.kW_hkg
EnergyPerMassUomExt.lbf_ftlbm = 'lbf.ft/lbm'      # originally EnergyPerMassUom.lbf_ftlbm
EnergyPerMassUomExt.MJkg = 'MJ/kg'                # originally EnergyPerMassUom.MJkg
EnergyPerMassUomExt.MW_hkg = 'MW.h/kg'            # originally EnergyPerMassUom.MW_hkg
EnergyPerMassUomExt._InitializeFacetMap(EnergyPerMassUomExt._CF_pattern,
   EnergyPerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassUomExt', EnergyPerMassUomExt)
_module_typeBindings.EnergyPerMassUomExt = EnergyPerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticVectorPotentialUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticVectorPotentialUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticVectorPotentialUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 641, 1)
    _Documentation = None

    _MemberTypes = ( MagneticVectorPotentialUom, EnumExtensionPattern, )
MagneticVectorPotentialUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticVectorPotentialUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticVectorPotentialUomExt)
MagneticVectorPotentialUomExt.Wbm = 'Wb/m'        # originally MagneticVectorPotentialUom.Wbm
MagneticVectorPotentialUomExt.Wbmm = 'Wb/mm'      # originally MagneticVectorPotentialUom.Wbmm
MagneticVectorPotentialUomExt._InitializeFacetMap(MagneticVectorPotentialUomExt._CF_pattern,
   MagneticVectorPotentialUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticVectorPotentialUomExt', MagneticVectorPotentialUomExt)
_module_typeBindings.MagneticVectorPotentialUomExt = MagneticVectorPotentialUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricChargePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricChargePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 644, 1)
    _Documentation = None

    _MemberTypes = ( ElectricChargePerAreaUom, EnumExtensionPattern, )
ElectricChargePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricChargePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerAreaUomExt)
ElectricChargePerAreaUomExt.Ccm2 = 'C/cm2'        # originally ElectricChargePerAreaUom.Ccm2
ElectricChargePerAreaUomExt.Cm2 = 'C/m2'          # originally ElectricChargePerAreaUom.Cm2
ElectricChargePerAreaUomExt.Cmm2 = 'C/mm2'        # originally ElectricChargePerAreaUom.Cmm2
ElectricChargePerAreaUomExt.mCm2 = 'mC/m2'        # originally ElectricChargePerAreaUom.mCm2
ElectricChargePerAreaUomExt._InitializeFacetMap(ElectricChargePerAreaUomExt._CF_pattern,
   ElectricChargePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerAreaUomExt', ElectricChargePerAreaUomExt)
_module_typeBindings.ElectricChargePerAreaUomExt = ElectricChargePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TimePerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TimePerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 647, 1)
    _Documentation = None

    _MemberTypes = ( TimePerTimeUom, EnumExtensionPattern, )
TimePerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TimePerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerTimeUomExt)
TimePerTimeUomExt.emptyString = '%'               # originally TimePerTimeUom.emptyString
TimePerTimeUomExt.Euc = 'Euc'                     # originally TimePerTimeUom.Euc
TimePerTimeUomExt.mss = 'ms/s'                    # originally TimePerTimeUom.mss
TimePerTimeUomExt.ss = 's/s'                      # originally TimePerTimeUom.ss
TimePerTimeUomExt._InitializeFacetMap(TimePerTimeUomExt._CF_pattern,
   TimePerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerTimeUomExt', TimePerTimeUomExt)
_module_typeBindings.TimePerTimeUomExt = TimePerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PermeabilityLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PermeabilityLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 650, 1)
    _Documentation = None

    _MemberTypes = ( PermeabilityLengthUom, EnumExtensionPattern, )
PermeabilityLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PermeabilityLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermeabilityLengthUomExt)
PermeabilityLengthUomExt.D_ft = 'D.ft'            # originally PermeabilityLengthUom.D_ft
PermeabilityLengthUomExt.D_m = 'D.m'              # originally PermeabilityLengthUom.D_m
PermeabilityLengthUomExt.mD_ft = 'mD.ft'          # originally PermeabilityLengthUom.mD_ft
PermeabilityLengthUomExt.mD_m = 'mD.m'            # originally PermeabilityLengthUom.mD_m
PermeabilityLengthUomExt.TDAPI_m = 'TD[API].m'    # originally PermeabilityLengthUom.TDAPI_m
PermeabilityLengthUomExt._InitializeFacetMap(PermeabilityLengthUomExt._CF_pattern,
   PermeabilityLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermeabilityLengthUomExt', PermeabilityLengthUomExt)
_module_typeBindings.PermeabilityLengthUomExt = PermeabilityLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LogarithmicPowerRatioPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LogarithmicPowerRatioPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 672, 1)
    _Documentation = None

    _MemberTypes = ( LogarithmicPowerRatioPerLengthUom, EnumExtensionPattern, )
LogarithmicPowerRatioPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LogarithmicPowerRatioPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LogarithmicPowerRatioPerLengthUomExt)
LogarithmicPowerRatioPerLengthUomExt.Bm = 'B/m'   # originally LogarithmicPowerRatioPerLengthUom.Bm
LogarithmicPowerRatioPerLengthUomExt.dBft = 'dB/ft'# originally LogarithmicPowerRatioPerLengthUom.dBft
LogarithmicPowerRatioPerLengthUomExt.dBkm = 'dB/km'# originally LogarithmicPowerRatioPerLengthUom.dBkm
LogarithmicPowerRatioPerLengthUomExt.dBm = 'dB/m' # originally LogarithmicPowerRatioPerLengthUom.dBm
LogarithmicPowerRatioPerLengthUomExt._InitializeFacetMap(LogarithmicPowerRatioPerLengthUomExt._CF_pattern,
   LogarithmicPowerRatioPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioPerLengthUomExt', LogarithmicPowerRatioPerLengthUomExt)
_module_typeBindings.LogarithmicPowerRatioPerLengthUomExt = LogarithmicPowerRatioPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricConductanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricConductanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 928, 1)
    _Documentation = None

    _MemberTypes = ( ElectricConductanceUom, EnumExtensionPattern, )
ElectricConductanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricConductanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricConductanceUomExt)
ElectricConductanceUomExt.cS = 'cS'               # originally ElectricConductanceUom.cS
ElectricConductanceUomExt.dS = 'dS'               # originally ElectricConductanceUom.dS
ElectricConductanceUomExt.ES = 'ES'               # originally ElectricConductanceUom.ES
ElectricConductanceUomExt.fS = 'fS'               # originally ElectricConductanceUom.fS
ElectricConductanceUomExt.GS = 'GS'               # originally ElectricConductanceUom.GS
ElectricConductanceUomExt.kS = 'kS'               # originally ElectricConductanceUom.kS
ElectricConductanceUomExt.mS = 'mS'               # originally ElectricConductanceUom.mS
ElectricConductanceUomExt.MS = 'MS'               # originally ElectricConductanceUom.MS
ElectricConductanceUomExt.nS = 'nS'               # originally ElectricConductanceUom.nS
ElectricConductanceUomExt.pS = 'pS'               # originally ElectricConductanceUom.pS
ElectricConductanceUomExt.S = 'S'                 # originally ElectricConductanceUom.S
ElectricConductanceUomExt.TS = 'TS'               # originally ElectricConductanceUom.TS
ElectricConductanceUomExt.uS = 'uS'               # originally ElectricConductanceUom.uS
ElectricConductanceUomExt._InitializeFacetMap(ElectricConductanceUomExt._CF_pattern,
   ElectricConductanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricConductanceUomExt', ElectricConductanceUomExt)
_module_typeBindings.ElectricConductanceUomExt = ElectricConductanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MolarVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MolarVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MolarVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 931, 1)
    _Documentation = None

    _MemberTypes = ( MolarVolumeUom, EnumExtensionPattern, )
MolarVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MolarVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarVolumeUomExt)
MolarVolumeUomExt.dm3kmol = 'dm3/kmol'            # originally MolarVolumeUom.dm3kmol
MolarVolumeUomExt.ft3lbmol = 'ft3/lbmol'          # originally MolarVolumeUom.ft3lbmol
MolarVolumeUomExt.Lkmol = 'L/kmol'                # originally MolarVolumeUom.Lkmol
MolarVolumeUomExt.Lmol = 'L/mol'                  # originally MolarVolumeUom.Lmol
MolarVolumeUomExt.m3kmol = 'm3/kmol'              # originally MolarVolumeUom.m3kmol
MolarVolumeUomExt.m3mol = 'm3/mol'                # originally MolarVolumeUom.m3mol
MolarVolumeUomExt._InitializeFacetMap(MolarVolumeUomExt._CF_pattern,
   MolarVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarVolumeUomExt', MolarVolumeUomExt)
_module_typeBindings.MolarVolumeUomExt = MolarVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 934, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerAreaUom, EnumExtensionPattern, )
VolumePerTimePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerAreaUomExt)
VolumePerTimePerAreaUomExt.ft3min_ft2 = 'ft3/(min.ft2)'# originally VolumePerTimePerAreaUom.ft3min_ft2
VolumePerTimePerAreaUomExt.ft3s_ft2 = 'ft3/(s.ft2)'# originally VolumePerTimePerAreaUom.ft3s_ft2
VolumePerTimePerAreaUomExt.galUKh_ft2 = 'gal[UK]/(h.ft2)'# originally VolumePerTimePerAreaUom.galUKh_ft2
VolumePerTimePerAreaUomExt.galUKh_in2 = 'gal[UK]/(h.in2)'# originally VolumePerTimePerAreaUom.galUKh_in2
VolumePerTimePerAreaUomExt.galUKmin_ft2 = 'gal[UK]/(min.ft2)'# originally VolumePerTimePerAreaUom.galUKmin_ft2
VolumePerTimePerAreaUomExt.galUSh_ft2 = 'gal[US]/(h.ft2)'# originally VolumePerTimePerAreaUom.galUSh_ft2
VolumePerTimePerAreaUomExt.galUSh_in2 = 'gal[US]/(h.in2)'# originally VolumePerTimePerAreaUom.galUSh_in2
VolumePerTimePerAreaUomExt.galUSmin_ft2 = 'gal[US]/(min.ft2)'# originally VolumePerTimePerAreaUom.galUSmin_ft2
VolumePerTimePerAreaUomExt.m3s_m2 = 'm3/(s.m2)'   # originally VolumePerTimePerAreaUom.m3s_m2
VolumePerTimePerAreaUomExt._InitializeFacetMap(VolumePerTimePerAreaUomExt._CF_pattern,
   VolumePerTimePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerAreaUomExt', VolumePerTimePerAreaUomExt)
_module_typeBindings.VolumePerTimePerAreaUomExt = VolumePerTimePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MomentumUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MomentumUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MomentumUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentumUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 946, 1)
    _Documentation = None

    _MemberTypes = ( MomentumUom, EnumExtensionPattern, )
MomentumUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MomentumUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentumUomExt)
MomentumUomExt.kg_ms = 'kg.m/s'                   # originally MomentumUom.kg_ms
MomentumUomExt.lbm_fts = 'lbm.ft/s'               # originally MomentumUom.lbm_fts
MomentumUomExt._InitializeFacetMap(MomentumUomExt._CF_pattern,
   MomentumUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentumUomExt', MomentumUomExt)
_module_typeBindings.MomentumUomExt = MomentumUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressurePerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressurePerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 956, 1)
    _Documentation = None

    _MemberTypes = ( PressurePerPressureUom, EnumExtensionPattern, )
PressurePerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressurePerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerPressureUomExt)
PressurePerPressureUomExt.atmatm = 'atm/atm'      # originally PressurePerPressureUom.atmatm
PressurePerPressureUomExt.barbar = 'bar/bar'      # originally PressurePerPressureUom.barbar
PressurePerPressureUomExt.Euc = 'Euc'             # originally PressurePerPressureUom.Euc
PressurePerPressureUomExt.kPakPa = 'kPa/kPa'      # originally PressurePerPressureUom.kPakPa
PressurePerPressureUomExt.MPaMPa = 'MPa/MPa'      # originally PressurePerPressureUom.MPaMPa
PressurePerPressureUomExt.PaPa = 'Pa/Pa'          # originally PressurePerPressureUom.PaPa
PressurePerPressureUomExt.psipsi = 'psi/psi'      # originally PressurePerPressureUom.psipsi
PressurePerPressureUomExt._InitializeFacetMap(PressurePerPressureUomExt._CF_pattern,
   PressurePerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerPressureUomExt', PressurePerPressureUomExt)
_module_typeBindings.PressurePerPressureUomExt = PressurePerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerEnergyUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerEnergyUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerEnergyUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 968, 1)
    _Documentation = None

    _MemberTypes = ( MassPerEnergyUom, EnumExtensionPattern, )
MassPerEnergyUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerEnergyUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerEnergyUomExt)
MassPerEnergyUomExt.kgkW_h = 'kg/(kW.h)'          # originally MassPerEnergyUom.kgkW_h
MassPerEnergyUomExt.kgJ = 'kg/J'                  # originally MassPerEnergyUom.kgJ
MassPerEnergyUomExt.kgMJ = 'kg/MJ'                # originally MassPerEnergyUom.kgMJ
MassPerEnergyUomExt.lbmhp_h = 'lbm/(hp.h)'        # originally MassPerEnergyUom.lbmhp_h
MassPerEnergyUomExt.mgJ = 'mg/J'                  # originally MassPerEnergyUom.mgJ
MassPerEnergyUomExt._InitializeFacetMap(MassPerEnergyUomExt._CF_pattern,
   MassPerEnergyUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerEnergyUomExt', MassPerEnergyUomExt)
_module_typeBindings.MassPerEnergyUomExt = MassPerEnergyUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressureSquaredUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressureSquaredUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressureSquaredUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 971, 1)
    _Documentation = None

    _MemberTypes = ( PressureSquaredUom, EnumExtensionPattern, )
PressureSquaredUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressureSquaredUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureSquaredUomExt)
PressureSquaredUomExt.bar2 = 'bar2'               # originally PressureSquaredUom.bar2
PressureSquaredUomExt.GPa2 = 'GPa2'               # originally PressureSquaredUom.GPa2
PressureSquaredUomExt.kPa2 = 'kPa2'               # originally PressureSquaredUom.kPa2
PressureSquaredUomExt.kpsi2 = 'kpsi2'             # originally PressureSquaredUom.kpsi2
PressureSquaredUomExt.Pa2 = 'Pa2'                 # originally PressureSquaredUom.Pa2
PressureSquaredUomExt.psi2 = 'psi2'               # originally PressureSquaredUom.psi2
PressureSquaredUomExt._InitializeFacetMap(PressureSquaredUomExt._CF_pattern,
   PressureSquaredUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureSquaredUomExt', PressureSquaredUomExt)
_module_typeBindings.PressureSquaredUomExt = PressureSquaredUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DipoleMomentUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DipoleMomentUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DipoleMomentUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DipoleMomentUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 974, 1)
    _Documentation = None

    _MemberTypes = ( DipoleMomentUom, EnumExtensionPattern, )
DipoleMomentUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DipoleMomentUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DipoleMomentUomExt)
DipoleMomentUomExt.C_m = 'C.m'                    # originally DipoleMomentUom.C_m
DipoleMomentUomExt._InitializeFacetMap(DipoleMomentUomExt._CF_pattern,
   DipoleMomentUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DipoleMomentUomExt', DipoleMomentUomExt)
_module_typeBindings.DipoleMomentUomExt = DipoleMomentUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AttenuationPerFrequencyIntervalUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AttenuationPerFrequencyIntervalUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttenuationPerFrequencyIntervalUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 977, 1)
    _Documentation = None

    _MemberTypes = ( AttenuationPerFrequencyIntervalUom, EnumExtensionPattern, )
AttenuationPerFrequencyIntervalUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AttenuationPerFrequencyIntervalUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AttenuationPerFrequencyIntervalUomExt)
AttenuationPerFrequencyIntervalUomExt.BO = 'B/O'  # originally AttenuationPerFrequencyIntervalUom.BO
AttenuationPerFrequencyIntervalUomExt.dBO = 'dB/O'# originally AttenuationPerFrequencyIntervalUom.dBO
AttenuationPerFrequencyIntervalUomExt._InitializeFacetMap(AttenuationPerFrequencyIntervalUomExt._CF_pattern,
   AttenuationPerFrequencyIntervalUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AttenuationPerFrequencyIntervalUomExt', AttenuationPerFrequencyIntervalUomExt)
_module_typeBindings.AttenuationPerFrequencyIntervalUomExt = AttenuationPerFrequencyIntervalUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticFluxUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticFluxUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1153, 1)
    _Documentation = None

    _MemberTypes = ( MagneticFluxUom, EnumExtensionPattern, )
MagneticFluxUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticFluxUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxUomExt)
MagneticFluxUomExt.cWb = 'cWb'                    # originally MagneticFluxUom.cWb
MagneticFluxUomExt.dWb = 'dWb'                    # originally MagneticFluxUom.dWb
MagneticFluxUomExt.EWb = 'EWb'                    # originally MagneticFluxUom.EWb
MagneticFluxUomExt.fWb = 'fWb'                    # originally MagneticFluxUom.fWb
MagneticFluxUomExt.GWb = 'GWb'                    # originally MagneticFluxUom.GWb
MagneticFluxUomExt.kWb = 'kWb'                    # originally MagneticFluxUom.kWb
MagneticFluxUomExt.mWb = 'mWb'                    # originally MagneticFluxUom.mWb
MagneticFluxUomExt.MWb = 'MWb'                    # originally MagneticFluxUom.MWb
MagneticFluxUomExt.nWb = 'nWb'                    # originally MagneticFluxUom.nWb
MagneticFluxUomExt.pWb = 'pWb'                    # originally MagneticFluxUom.pWb
MagneticFluxUomExt.TWb = 'TWb'                    # originally MagneticFluxUom.TWb
MagneticFluxUomExt.uWb = 'uWb'                    # originally MagneticFluxUom.uWb
MagneticFluxUomExt.Wb = 'Wb'                      # originally MagneticFluxUom.Wb
MagneticFluxUomExt._InitializeFacetMap(MagneticFluxUomExt._CF_pattern,
   MagneticFluxUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxUomExt', MagneticFluxUomExt)
_module_typeBindings.MagneticFluxUomExt = MagneticFluxUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1171, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerVolumeUom, EnumExtensionPattern, )
AreaPerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerVolumeUomExt)
AreaPerVolumeUomExt.n1m = '1/m'                   # originally AreaPerVolumeUom.n1m
AreaPerVolumeUomExt.bcm3 = 'b/cm3'                # originally AreaPerVolumeUom.bcm3
AreaPerVolumeUomExt.cu = 'cu'                     # originally AreaPerVolumeUom.cu
AreaPerVolumeUomExt.ft2in3 = 'ft2/in3'            # originally AreaPerVolumeUom.ft2in3
AreaPerVolumeUomExt.m2cm3 = 'm2/cm3'              # originally AreaPerVolumeUom.m2cm3
AreaPerVolumeUomExt.m2m3 = 'm2/m3'                # originally AreaPerVolumeUom.m2m3
AreaPerVolumeUomExt._InitializeFacetMap(AreaPerVolumeUomExt._CF_pattern,
   AreaPerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerVolumeUomExt', AreaPerVolumeUomExt)
_module_typeBindings.AreaPerVolumeUomExt = AreaPerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TemperatureIntervalPerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TemperatureIntervalPerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1174, 1)
    _Documentation = None

    _MemberTypes = ( TemperatureIntervalPerPressureUom, EnumExtensionPattern, )
TemperatureIntervalPerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TemperatureIntervalPerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerPressureUomExt)
TemperatureIntervalPerPressureUomExt.deltaCkPa = 'deltaC/kPa'# originally TemperatureIntervalPerPressureUom.deltaCkPa
TemperatureIntervalPerPressureUomExt.deltaFpsi = 'deltaF/psi'# originally TemperatureIntervalPerPressureUom.deltaFpsi
TemperatureIntervalPerPressureUomExt.deltaKPa = 'deltaK/Pa'# originally TemperatureIntervalPerPressureUom.deltaKPa
TemperatureIntervalPerPressureUomExt._InitializeFacetMap(TemperatureIntervalPerPressureUomExt._CF_pattern,
   TemperatureIntervalPerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerPressureUomExt', TemperatureIntervalPerPressureUomExt)
_module_typeBindings.TemperatureIntervalPerPressureUomExt = TemperatureIntervalPerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1409, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstanceUom, EnumExtensionPattern, )
AmountOfSubstanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstanceUomExt)
AmountOfSubstanceUomExt.kmol = 'kmol'             # originally AmountOfSubstanceUom.kmol
AmountOfSubstanceUomExt.lbmol = 'lbmol'           # originally AmountOfSubstanceUom.lbmol
AmountOfSubstanceUomExt.mmol = 'mmol'             # originally AmountOfSubstanceUom.mmol
AmountOfSubstanceUomExt.mol = 'mol'               # originally AmountOfSubstanceUom.mol
AmountOfSubstanceUomExt.umol = 'umol'             # originally AmountOfSubstanceUom.umol
AmountOfSubstanceUomExt._InitializeFacetMap(AmountOfSubstanceUomExt._CF_pattern,
   AmountOfSubstanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstanceUomExt', AmountOfSubstanceUomExt)
_module_typeBindings.AmountOfSubstanceUomExt = AmountOfSubstanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MolarHeatCapacityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MolarHeatCapacityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarHeatCapacityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1475, 1)
    _Documentation = None

    _MemberTypes = ( MolarHeatCapacityUom, EnumExtensionPattern, )
MolarHeatCapacityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MolarHeatCapacityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarHeatCapacityUomExt)
MolarHeatCapacityUomExt.BtuITlbmol_deltaF = 'Btu[IT]/(lbmol.deltaF)'# originally MolarHeatCapacityUom.BtuITlbmol_deltaF
MolarHeatCapacityUomExt.calthmol_deltaC = 'cal[th]/(mol.deltaC)'# originally MolarHeatCapacityUom.calthmol_deltaC
MolarHeatCapacityUomExt.Jmol_deltaK = 'J/(mol.deltaK)'# originally MolarHeatCapacityUom.Jmol_deltaK
MolarHeatCapacityUomExt.kJkmol_deltaK = 'kJ/(kmol.deltaK)'# originally MolarHeatCapacityUom.kJkmol_deltaK
MolarHeatCapacityUomExt._InitializeFacetMap(MolarHeatCapacityUomExt._CF_pattern,
   MolarHeatCapacityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarHeatCapacityUomExt', MolarHeatCapacityUomExt)
_module_typeBindings.MolarHeatCapacityUomExt = MolarHeatCapacityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MobilityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MobilityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MobilityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobilityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1540, 1)
    _Documentation = None

    _MemberTypes = ( MobilityUom, EnumExtensionPattern, )
MobilityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MobilityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MobilityUomExt)
MobilityUomExt.DPa_s = 'D/(Pa.s)'                 # originally MobilityUom.DPa_s
MobilityUomExt.DcP = 'D/cP'                       # originally MobilityUom.DcP
MobilityUomExt.mD_ft2lbf_s = 'mD.ft2/(lbf.s)'     # originally MobilityUom.mD_ft2lbf_s
MobilityUomExt.mD_in2lbf_s = 'mD.in2/(lbf.s)'     # originally MobilityUom.mD_in2lbf_s
MobilityUomExt.mDPa_s = 'mD/(Pa.s)'               # originally MobilityUom.mDPa_s
MobilityUomExt.mDcP = 'mD/cP'                     # originally MobilityUom.mDcP
MobilityUomExt.TDAPIPa_s = 'TD[API]/(Pa.s)'       # originally MobilityUom.TDAPIPa_s
MobilityUomExt._InitializeFacetMap(MobilityUomExt._CF_pattern,
   MobilityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MobilityUomExt', MobilityUomExt)
_module_typeBindings.MobilityUomExt = MobilityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1562, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalVolumeUom, EnumExtensionPattern, )
ReciprocalVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalVolumeUomExt)
ReciprocalVolumeUomExt.n1bbl = '1/bbl'            # originally ReciprocalVolumeUom.n1bbl
ReciprocalVolumeUomExt.n1ft3 = '1/ft3'            # originally ReciprocalVolumeUom.n1ft3
ReciprocalVolumeUomExt.n1galUK = '1/gal[UK]'      # originally ReciprocalVolumeUom.n1galUK
ReciprocalVolumeUomExt.n1galUS = '1/gal[US]'      # originally ReciprocalVolumeUom.n1galUS
ReciprocalVolumeUomExt.n1L = '1/L'                # originally ReciprocalVolumeUom.n1L
ReciprocalVolumeUomExt.n1m3 = '1/m3'              # originally ReciprocalVolumeUom.n1m3
ReciprocalVolumeUomExt._InitializeFacetMap(ReciprocalVolumeUomExt._CF_pattern,
   ReciprocalVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalVolumeUomExt', ReciprocalVolumeUomExt)
_module_typeBindings.ReciprocalVolumeUomExt = ReciprocalVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermalDiffusivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermalDiffusivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDiffusivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1565, 1)
    _Documentation = None

    _MemberTypes = ( ThermalDiffusivityUom, EnumExtensionPattern, )
ThermalDiffusivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermalDiffusivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalDiffusivityUomExt)
ThermalDiffusivityUomExt.cm2s = 'cm2/s'           # originally ThermalDiffusivityUom.cm2s
ThermalDiffusivityUomExt.ft2h = 'ft2/h'           # originally ThermalDiffusivityUom.ft2h
ThermalDiffusivityUomExt.ft2s = 'ft2/s'           # originally ThermalDiffusivityUom.ft2s
ThermalDiffusivityUomExt.in2s = 'in2/s'           # originally ThermalDiffusivityUom.in2s
ThermalDiffusivityUomExt.m2h = 'm2/h'             # originally ThermalDiffusivityUom.m2h
ThermalDiffusivityUomExt.m2s = 'm2/s'             # originally ThermalDiffusivityUom.m2s
ThermalDiffusivityUomExt.mm2s = 'mm2/s'           # originally ThermalDiffusivityUom.mm2s
ThermalDiffusivityUomExt._InitializeFacetMap(ThermalDiffusivityUomExt._CF_pattern,
   ThermalDiffusivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalDiffusivityUomExt', ThermalDiffusivityUomExt)
_module_typeBindings.ThermalDiffusivityUomExt = ThermalDiffusivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DiffusiveTimeOfFlightUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DiffusiveTimeOfFlightUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusiveTimeOfFlightUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1568, 1)
    _Documentation = None

    _MemberTypes = ( DiffusiveTimeOfFlightUom, EnumExtensionPattern, )
DiffusiveTimeOfFlightUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DiffusiveTimeOfFlightUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DiffusiveTimeOfFlightUomExt)
DiffusiveTimeOfFlightUomExt.h0_5 = 'h(0.5)'       # originally DiffusiveTimeOfFlightUom.h0_5
DiffusiveTimeOfFlightUomExt.s0_5 = 's(0.5)'       # originally DiffusiveTimeOfFlightUom.s0_5
DiffusiveTimeOfFlightUomExt._InitializeFacetMap(DiffusiveTimeOfFlightUomExt._CF_pattern,
   DiffusiveTimeOfFlightUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DiffusiveTimeOfFlightUomExt', DiffusiveTimeOfFlightUomExt)
_module_typeBindings.DiffusiveTimeOfFlightUomExt = DiffusiveTimeOfFlightUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MolecularWeightUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MolecularWeightUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MolecularWeightUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolecularWeightUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1571, 1)
    _Documentation = None

    _MemberTypes = ( MolecularWeightUom, EnumExtensionPattern, )
MolecularWeightUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MolecularWeightUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolecularWeightUomExt)
MolecularWeightUomExt.gmol = 'g/mol'              # originally MolecularWeightUom.gmol
MolecularWeightUomExt.kgmol = 'kg/mol'            # originally MolecularWeightUom.kgmol
MolecularWeightUomExt.lbmlbmol = 'lbm/lbmol'      # originally MolecularWeightUom.lbmlbmol
MolecularWeightUomExt._InitializeFacetMap(MolecularWeightUomExt._CF_pattern,
   MolecularWeightUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolecularWeightUomExt', MolecularWeightUomExt)
_module_typeBindings.MolecularWeightUomExt = MolecularWeightUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1643, 1)
    _Documentation = None

    _MemberTypes = ( MassPerLengthUom, EnumExtensionPattern, )
MassPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerLengthUomExt)
MassPerLengthUomExt.kg_mcm2 = 'kg.m/cm2'          # originally MassPerLengthUom.kg_mcm2
MassPerLengthUomExt.kgm = 'kg/m'                  # originally MassPerLengthUom.kgm
MassPerLengthUomExt.klbmin = 'klbm/in'            # originally MassPerLengthUom.klbmin
MassPerLengthUomExt.lbmft = 'lbm/ft'              # originally MassPerLengthUom.lbmft
MassPerLengthUomExt.Mgin = 'Mg/in'                # originally MassPerLengthUom.Mgin
MassPerLengthUomExt._InitializeFacetMap(MassPerLengthUomExt._CF_pattern,
   MassPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerLengthUomExt', MassPerLengthUomExt)
_module_typeBindings.MassPerLengthUomExt = MassPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}APINeutronUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class APINeutronUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of APINeutronUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APINeutronUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1729, 1)
    _Documentation = None

    _MemberTypes = ( APINeutronUom, EnumExtensionPattern, )
APINeutronUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
APINeutronUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APINeutronUomExt)
APINeutronUomExt.nAPI = 'nAPI'                    # originally APINeutronUom.nAPI
APINeutronUomExt._InitializeFacetMap(APINeutronUomExt._CF_pattern,
   APINeutronUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APINeutronUomExt', APINeutronUomExt)
_module_typeBindings.APINeutronUomExt = APINeutronUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AngularAccelerationUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AngularAccelerationUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularAccelerationUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1732, 1)
    _Documentation = None

    _MemberTypes = ( AngularAccelerationUom, EnumExtensionPattern, )
AngularAccelerationUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AngularAccelerationUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AngularAccelerationUomExt)
AngularAccelerationUomExt.rads2 = 'rad/s2'        # originally AngularAccelerationUom.rads2
AngularAccelerationUomExt.rpms = 'rpm/s'          # originally AngularAccelerationUom.rpms
AngularAccelerationUomExt._InitializeFacetMap(AngularAccelerationUomExt._CF_pattern,
   AngularAccelerationUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AngularAccelerationUomExt', AngularAccelerationUomExt)
_module_typeBindings.AngularAccelerationUomExt = AngularAccelerationUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}IlluminanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class IlluminanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of IlluminanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IlluminanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1828, 1)
    _Documentation = None

    _MemberTypes = ( IlluminanceUom, EnumExtensionPattern, )
IlluminanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
IlluminanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IlluminanceUomExt)
IlluminanceUomExt.footcandle = 'footcandle'       # originally IlluminanceUom.footcandle
IlluminanceUomExt.klx = 'klx'                     # originally IlluminanceUom.klx
IlluminanceUomExt.lmm2 = 'lm/m2'                  # originally IlluminanceUom.lmm2
IlluminanceUomExt.lx = 'lx'                       # originally IlluminanceUom.lx
IlluminanceUomExt._InitializeFacetMap(IlluminanceUomExt._CF_pattern,
   IlluminanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IlluminanceUomExt', IlluminanceUomExt)
_module_typeBindings.IlluminanceUomExt = IlluminanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TemperatureIntervalUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TemperatureIntervalUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1994, 1)
    _Documentation = None

    _MemberTypes = ( TemperatureIntervalUom, EnumExtensionPattern, )
TemperatureIntervalUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TemperatureIntervalUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalUomExt)
TemperatureIntervalUomExt.deltaC = 'deltaC'       # originally TemperatureIntervalUom.deltaC
TemperatureIntervalUomExt.deltaF = 'deltaF'       # originally TemperatureIntervalUom.deltaF
TemperatureIntervalUomExt.deltaK = 'deltaK'       # originally TemperatureIntervalUom.deltaK
TemperatureIntervalUomExt.deltaR = 'deltaR'       # originally TemperatureIntervalUom.deltaR
TemperatureIntervalUomExt._InitializeFacetMap(TemperatureIntervalUomExt._CF_pattern,
   TemperatureIntervalUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalUomExt', TemperatureIntervalUomExt)
_module_typeBindings.TemperatureIntervalUomExt = TemperatureIntervalUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PowerPerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PowerPerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 1997, 1)
    _Documentation = None

    _MemberTypes = ( PowerPerAreaUom, EnumExtensionPattern, )
PowerPerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PowerPerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerAreaUomExt)
PowerPerAreaUomExt.BtuITh_ft2 = 'Btu[IT]/(h.ft2)' # originally PowerPerAreaUom.BtuITh_ft2
PowerPerAreaUomExt.BtuITs_ft2 = 'Btu[IT]/(s.ft2)' # originally PowerPerAreaUom.BtuITs_ft2
PowerPerAreaUomExt.calthh_cm2 = 'cal[th]/(h.cm2)' # originally PowerPerAreaUom.calthh_cm2
PowerPerAreaUomExt.hpin2 = 'hp/in2'               # originally PowerPerAreaUom.hpin2
PowerPerAreaUomExt.hphydin2 = 'hp[hyd]/in2'       # originally PowerPerAreaUom.hphydin2
PowerPerAreaUomExt.kWcm2 = 'kW/cm2'               # originally PowerPerAreaUom.kWcm2
PowerPerAreaUomExt.kWm2 = 'kW/m2'                 # originally PowerPerAreaUom.kWm2
PowerPerAreaUomExt.mWm2 = 'mW/m2'                 # originally PowerPerAreaUom.mWm2
PowerPerAreaUomExt.ucalths_cm2 = 'ucal[th]/(s.cm2)'# originally PowerPerAreaUom.ucalths_cm2
PowerPerAreaUomExt.Wcm2 = 'W/cm2'                 # originally PowerPerAreaUom.Wcm2
PowerPerAreaUomExt.Wm2 = 'W/m2'                   # originally PowerPerAreaUom.Wm2
PowerPerAreaUomExt.Wmm2 = 'W/mm2'                 # originally PowerPerAreaUom.Wmm2
PowerPerAreaUomExt._InitializeFacetMap(PowerPerAreaUomExt._CF_pattern,
   PowerPerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerAreaUomExt', PowerPerAreaUomExt)
_module_typeBindings.PowerPerAreaUomExt = PowerPerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PotentialDifferencePerPowerDropUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PotentialDifferencePerPowerDropUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PotentialDifferencePerPowerDropUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2000, 1)
    _Documentation = None

    _MemberTypes = ( PotentialDifferencePerPowerDropUom, EnumExtensionPattern, )
PotentialDifferencePerPowerDropUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PotentialDifferencePerPowerDropUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PotentialDifferencePerPowerDropUomExt)
PotentialDifferencePerPowerDropUomExt.VB = 'V/B'  # originally PotentialDifferencePerPowerDropUom.VB
PotentialDifferencePerPowerDropUomExt.VdB = 'V/dB'# originally PotentialDifferencePerPowerDropUom.VdB
PotentialDifferencePerPowerDropUomExt._InitializeFacetMap(PotentialDifferencePerPowerDropUomExt._CF_pattern,
   PotentialDifferencePerPowerDropUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PotentialDifferencePerPowerDropUomExt', PotentialDifferencePerPowerDropUomExt)
_module_typeBindings.PotentialDifferencePerPowerDropUomExt = PotentialDifferencePerPowerDropUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class IsothermalCompressibilityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of IsothermalCompressibilityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IsothermalCompressibilityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2125, 1)
    _Documentation = None

    _MemberTypes = ( IsothermalCompressibilityUom, EnumExtensionPattern, )
IsothermalCompressibilityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
IsothermalCompressibilityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IsothermalCompressibilityUomExt)
IsothermalCompressibilityUomExt.dm3kW_h = 'dm3/(kW.h)'# originally IsothermalCompressibilityUom.dm3kW_h
IsothermalCompressibilityUomExt.dm3MJ = 'dm3/MJ'  # originally IsothermalCompressibilityUom.dm3MJ
IsothermalCompressibilityUomExt.m3kW_h = 'm3/(kW.h)'# originally IsothermalCompressibilityUom.m3kW_h
IsothermalCompressibilityUomExt.m3J = 'm3/J'      # originally IsothermalCompressibilityUom.m3J
IsothermalCompressibilityUomExt.mm3J = 'mm3/J'    # originally IsothermalCompressibilityUom.mm3J
IsothermalCompressibilityUomExt.ptUKhp_h = 'pt[UK]/(hp.h)'# originally IsothermalCompressibilityUom.ptUKhp_h
IsothermalCompressibilityUomExt._InitializeFacetMap(IsothermalCompressibilityUomExt._CF_pattern,
   IsothermalCompressibilityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IsothermalCompressibilityUomExt', IsothermalCompressibilityUomExt)
_module_typeBindings.IsothermalCompressibilityUomExt = IsothermalCompressibilityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TemperatureIntervalPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TemperatureIntervalPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2305, 1)
    _Documentation = None

    _MemberTypes = ( TemperatureIntervalPerTimeUom, EnumExtensionPattern, )
TemperatureIntervalPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TemperatureIntervalPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerTimeUomExt)
TemperatureIntervalPerTimeUomExt.deltaCh = 'deltaC/h'# originally TemperatureIntervalPerTimeUom.deltaCh
TemperatureIntervalPerTimeUomExt.deltaCmin = 'deltaC/min'# originally TemperatureIntervalPerTimeUom.deltaCmin
TemperatureIntervalPerTimeUomExt.deltaCs = 'deltaC/s'# originally TemperatureIntervalPerTimeUom.deltaCs
TemperatureIntervalPerTimeUomExt.deltaFh = 'deltaF/h'# originally TemperatureIntervalPerTimeUom.deltaFh
TemperatureIntervalPerTimeUomExt.deltaFmin = 'deltaF/min'# originally TemperatureIntervalPerTimeUom.deltaFmin
TemperatureIntervalPerTimeUomExt.deltaFs = 'deltaF/s'# originally TemperatureIntervalPerTimeUom.deltaFs
TemperatureIntervalPerTimeUomExt.deltaKs = 'deltaK/s'# originally TemperatureIntervalPerTimeUom.deltaKs
TemperatureIntervalPerTimeUomExt._InitializeFacetMap(TemperatureIntervalPerTimeUomExt._CF_pattern,
   TemperatureIntervalPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerTimeUomExt', TemperatureIntervalPerTimeUomExt)
_module_typeBindings.TemperatureIntervalPerTimeUomExt = TemperatureIntervalPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}APIGammaRayUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class APIGammaRayUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of APIGammaRayUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGammaRayUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2308, 1)
    _Documentation = None

    _MemberTypes = ( APIGammaRayUom, EnumExtensionPattern, )
APIGammaRayUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
APIGammaRayUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APIGammaRayUomExt)
APIGammaRayUomExt.gAPI = 'gAPI'                   # originally APIGammaRayUom.gAPI
APIGammaRayUomExt._InitializeFacetMap(APIGammaRayUomExt._CF_pattern,
   APIGammaRayUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APIGammaRayUomExt', APIGammaRayUomExt)
_module_typeBindings.APIGammaRayUomExt = APIGammaRayUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForceLengthPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForceLengthPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceLengthPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2394, 1)
    _Documentation = None

    _MemberTypes = ( ForceLengthPerLengthUom, EnumExtensionPattern, )
ForceLengthPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForceLengthPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceLengthPerLengthUomExt)
ForceLengthPerLengthUomExt.kgf_mm = 'kgf.m/m'     # originally ForceLengthPerLengthUom.kgf_mm
ForceLengthPerLengthUomExt.lbf_ftin = 'lbf.ft/in' # originally ForceLengthPerLengthUom.lbf_ftin
ForceLengthPerLengthUomExt.lbf_inin = 'lbf.in/in' # originally ForceLengthPerLengthUom.lbf_inin
ForceLengthPerLengthUomExt.N_mm = 'N.m/m'         # originally ForceLengthPerLengthUom.N_mm
ForceLengthPerLengthUomExt.tonfUS_mift = 'tonf[US].mi/ft'# originally ForceLengthPerLengthUom.tonfUS_mift
ForceLengthPerLengthUomExt._InitializeFacetMap(ForceLengthPerLengthUomExt._CF_pattern,
   ForceLengthPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceLengthPerLengthUomExt', ForceLengthPerLengthUomExt)
_module_typeBindings.ForceLengthPerLengthUomExt = ForceLengthPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PowerUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PowerUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PowerUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2397, 1)
    _Documentation = None

    _MemberTypes = ( PowerUom, EnumExtensionPattern, )
PowerUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PowerUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerUomExt)
PowerUomExt.cW = 'cW'                             # originally PowerUom.cW
PowerUomExt.dW = 'dW'                             # originally PowerUom.dW
PowerUomExt.EW = 'EW'                             # originally PowerUom.EW
PowerUomExt.fW = 'fW'                             # originally PowerUom.fW
PowerUomExt.GW = 'GW'                             # originally PowerUom.GW
PowerUomExt.hp = 'hp'                             # originally PowerUom.hp
PowerUomExt.hpelec = 'hp[elec]'                   # originally PowerUom.hpelec
PowerUomExt.hphyd = 'hp[hyd]'                     # originally PowerUom.hphyd
PowerUomExt.hpmetric = 'hp[metric]'               # originally PowerUom.hpmetric
PowerUomExt.kW = 'kW'                             # originally PowerUom.kW
PowerUomExt.MW = 'MW'                             # originally PowerUom.MW
PowerUomExt.mW = 'mW'                             # originally PowerUom.mW
PowerUomExt.nW = 'nW'                             # originally PowerUom.nW
PowerUomExt.pW = 'pW'                             # originally PowerUom.pW
PowerUomExt.tonRefrig = 'tonRefrig'               # originally PowerUom.tonRefrig
PowerUomExt.TW = 'TW'                             # originally PowerUom.TW
PowerUomExt.uW = 'uW'                             # originally PowerUom.uW
PowerUomExt.W = 'W'                               # originally PowerUom.W
PowerUomExt._InitializeFacetMap(PowerUomExt._CF_pattern,
   PowerUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerUomExt', PowerUomExt)
_module_typeBindings.PowerUomExt = PowerUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermodynamicTemperaturePerThermodynamicTemperatureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperaturePerThermodynamicTemperatureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2400, 1)
    _Documentation = None

    _MemberTypes = ( ThermodynamicTemperaturePerThermodynamicTemperatureUom, EnumExtensionPattern, )
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermodynamicTemperaturePerThermodynamicTemperatureUomExt)
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt.degCdegC = 'degC/degC'# originally ThermodynamicTemperaturePerThermodynamicTemperatureUom.degCdegC
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt.degFdegF = 'degF/degF'# originally ThermodynamicTemperaturePerThermodynamicTemperatureUom.degFdegF
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt.degRdegR = 'degR/degR'# originally ThermodynamicTemperaturePerThermodynamicTemperatureUom.degRdegR
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt.Euc = 'Euc'# originally ThermodynamicTemperaturePerThermodynamicTemperatureUom.Euc
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt.KK = 'K/K'# originally ThermodynamicTemperaturePerThermodynamicTemperatureUom.KK
ThermodynamicTemperaturePerThermodynamicTemperatureUomExt._InitializeFacetMap(ThermodynamicTemperaturePerThermodynamicTemperatureUomExt._CF_pattern,
   ThermodynamicTemperaturePerThermodynamicTemperatureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperaturePerThermodynamicTemperatureUomExt', ThermodynamicTemperaturePerThermodynamicTemperatureUomExt)
_module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureUomExt = ThermodynamicTemperaturePerThermodynamicTemperatureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}SolidAngleUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class SolidAngleUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of SolidAngleUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolidAngleUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2520, 1)
    _Documentation = None

    _MemberTypes = ( SolidAngleUom, EnumExtensionPattern, )
SolidAngleUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
SolidAngleUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SolidAngleUomExt)
SolidAngleUomExt.sr = 'sr'                        # originally SolidAngleUom.sr
SolidAngleUomExt._InitializeFacetMap(SolidAngleUomExt._CF_pattern,
   SolidAngleUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SolidAngleUomExt', SolidAngleUomExt)
_module_typeBindings.SolidAngleUomExt = SolidAngleUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermalConductivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermalConductivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2523, 1)
    _Documentation = None

    _MemberTypes = ( ThermalConductivityUom, EnumExtensionPattern, )
ThermalConductivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermalConductivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalConductivityUomExt)
ThermalConductivityUomExt.BtuITh_ft_deltaF = 'Btu[IT]/(h.ft.deltaF)'# originally ThermalConductivityUom.BtuITh_ft_deltaF
ThermalConductivityUomExt.calthh_cm_deltaC = 'cal[th]/(h.cm.deltaC)'# originally ThermalConductivityUom.calthh_cm_deltaC
ThermalConductivityUomExt.calths_cm_deltaC = 'cal[th]/(s.cm.deltaC)'# originally ThermalConductivityUom.calths_cm_deltaC
ThermalConductivityUomExt.kcalthh_m_deltaC = 'kcal[th]/(h.m.deltaC)'# originally ThermalConductivityUom.kcalthh_m_deltaC
ThermalConductivityUomExt.Wm_deltaK = 'W/(m.deltaK)'# originally ThermalConductivityUom.Wm_deltaK
ThermalConductivityUomExt._InitializeFacetMap(ThermalConductivityUomExt._CF_pattern,
   ThermalConductivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalConductivityUomExt', ThermalConductivityUomExt)
_module_typeBindings.ThermalConductivityUomExt = ThermalConductivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2641, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerMassUom, EnumExtensionPattern, )
VolumePerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerMassUomExt)
VolumePerMassUomExt.n0_01_Lkg = '0.01 L/kg'       # originally VolumePerMassUom.n0_01_Lkg
VolumePerMassUomExt.bbltonUK = 'bbl/ton[UK]'      # originally VolumePerMassUom.bbltonUK
VolumePerMassUomExt.bbltonUS = 'bbl/ton[US]'      # originally VolumePerMassUom.bbltonUS
VolumePerMassUomExt.cm3g = 'cm3/g'                # originally VolumePerMassUom.cm3g
VolumePerMassUomExt.dm3kg = 'dm3/kg'              # originally VolumePerMassUom.dm3kg
VolumePerMassUomExt.dm3t = 'dm3/t'                # originally VolumePerMassUom.dm3t
VolumePerMassUomExt.ft3kg = 'ft3/kg'              # originally VolumePerMassUom.ft3kg
VolumePerMassUomExt.ft3lbm = 'ft3/lbm'            # originally VolumePerMassUom.ft3lbm
VolumePerMassUomExt.ft3sack94lbm = 'ft3/sack[94lbm]'# originally VolumePerMassUom.ft3sack94lbm
VolumePerMassUomExt.galUKlbm = 'gal[UK]/lbm'      # originally VolumePerMassUom.galUKlbm
VolumePerMassUomExt.galUSlbm = 'gal[US]/lbm'      # originally VolumePerMassUom.galUSlbm
VolumePerMassUomExt.galUSsack94lbm = 'gal[US]/sack[94lbm]'# originally VolumePerMassUom.galUSsack94lbm
VolumePerMassUomExt.galUStonUK = 'gal[US]/ton[UK]'# originally VolumePerMassUom.galUStonUK
VolumePerMassUomExt.galUStonUS = 'gal[US]/ton[US]'# originally VolumePerMassUom.galUStonUS
VolumePerMassUomExt.Lkg = 'L/kg'                  # originally VolumePerMassUom.Lkg
VolumePerMassUomExt.Lt = 'L/t'                    # originally VolumePerMassUom.Lt
VolumePerMassUomExt.LtonUK = 'L/ton[UK]'          # originally VolumePerMassUom.LtonUK
VolumePerMassUomExt.m3g = 'm3/g'                  # originally VolumePerMassUom.m3g
VolumePerMassUomExt.m3kg = 'm3/kg'                # originally VolumePerMassUom.m3kg
VolumePerMassUomExt.m3t = 'm3/t'                  # originally VolumePerMassUom.m3t
VolumePerMassUomExt.m3tonUK = 'm3/ton[UK]'        # originally VolumePerMassUom.m3tonUK
VolumePerMassUomExt.m3tonUS = 'm3/ton[US]'        # originally VolumePerMassUom.m3tonUS
VolumePerMassUomExt._InitializeFacetMap(VolumePerMassUomExt._CF_pattern,
   VolumePerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerMassUomExt', VolumePerMassUomExt)
_module_typeBindings.VolumePerMassUomExt = VolumePerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressureSquaredPerForceTimePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressureSquaredPerForceTimePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredPerForceTimePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2663, 1)
    _Documentation = None

    _MemberTypes = ( PressureSquaredPerForceTimePerAreaUom, EnumExtensionPattern, )
PressureSquaredPerForceTimePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressureSquaredPerForceTimePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureSquaredPerForceTimePerAreaUomExt)
PressureSquaredPerForceTimePerAreaUomExt.n0_001_kPa2cP = '0.001 kPa2/cP'# originally PressureSquaredPerForceTimePerAreaUom.n0_001_kPa2cP
PressureSquaredPerForceTimePerAreaUomExt.bar2cP = 'bar2/cP'# originally PressureSquaredPerForceTimePerAreaUom.bar2cP
PressureSquaredPerForceTimePerAreaUomExt.kPa2cP = 'kPa2/cP'# originally PressureSquaredPerForceTimePerAreaUom.kPa2cP
PressureSquaredPerForceTimePerAreaUomExt.Pa2Pa_s = 'Pa2/(Pa.s)'# originally PressureSquaredPerForceTimePerAreaUom.Pa2Pa_s
PressureSquaredPerForceTimePerAreaUomExt.psi2cP = 'psi2/cP'# originally PressureSquaredPerForceTimePerAreaUom.psi2cP
PressureSquaredPerForceTimePerAreaUomExt._InitializeFacetMap(PressureSquaredPerForceTimePerAreaUomExt._CF_pattern,
   PressureSquaredPerForceTimePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureSquaredPerForceTimePerAreaUomExt', PressureSquaredPerForceTimePerAreaUomExt)
_module_typeBindings.PressureSquaredPerForceTimePerAreaUomExt = PressureSquaredPerForceTimePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumetricThermalExpansionUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumetricThermalExpansionUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricThermalExpansionUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2744, 1)
    _Documentation = None

    _MemberTypes = ( VolumetricThermalExpansionUom, EnumExtensionPattern, )
VolumetricThermalExpansionUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumetricThermalExpansionUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumetricThermalExpansionUomExt)
VolumetricThermalExpansionUomExt.n1deltaC = '1/deltaC'# originally VolumetricThermalExpansionUom.n1deltaC
VolumetricThermalExpansionUomExt.n1deltaF = '1/deltaF'# originally VolumetricThermalExpansionUom.n1deltaF
VolumetricThermalExpansionUomExt.n1deltaK = '1/deltaK'# originally VolumetricThermalExpansionUom.n1deltaK
VolumetricThermalExpansionUomExt.n1deltaR = '1/deltaR'# originally VolumetricThermalExpansionUom.n1deltaR
VolumetricThermalExpansionUomExt.n1E_6_m3m3_deltaC = '1E-6 m3/(m3.deltaC)'# originally VolumetricThermalExpansionUom.n1E_6_m3m3_deltaC
VolumetricThermalExpansionUomExt.n1E_6_m3m3_deltaF = '1E-6 m3/(m3.deltaF)'# originally VolumetricThermalExpansionUom.n1E_6_m3m3_deltaF
VolumetricThermalExpansionUomExt.m3m3_deltaK = 'm3/(m3.deltaK)'# originally VolumetricThermalExpansionUom.m3m3_deltaK
VolumetricThermalExpansionUomExt.ppmvoldeltaC = 'ppm[vol]/deltaC'# originally VolumetricThermalExpansionUom.ppmvoldeltaC
VolumetricThermalExpansionUomExt.ppmvoldeltaF = 'ppm[vol]/deltaF'# originally VolumetricThermalExpansionUom.ppmvoldeltaF
VolumetricThermalExpansionUomExt._InitializeFacetMap(VolumetricThermalExpansionUomExt._CF_pattern,
   VolumetricThermalExpansionUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumetricThermalExpansionUomExt', VolumetricThermalExpansionUomExt)
_module_typeBindings.VolumetricThermalExpansionUomExt = VolumetricThermalExpansionUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AnglePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AnglePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2747, 1)
    _Documentation = None

    _MemberTypes = ( AnglePerLengthUom, EnumExtensionPattern, )
AnglePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AnglePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AnglePerLengthUomExt)
AnglePerLengthUomExt.n0_01_degaft = '0.01 dega/ft'# originally AnglePerLengthUom.n0_01_degaft
AnglePerLengthUomExt.n130_degaft = '1/30 dega/ft' # originally AnglePerLengthUom.n130_degaft
AnglePerLengthUomExt.n130_degam = '1/30 dega/m'   # originally AnglePerLengthUom.n130_degam
AnglePerLengthUomExt.degaft = 'dega/ft'           # originally AnglePerLengthUom.degaft
AnglePerLengthUomExt.degam = 'dega/m'             # originally AnglePerLengthUom.degam
AnglePerLengthUomExt.radft = 'rad/ft'             # originally AnglePerLengthUom.radft
AnglePerLengthUomExt.radm = 'rad/m'               # originally AnglePerLengthUom.radm
AnglePerLengthUomExt.revft = 'rev/ft'             # originally AnglePerLengthUom.revft
AnglePerLengthUomExt.revm = 'rev/m'               # originally AnglePerLengthUom.revm
AnglePerLengthUomExt._InitializeFacetMap(AnglePerLengthUomExt._CF_pattern,
   AnglePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AnglePerLengthUomExt', AnglePerLengthUomExt)
_module_typeBindings.AnglePerLengthUomExt = AnglePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}RadianceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class RadianceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of RadianceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadianceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2750, 1)
    _Documentation = None

    _MemberTypes = ( RadianceUom, EnumExtensionPattern, )
RadianceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
RadianceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RadianceUomExt)
RadianceUomExt.Wm2_sr = 'W/(m2.sr)'               # originally RadianceUom.Wm2_sr
RadianceUomExt._InitializeFacetMap(RadianceUomExt._CF_pattern,
   RadianceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RadianceUomExt', RadianceUomExt)
_module_typeBindings.RadianceUomExt = RadianceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermalConductanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermalConductanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2762, 1)
    _Documentation = None

    _MemberTypes = ( ThermalConductanceUom, EnumExtensionPattern, )
ThermalConductanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermalConductanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalConductanceUomExt)
ThermalConductanceUomExt.WdeltaK = 'W/deltaK'     # originally ThermalConductanceUom.WdeltaK
ThermalConductanceUomExt._InitializeFacetMap(ThermalConductanceUomExt._CF_pattern,
   ThermalConductanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalConductanceUomExt', ThermalConductanceUomExt)
_module_typeBindings.ThermalConductanceUomExt = ThermalConductanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2765, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalPressureUom, EnumExtensionPattern, )
ReciprocalPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalPressureUomExt)
ReciprocalPressureUomExt.n1bar = '1/bar'          # originally ReciprocalPressureUom.n1bar
ReciprocalPressureUomExt.n1kPa = '1/kPa'          # originally ReciprocalPressureUom.n1kPa
ReciprocalPressureUomExt.n1Pa = '1/Pa'            # originally ReciprocalPressureUom.n1Pa
ReciprocalPressureUomExt.n1pPa = '1/pPa'          # originally ReciprocalPressureUom.n1pPa
ReciprocalPressureUomExt.n1psi = '1/psi'          # originally ReciprocalPressureUom.n1psi
ReciprocalPressureUomExt.n1upsi = '1/upsi'        # originally ReciprocalPressureUom.n1upsi
ReciprocalPressureUomExt._InitializeFacetMap(ReciprocalPressureUomExt._CF_pattern,
   ReciprocalPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalPressureUomExt', ReciprocalPressureUomExt)
_module_typeBindings.ReciprocalPressureUomExt = ReciprocalPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForceAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForceAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForceAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2892, 1)
    _Documentation = None

    _MemberTypes = ( ForceAreaUom, EnumExtensionPattern, )
ForceAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForceAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceAreaUomExt)
ForceAreaUomExt.dyne_cm2 = 'dyne.cm2'             # originally ForceAreaUom.dyne_cm2
ForceAreaUomExt.kgf_m2 = 'kgf.m2'                 # originally ForceAreaUom.kgf_m2
ForceAreaUomExt.kN_m2 = 'kN.m2'                   # originally ForceAreaUom.kN_m2
ForceAreaUomExt.lbf_in2 = 'lbf.in2'               # originally ForceAreaUom.lbf_in2
ForceAreaUomExt.mN_m2 = 'mN.m2'                   # originally ForceAreaUom.mN_m2
ForceAreaUomExt.N_m2 = 'N.m2'                     # originally ForceAreaUom.N_m2
ForceAreaUomExt.pdl_cm2 = 'pdl.cm2'               # originally ForceAreaUom.pdl_cm2
ForceAreaUomExt.tonfUK_ft2 = 'tonf[UK].ft2'       # originally ForceAreaUom.tonfUK_ft2
ForceAreaUomExt.tonfUS_ft2 = 'tonf[US].ft2'       # originally ForceAreaUom.tonfUS_ft2
ForceAreaUomExt._InitializeFacetMap(ForceAreaUomExt._CF_pattern,
   ForceAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceAreaUomExt', ForceAreaUomExt)
_module_typeBindings.ForceAreaUomExt = ForceAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2895, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerPressureUom, EnumExtensionPattern, )
LengthPerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerPressureUomExt)
LengthPerPressureUomExt.ftpsi = 'ft/psi'          # originally LengthPerPressureUom.ftpsi
LengthPerPressureUomExt.mkPa = 'm/kPa'            # originally LengthPerPressureUom.mkPa
LengthPerPressureUomExt.mPa = 'm/Pa'              # originally LengthPerPressureUom.mPa
LengthPerPressureUomExt._InitializeFacetMap(LengthPerPressureUomExt._CF_pattern,
   LengthPerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerPressureUomExt', LengthPerPressureUomExt)
_module_typeBindings.LengthPerPressureUomExt = LengthPerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AngularVelocityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AngularVelocityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AngularVelocityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularVelocityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2927, 1)
    _Documentation = None

    _MemberTypes = ( AngularVelocityUom, EnumExtensionPattern, )
AngularVelocityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AngularVelocityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AngularVelocityUomExt)
AngularVelocityUomExt.degah = 'dega/h'            # originally AngularVelocityUom.degah
AngularVelocityUomExt.degamin = 'dega/min'        # originally AngularVelocityUom.degamin
AngularVelocityUomExt.degas = 'dega/s'            # originally AngularVelocityUom.degas
AngularVelocityUomExt.rads = 'rad/s'              # originally AngularVelocityUom.rads
AngularVelocityUomExt.revs = 'rev/s'              # originally AngularVelocityUom.revs
AngularVelocityUomExt.rpm = 'rpm'                 # originally AngularVelocityUom.rpm
AngularVelocityUomExt._InitializeFacetMap(AngularVelocityUomExt._CF_pattern,
   AngularVelocityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AngularVelocityUomExt', AngularVelocityUomExt)
_module_typeBindings.AngularVelocityUomExt = AngularVelocityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricFieldStrengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricFieldStrengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricFieldStrengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2930, 1)
    _Documentation = None

    _MemberTypes = ( ElectricFieldStrengthUom, EnumExtensionPattern, )
ElectricFieldStrengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricFieldStrengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricFieldStrengthUomExt)
ElectricFieldStrengthUomExt.mVft = 'mV/ft'        # originally ElectricFieldStrengthUom.mVft
ElectricFieldStrengthUomExt.mVm = 'mV/m'          # originally ElectricFieldStrengthUom.mVm
ElectricFieldStrengthUomExt.uVft = 'uV/ft'        # originally ElectricFieldStrengthUom.uVft
ElectricFieldStrengthUomExt.uVm = 'uV/m'          # originally ElectricFieldStrengthUom.uVm
ElectricFieldStrengthUomExt.Vm = 'V/m'            # originally ElectricFieldStrengthUom.Vm
ElectricFieldStrengthUomExt._InitializeFacetMap(ElectricFieldStrengthUomExt._CF_pattern,
   ElectricFieldStrengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricFieldStrengthUomExt', ElectricFieldStrengthUomExt)
_module_typeBindings.ElectricFieldStrengthUomExt = ElectricFieldStrengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2933, 1)
    _Documentation = None

    _MemberTypes = ( MassPerVolumeUom, EnumExtensionPattern, )
MassPerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumeUomExt)
MassPerVolumeUomExt.n0_001_lbmbbl = '0.001 lbm/bbl'# originally MassPerVolumeUom.n0_001_lbmbbl
MassPerVolumeUomExt.n0_001_lbmgalUK = '0.001 lbm/gal[UK]'# originally MassPerVolumeUom.n0_001_lbmgalUK
MassPerVolumeUomExt.n0_001_lbmgalUS = '0.001 lbm/gal[US]'# originally MassPerVolumeUom.n0_001_lbmgalUS
MassPerVolumeUomExt.n0_01_grainft3 = '0.01 grain/ft3'# originally MassPerVolumeUom.n0_01_grainft3
MassPerVolumeUomExt.n0_1_lbmbbl = '0.1 lbm/bbl'   # originally MassPerVolumeUom.n0_1_lbmbbl
MassPerVolumeUomExt.n10_Mgm3 = '10 Mg/m3'         # originally MassPerVolumeUom.n10_Mgm3
MassPerVolumeUomExt.gcm3 = 'g/cm3'                # originally MassPerVolumeUom.gcm3
MassPerVolumeUomExt.gdm3 = 'g/dm3'                # originally MassPerVolumeUom.gdm3
MassPerVolumeUomExt.ggalUK = 'g/gal[UK]'          # originally MassPerVolumeUom.ggalUK
MassPerVolumeUomExt.ggalUS = 'g/gal[US]'          # originally MassPerVolumeUom.ggalUS
MassPerVolumeUomExt.gL = 'g/L'                    # originally MassPerVolumeUom.gL
MassPerVolumeUomExt.gm3 = 'g/m3'                  # originally MassPerVolumeUom.gm3
MassPerVolumeUomExt.grainft3 = 'grain/ft3'        # originally MassPerVolumeUom.grainft3
MassPerVolumeUomExt.graingalUS = 'grain/gal[US]'  # originally MassPerVolumeUom.graingalUS
MassPerVolumeUomExt.kgdm3 = 'kg/dm3'              # originally MassPerVolumeUom.kgdm3
MassPerVolumeUomExt.kgL = 'kg/L'                  # originally MassPerVolumeUom.kgL
MassPerVolumeUomExt.kgm3 = 'kg/m3'                # originally MassPerVolumeUom.kgm3
MassPerVolumeUomExt.lbmbbl = 'lbm/bbl'            # originally MassPerVolumeUom.lbmbbl
MassPerVolumeUomExt.lbmft3 = 'lbm/ft3'            # originally MassPerVolumeUom.lbmft3
MassPerVolumeUomExt.lbmgalUK = 'lbm/gal[UK]'      # originally MassPerVolumeUom.lbmgalUK
MassPerVolumeUomExt.lbmgalUS = 'lbm/gal[US]'      # originally MassPerVolumeUom.lbmgalUS
MassPerVolumeUomExt.lbmin3 = 'lbm/in3'            # originally MassPerVolumeUom.lbmin3
MassPerVolumeUomExt.mgdm3 = 'mg/dm3'              # originally MassPerVolumeUom.mgdm3
MassPerVolumeUomExt.mggalUS = 'mg/gal[US]'        # originally MassPerVolumeUom.mggalUS
MassPerVolumeUomExt.mgL = 'mg/L'                  # originally MassPerVolumeUom.mgL
MassPerVolumeUomExt.mgm3 = 'mg/m3'                # originally MassPerVolumeUom.mgm3
MassPerVolumeUomExt.Mgm3 = 'Mg/m3'                # originally MassPerVolumeUom.Mgm3
MassPerVolumeUomExt.tm3 = 't/m3'                  # originally MassPerVolumeUom.tm3
MassPerVolumeUomExt.ugcm3 = 'ug/cm3'              # originally MassPerVolumeUom.ugcm3
MassPerVolumeUomExt._InitializeFacetMap(MassPerVolumeUomExt._CF_pattern,
   MassPerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumeUomExt', MassPerVolumeUomExt)
_module_typeBindings.MassPerVolumeUomExt = MassPerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2945, 1)
    _Documentation = None

    _MemberTypes = ( VolumeUom, EnumExtensionPattern, )
VolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumeUomExt)
VolumeUomExt.n1000_bbl = '1000 bbl'               # originally VolumeUom.n1000_bbl
VolumeUomExt.n1000_ft3 = '1000 ft3'               # originally VolumeUom.n1000_ft3
VolumeUomExt.n1000_galUK = '1000 gal[UK]'         # originally VolumeUom.n1000_galUK
VolumeUomExt.n1000_galUS = '1000 gal[US]'         # originally VolumeUom.n1000_galUS
VolumeUomExt.n1000_m3 = '1000 m3'                 # originally VolumeUom.n1000_m3
VolumeUomExt.n1E_6_galUS = '1E-6 gal[US]'         # originally VolumeUom.n1E_6_galUS
VolumeUomExt.n1E12_ft3 = '1E12 ft3'               # originally VolumeUom.n1E12_ft3
VolumeUomExt.n1E6_bbl = '1E6 bbl'                 # originally VolumeUom.n1E6_bbl
VolumeUomExt.n1E6_ft3 = '1E6 ft3'                 # originally VolumeUom.n1E6_ft3
VolumeUomExt.n1E6_m3 = '1E6 m3'                   # originally VolumeUom.n1E6_m3
VolumeUomExt.n1E9_bbl = '1E9 bbl'                 # originally VolumeUom.n1E9_bbl
VolumeUomExt.n1E9_ft3 = '1E9 ft3'                 # originally VolumeUom.n1E9_ft3
VolumeUomExt.acre_ft = 'acre.ft'                  # originally VolumeUom.acre_ft
VolumeUomExt.bbl = 'bbl'                          # originally VolumeUom.bbl
VolumeUomExt.cm3 = 'cm3'                          # originally VolumeUom.cm3
VolumeUomExt.dm3 = 'dm3'                          # originally VolumeUom.dm3
VolumeUomExt.flozUK = 'floz[UK]'                  # originally VolumeUom.flozUK
VolumeUomExt.flozUS = 'floz[US]'                  # originally VolumeUom.flozUS
VolumeUomExt.ft3 = 'ft3'                          # originally VolumeUom.ft3
VolumeUomExt.galUK = 'gal[UK]'                    # originally VolumeUom.galUK
VolumeUomExt.galUS = 'gal[US]'                    # originally VolumeUom.galUS
VolumeUomExt.ha_m = 'ha.m'                        # originally VolumeUom.ha_m
VolumeUomExt.hL = 'hL'                            # originally VolumeUom.hL
VolumeUomExt.in3 = 'in3'                          # originally VolumeUom.in3
VolumeUomExt.km3 = 'km3'                          # originally VolumeUom.km3
VolumeUomExt.L = 'L'                              # originally VolumeUom.L
VolumeUomExt.m3 = 'm3'                            # originally VolumeUom.m3
VolumeUomExt.mi3 = 'mi3'                          # originally VolumeUom.mi3
VolumeUomExt.mL = 'mL'                            # originally VolumeUom.mL
VolumeUomExt.mm3 = 'mm3'                          # originally VolumeUom.mm3
VolumeUomExt.ptUK = 'pt[UK]'                      # originally VolumeUom.ptUK
VolumeUomExt.ptUS = 'pt[US]'                      # originally VolumeUom.ptUS
VolumeUomExt.qtUK = 'qt[UK]'                      # originally VolumeUom.qtUK
VolumeUomExt.qtUS = 'qt[US]'                      # originally VolumeUom.qtUS
VolumeUomExt.um2_m = 'um2.m'                      # originally VolumeUom.um2_m
VolumeUomExt.yd3 = 'yd3'                          # originally VolumeUom.yd3
VolumeUomExt._InitializeFacetMap(VolumeUomExt._CF_pattern,
   VolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumeUomExt', VolumeUomExt)
_module_typeBindings.VolumeUomExt = VolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}HeatCapacityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class HeatCapacityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of HeatCapacityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2948, 1)
    _Documentation = None

    _MemberTypes = ( HeatCapacityUom, EnumExtensionPattern, )
HeatCapacityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
HeatCapacityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatCapacityUomExt)
HeatCapacityUomExt.JdeltaK = 'J/deltaK'           # originally HeatCapacityUom.JdeltaK
HeatCapacityUomExt._InitializeFacetMap(HeatCapacityUomExt._CF_pattern,
   HeatCapacityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatCapacityUomExt', HeatCapacityUomExt)
_module_typeBindings.HeatCapacityUomExt = HeatCapacityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticFluxDensityPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticFluxDensityPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2975, 1)
    _Documentation = None

    _MemberTypes = ( MagneticFluxDensityPerLengthUom, EnumExtensionPattern, )
MagneticFluxDensityPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticFluxDensityPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxDensityPerLengthUomExt)
MagneticFluxDensityPerLengthUomExt.gausscm = 'gauss/cm'# originally MagneticFluxDensityPerLengthUom.gausscm
MagneticFluxDensityPerLengthUomExt.mTdm = 'mT/dm' # originally MagneticFluxDensityPerLengthUom.mTdm
MagneticFluxDensityPerLengthUomExt.Tm = 'T/m'     # originally MagneticFluxDensityPerLengthUom.Tm
MagneticFluxDensityPerLengthUomExt._InitializeFacetMap(MagneticFluxDensityPerLengthUomExt._CF_pattern,
   MagneticFluxDensityPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityPerLengthUomExt', MagneticFluxDensityPerLengthUomExt)
_module_typeBindings.MagneticFluxDensityPerLengthUomExt = MagneticFluxDensityPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2978, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerVolumeUom, EnumExtensionPattern, )
LengthPerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerVolumeUomExt)
LengthPerVolumeUomExt.ftbbl = 'ft/bbl'            # originally LengthPerVolumeUom.ftbbl
LengthPerVolumeUomExt.ftft3 = 'ft/ft3'            # originally LengthPerVolumeUom.ftft3
LengthPerVolumeUomExt.ftgalUS = 'ft/gal[US]'      # originally LengthPerVolumeUom.ftgalUS
LengthPerVolumeUomExt.kmdm3 = 'km/dm3'            # originally LengthPerVolumeUom.kmdm3
LengthPerVolumeUomExt.kmL = 'km/L'                # originally LengthPerVolumeUom.kmL
LengthPerVolumeUomExt.mm3 = 'm/m3'                # originally LengthPerVolumeUom.mm3
LengthPerVolumeUomExt.migalUK = 'mi/gal[UK]'      # originally LengthPerVolumeUom.migalUK
LengthPerVolumeUomExt.migalUS = 'mi/gal[US]'      # originally LengthPerVolumeUom.migalUS
LengthPerVolumeUomExt._InitializeFacetMap(LengthPerVolumeUomExt._CF_pattern,
   LengthPerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerVolumeUomExt', LengthPerVolumeUomExt)
_module_typeBindings.LengthPerVolumeUomExt = LengthPerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticDipoleMomentUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticDipoleMomentUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticDipoleMomentUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 2981, 1)
    _Documentation = None

    _MemberTypes = ( MagneticDipoleMomentUom, EnumExtensionPattern, )
MagneticDipoleMomentUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticDipoleMomentUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticDipoleMomentUomExt)
MagneticDipoleMomentUomExt.Wb_m = 'Wb.m'          # originally MagneticDipoleMomentUom.Wb_m
MagneticDipoleMomentUomExt._InitializeFacetMap(MagneticDipoleMomentUomExt._CF_pattern,
   MagneticDipoleMomentUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticDipoleMomentUomExt', MagneticDipoleMomentUomExt)
_module_typeBindings.MagneticDipoleMomentUomExt = MagneticDipoleMomentUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TemperatureIntervalPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TemperatureIntervalPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3047, 1)
    _Documentation = None

    _MemberTypes = ( TemperatureIntervalPerLengthUom, EnumExtensionPattern, )
TemperatureIntervalPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TemperatureIntervalPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureIntervalPerLengthUomExt)
TemperatureIntervalPerLengthUomExt.n0_01_deltaFft = '0.01 deltaF/ft'# originally TemperatureIntervalPerLengthUom.n0_01_deltaFft
TemperatureIntervalPerLengthUomExt.deltaCft = 'deltaC/ft'# originally TemperatureIntervalPerLengthUom.deltaCft
TemperatureIntervalPerLengthUomExt.deltaChm = 'deltaC/hm'# originally TemperatureIntervalPerLengthUom.deltaChm
TemperatureIntervalPerLengthUomExt.deltaCkm = 'deltaC/km'# originally TemperatureIntervalPerLengthUom.deltaCkm
TemperatureIntervalPerLengthUomExt.deltaCm = 'deltaC/m'# originally TemperatureIntervalPerLengthUom.deltaCm
TemperatureIntervalPerLengthUomExt.deltaFft = 'deltaF/ft'# originally TemperatureIntervalPerLengthUom.deltaFft
TemperatureIntervalPerLengthUomExt.deltaFm = 'deltaF/m'# originally TemperatureIntervalPerLengthUom.deltaFm
TemperatureIntervalPerLengthUomExt.deltaKkm = 'deltaK/km'# originally TemperatureIntervalPerLengthUom.deltaKkm
TemperatureIntervalPerLengthUomExt.deltaKm = 'deltaK/m'# originally TemperatureIntervalPerLengthUom.deltaKm
TemperatureIntervalPerLengthUomExt._InitializeFacetMap(TemperatureIntervalPerLengthUomExt._CF_pattern,
   TemperatureIntervalPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerLengthUomExt', TemperatureIntervalPerLengthUomExt)
_module_typeBindings.TemperatureIntervalPerLengthUomExt = TemperatureIntervalPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3050, 1)
    _Documentation = None

    _MemberTypes = ( MassPerTimeUom, EnumExtensionPattern, )
MassPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimeUomExt)
MassPerTimeUomExt.n1E6_lbma = '1E6 lbm/a'         # originally MassPerTimeUom.n1E6_lbma
MassPerTimeUomExt.gs = 'g/s'                      # originally MassPerTimeUom.gs
MassPerTimeUomExt.kgd = 'kg/d'                    # originally MassPerTimeUom.kgd
MassPerTimeUomExt.kgh = 'kg/h'                    # originally MassPerTimeUom.kgh
MassPerTimeUomExt.kgmin = 'kg/min'                # originally MassPerTimeUom.kgmin
MassPerTimeUomExt.kgs = 'kg/s'                    # originally MassPerTimeUom.kgs
MassPerTimeUomExt.lbmd = 'lbm/d'                  # originally MassPerTimeUom.lbmd
MassPerTimeUomExt.lbmh = 'lbm/h'                  # originally MassPerTimeUom.lbmh
MassPerTimeUomExt.lbmmin = 'lbm/min'              # originally MassPerTimeUom.lbmmin
MassPerTimeUomExt.lbms = 'lbm/s'                  # originally MassPerTimeUom.lbms
MassPerTimeUomExt.Mga = 'Mg/a'                    # originally MassPerTimeUom.Mga
MassPerTimeUomExt.Mgd = 'Mg/d'                    # originally MassPerTimeUom.Mgd
MassPerTimeUomExt.Mgh = 'Mg/h'                    # originally MassPerTimeUom.Mgh
MassPerTimeUomExt.Mgmin = 'Mg/min'                # originally MassPerTimeUom.Mgmin
MassPerTimeUomExt.ta = 't/a'                      # originally MassPerTimeUom.ta
MassPerTimeUomExt.td = 't/d'                      # originally MassPerTimeUom.td
MassPerTimeUomExt.th = 't/h'                      # originally MassPerTimeUom.th
MassPerTimeUomExt.tmin = 't/min'                  # originally MassPerTimeUom.tmin
MassPerTimeUomExt.tonUKa = 'ton[UK]/a'            # originally MassPerTimeUom.tonUKa
MassPerTimeUomExt.tonUKd = 'ton[UK]/d'            # originally MassPerTimeUom.tonUKd
MassPerTimeUomExt.tonUKh = 'ton[UK]/h'            # originally MassPerTimeUom.tonUKh
MassPerTimeUomExt.tonUKmin = 'ton[UK]/min'        # originally MassPerTimeUom.tonUKmin
MassPerTimeUomExt.tonUSa = 'ton[US]/a'            # originally MassPerTimeUom.tonUSa
MassPerTimeUomExt.tonUSd = 'ton[US]/d'            # originally MassPerTimeUom.tonUSd
MassPerTimeUomExt.tonUSh = 'ton[US]/h'            # originally MassPerTimeUom.tonUSh
MassPerTimeUomExt.tonUSmin = 'ton[US]/min'        # originally MassPerTimeUom.tonUSmin
MassPerTimeUomExt._InitializeFacetMap(MassPerTimeUomExt._CF_pattern,
   MassPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimeUomExt', MassPerTimeUomExt)
_module_typeBindings.MassPerTimeUomExt = MassPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}APIGravityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class APIGravityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of APIGravityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGravityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3127, 1)
    _Documentation = None

    _MemberTypes = ( APIGravityUom, EnumExtensionPattern, )
APIGravityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
APIGravityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=APIGravityUomExt)
APIGravityUomExt.dAPI = 'dAPI'                    # originally APIGravityUom.dAPI
APIGravityUomExt._InitializeFacetMap(APIGravityUomExt._CF_pattern,
   APIGravityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'APIGravityUomExt', APIGravityUomExt)
_module_typeBindings.APIGravityUomExt = APIGravityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MolarEnergyUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MolarEnergyUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MolarEnergyUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarEnergyUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3230, 1)
    _Documentation = None

    _MemberTypes = ( MolarEnergyUom, EnumExtensionPattern, )
MolarEnergyUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MolarEnergyUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MolarEnergyUomExt)
MolarEnergyUomExt.BtuITlbmol = 'Btu[IT]/lbmol'    # originally MolarEnergyUom.BtuITlbmol
MolarEnergyUomExt.Jmol = 'J/mol'                  # originally MolarEnergyUom.Jmol
MolarEnergyUomExt.kcalthmol = 'kcal[th]/mol'      # originally MolarEnergyUom.kcalthmol
MolarEnergyUomExt.kJkmol = 'kJ/kmol'              # originally MolarEnergyUom.kJkmol
MolarEnergyUomExt.MJkmol = 'MJ/kmol'              # originally MolarEnergyUom.MJkmol
MolarEnergyUomExt._InitializeFacetMap(MolarEnergyUomExt._CF_pattern,
   MolarEnergyUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MolarEnergyUomExt', MolarEnergyUomExt)
_module_typeBindings.MolarEnergyUomExt = MolarEnergyUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticFluxDensityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticFluxDensityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3233, 1)
    _Documentation = None

    _MemberTypes = ( MagneticFluxDensityUom, EnumExtensionPattern, )
MagneticFluxDensityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticFluxDensityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFluxDensityUomExt)
MagneticFluxDensityUomExt.cgauss = 'cgauss'       # originally MagneticFluxDensityUom.cgauss
MagneticFluxDensityUomExt.cT = 'cT'               # originally MagneticFluxDensityUom.cT
MagneticFluxDensityUomExt.dgauss = 'dgauss'       # originally MagneticFluxDensityUom.dgauss
MagneticFluxDensityUomExt.dT = 'dT'               # originally MagneticFluxDensityUom.dT
MagneticFluxDensityUomExt.Egauss = 'Egauss'       # originally MagneticFluxDensityUom.Egauss
MagneticFluxDensityUomExt.ET = 'ET'               # originally MagneticFluxDensityUom.ET
MagneticFluxDensityUomExt.fgauss = 'fgauss'       # originally MagneticFluxDensityUom.fgauss
MagneticFluxDensityUomExt.fT = 'fT'               # originally MagneticFluxDensityUom.fT
MagneticFluxDensityUomExt.gauss = 'gauss'         # originally MagneticFluxDensityUom.gauss
MagneticFluxDensityUomExt.Ggauss = 'Ggauss'       # originally MagneticFluxDensityUom.Ggauss
MagneticFluxDensityUomExt.GT = 'GT'               # originally MagneticFluxDensityUom.GT
MagneticFluxDensityUomExt.kgauss = 'kgauss'       # originally MagneticFluxDensityUom.kgauss
MagneticFluxDensityUomExt.kT = 'kT'               # originally MagneticFluxDensityUom.kT
MagneticFluxDensityUomExt.mgauss = 'mgauss'       # originally MagneticFluxDensityUom.mgauss
MagneticFluxDensityUomExt.Mgauss = 'Mgauss'       # originally MagneticFluxDensityUom.Mgauss
MagneticFluxDensityUomExt.mT = 'mT'               # originally MagneticFluxDensityUom.mT
MagneticFluxDensityUomExt.ngauss = 'ngauss'       # originally MagneticFluxDensityUom.ngauss
MagneticFluxDensityUomExt.nT = 'nT'               # originally MagneticFluxDensityUom.nT
MagneticFluxDensityUomExt.pgauss = 'pgauss'       # originally MagneticFluxDensityUom.pgauss
MagneticFluxDensityUomExt.pT = 'pT'               # originally MagneticFluxDensityUom.pT
MagneticFluxDensityUomExt.T = 'T'                 # originally MagneticFluxDensityUom.T
MagneticFluxDensityUomExt.Tgauss = 'Tgauss'       # originally MagneticFluxDensityUom.Tgauss
MagneticFluxDensityUomExt.TT = 'TT'               # originally MagneticFluxDensityUom.TT
MagneticFluxDensityUomExt.ugauss = 'ugauss'       # originally MagneticFluxDensityUom.ugauss
MagneticFluxDensityUomExt.uT = 'uT'               # originally MagneticFluxDensityUom.uT
MagneticFluxDensityUomExt._InitializeFacetMap(MagneticFluxDensityUomExt._CF_pattern,
   MagneticFluxDensityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityUomExt', MagneticFluxDensityUomExt)
_module_typeBindings.MagneticFluxDensityUomExt = MagneticFluxDensityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricalResistivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricalResistivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3279, 1)
    _Documentation = None

    _MemberTypes = ( ElectricalResistivityUom, EnumExtensionPattern, )
ElectricalResistivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricalResistivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricalResistivityUomExt)
ElectricalResistivityUomExt.kohm_m = 'kohm.m'     # originally ElectricalResistivityUom.kohm_m
ElectricalResistivityUomExt.nohm_mil2ft = 'nohm.mil2/ft'# originally ElectricalResistivityUom.nohm_mil2ft
ElectricalResistivityUomExt.nohm_mm2m = 'nohm.mm2/m'# originally ElectricalResistivityUom.nohm_mm2m
ElectricalResistivityUomExt.ohm_cm = 'ohm.cm'     # originally ElectricalResistivityUom.ohm_cm
ElectricalResistivityUomExt.ohm_m = 'ohm.m'       # originally ElectricalResistivityUom.ohm_m
ElectricalResistivityUomExt.ohm_m2m = 'ohm.m2/m'  # originally ElectricalResistivityUom.ohm_m2m
ElectricalResistivityUomExt._InitializeFacetMap(ElectricalResistivityUomExt._CF_pattern,
   ElectricalResistivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricalResistivityUomExt', ElectricalResistivityUomExt)
_module_typeBindings.ElectricalResistivityUomExt = ElectricalResistivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LuminanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LuminanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LuminanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3282, 1)
    _Documentation = None

    _MemberTypes = ( LuminanceUom, EnumExtensionPattern, )
LuminanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LuminanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminanceUomExt)
LuminanceUomExt.cdm2 = 'cd/m2'                    # originally LuminanceUom.cdm2
LuminanceUomExt._InitializeFacetMap(LuminanceUomExt._CF_pattern,
   LuminanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminanceUomExt', LuminanceUomExt)
_module_typeBindings.LuminanceUomExt = LuminanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReluctanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReluctanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReluctanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReluctanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3285, 1)
    _Documentation = None

    _MemberTypes = ( ReluctanceUom, EnumExtensionPattern, )
ReluctanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReluctanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReluctanceUomExt)
ReluctanceUomExt.n1H = '1/H'                      # originally ReluctanceUom.n1H
ReluctanceUomExt._InitializeFacetMap(ReluctanceUomExt._CF_pattern,
   ReluctanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReluctanceUomExt', ReluctanceUomExt)
_module_typeBindings.ReluctanceUomExt = ReluctanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3406, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerLengthUom, EnumExtensionPattern, )
VolumePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerLengthUomExt)
VolumePerLengthUomExt.n0_01_dm3km = '0.01 dm3/km' # originally VolumePerLengthUom.n0_01_dm3km
VolumePerLengthUomExt.n0_01_Lkm = '0.01 L/km'     # originally VolumePerLengthUom.n0_01_Lkm
VolumePerLengthUomExt.bblft = 'bbl/ft'            # originally VolumePerLengthUom.bblft
VolumePerLengthUomExt.bblin = 'bbl/in'            # originally VolumePerLengthUom.bblin
VolumePerLengthUomExt.bblmi = 'bbl/mi'            # originally VolumePerLengthUom.bblmi
VolumePerLengthUomExt.dm3m = 'dm3/m'              # originally VolumePerLengthUom.dm3m
VolumePerLengthUomExt.ft3ft = 'ft3/ft'            # originally VolumePerLengthUom.ft3ft
VolumePerLengthUomExt.galUKmi = 'gal[UK]/mi'      # originally VolumePerLengthUom.galUKmi
VolumePerLengthUomExt.galUSft = 'gal[US]/ft'      # originally VolumePerLengthUom.galUSft
VolumePerLengthUomExt.galUSmi = 'gal[US]/mi'      # originally VolumePerLengthUom.galUSmi
VolumePerLengthUomExt.in3ft = 'in3/ft'            # originally VolumePerLengthUom.in3ft
VolumePerLengthUomExt.Lm = 'L/m'                  # originally VolumePerLengthUom.Lm
VolumePerLengthUomExt.m3km = 'm3/km'              # originally VolumePerLengthUom.m3km
VolumePerLengthUomExt.m3m = 'm3/m'                # originally VolumePerLengthUom.m3m
VolumePerLengthUomExt._InitializeFacetMap(VolumePerLengthUomExt._CF_pattern,
   VolumePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerLengthUomExt', VolumePerLengthUomExt)
_module_typeBindings.VolumePerLengthUomExt = VolumePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PermeabilityRockUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PermeabilityRockUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityRockUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3447, 1)
    _Documentation = None

    _MemberTypes = ( PermeabilityRockUom, EnumExtensionPattern, )
PermeabilityRockUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PermeabilityRockUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermeabilityRockUomExt)
PermeabilityRockUomExt.D = 'D'                    # originally PermeabilityRockUom.D
PermeabilityRockUomExt.DAPI = 'D[API]'            # originally PermeabilityRockUom.DAPI
PermeabilityRockUomExt.mD = 'mD'                  # originally PermeabilityRockUom.mD
PermeabilityRockUomExt.TDAPI = 'TD[API]'          # originally PermeabilityRockUom.TDAPI
PermeabilityRockUomExt._InitializeFacetMap(PermeabilityRockUomExt._CF_pattern,
   PermeabilityRockUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermeabilityRockUomExt', PermeabilityRockUomExt)
_module_typeBindings.PermeabilityRockUomExt = PermeabilityRockUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3450, 1)
    _Documentation = None

    _MemberTypes = ( ForceUom, EnumExtensionPattern, )
ForceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForceUomExt)
ForceUomExt.n10_kN = '10 kN'                      # originally ForceUom.n10_kN
ForceUomExt.cN = 'cN'                             # originally ForceUom.cN
ForceUomExt.daN = 'daN'                           # originally ForceUom.daN
ForceUomExt.dN = 'dN'                             # originally ForceUom.dN
ForceUomExt.dyne = 'dyne'                         # originally ForceUom.dyne
ForceUomExt.EN = 'EN'                             # originally ForceUom.EN
ForceUomExt.fN = 'fN'                             # originally ForceUom.fN
ForceUomExt.gf = 'gf'                             # originally ForceUom.gf
ForceUomExt.GN = 'GN'                             # originally ForceUom.GN
ForceUomExt.hN = 'hN'                             # originally ForceUom.hN
ForceUomExt.kdyne = 'kdyne'                       # originally ForceUom.kdyne
ForceUomExt.kgf = 'kgf'                           # originally ForceUom.kgf
ForceUomExt.klbf = 'klbf'                         # originally ForceUom.klbf
ForceUomExt.kN = 'kN'                             # originally ForceUom.kN
ForceUomExt.lbf = 'lbf'                           # originally ForceUom.lbf
ForceUomExt.Mgf = 'Mgf'                           # originally ForceUom.Mgf
ForceUomExt.mN = 'mN'                             # originally ForceUom.mN
ForceUomExt.MN = 'MN'                             # originally ForceUom.MN
ForceUomExt.N = 'N'                               # originally ForceUom.N
ForceUomExt.nN = 'nN'                             # originally ForceUom.nN
ForceUomExt.ozf = 'ozf'                           # originally ForceUom.ozf
ForceUomExt.pdl = 'pdl'                           # originally ForceUom.pdl
ForceUomExt.pN = 'pN'                             # originally ForceUom.pN
ForceUomExt.TN = 'TN'                             # originally ForceUom.TN
ForceUomExt.tonfUK = 'tonf[UK]'                   # originally ForceUom.tonfUK
ForceUomExt.tonfUS = 'tonf[US]'                   # originally ForceUom.tonfUS
ForceUomExt.uN = 'uN'                             # originally ForceUom.uN
ForceUomExt._InitializeFacetMap(ForceUomExt._CF_pattern,
   ForceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForceUomExt', ForceUomExt)
_module_typeBindings.ForceUomExt = ForceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermodynamicTemperatureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermodynamicTemperatureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperatureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3477, 1)
    _Documentation = None

    _MemberTypes = ( ThermodynamicTemperatureUom, EnumExtensionPattern, )
ThermodynamicTemperatureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermodynamicTemperatureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermodynamicTemperatureUomExt)
ThermodynamicTemperatureUomExt.degC = 'degC'      # originally ThermodynamicTemperatureUom.degC
ThermodynamicTemperatureUomExt.degF = 'degF'      # originally ThermodynamicTemperatureUom.degF
ThermodynamicTemperatureUomExt.degR = 'degR'      # originally ThermodynamicTemperatureUom.degR
ThermodynamicTemperatureUomExt.K = 'K'            # originally ThermodynamicTemperatureUom.K
ThermodynamicTemperatureUomExt._InitializeFacetMap(ThermodynamicTemperatureUomExt._CF_pattern,
   ThermodynamicTemperatureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperatureUomExt', ThermodynamicTemperatureUomExt)
_module_typeBindings.ThermodynamicTemperatureUomExt = ThermodynamicTemperatureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MomentOfInertiaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MomentOfInertiaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfInertiaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3480, 1)
    _Documentation = None

    _MemberTypes = ( MomentOfInertiaUom, EnumExtensionPattern, )
MomentOfInertiaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MomentOfInertiaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentOfInertiaUomExt)
MomentOfInertiaUomExt.kg_m2 = 'kg.m2'             # originally MomentOfInertiaUom.kg_m2
MomentOfInertiaUomExt.lbm_ft2 = 'lbm.ft2'         # originally MomentOfInertiaUom.lbm_ft2
MomentOfInertiaUomExt._InitializeFacetMap(MomentOfInertiaUomExt._CF_pattern,
   MomentOfInertiaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentOfInertiaUomExt', MomentOfInertiaUomExt)
_module_typeBindings.MomentOfInertiaUomExt = MomentOfInertiaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticFieldStrengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticFieldStrengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFieldStrengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3532, 1)
    _Documentation = None

    _MemberTypes = ( MagneticFieldStrengthUom, EnumExtensionPattern, )
MagneticFieldStrengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticFieldStrengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticFieldStrengthUomExt)
MagneticFieldStrengthUomExt.Am = 'A/m'            # originally MagneticFieldStrengthUom.Am
MagneticFieldStrengthUomExt.Amm = 'A/mm'          # originally MagneticFieldStrengthUom.Amm
MagneticFieldStrengthUomExt.Oe = 'Oe'             # originally MagneticFieldStrengthUom.Oe
MagneticFieldStrengthUomExt._InitializeFacetMap(MagneticFieldStrengthUomExt._CF_pattern,
   MagneticFieldStrengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticFieldStrengthUomExt', MagneticFieldStrengthUomExt)
_module_typeBindings.MagneticFieldStrengthUomExt = MagneticFieldStrengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3535, 1)
    _Documentation = None

    _MemberTypes = ( PressureUom, EnumExtensionPattern, )
PressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureUomExt)
PressureUomExt.n0_01_lbfft2 = '0.01 lbf/ft2'      # originally PressureUom.n0_01_lbfft2
PressureUomExt.at = 'at'                          # originally PressureUom.at
PressureUomExt.atm = 'atm'                        # originally PressureUom.atm
PressureUomExt.bar = 'bar'                        # originally PressureUom.bar
PressureUomExt.cmH2O4degC = 'cmH2O[4degC]'        # originally PressureUom.cmH2O4degC
PressureUomExt.cPa = 'cPa'                        # originally PressureUom.cPa
PressureUomExt.dPa = 'dPa'                        # originally PressureUom.dPa
PressureUomExt.dynecm2 = 'dyne/cm2'               # originally PressureUom.dynecm2
PressureUomExt.EPa = 'EPa'                        # originally PressureUom.EPa
PressureUomExt.fPa = 'fPa'                        # originally PressureUom.fPa
PressureUomExt.GPa = 'GPa'                        # originally PressureUom.GPa
PressureUomExt.hbar = 'hbar'                      # originally PressureUom.hbar
PressureUomExt.inH2O39degF = 'inH2O[39degF]'      # originally PressureUom.inH2O39degF
PressureUomExt.inH2O60degF = 'inH2O[60degF]'      # originally PressureUom.inH2O60degF
PressureUomExt.inHg32degF = 'inHg[32degF]'        # originally PressureUom.inHg32degF
PressureUomExt.inHg60degF = 'inHg[60degF]'        # originally PressureUom.inHg60degF
PressureUomExt.kgfcm2 = 'kgf/cm2'                 # originally PressureUom.kgfcm2
PressureUomExt.kgfm2 = 'kgf/m2'                   # originally PressureUom.kgfm2
PressureUomExt.kgfmm2 = 'kgf/mm2'                 # originally PressureUom.kgfmm2
PressureUomExt.kNm2 = 'kN/m2'                     # originally PressureUom.kNm2
PressureUomExt.kPa = 'kPa'                        # originally PressureUom.kPa
PressureUomExt.kpsi = 'kpsi'                      # originally PressureUom.kpsi
PressureUomExt.lbfft2 = 'lbf/ft2'                 # originally PressureUom.lbfft2
PressureUomExt.mbar = 'mbar'                      # originally PressureUom.mbar
PressureUomExt.mmHg0degC = 'mmHg[0degC]'          # originally PressureUom.mmHg0degC
PressureUomExt.mPa = 'mPa'                        # originally PressureUom.mPa
PressureUomExt.MPa = 'MPa'                        # originally PressureUom.MPa
PressureUomExt.Mpsi = 'Mpsi'                      # originally PressureUom.Mpsi
PressureUomExt.Nm2 = 'N/m2'                       # originally PressureUom.Nm2
PressureUomExt.Nmm2 = 'N/mm2'                     # originally PressureUom.Nmm2
PressureUomExt.nPa = 'nPa'                        # originally PressureUom.nPa
PressureUomExt.Pa = 'Pa'                          # originally PressureUom.Pa
PressureUomExt.pPa = 'pPa'                        # originally PressureUom.pPa
PressureUomExt.psi = 'psi'                        # originally PressureUom.psi
PressureUomExt.tonfUKft2 = 'tonf[UK]/ft2'         # originally PressureUom.tonfUKft2
PressureUomExt.tonfUSft2 = 'tonf[US]/ft2'         # originally PressureUom.tonfUSft2
PressureUomExt.tonfUSin2 = 'tonf[US]/in2'         # originally PressureUom.tonfUSin2
PressureUomExt.torr = 'torr'                      # originally PressureUom.torr
PressureUomExt.TPa = 'TPa'                        # originally PressureUom.TPa
PressureUomExt.ubar = 'ubar'                      # originally PressureUom.ubar
PressureUomExt.umHg0degC = 'umHg[0degC]'          # originally PressureUom.umHg0degC
PressureUomExt.uPa = 'uPa'                        # originally PressureUom.uPa
PressureUomExt.upsi = 'upsi'                      # originally PressureUom.upsi
PressureUomExt._InitializeFacetMap(PressureUomExt._CF_pattern,
   PressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureUomExt', PressureUomExt)
_module_typeBindings.PressureUomExt = PressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstancePerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstancePerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3538, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstancePerTimeUom, EnumExtensionPattern, )
AmountOfSubstancePerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstancePerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerTimeUomExt)
AmountOfSubstancePerTimeUomExt.kat = 'kat'        # originally AmountOfSubstancePerTimeUom.kat
AmountOfSubstancePerTimeUomExt.kmolh = 'kmol/h'   # originally AmountOfSubstancePerTimeUom.kmolh
AmountOfSubstancePerTimeUomExt.kmols = 'kmol/s'   # originally AmountOfSubstancePerTimeUom.kmols
AmountOfSubstancePerTimeUomExt.lbmolh = 'lbmol/h' # originally AmountOfSubstancePerTimeUom.lbmolh
AmountOfSubstancePerTimeUomExt.lbmols = 'lbmol/s' # originally AmountOfSubstancePerTimeUom.lbmols
AmountOfSubstancePerTimeUomExt.mols = 'mol/s'     # originally AmountOfSubstancePerTimeUom.mols
AmountOfSubstancePerTimeUomExt._InitializeFacetMap(AmountOfSubstancePerTimeUomExt._CF_pattern,
   AmountOfSubstancePerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimeUomExt', AmountOfSubstancePerTimeUomExt)
_module_typeBindings.AmountOfSubstancePerTimeUomExt = AmountOfSubstancePerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3541, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerLengthUom, EnumExtensionPattern, )
LengthPerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerLengthUomExt)
LengthPerLengthUomExt.emptyString = '%'           # originally LengthPerLengthUom.emptyString
LengthPerLengthUomExt.n0_01_ftft = '0.01 ft/ft'   # originally LengthPerLengthUom.n0_01_ftft
LengthPerLengthUomExt.n130_mm = '1/30 m/m'        # originally LengthPerLengthUom.n130_mm
LengthPerLengthUomExt.Euc = 'Euc'                 # originally LengthPerLengthUom.Euc
LengthPerLengthUomExt.ftft = 'ft/ft'              # originally LengthPerLengthUom.ftft
LengthPerLengthUomExt.ftin = 'ft/in'              # originally LengthPerLengthUom.ftin
LengthPerLengthUomExt.ftm = 'ft/m'                # originally LengthPerLengthUom.ftm
LengthPerLengthUomExt.ftmi = 'ft/mi'              # originally LengthPerLengthUom.ftmi
LengthPerLengthUomExt.kmcm = 'km/cm'              # originally LengthPerLengthUom.kmcm
LengthPerLengthUomExt.mcm = 'm/cm'                # originally LengthPerLengthUom.mcm
LengthPerLengthUomExt.mkm = 'm/km'                # originally LengthPerLengthUom.mkm
LengthPerLengthUomExt.mm = 'm/m'                  # originally LengthPerLengthUom.mm
LengthPerLengthUomExt.miin = 'mi/in'              # originally LengthPerLengthUom.miin
LengthPerLengthUomExt._InitializeFacetMap(LengthPerLengthUomExt._CF_pattern,
   LengthPerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerLengthUomExt', LengthPerLengthUomExt)
_module_typeBindings.LengthPerLengthUomExt = LengthPerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TimePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TimePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3623, 1)
    _Documentation = None

    _MemberTypes = ( TimePerVolumeUom, EnumExtensionPattern, )
TimePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TimePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerVolumeUomExt)
TimePerVolumeUomExt.n0_001_dft3 = '0.001 d/ft3'   # originally TimePerVolumeUom.n0_001_dft3
TimePerVolumeUomExt.dbbl = 'd/bbl'                # originally TimePerVolumeUom.dbbl
TimePerVolumeUomExt.dft3 = 'd/ft3'                # originally TimePerVolumeUom.dft3
TimePerVolumeUomExt.dm3 = 'd/m3'                  # originally TimePerVolumeUom.dm3
TimePerVolumeUomExt.hft3 = 'h/ft3'                # originally TimePerVolumeUom.hft3
TimePerVolumeUomExt.hm3 = 'h/m3'                  # originally TimePerVolumeUom.hm3
TimePerVolumeUomExt.sft3 = 's/ft3'                # originally TimePerVolumeUom.sft3
TimePerVolumeUomExt.sL = 's/L'                    # originally TimePerVolumeUom.sL
TimePerVolumeUomExt.sm3 = 's/m3'                  # originally TimePerVolumeUom.sm3
TimePerVolumeUomExt.sqtUK = 's/qt[UK]'            # originally TimePerVolumeUom.sqtUK
TimePerVolumeUomExt.sqtUS = 's/qt[US]'            # originally TimePerVolumeUom.sqtUS
TimePerVolumeUomExt._InitializeFacetMap(TimePerVolumeUomExt._CF_pattern,
   TimePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerVolumeUomExt', TimePerVolumeUomExt)
_module_typeBindings.TimePerVolumeUomExt = TimePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class QuantityOfLightUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of QuantityOfLightUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityOfLightUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3635, 1)
    _Documentation = None

    _MemberTypes = ( QuantityOfLightUom, EnumExtensionPattern, )
QuantityOfLightUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
QuantityOfLightUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=QuantityOfLightUomExt)
QuantityOfLightUomExt.lm_s = 'lm.s'               # originally QuantityOfLightUom.lm_s
QuantityOfLightUomExt._InitializeFacetMap(QuantityOfLightUomExt._CF_pattern,
   QuantityOfLightUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'QuantityOfLightUomExt', QuantityOfLightUomExt)
_module_typeBindings.QuantityOfLightUomExt = QuantityOfLightUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricCurrentUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricCurrentUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3638, 1)
    _Documentation = None

    _MemberTypes = ( ElectricCurrentUom, EnumExtensionPattern, )
ElectricCurrentUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricCurrentUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricCurrentUomExt)
ElectricCurrentUomExt.A = 'A'                     # originally ElectricCurrentUom.A
ElectricCurrentUomExt.cA = 'cA'                   # originally ElectricCurrentUom.cA
ElectricCurrentUomExt.dA = 'dA'                   # originally ElectricCurrentUom.dA
ElectricCurrentUomExt.EA = 'EA'                   # originally ElectricCurrentUom.EA
ElectricCurrentUomExt.fA = 'fA'                   # originally ElectricCurrentUom.fA
ElectricCurrentUomExt.GA = 'GA'                   # originally ElectricCurrentUom.GA
ElectricCurrentUomExt.kA = 'kA'                   # originally ElectricCurrentUom.kA
ElectricCurrentUomExt.MA = 'MA'                   # originally ElectricCurrentUom.MA
ElectricCurrentUomExt.mA = 'mA'                   # originally ElectricCurrentUom.mA
ElectricCurrentUomExt.nA = 'nA'                   # originally ElectricCurrentUom.nA
ElectricCurrentUomExt.pA = 'pA'                   # originally ElectricCurrentUom.pA
ElectricCurrentUomExt.TA = 'TA'                   # originally ElectricCurrentUom.TA
ElectricCurrentUomExt.uA = 'uA'                   # originally ElectricCurrentUom.uA
ElectricCurrentUomExt._InitializeFacetMap(ElectricCurrentUomExt._CF_pattern,
   ElectricCurrentUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentUomExt', ElectricCurrentUomExt)
_module_typeBindings.ElectricCurrentUomExt = ElectricCurrentUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstancePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstancePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3641, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstancePerAreaUom, EnumExtensionPattern, )
AmountOfSubstancePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstancePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerAreaUomExt)
AmountOfSubstancePerAreaUomExt.molm2 = 'mol/m2'   # originally AmountOfSubstancePerAreaUom.molm2
AmountOfSubstancePerAreaUomExt._InitializeFacetMap(AmountOfSubstancePerAreaUomExt._CF_pattern,
   AmountOfSubstancePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAreaUomExt', AmountOfSubstancePerAreaUomExt)
_module_typeBindings.AmountOfSubstancePerAreaUomExt = AmountOfSubstancePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressurePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressurePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3801, 1)
    _Documentation = None

    _MemberTypes = ( PressurePerVolumeUom, EnumExtensionPattern, )
PressurePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressurePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerVolumeUomExt)
PressurePerVolumeUomExt.Pam3 = 'Pa/m3'            # originally PressurePerVolumeUom.Pam3
PressurePerVolumeUomExt.psi2_dcP_ft3 = 'psi2.d/(cP.ft3)'# originally PressurePerVolumeUom.psi2_dcP_ft3
PressurePerVolumeUomExt._InitializeFacetMap(PressurePerVolumeUomExt._CF_pattern,
   PressurePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerVolumeUomExt', PressurePerVolumeUomExt)
_module_typeBindings.PressurePerVolumeUomExt = PressurePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermalResistanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermalResistanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalResistanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3887, 1)
    _Documentation = None

    _MemberTypes = ( ThermalResistanceUom, EnumExtensionPattern, )
ThermalResistanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermalResistanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalResistanceUomExt)
ThermalResistanceUomExt.deltaKW = 'deltaK/W'      # originally ThermalResistanceUom.deltaKW
ThermalResistanceUomExt._InitializeFacetMap(ThermalResistanceUomExt._CF_pattern,
   ThermalResistanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalResistanceUomExt', ThermalResistanceUomExt)
_module_typeBindings.ThermalResistanceUomExt = ThermalResistanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LogarithmicPowerRatioUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LogarithmicPowerRatioUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3895, 1)
    _Documentation = None

    _MemberTypes = ( LogarithmicPowerRatioUom, EnumExtensionPattern, )
LogarithmicPowerRatioUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LogarithmicPowerRatioUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LogarithmicPowerRatioUomExt)
LogarithmicPowerRatioUomExt.B = 'B'               # originally LogarithmicPowerRatioUom.B
LogarithmicPowerRatioUomExt.dB = 'dB'             # originally LogarithmicPowerRatioUom.dB
LogarithmicPowerRatioUomExt._InitializeFacetMap(LogarithmicPowerRatioUomExt._CF_pattern,
   LogarithmicPowerRatioUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioUomExt', LogarithmicPowerRatioUomExt)
_module_typeBindings.LogarithmicPowerRatioUomExt = LogarithmicPowerRatioUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class SignalingEventPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of SignalingEventPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignalingEventPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3912, 1)
    _Documentation = None

    _MemberTypes = ( SignalingEventPerTimeUom, EnumExtensionPattern, )
SignalingEventPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
SignalingEventPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SignalingEventPerTimeUomExt)
SignalingEventPerTimeUomExt.Bd = 'Bd'             # originally SignalingEventPerTimeUom.Bd
SignalingEventPerTimeUomExt._InitializeFacetMap(SignalingEventPerTimeUomExt._CF_pattern,
   SignalingEventPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SignalingEventPerTimeUomExt', SignalingEventPerTimeUomExt)
_module_typeBindings.SignalingEventPerTimeUomExt = SignalingEventPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DoseEquivalentUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DoseEquivalentUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoseEquivalentUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3934, 1)
    _Documentation = None

    _MemberTypes = ( DoseEquivalentUom, EnumExtensionPattern, )
DoseEquivalentUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DoseEquivalentUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DoseEquivalentUomExt)
DoseEquivalentUomExt.mrem = 'mrem'                # originally DoseEquivalentUom.mrem
DoseEquivalentUomExt.mSv = 'mSv'                  # originally DoseEquivalentUom.mSv
DoseEquivalentUomExt.rem = 'rem'                  # originally DoseEquivalentUom.rem
DoseEquivalentUomExt.Sv = 'Sv'                    # originally DoseEquivalentUom.Sv
DoseEquivalentUomExt._InitializeFacetMap(DoseEquivalentUomExt._CF_pattern,
   DoseEquivalentUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DoseEquivalentUomExt', DoseEquivalentUomExt)
_module_typeBindings.DoseEquivalentUomExt = DoseEquivalentUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3937, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerTimeUom, EnumExtensionPattern, )
VolumePerTimePerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerTimeUomExt)
VolumePerTimePerTimeUomExt.bbld2 = 'bbl/d2'       # originally VolumePerTimePerTimeUom.bbld2
VolumePerTimePerTimeUomExt.bblh2 = 'bbl/h2'       # originally VolumePerTimePerTimeUom.bblh2
VolumePerTimePerTimeUomExt.dm3s2 = 'dm3/s2'       # originally VolumePerTimePerTimeUom.dm3s2
VolumePerTimePerTimeUomExt.ft3d2 = 'ft3/d2'       # originally VolumePerTimePerTimeUom.ft3d2
VolumePerTimePerTimeUomExt.ft3h2 = 'ft3/h2'       # originally VolumePerTimePerTimeUom.ft3h2
VolumePerTimePerTimeUomExt.ft3min2 = 'ft3/min2'   # originally VolumePerTimePerTimeUom.ft3min2
VolumePerTimePerTimeUomExt.ft3s2 = 'ft3/s2'       # originally VolumePerTimePerTimeUom.ft3s2
VolumePerTimePerTimeUomExt.galUKh2 = 'gal[UK]/h2' # originally VolumePerTimePerTimeUom.galUKh2
VolumePerTimePerTimeUomExt.galUKmin2 = 'gal[UK]/min2'# originally VolumePerTimePerTimeUom.galUKmin2
VolumePerTimePerTimeUomExt.galUSh2 = 'gal[US]/h2' # originally VolumePerTimePerTimeUom.galUSh2
VolumePerTimePerTimeUomExt.galUSmin2 = 'gal[US]/min2'# originally VolumePerTimePerTimeUom.galUSmin2
VolumePerTimePerTimeUomExt.Ls2 = 'L/s2'           # originally VolumePerTimePerTimeUom.Ls2
VolumePerTimePerTimeUomExt.m3d2 = 'm3/d2'         # originally VolumePerTimePerTimeUom.m3d2
VolumePerTimePerTimeUomExt.m3s2 = 'm3/s2'         # originally VolumePerTimePerTimeUom.m3s2
VolumePerTimePerTimeUomExt._InitializeFacetMap(VolumePerTimePerTimeUomExt._CF_pattern,
   VolumePerTimePerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerTimeUomExt', VolumePerTimePerTimeUomExt)
_module_typeBindings.VolumePerTimePerTimeUomExt = VolumePerTimePerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumetricHeatTransferCoefficientUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumetricHeatTransferCoefficientUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricHeatTransferCoefficientUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 3940, 1)
    _Documentation = None

    _MemberTypes = ( VolumetricHeatTransferCoefficientUom, EnumExtensionPattern, )
VolumetricHeatTransferCoefficientUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumetricHeatTransferCoefficientUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumetricHeatTransferCoefficientUomExt)
VolumetricHeatTransferCoefficientUomExt.BtuITh_ft3_deltaF = 'Btu[IT]/(h.ft3.deltaF)'# originally VolumetricHeatTransferCoefficientUom.BtuITh_ft3_deltaF
VolumetricHeatTransferCoefficientUomExt.BtuITs_ft3_deltaF = 'Btu[IT]/(s.ft3.deltaF)'# originally VolumetricHeatTransferCoefficientUom.BtuITs_ft3_deltaF
VolumetricHeatTransferCoefficientUomExt.kWm3_deltaK = 'kW/(m3.deltaK)'# originally VolumetricHeatTransferCoefficientUom.kWm3_deltaK
VolumetricHeatTransferCoefficientUomExt.Wm3_deltaK = 'W/(m3.deltaK)'# originally VolumetricHeatTransferCoefficientUom.Wm3_deltaK
VolumetricHeatTransferCoefficientUomExt._InitializeFacetMap(VolumetricHeatTransferCoefficientUomExt._CF_pattern,
   VolumetricHeatTransferCoefficientUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumetricHeatTransferCoefficientUomExt', VolumetricHeatTransferCoefficientUomExt)
_module_typeBindings.VolumetricHeatTransferCoefficientUomExt = VolumetricHeatTransferCoefficientUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumeFlowRatePerVolumeFlowRateUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumeFlowRatePerVolumeFlowRateUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeFlowRatePerVolumeFlowRateUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4107, 1)
    _Documentation = None

    _MemberTypes = ( VolumeFlowRatePerVolumeFlowRateUom, EnumExtensionPattern, )
VolumeFlowRatePerVolumeFlowRateUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumeFlowRatePerVolumeFlowRateUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumeFlowRatePerVolumeFlowRateUomExt)
VolumeFlowRatePerVolumeFlowRateUomExt.emptyString = '%'# originally VolumeFlowRatePerVolumeFlowRateUom.emptyString
VolumeFlowRatePerVolumeFlowRateUomExt.bbldbbld = '(bbl/d)/(bbl/d)'# originally VolumeFlowRatePerVolumeFlowRateUom.bbldbbld
VolumeFlowRatePerVolumeFlowRateUomExt.m3dm3d = '(m3/d)/(m3/d)'# originally VolumeFlowRatePerVolumeFlowRateUom.m3dm3d
VolumeFlowRatePerVolumeFlowRateUomExt.m3sm3s = '(m3/s)/(m3/s)'# originally VolumeFlowRatePerVolumeFlowRateUom.m3sm3s
VolumeFlowRatePerVolumeFlowRateUomExt.n1E6_ft3dbbld = '1E6 (ft3/d)/(bbl/d)'# originally VolumeFlowRatePerVolumeFlowRateUom.n1E6_ft3dbbld
VolumeFlowRatePerVolumeFlowRateUomExt.Euc = 'Euc' # originally VolumeFlowRatePerVolumeFlowRateUom.Euc
VolumeFlowRatePerVolumeFlowRateUomExt._InitializeFacetMap(VolumeFlowRatePerVolumeFlowRateUomExt._CF_pattern,
   VolumeFlowRatePerVolumeFlowRateUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumeFlowRatePerVolumeFlowRateUomExt', VolumeFlowRatePerVolumeFlowRateUomExt)
_module_typeBindings.VolumeFlowRatePerVolumeFlowRateUomExt = VolumeFlowRatePerVolumeFlowRateUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressureTimePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressureTimePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureTimePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4529, 1)
    _Documentation = None

    _MemberTypes = ( PressureTimePerVolumeUom, EnumExtensionPattern, )
PressureTimePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressureTimePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressureTimePerVolumeUomExt)
PressureTimePerVolumeUomExt.Pa_sm3 = 'Pa.s/m3'    # originally PressureTimePerVolumeUom.Pa_sm3
PressureTimePerVolumeUomExt.psi_dbbl = 'psi.d/bbl'# originally PressureTimePerVolumeUom.psi_dbbl
PressureTimePerVolumeUomExt._InitializeFacetMap(PressureTimePerVolumeUomExt._CF_pattern,
   PressureTimePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressureTimePerVolumeUomExt', PressureTimePerVolumeUomExt)
_module_typeBindings.PressureTimePerVolumeUomExt = PressureTimePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectromagneticMomentUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectromagneticMomentUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectromagneticMomentUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4594, 1)
    _Documentation = None

    _MemberTypes = ( ElectromagneticMomentUom, EnumExtensionPattern, )
ElectromagneticMomentUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectromagneticMomentUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectromagneticMomentUomExt)
ElectromagneticMomentUomExt.A_m2 = 'A.m2'         # originally ElectromagneticMomentUom.A_m2
ElectromagneticMomentUomExt._InitializeFacetMap(ElectromagneticMomentUomExt._CF_pattern,
   ElectromagneticMomentUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectromagneticMomentUomExt', ElectromagneticMomentUomExt)
_module_typeBindings.ElectromagneticMomentUomExt = ElectromagneticMomentUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PermittivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PermittivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PermittivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermittivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4597, 1)
    _Documentation = None

    _MemberTypes = ( PermittivityUom, EnumExtensionPattern, )
PermittivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PermittivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PermittivityUomExt)
PermittivityUomExt.Fm = 'F/m'                     # originally PermittivityUom.Fm
PermittivityUomExt.uFm = 'uF/m'                   # originally PermittivityUom.uFm
PermittivityUomExt._InitializeFacetMap(PermittivityUomExt._CF_pattern,
   PermittivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PermittivityUomExt', PermittivityUomExt)
_module_typeBindings.PermittivityUomExt = PermittivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class NormalizedPowerUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of NormalizedPowerUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NormalizedPowerUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4600, 1)
    _Documentation = None

    _MemberTypes = ( NormalizedPowerUom, EnumExtensionPattern, )
NormalizedPowerUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
NormalizedPowerUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NormalizedPowerUomExt)
NormalizedPowerUomExt.B_W = 'B.W'                 # originally NormalizedPowerUom.B_W
NormalizedPowerUomExt.dB_mW = 'dB.mW'             # originally NormalizedPowerUom.dB_mW
NormalizedPowerUomExt.dB_MW = 'dB.MW'             # originally NormalizedPowerUom.dB_MW
NormalizedPowerUomExt.dB_W = 'dB.W'               # originally NormalizedPowerUom.dB_W
NormalizedPowerUomExt._InitializeFacetMap(NormalizedPowerUomExt._CF_pattern,
   NormalizedPowerUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NormalizedPowerUomExt', NormalizedPowerUomExt)
_module_typeBindings.NormalizedPowerUomExt = NormalizedPowerUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4603, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalMassUom, EnumExtensionPattern, )
ReciprocalMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalMassUomExt)
ReciprocalMassUomExt.n1g = '1/g'                  # originally ReciprocalMassUom.n1g
ReciprocalMassUomExt.n1kg = '1/kg'                # originally ReciprocalMassUom.n1kg
ReciprocalMassUomExt.n1lbm = '1/lbm'              # originally ReciprocalMassUom.n1lbm
ReciprocalMassUomExt._InitializeFacetMap(ReciprocalMassUomExt._CF_pattern,
   ReciprocalMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassUomExt', ReciprocalMassUomExt)
_module_typeBindings.ReciprocalMassUomExt = ReciprocalMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4606, 1)
    _Documentation = None

    _MemberTypes = ( MassLengthUom, EnumExtensionPattern, )
MassLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassLengthUomExt)
MassLengthUomExt.kg_m = 'kg.m'                    # originally MassLengthUom.kg_m
MassLengthUomExt.lbm_ft = 'lbm.ft'                # originally MassLengthUom.lbm_ft
MassLengthUomExt._InitializeFacetMap(MassLengthUomExt._CF_pattern,
   MassLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassLengthUomExt', MassLengthUomExt)
_module_typeBindings.MassLengthUomExt = MassLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class SpecificHeatCapacityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of SpecificHeatCapacityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecificHeatCapacityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4609, 1)
    _Documentation = None

    _MemberTypes = ( SpecificHeatCapacityUom, EnumExtensionPattern, )
SpecificHeatCapacityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
SpecificHeatCapacityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SpecificHeatCapacityUomExt)
SpecificHeatCapacityUomExt.BtuITlbm_deltaF = 'Btu[IT]/(lbm.deltaF)'# originally SpecificHeatCapacityUom.BtuITlbm_deltaF
SpecificHeatCapacityUomExt.BtuITlbm_deltaR = 'Btu[IT]/(lbm.deltaR)'# originally SpecificHeatCapacityUom.BtuITlbm_deltaR
SpecificHeatCapacityUomExt.calthg_deltaK = 'cal[th]/(g.deltaK)'# originally SpecificHeatCapacityUom.calthg_deltaK
SpecificHeatCapacityUomExt.Jg_deltaK = 'J/(g.deltaK)'# originally SpecificHeatCapacityUom.Jg_deltaK
SpecificHeatCapacityUomExt.Jkg_deltaK = 'J/(kg.deltaK)'# originally SpecificHeatCapacityUom.Jkg_deltaK
SpecificHeatCapacityUomExt.kcalthkg_deltaC = 'kcal[th]/(kg.deltaC)'# originally SpecificHeatCapacityUom.kcalthkg_deltaC
SpecificHeatCapacityUomExt.kJkg_deltaK = 'kJ/(kg.deltaK)'# originally SpecificHeatCapacityUom.kJkg_deltaK
SpecificHeatCapacityUomExt.kW_hkg_deltaC = 'kW.h/(kg.deltaC)'# originally SpecificHeatCapacityUom.kW_hkg_deltaC
SpecificHeatCapacityUomExt._InitializeFacetMap(SpecificHeatCapacityUomExt._CF_pattern,
   SpecificHeatCapacityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SpecificHeatCapacityUomExt', SpecificHeatCapacityUomExt)
_module_typeBindings.SpecificHeatCapacityUomExt = SpecificHeatCapacityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4790, 1)
    _Documentation = None

    _MemberTypes = ( LengthUom, EnumExtensionPattern, )
LengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthUomExt)
LengthUomExt.n0_1_ft = '0.1 ft'                   # originally LengthUom.n0_1_ft
LengthUomExt.n0_1_ftUS = '0.1 ft[US]'             # originally LengthUom.n0_1_ftUS
LengthUomExt.n0_1_in = '0.1 in'                   # originally LengthUom.n0_1_in
LengthUomExt.n0_1_yd = '0.1 yd'                   # originally LengthUom.n0_1_yd
LengthUomExt.n116_in = '1/16 in'                  # originally LengthUom.n116_in
LengthUomExt.n12_ft = '1/2 ft'                    # originally LengthUom.n12_ft
LengthUomExt.n132_in = '1/32 in'                  # originally LengthUom.n132_in
LengthUomExt.n164_in = '1/64 in'                  # originally LengthUom.n164_in
LengthUomExt.n10_ft = '10 ft'                     # originally LengthUom.n10_ft
LengthUomExt.n10_in = '10 in'                     # originally LengthUom.n10_in
LengthUomExt.n10_km = '10 km'                     # originally LengthUom.n10_km
LengthUomExt.n100_ft = '100 ft'                   # originally LengthUom.n100_ft
LengthUomExt.n100_km = '100 km'                   # originally LengthUom.n100_km
LengthUomExt.n1000_ft = '1000 ft'                 # originally LengthUom.n1000_ft
LengthUomExt.n30_ft = '30 ft'                     # originally LengthUom.n30_ft
LengthUomExt.n30_m = '30 m'                       # originally LengthUom.n30_m
LengthUomExt.angstrom = 'angstrom'                # originally LengthUom.angstrom
LengthUomExt.chain = 'chain'                      # originally LengthUom.chain
LengthUomExt.chainBnA = 'chain[BnA]'              # originally LengthUom.chainBnA
LengthUomExt.chainBnB = 'chain[BnB]'              # originally LengthUom.chainBnB
LengthUomExt.chainCla = 'chain[Cla]'              # originally LengthUom.chainCla
LengthUomExt.chainInd37 = 'chain[Ind37]'          # originally LengthUom.chainInd37
LengthUomExt.chainSe = 'chain[Se]'                # originally LengthUom.chainSe
LengthUomExt.chainSeT = 'chain[SeT]'              # originally LengthUom.chainSeT
LengthUomExt.chainUS = 'chain[US]'                # originally LengthUom.chainUS
LengthUomExt.cm = 'cm'                            # originally LengthUom.cm
LengthUomExt.dam = 'dam'                          # originally LengthUom.dam
LengthUomExt.dm = 'dm'                            # originally LengthUom.dm
LengthUomExt.Em = 'Em'                            # originally LengthUom.Em
LengthUomExt.fathom = 'fathom'                    # originally LengthUom.fathom
LengthUomExt.fm = 'fm'                            # originally LengthUom.fm
LengthUomExt.ft = 'ft'                            # originally LengthUom.ft
LengthUomExt.ftBnA = 'ft[BnA]'                    # originally LengthUom.ftBnA
LengthUomExt.ftBnB = 'ft[BnB]'                    # originally LengthUom.ftBnB
LengthUomExt.ftBr36 = 'ft[Br36]'                  # originally LengthUom.ftBr36
LengthUomExt.ftBr65 = 'ft[Br65]'                  # originally LengthUom.ftBr65
LengthUomExt.ftCla = 'ft[Cla]'                    # originally LengthUom.ftCla
LengthUomExt.ftGC = 'ft[GC]'                      # originally LengthUom.ftGC
LengthUomExt.ftInd = 'ft[Ind]'                    # originally LengthUom.ftInd
LengthUomExt.ftInd37 = 'ft[Ind37]'                # originally LengthUom.ftInd37
LengthUomExt.ftInd62 = 'ft[Ind62]'                # originally LengthUom.ftInd62
LengthUomExt.ftInd75 = 'ft[Ind75]'                # originally LengthUom.ftInd75
LengthUomExt.ftSe = 'ft[Se]'                      # originally LengthUom.ftSe
LengthUomExt.ftSeT = 'ft[SeT]'                    # originally LengthUom.ftSeT
LengthUomExt.ftUS = 'ft[US]'                      # originally LengthUom.ftUS
LengthUomExt.furUS = 'fur[US]'                    # originally LengthUom.furUS
LengthUomExt.Gm = 'Gm'                            # originally LengthUom.Gm
LengthUomExt.hm = 'hm'                            # originally LengthUom.hm
LengthUomExt.in_ = 'in'                           # originally LengthUom.in_
LengthUomExt.inUS = 'in[US]'                      # originally LengthUom.inUS
LengthUomExt.km = 'km'                            # originally LengthUom.km
LengthUomExt.link = 'link'                        # originally LengthUom.link
LengthUomExt.linkBnA = 'link[BnA]'                # originally LengthUom.linkBnA
LengthUomExt.linkBnB = 'link[BnB]'                # originally LengthUom.linkBnB
LengthUomExt.linkCla = 'link[Cla]'                # originally LengthUom.linkCla
LengthUomExt.linkSe = 'link[Se]'                  # originally LengthUom.linkSe
LengthUomExt.linkSeT = 'link[SeT]'                # originally LengthUom.linkSeT
LengthUomExt.linkUS = 'link[US]'                  # originally LengthUom.linkUS
LengthUomExt.m = 'm'                              # originally LengthUom.m
LengthUomExt.mGer = 'm[Ger]'                      # originally LengthUom.mGer
LengthUomExt.mi = 'mi'                            # originally LengthUom.mi
LengthUomExt.minaut = 'mi[naut]'                  # originally LengthUom.minaut
LengthUomExt.minautUK = 'mi[nautUK]'              # originally LengthUom.minautUK
LengthUomExt.miUS = 'mi[US]'                      # originally LengthUom.miUS
LengthUomExt.mil = 'mil'                          # originally LengthUom.mil
LengthUomExt.mm = 'mm'                            # originally LengthUom.mm
LengthUomExt.Mm = 'Mm'                            # originally LengthUom.Mm
LengthUomExt.nm = 'nm'                            # originally LengthUom.nm
LengthUomExt.pm = 'pm'                            # originally LengthUom.pm
LengthUomExt.rodUS = 'rod[US]'                    # originally LengthUom.rodUS
LengthUomExt.Tm = 'Tm'                            # originally LengthUom.Tm
LengthUomExt.um = 'um'                            # originally LengthUom.um
LengthUomExt.yd = 'yd'                            # originally LengthUom.yd
LengthUomExt.ydBnA = 'yd[BnA]'                    # originally LengthUom.ydBnA
LengthUomExt.ydBnB = 'yd[BnB]'                    # originally LengthUom.ydBnB
LengthUomExt.ydCla = 'yd[Cla]'                    # originally LengthUom.ydCla
LengthUomExt.ydInd = 'yd[Ind]'                    # originally LengthUom.ydInd
LengthUomExt.ydInd37 = 'yd[Ind37]'                # originally LengthUom.ydInd37
LengthUomExt.ydInd62 = 'yd[Ind62]'                # originally LengthUom.ydInd62
LengthUomExt.ydInd75 = 'yd[Ind75]'                # originally LengthUom.ydInd75
LengthUomExt.ydSe = 'yd[Se]'                      # originally LengthUom.ydSe
LengthUomExt.ydSeT = 'yd[SeT]'                    # originally LengthUom.ydSeT
LengthUomExt.ydUS = 'yd[US]'                      # originally LengthUom.ydUS
LengthUomExt._InitializeFacetMap(LengthUomExt._CF_pattern,
   LengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthUomExt', LengthUomExt)
_module_typeBindings.LengthUomExt = LengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerVolumePerTemperatureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerVolumePerTemperatureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerTemperatureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4826, 1)
    _Documentation = None

    _MemberTypes = ( MassPerVolumePerTemperatureUom, EnumExtensionPattern, )
MassPerVolumePerTemperatureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerVolumePerTemperatureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerTemperatureUomExt)
MassPerVolumePerTemperatureUomExt.kgm3_degC = 'kg/m3.degC'# originally MassPerVolumePerTemperatureUom.kgm3_degC
MassPerVolumePerTemperatureUomExt.kgm3_K = 'kg/m3.K'# originally MassPerVolumePerTemperatureUom.kgm3_K
MassPerVolumePerTemperatureUomExt.lbft_degF = 'lb/ft.degF'# originally MassPerVolumePerTemperatureUom.lbft_degF
MassPerVolumePerTemperatureUomExt._InitializeFacetMap(MassPerVolumePerTemperatureUomExt._CF_pattern,
   MassPerVolumePerTemperatureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerTemperatureUomExt', MassPerVolumePerTemperatureUomExt)
_module_typeBindings.MassPerVolumePerTemperatureUomExt = MassPerVolumePerTemperatureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerTimePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerTimePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4853, 1)
    _Documentation = None

    _MemberTypes = ( MassPerTimePerAreaUom, EnumExtensionPattern, )
MassPerTimePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerTimePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimePerAreaUomExt)
MassPerTimePerAreaUomExt.g_ftcm3_s = 'g.ft/(cm3.s)'# originally MassPerTimePerAreaUom.g_ftcm3_s
MassPerTimePerAreaUomExt.g_mcm3_s = 'g.m/(cm3.s)' # originally MassPerTimePerAreaUom.g_mcm3_s
MassPerTimePerAreaUomExt.kgm2_s = 'kg/(m2.s)'     # originally MassPerTimePerAreaUom.kgm2_s
MassPerTimePerAreaUomExt.kPa_sm = 'kPa.s/m'       # originally MassPerTimePerAreaUom.kPa_sm
MassPerTimePerAreaUomExt.lbmft2_h = 'lbm/(ft2.h)' # originally MassPerTimePerAreaUom.lbmft2_h
MassPerTimePerAreaUomExt.lbmft2_s = 'lbm/(ft2.s)' # originally MassPerTimePerAreaUom.lbmft2_s
MassPerTimePerAreaUomExt.MPa_sm = 'MPa.s/m'       # originally MassPerTimePerAreaUom.MPa_sm
MassPerTimePerAreaUomExt._InitializeFacetMap(MassPerTimePerAreaUomExt._CF_pattern,
   MassPerTimePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerAreaUomExt', MassPerTimePerAreaUomExt)
_module_typeBindings.MassPerTimePerAreaUomExt = MassPerTimePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricChargePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricChargePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 4856, 1)
    _Documentation = None

    _MemberTypes = ( ElectricChargePerVolumeUom, EnumExtensionPattern, )
ElectricChargePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricChargePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerVolumeUomExt)
ElectricChargePerVolumeUomExt.A_sm3 = 'A.s/m3'    # originally ElectricChargePerVolumeUom.A_sm3
ElectricChargePerVolumeUomExt.Ccm3 = 'C/cm3'      # originally ElectricChargePerVolumeUom.Ccm3
ElectricChargePerVolumeUomExt.Cm3 = 'C/m3'        # originally ElectricChargePerVolumeUom.Cm3
ElectricChargePerVolumeUomExt.Cmm3 = 'C/mm3'      # originally ElectricChargePerVolumeUom.Cmm3
ElectricChargePerVolumeUomExt._InitializeFacetMap(ElectricChargePerVolumeUomExt._CF_pattern,
   ElectricChargePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerVolumeUomExt', ElectricChargePerVolumeUomExt)
_module_typeBindings.ElectricChargePerVolumeUomExt = ElectricChargePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerAmountOfSubstanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerAmountOfSubstanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAmountOfSubstanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5035, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerAmountOfSubstanceUom, EnumExtensionPattern, )
AreaPerAmountOfSubstanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerAmountOfSubstanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerAmountOfSubstanceUomExt)
AreaPerAmountOfSubstanceUomExt.m2mol = 'm2/mol'   # originally AreaPerAmountOfSubstanceUom.m2mol
AreaPerAmountOfSubstanceUomExt._InitializeFacetMap(AreaPerAmountOfSubstanceUomExt._CF_pattern,
   AreaPerAmountOfSubstanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerAmountOfSubstanceUomExt', AreaPerAmountOfSubstanceUomExt)
_module_typeBindings.AreaPerAmountOfSubstanceUomExt = AreaPerAmountOfSubstanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstancePerTimePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstancePerTimePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5038, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstancePerTimePerAreaUom, EnumExtensionPattern, )
AmountOfSubstancePerTimePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstancePerTimePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerTimePerAreaUomExt)
AmountOfSubstancePerTimePerAreaUomExt.lbmolh_ft2 = 'lbmol/(h.ft2)'# originally AmountOfSubstancePerTimePerAreaUom.lbmolh_ft2
AmountOfSubstancePerTimePerAreaUomExt.lbmols_ft2 = 'lbmol/(s.ft2)'# originally AmountOfSubstancePerTimePerAreaUom.lbmols_ft2
AmountOfSubstancePerTimePerAreaUomExt.mols_m2 = 'mol/(s.m2)'# originally AmountOfSubstancePerTimePerAreaUom.mols_m2
AmountOfSubstancePerTimePerAreaUomExt._InitializeFacetMap(AmountOfSubstancePerTimePerAreaUomExt._CF_pattern,
   AmountOfSubstancePerTimePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimePerAreaUomExt', AmountOfSubstancePerTimePerAreaUomExt)
_module_typeBindings.AmountOfSubstancePerTimePerAreaUomExt = AmountOfSubstancePerTimePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LuminousIntensityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LuminousIntensityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousIntensityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5070, 1)
    _Documentation = None

    _MemberTypes = ( LuminousIntensityUom, EnumExtensionPattern, )
LuminousIntensityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LuminousIntensityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousIntensityUomExt)
LuminousIntensityUomExt.cd = 'cd'                 # originally LuminousIntensityUom.cd
LuminousIntensityUomExt.kcd = 'kcd'               # originally LuminousIntensityUom.kcd
LuminousIntensityUomExt._InitializeFacetMap(LuminousIntensityUomExt._CF_pattern,
   LuminousIntensityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousIntensityUomExt', LuminousIntensityUomExt)
_module_typeBindings.LuminousIntensityUomExt = LuminousIntensityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AnglePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AnglePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5073, 1)
    _Documentation = None

    _MemberTypes = ( AnglePerVolumeUom, EnumExtensionPattern, )
AnglePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AnglePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AnglePerVolumeUomExt)
AnglePerVolumeUomExt.radft3 = 'rad/ft3'           # originally AnglePerVolumeUom.radft3
AnglePerVolumeUomExt.radm3 = 'rad/m3'             # originally AnglePerVolumeUom.radm3
AnglePerVolumeUomExt._InitializeFacetMap(AnglePerVolumeUomExt._CF_pattern,
   AnglePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AnglePerVolumeUomExt', AnglePerVolumeUomExt)
_module_typeBindings.AnglePerVolumeUomExt = AnglePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PowerPerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PowerPerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5076, 1)
    _Documentation = None

    _MemberTypes = ( PowerPerVolumeUom, EnumExtensionPattern, )
PowerPerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PowerPerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerVolumeUomExt)
PowerPerVolumeUomExt.BtuITh_ft3 = 'Btu[IT]/(h.ft3)'# originally PowerPerVolumeUom.BtuITh_ft3
PowerPerVolumeUomExt.BtuITs_ft3 = 'Btu[IT]/(s.ft3)'# originally PowerPerVolumeUom.BtuITs_ft3
PowerPerVolumeUomExt.calthh_cm3 = 'cal[th]/(h.cm3)'# originally PowerPerVolumeUom.calthh_cm3
PowerPerVolumeUomExt.calths_cm3 = 'cal[th]/(s.cm3)'# originally PowerPerVolumeUom.calths_cm3
PowerPerVolumeUomExt.hpft3 = 'hp/ft3'             # originally PowerPerVolumeUom.hpft3
PowerPerVolumeUomExt.kWm3 = 'kW/m3'               # originally PowerPerVolumeUom.kWm3
PowerPerVolumeUomExt.uWm3 = 'uW/m3'               # originally PowerPerVolumeUom.uWm3
PowerPerVolumeUomExt.Wm3 = 'W/m3'                 # originally PowerPerVolumeUom.Wm3
PowerPerVolumeUomExt._InitializeFacetMap(PowerPerVolumeUomExt._CF_pattern,
   PowerPerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerVolumeUomExt', PowerPerVolumeUomExt)
_module_typeBindings.PowerPerVolumeUomExt = PowerPerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5079, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerAreaUom, EnumExtensionPattern, )
AreaPerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerAreaUomExt)
AreaPerAreaUomExt.emptyString = '%'               # originally AreaPerAreaUom.emptyString
AreaPerAreaUomExt.area = '%[area]'                # originally AreaPerAreaUom.area
AreaPerAreaUomExt.cEuc = 'cEuc'                   # originally AreaPerAreaUom.cEuc
AreaPerAreaUomExt.Euc = 'Euc'                     # originally AreaPerAreaUom.Euc
AreaPerAreaUomExt.in2ft2 = 'in2/ft2'              # originally AreaPerAreaUom.in2ft2
AreaPerAreaUomExt.in2in2 = 'in2/in2'              # originally AreaPerAreaUom.in2in2
AreaPerAreaUomExt.m2m2 = 'm2/m2'                  # originally AreaPerAreaUom.m2m2
AreaPerAreaUomExt.mm2mm2 = 'mm2/mm2'              # originally AreaPerAreaUom.mm2mm2
AreaPerAreaUomExt._InitializeFacetMap(AreaPerAreaUomExt._CF_pattern,
   AreaPerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerAreaUomExt', AreaPerAreaUomExt)
_module_typeBindings.AreaPerAreaUomExt = AreaPerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PlaneAngleUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PlaneAngleUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PlaneAngleUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlaneAngleUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5179, 1)
    _Documentation = None

    _MemberTypes = ( PlaneAngleUom, EnumExtensionPattern, )
PlaneAngleUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PlaneAngleUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PlaneAngleUomExt)
PlaneAngleUomExt.n0_001_seca = '0.001 seca'       # originally PlaneAngleUom.n0_001_seca
PlaneAngleUomExt.ccgr = 'ccgr'                    # originally PlaneAngleUom.ccgr
PlaneAngleUomExt.cgr = 'cgr'                      # originally PlaneAngleUom.cgr
PlaneAngleUomExt.dega = 'dega'                    # originally PlaneAngleUom.dega
PlaneAngleUomExt.gon = 'gon'                      # originally PlaneAngleUom.gon
PlaneAngleUomExt.krad = 'krad'                    # originally PlaneAngleUom.krad
PlaneAngleUomExt.mila = 'mila'                    # originally PlaneAngleUom.mila
PlaneAngleUomExt.mina = 'mina'                    # originally PlaneAngleUom.mina
PlaneAngleUomExt.Mrad = 'Mrad'                    # originally PlaneAngleUom.Mrad
PlaneAngleUomExt.mrad = 'mrad'                    # originally PlaneAngleUom.mrad
PlaneAngleUomExt.rad = 'rad'                      # originally PlaneAngleUom.rad
PlaneAngleUomExt.rev = 'rev'                      # originally PlaneAngleUom.rev
PlaneAngleUomExt.seca = 'seca'                    # originally PlaneAngleUom.seca
PlaneAngleUomExt.urad = 'urad'                    # originally PlaneAngleUom.urad
PlaneAngleUomExt._InitializeFacetMap(PlaneAngleUomExt._CF_pattern,
   PlaneAngleUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PlaneAngleUomExt', PlaneAngleUomExt)
_module_typeBindings.PlaneAngleUomExt = PlaneAngleUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class RadiantIntensityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of RadiantIntensityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadiantIntensityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5280, 1)
    _Documentation = None

    _MemberTypes = ( RadiantIntensityUom, EnumExtensionPattern, )
RadiantIntensityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
RadiantIntensityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RadiantIntensityUomExt)
RadiantIntensityUomExt.Wsr = 'W/sr'               # originally RadiantIntensityUom.Wsr
RadiantIntensityUomExt._InitializeFacetMap(RadiantIntensityUomExt._CF_pattern,
   RadiantIntensityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RadiantIntensityUomExt', RadiantIntensityUomExt)
_module_typeBindings.RadiantIntensityUomExt = RadiantIntensityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class SecondMomentOfAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of SecondMomentOfAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecondMomentOfAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5283, 1)
    _Documentation = None

    _MemberTypes = ( SecondMomentOfAreaUom, EnumExtensionPattern, )
SecondMomentOfAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
SecondMomentOfAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SecondMomentOfAreaUomExt)
SecondMomentOfAreaUomExt.cm4 = 'cm4'              # originally SecondMomentOfAreaUom.cm4
SecondMomentOfAreaUomExt.in4 = 'in4'              # originally SecondMomentOfAreaUom.in4
SecondMomentOfAreaUomExt.m4 = 'm4'                # originally SecondMomentOfAreaUom.m4
SecondMomentOfAreaUomExt._InitializeFacetMap(SecondMomentOfAreaUomExt._CF_pattern,
   SecondMomentOfAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SecondMomentOfAreaUomExt', SecondMomentOfAreaUomExt)
_module_typeBindings.SecondMomentOfAreaUomExt = SecondMomentOfAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AbsorbedDoseUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AbsorbedDoseUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorbedDoseUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5295, 1)
    _Documentation = None

    _MemberTypes = ( AbsorbedDoseUom, EnumExtensionPattern, )
AbsorbedDoseUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AbsorbedDoseUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AbsorbedDoseUomExt)
AbsorbedDoseUomExt.cGy = 'cGy'                    # originally AbsorbedDoseUom.cGy
AbsorbedDoseUomExt.crd = 'crd'                    # originally AbsorbedDoseUom.crd
AbsorbedDoseUomExt.dGy = 'dGy'                    # originally AbsorbedDoseUom.dGy
AbsorbedDoseUomExt.drd = 'drd'                    # originally AbsorbedDoseUom.drd
AbsorbedDoseUomExt.EGy = 'EGy'                    # originally AbsorbedDoseUom.EGy
AbsorbedDoseUomExt.Erd = 'Erd'                    # originally AbsorbedDoseUom.Erd
AbsorbedDoseUomExt.fGy = 'fGy'                    # originally AbsorbedDoseUom.fGy
AbsorbedDoseUomExt.frd = 'frd'                    # originally AbsorbedDoseUom.frd
AbsorbedDoseUomExt.GGy = 'GGy'                    # originally AbsorbedDoseUom.GGy
AbsorbedDoseUomExt.Grd = 'Grd'                    # originally AbsorbedDoseUom.Grd
AbsorbedDoseUomExt.Gy = 'Gy'                      # originally AbsorbedDoseUom.Gy
AbsorbedDoseUomExt.kGy = 'kGy'                    # originally AbsorbedDoseUom.kGy
AbsorbedDoseUomExt.krd = 'krd'                    # originally AbsorbedDoseUom.krd
AbsorbedDoseUomExt.mGy = 'mGy'                    # originally AbsorbedDoseUom.mGy
AbsorbedDoseUomExt.MGy = 'MGy'                    # originally AbsorbedDoseUom.MGy
AbsorbedDoseUomExt.Mrd = 'Mrd'                    # originally AbsorbedDoseUom.Mrd
AbsorbedDoseUomExt.mrd = 'mrd'                    # originally AbsorbedDoseUom.mrd
AbsorbedDoseUomExt.nGy = 'nGy'                    # originally AbsorbedDoseUom.nGy
AbsorbedDoseUomExt.nrd = 'nrd'                    # originally AbsorbedDoseUom.nrd
AbsorbedDoseUomExt.pGy = 'pGy'                    # originally AbsorbedDoseUom.pGy
AbsorbedDoseUomExt.prd = 'prd'                    # originally AbsorbedDoseUom.prd
AbsorbedDoseUomExt.rd = 'rd'                      # originally AbsorbedDoseUom.rd
AbsorbedDoseUomExt.TGy = 'TGy'                    # originally AbsorbedDoseUom.TGy
AbsorbedDoseUomExt.Trd = 'Trd'                    # originally AbsorbedDoseUom.Trd
AbsorbedDoseUomExt.uGy = 'uGy'                    # originally AbsorbedDoseUom.uGy
AbsorbedDoseUomExt.urd = 'urd'                    # originally AbsorbedDoseUom.urd
AbsorbedDoseUomExt._InitializeFacetMap(AbsorbedDoseUomExt._CF_pattern,
   AbsorbedDoseUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AbsorbedDoseUomExt', AbsorbedDoseUomExt)
_module_typeBindings.AbsorbedDoseUomExt = AbsorbedDoseUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class HeatTransferCoefficientUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of HeatTransferCoefficientUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatTransferCoefficientUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5386, 1)
    _Documentation = None

    _MemberTypes = ( HeatTransferCoefficientUom, EnumExtensionPattern, )
HeatTransferCoefficientUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
HeatTransferCoefficientUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HeatTransferCoefficientUomExt)
HeatTransferCoefficientUomExt.BtuITh_ft2_deltaF = 'Btu[IT]/(h.ft2.deltaF)'# originally HeatTransferCoefficientUom.BtuITh_ft2_deltaF
HeatTransferCoefficientUomExt.BtuITh_ft2_deltaR = 'Btu[IT]/(h.ft2.deltaR)'# originally HeatTransferCoefficientUom.BtuITh_ft2_deltaR
HeatTransferCoefficientUomExt.BtuITh_m2_deltaC = 'Btu[IT]/(h.m2.deltaC)'# originally HeatTransferCoefficientUom.BtuITh_m2_deltaC
HeatTransferCoefficientUomExt.BtuITs_ft2_deltaF = 'Btu[IT]/(s.ft2.deltaF)'# originally HeatTransferCoefficientUom.BtuITs_ft2_deltaF
HeatTransferCoefficientUomExt.calthh_cm2_deltaC = 'cal[th]/(h.cm2.deltaC)'# originally HeatTransferCoefficientUom.calthh_cm2_deltaC
HeatTransferCoefficientUomExt.calths_cm2_deltaC = 'cal[th]/(s.cm2.deltaC)'# originally HeatTransferCoefficientUom.calths_cm2_deltaC
HeatTransferCoefficientUomExt.Js_m2_deltaC = 'J/(s.m2.deltaC)'# originally HeatTransferCoefficientUom.Js_m2_deltaC
HeatTransferCoefficientUomExt.kcalthh_m2_deltaC = 'kcal[th]/(h.m2.deltaC)'# originally HeatTransferCoefficientUom.kcalthh_m2_deltaC
HeatTransferCoefficientUomExt.kJh_m2_deltaK = 'kJ/(h.m2.deltaK)'# originally HeatTransferCoefficientUom.kJh_m2_deltaK
HeatTransferCoefficientUomExt.kWm2_deltaK = 'kW/(m2.deltaK)'# originally HeatTransferCoefficientUom.kWm2_deltaK
HeatTransferCoefficientUomExt.Wm2_deltaK = 'W/(m2.deltaK)'# originally HeatTransferCoefficientUom.Wm2_deltaK
HeatTransferCoefficientUomExt._InitializeFacetMap(HeatTransferCoefficientUomExt._CF_pattern,
   HeatTransferCoefficientUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HeatTransferCoefficientUomExt', HeatTransferCoefficientUomExt)
_module_typeBindings.HeatTransferCoefficientUomExt = HeatTransferCoefficientUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PressurePerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PressurePerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5389, 1)
    _Documentation = None

    _MemberTypes = ( PressurePerTimeUom, EnumExtensionPattern, )
PressurePerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PressurePerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PressurePerTimeUomExt)
PressurePerTimeUomExt.atmh = 'atm/h'              # originally PressurePerTimeUom.atmh
PressurePerTimeUomExt.barh = 'bar/h'              # originally PressurePerTimeUom.barh
PressurePerTimeUomExt.kPah = 'kPa/h'              # originally PressurePerTimeUom.kPah
PressurePerTimeUomExt.kPamin = 'kPa/min'          # originally PressurePerTimeUom.kPamin
PressurePerTimeUomExt.MPah = 'MPa/h'              # originally PressurePerTimeUom.MPah
PressurePerTimeUomExt.Pah = 'Pa/h'                # originally PressurePerTimeUom.Pah
PressurePerTimeUomExt.Pas = 'Pa/s'                # originally PressurePerTimeUom.Pas
PressurePerTimeUomExt.psih = 'psi/h'              # originally PressurePerTimeUom.psih
PressurePerTimeUomExt.psimin = 'psi/min'          # originally PressurePerTimeUom.psimin
PressurePerTimeUomExt._InitializeFacetMap(PressurePerTimeUomExt._CF_pattern,
   PressurePerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PressurePerTimeUomExt', PressurePerTimeUomExt)
_module_typeBindings.PressurePerTimeUomExt = PressurePerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerTimePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerTimePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5421, 1)
    _Documentation = None

    _MemberTypes = ( MassPerTimePerLengthUom, EnumExtensionPattern, )
MassPerTimePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerTimePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerTimePerLengthUomExt)
MassPerTimePerLengthUomExt.kgm_s = 'kg/(m.s)'     # originally MassPerTimePerLengthUom.kgm_s
MassPerTimePerLengthUomExt.lbmft_h = 'lbm/(ft.h)' # originally MassPerTimePerLengthUom.lbmft_h
MassPerTimePerLengthUomExt.lbmft_s = 'lbm/(ft.s)' # originally MassPerTimePerLengthUom.lbmft_s
MassPerTimePerLengthUomExt.Pa_s = 'Pa.s'          # originally MassPerTimePerLengthUom.Pa_s
MassPerTimePerLengthUomExt._InitializeFacetMap(MassPerTimePerLengthUomExt._CF_pattern,
   MassPerTimePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerLengthUomExt', MassPerTimePerLengthUomExt)
_module_typeBindings.MassPerTimePerLengthUomExt = MassPerTimePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5424, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerMassUom, EnumExtensionPattern, )
AreaPerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerMassUomExt)
AreaPerMassUomExt.cm2g = 'cm2/g'                  # originally AreaPerMassUom.cm2g
AreaPerMassUomExt.ft2lbm = 'ft2/lbm'              # originally AreaPerMassUom.ft2lbm
AreaPerMassUomExt.m2g = 'm2/g'                    # originally AreaPerMassUom.m2g
AreaPerMassUomExt.m2kg = 'm2/kg'                  # originally AreaPerMassUom.m2kg
AreaPerMassUomExt._InitializeFacetMap(AreaPerMassUomExt._CF_pattern,
   AreaPerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerMassUomExt', AreaPerMassUomExt)
_module_typeBindings.AreaPerMassUomExt = AreaPerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}CapacitanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class CapacitanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of CapacitanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CapacitanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5563, 1)
    _Documentation = None

    _MemberTypes = ( CapacitanceUom, EnumExtensionPattern, )
CapacitanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
CapacitanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CapacitanceUomExt)
CapacitanceUomExt.cF = 'cF'                       # originally CapacitanceUom.cF
CapacitanceUomExt.dF = 'dF'                       # originally CapacitanceUom.dF
CapacitanceUomExt.EF = 'EF'                       # originally CapacitanceUom.EF
CapacitanceUomExt.F = 'F'                         # originally CapacitanceUom.F
CapacitanceUomExt.fF = 'fF'                       # originally CapacitanceUom.fF
CapacitanceUomExt.GF = 'GF'                       # originally CapacitanceUom.GF
CapacitanceUomExt.kF = 'kF'                       # originally CapacitanceUom.kF
CapacitanceUomExt.mF = 'mF'                       # originally CapacitanceUom.mF
CapacitanceUomExt.MF = 'MF'                       # originally CapacitanceUom.MF
CapacitanceUomExt.nF = 'nF'                       # originally CapacitanceUom.nF
CapacitanceUomExt.pF = 'pF'                       # originally CapacitanceUom.pF
CapacitanceUomExt.TF = 'TF'                       # originally CapacitanceUom.TF
CapacitanceUomExt.uF = 'uF'                       # originally CapacitanceUom.uF
CapacitanceUomExt._InitializeFacetMap(CapacitanceUomExt._CF_pattern,
   CapacitanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CapacitanceUomExt', CapacitanceUomExt)
_module_typeBindings.CapacitanceUomExt = CapacitanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyLengthPerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyLengthPerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5575, 1)
    _Documentation = None

    _MemberTypes = ( EnergyLengthPerAreaUom, EnumExtensionPattern, )
EnergyLengthPerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyLengthPerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyLengthPerAreaUomExt)
EnergyLengthPerAreaUomExt.J_mm2 = 'J.m/m2'        # originally EnergyLengthPerAreaUom.J_mm2
EnergyLengthPerAreaUomExt.kcalth_mcm2 = 'kcal[th].m/cm2'# originally EnergyLengthPerAreaUom.kcalth_mcm2
EnergyLengthPerAreaUomExt._InitializeFacetMap(EnergyLengthPerAreaUomExt._CF_pattern,
   EnergyLengthPerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerAreaUomExt', EnergyLengthPerAreaUomExt)
_module_typeBindings.EnergyLengthPerAreaUomExt = EnergyLengthPerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricResistanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricResistanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5697, 1)
    _Documentation = None

    _MemberTypes = ( ElectricResistanceUom, EnumExtensionPattern, )
ElectricResistanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricResistanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricResistanceUomExt)
ElectricResistanceUomExt.cohm = 'cohm'            # originally ElectricResistanceUom.cohm
ElectricResistanceUomExt.dohm = 'dohm'            # originally ElectricResistanceUom.dohm
ElectricResistanceUomExt.Eohm = 'Eohm'            # originally ElectricResistanceUom.Eohm
ElectricResistanceUomExt.fohm = 'fohm'            # originally ElectricResistanceUom.fohm
ElectricResistanceUomExt.Gohm = 'Gohm'            # originally ElectricResistanceUom.Gohm
ElectricResistanceUomExt.kohm = 'kohm'            # originally ElectricResistanceUom.kohm
ElectricResistanceUomExt.Mohm = 'Mohm'            # originally ElectricResistanceUom.Mohm
ElectricResistanceUomExt.mohm = 'mohm'            # originally ElectricResistanceUom.mohm
ElectricResistanceUomExt.nohm = 'nohm'            # originally ElectricResistanceUom.nohm
ElectricResistanceUomExt.ohm = 'ohm'              # originally ElectricResistanceUom.ohm
ElectricResistanceUomExt.pohm = 'pohm'            # originally ElectricResistanceUom.pohm
ElectricResistanceUomExt.Tohm = 'Tohm'            # originally ElectricResistanceUom.Tohm
ElectricResistanceUomExt.uohm = 'uohm'            # originally ElectricResistanceUom.uohm
ElectricResistanceUomExt._InitializeFacetMap(ElectricResistanceUomExt._CF_pattern,
   ElectricResistanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricResistanceUomExt', ElectricResistanceUomExt)
_module_typeBindings.ElectricResistanceUomExt = ElectricResistanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForcePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForcePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5700, 1)
    _Documentation = None

    _MemberTypes = ( ForcePerLengthUom, EnumExtensionPattern, )
ForcePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForcePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerLengthUomExt)
ForcePerLengthUomExt.n0_01_lbfft = '0.01 lbf/ft'  # originally ForcePerLengthUom.n0_01_lbfft
ForcePerLengthUomExt.n130_lbfm = '1/30 lbf/m'     # originally ForcePerLengthUom.n130_lbfm
ForcePerLengthUomExt.n130_Nm = '1/30 N/m'         # originally ForcePerLengthUom.n130_Nm
ForcePerLengthUomExt.dynecm = 'dyne/cm'           # originally ForcePerLengthUom.dynecm
ForcePerLengthUomExt.kgfcm = 'kgf/cm'             # originally ForcePerLengthUom.kgfcm
ForcePerLengthUomExt.kNm = 'kN/m'                 # originally ForcePerLengthUom.kNm
ForcePerLengthUomExt.lbfft = 'lbf/ft'             # originally ForcePerLengthUom.lbfft
ForcePerLengthUomExt.lbfin = 'lbf/in'             # originally ForcePerLengthUom.lbfin
ForcePerLengthUomExt.mNkm = 'mN/km'               # originally ForcePerLengthUom.mNkm
ForcePerLengthUomExt.mNm = 'mN/m'                 # originally ForcePerLengthUom.mNm
ForcePerLengthUomExt.Nm = 'N/m'                   # originally ForcePerLengthUom.Nm
ForcePerLengthUomExt.pdlcm = 'pdl/cm'             # originally ForcePerLengthUom.pdlcm
ForcePerLengthUomExt.tonfUKft = 'tonf[UK]/ft'     # originally ForcePerLengthUom.tonfUKft
ForcePerLengthUomExt.tonfUSft = 'tonf[US]/ft'     # originally ForcePerLengthUom.tonfUSft
ForcePerLengthUomExt._InitializeFacetMap(ForcePerLengthUomExt._CF_pattern,
   ForcePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerLengthUomExt', ForcePerLengthUomExt)
_module_typeBindings.ForcePerLengthUomExt = ForcePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimeLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimeLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5727, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimeLengthUom, EnumExtensionPattern, )
VolumePerTimeLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimeLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimeLengthUomExt)
VolumePerTimeLengthUomExt.n1000_bbl_ftd = '1000 bbl.ft/d'# originally VolumePerTimeLengthUom.n1000_bbl_ftd
VolumePerTimeLengthUomExt.n1000_m4d = '1000 m4/d' # originally VolumePerTimeLengthUom.n1000_m4d
VolumePerTimeLengthUomExt.m4s = 'm4/s'            # originally VolumePerTimeLengthUom.m4s
VolumePerTimeLengthUomExt._InitializeFacetMap(VolumePerTimeLengthUomExt._CF_pattern,
   VolumePerTimeLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeLengthUomExt', VolumePerTimeLengthUomExt)
_module_typeBindings.VolumePerTimeLengthUomExt = VolumePerTimeLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5817, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerVolumeUom, EnumExtensionPattern, )
VolumePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerVolumeUomExt)
VolumePerVolumeUomExt.emptyString = '%'           # originally VolumePerVolumeUom.emptyString
VolumePerVolumeUomExt.vol = '%[vol]'              # originally VolumePerVolumeUom.vol
VolumePerVolumeUomExt.n0_001_bblft3 = '0.001 bbl/ft3'# originally VolumePerVolumeUom.n0_001_bblft3
VolumePerVolumeUomExt.n0_001_bblm3 = '0.001 bbl/m3'# originally VolumePerVolumeUom.n0_001_bblm3
VolumePerVolumeUomExt.n0_001_galUKbbl = '0.001 gal[UK]/bbl'# originally VolumePerVolumeUom.n0_001_galUKbbl
VolumePerVolumeUomExt.n0_001_galUKgalUK = '0.001 gal[UK]/gal[UK]'# originally VolumePerVolumeUom.n0_001_galUKgalUK
VolumePerVolumeUomExt.n0_001_galUSbbl = '0.001 gal[US]/bbl'# originally VolumePerVolumeUom.n0_001_galUSbbl
VolumePerVolumeUomExt.n0_001_galUSft3 = '0.001 gal[US]/ft3'# originally VolumePerVolumeUom.n0_001_galUSft3
VolumePerVolumeUomExt.n0_001_galUSgalUS = '0.001 gal[US]/gal[US]'# originally VolumePerVolumeUom.n0_001_galUSgalUS
VolumePerVolumeUomExt.n0_001_ptUKbbl = '0.001 pt[UK]/bbl'# originally VolumePerVolumeUom.n0_001_ptUKbbl
VolumePerVolumeUomExt.n0_01_bblbbl = '0.01 bbl/bbl'# originally VolumePerVolumeUom.n0_01_bblbbl
VolumePerVolumeUomExt.n0_1_galUSbbl = '0.1 gal[US]/bbl'# originally VolumePerVolumeUom.n0_1_galUSbbl
VolumePerVolumeUomExt.n0_1_Lbbl = '0.1 L/bbl'     # originally VolumePerVolumeUom.n0_1_Lbbl
VolumePerVolumeUomExt.n0_1_ptUSbbl = '0.1 pt[US]/bbl'# originally VolumePerVolumeUom.n0_1_ptUSbbl
VolumePerVolumeUomExt.n1000_ft3bbl = '1000 ft3/bbl'# originally VolumePerVolumeUom.n1000_ft3bbl
VolumePerVolumeUomExt.n1000_m3m3 = '1000 m3/m3'   # originally VolumePerVolumeUom.n1000_m3m3
VolumePerVolumeUomExt.n1E_6_acre_ftbbl = '1E-6 acre.ft/bbl'# originally VolumePerVolumeUom.n1E_6_acre_ftbbl
VolumePerVolumeUomExt.n1E_6_bblft3 = '1E-6 bbl/ft3'# originally VolumePerVolumeUom.n1E_6_bblft3
VolumePerVolumeUomExt.n1E_6_bblm3 = '1E-6 bbl/m3' # originally VolumePerVolumeUom.n1E_6_bblm3
VolumePerVolumeUomExt.n1E6_bblacre_ft = '1E6 bbl/(acre.ft)'# originally VolumePerVolumeUom.n1E6_bblacre_ft
VolumePerVolumeUomExt.n1E6_ft3acre_ft = '1E6 ft3/(acre.ft)'# originally VolumePerVolumeUom.n1E6_ft3acre_ft
VolumePerVolumeUomExt.n1E6_ft3bbl = '1E6 ft3/bbl' # originally VolumePerVolumeUom.n1E6_ft3bbl
VolumePerVolumeUomExt.bblacre_ft = 'bbl/(acre.ft)'# originally VolumePerVolumeUom.bblacre_ft
VolumePerVolumeUomExt.bblbbl = 'bbl/bbl'          # originally VolumePerVolumeUom.bblbbl
VolumePerVolumeUomExt.bblft3 = 'bbl/ft3'          # originally VolumePerVolumeUom.bblft3
VolumePerVolumeUomExt.bblm3 = 'bbl/m3'            # originally VolumePerVolumeUom.bblm3
VolumePerVolumeUomExt.cEuc = 'cEuc'               # originally VolumePerVolumeUom.cEuc
VolumePerVolumeUomExt.cm3cm3 = 'cm3/cm3'          # originally VolumePerVolumeUom.cm3cm3
VolumePerVolumeUomExt.cm3L = 'cm3/L'              # originally VolumePerVolumeUom.cm3L
VolumePerVolumeUomExt.cm3m3 = 'cm3/m3'            # originally VolumePerVolumeUom.cm3m3
VolumePerVolumeUomExt.dm3m3 = 'dm3/m3'            # originally VolumePerVolumeUom.dm3m3
VolumePerVolumeUomExt.Euc = 'Euc'                 # originally VolumePerVolumeUom.Euc
VolumePerVolumeUomExt.ft3bbl = 'ft3/bbl'          # originally VolumePerVolumeUom.ft3bbl
VolumePerVolumeUomExt.ft3ft3 = 'ft3/ft3'          # originally VolumePerVolumeUom.ft3ft3
VolumePerVolumeUomExt.galUKft3 = 'gal[UK]/ft3'    # originally VolumePerVolumeUom.galUKft3
VolumePerVolumeUomExt.galUSbbl = 'gal[US]/bbl'    # originally VolumePerVolumeUom.galUSbbl
VolumePerVolumeUomExt.galUSft3 = 'gal[US]/ft3'    # originally VolumePerVolumeUom.galUSft3
VolumePerVolumeUomExt.Lm3 = 'L/m3'                # originally VolumePerVolumeUom.Lm3
VolumePerVolumeUomExt.m3ha_m = 'm3/(ha.m)'        # originally VolumePerVolumeUom.m3ha_m
VolumePerVolumeUomExt.m3bbl = 'm3/bbl'            # originally VolumePerVolumeUom.m3bbl
VolumePerVolumeUomExt.m3m3 = 'm3/m3'              # originally VolumePerVolumeUom.m3m3
VolumePerVolumeUomExt.mLgalUK = 'mL/gal[UK]'      # originally VolumePerVolumeUom.mLgalUK
VolumePerVolumeUomExt.mLgalUS = 'mL/gal[US]'      # originally VolumePerVolumeUom.mLgalUS
VolumePerVolumeUomExt.mLmL = 'mL/mL'              # originally VolumePerVolumeUom.mLmL
VolumePerVolumeUomExt.ppk = 'ppk'                 # originally VolumePerVolumeUom.ppk
VolumePerVolumeUomExt.ppm = 'ppm'                 # originally VolumePerVolumeUom.ppm
VolumePerVolumeUomExt.ppmvol = 'ppm[vol]'         # originally VolumePerVolumeUom.ppmvol
VolumePerVolumeUomExt._InitializeFacetMap(VolumePerVolumeUomExt._CF_pattern,
   VolumePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerVolumeUomExt', VolumePerVolumeUomExt)
_module_typeBindings.VolumePerVolumeUomExt = VolumePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerPressureLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerPressureLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5820, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerPressureLengthUom, EnumExtensionPattern, )
VolumePerTimePerPressureLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerPressureLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerPressureLengthUomExt)
VolumePerTimePerPressureLengthUomExt.bblft_psi_d = 'bbl/(ft.psi.d)'# originally VolumePerTimePerPressureLengthUom.bblft_psi_d
VolumePerTimePerPressureLengthUomExt.ft3ft_psi_d = 'ft3/(ft.psi.d)'# originally VolumePerTimePerPressureLengthUom.ft3ft_psi_d
VolumePerTimePerPressureLengthUomExt.m2kPa_d = 'm2/(kPa.d)'# originally VolumePerTimePerPressureLengthUom.m2kPa_d
VolumePerTimePerPressureLengthUomExt.m2Pa_s = 'm2/(Pa.s)'# originally VolumePerTimePerPressureLengthUom.m2Pa_s
VolumePerTimePerPressureLengthUomExt._InitializeFacetMap(VolumePerTimePerPressureLengthUomExt._CF_pattern,
   VolumePerTimePerPressureLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureLengthUomExt', VolumePerTimePerPressureLengthUomExt)
_module_typeBindings.VolumePerTimePerPressureLengthUomExt = VolumePerTimePerPressureLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class KinematicViscosityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of KinematicViscosityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KinematicViscosityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5823, 1)
    _Documentation = None

    _MemberTypes = ( KinematicViscosityUom, EnumExtensionPattern, )
KinematicViscosityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
KinematicViscosityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=KinematicViscosityUomExt)
KinematicViscosityUomExt.cm2s = 'cm2/s'           # originally KinematicViscosityUom.cm2s
KinematicViscosityUomExt.cSt = 'cSt'              # originally KinematicViscosityUom.cSt
KinematicViscosityUomExt.ft2h = 'ft2/h'           # originally KinematicViscosityUom.ft2h
KinematicViscosityUomExt.ft2s = 'ft2/s'           # originally KinematicViscosityUom.ft2s
KinematicViscosityUomExt.in2s = 'in2/s'           # originally KinematicViscosityUom.in2s
KinematicViscosityUomExt.m2h = 'm2/h'             # originally KinematicViscosityUom.m2h
KinematicViscosityUomExt.m2s = 'm2/s'             # originally KinematicViscosityUom.m2s
KinematicViscosityUomExt.mm2s = 'mm2/s'           # originally KinematicViscosityUom.mm2s
KinematicViscosityUomExt.Pa_s_m3kg = 'Pa.s.m3/kg' # originally KinematicViscosityUom.Pa_s_m3kg
KinematicViscosityUomExt.St = 'St'                # originally KinematicViscosityUom.St
KinematicViscosityUomExt._InitializeFacetMap(KinematicViscosityUomExt._CF_pattern,
   KinematicViscosityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'KinematicViscosityUomExt', KinematicViscosityUomExt)
_module_typeBindings.KinematicViscosityUomExt = KinematicViscosityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}FrequencyUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class FrequencyUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of FrequencyUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5826, 1)
    _Documentation = None

    _MemberTypes = ( FrequencyUom, EnumExtensionPattern, )
FrequencyUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
FrequencyUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FrequencyUomExt)
FrequencyUomExt.cHz = 'cHz'                       # originally FrequencyUom.cHz
FrequencyUomExt.dHz = 'dHz'                       # originally FrequencyUom.dHz
FrequencyUomExt.EHz = 'EHz'                       # originally FrequencyUom.EHz
FrequencyUomExt.fHz = 'fHz'                       # originally FrequencyUom.fHz
FrequencyUomExt.GHz = 'GHz'                       # originally FrequencyUom.GHz
FrequencyUomExt.Hz = 'Hz'                         # originally FrequencyUom.Hz
FrequencyUomExt.kHz = 'kHz'                       # originally FrequencyUom.kHz
FrequencyUomExt.mHz = 'mHz'                       # originally FrequencyUom.mHz
FrequencyUomExt.MHz = 'MHz'                       # originally FrequencyUom.MHz
FrequencyUomExt.nHz = 'nHz'                       # originally FrequencyUom.nHz
FrequencyUomExt.pHz = 'pHz'                       # originally FrequencyUom.pHz
FrequencyUomExt.THz = 'THz'                       # originally FrequencyUom.THz
FrequencyUomExt.uHz = 'uHz'                       # originally FrequencyUom.uHz
FrequencyUomExt._InitializeFacetMap(FrequencyUomExt._CF_pattern,
   FrequencyUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FrequencyUomExt', FrequencyUomExt)
_module_typeBindings.FrequencyUomExt = FrequencyUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricChargePerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricChargePerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5956, 1)
    _Documentation = None

    _MemberTypes = ( ElectricChargePerMassUom, EnumExtensionPattern, )
ElectricChargePerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricChargePerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricChargePerMassUomExt)
ElectricChargePerMassUomExt.A_skg = 'A.s/kg'      # originally ElectricChargePerMassUom.A_skg
ElectricChargePerMassUomExt.Cg = 'C/g'            # originally ElectricChargePerMassUom.Cg
ElectricChargePerMassUomExt.Ckg = 'C/kg'          # originally ElectricChargePerMassUom.Ckg
ElectricChargePerMassUomExt._InitializeFacetMap(ElectricChargePerMassUomExt._CF_pattern,
   ElectricChargePerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerMassUomExt', ElectricChargePerMassUomExt)
_module_typeBindings.ElectricChargePerMassUomExt = ElectricChargePerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerRotationUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerRotationUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerRotationUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5959, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerRotationUom, EnumExtensionPattern, )
VolumePerRotationUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerRotationUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerRotationUomExt)
VolumePerRotationUomExt.ft3rad = 'ft3/rad'        # originally VolumePerRotationUom.ft3rad
VolumePerRotationUomExt.m3rad = 'm3/rad'          # originally VolumePerRotationUom.m3rad
VolumePerRotationUomExt.m3rev = 'm3/rev'          # originally VolumePerRotationUom.m3rev
VolumePerRotationUomExt._InitializeFacetMap(VolumePerRotationUomExt._CF_pattern,
   VolumePerRotationUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerRotationUomExt', VolumePerRotationUomExt)
_module_typeBindings.VolumePerRotationUomExt = VolumePerRotationUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerVolumePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerVolumePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5971, 1)
    _Documentation = None

    _MemberTypes = ( MassPerVolumePerLengthUom, EnumExtensionPattern, )
MassPerVolumePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerVolumePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerLengthUomExt)
MassPerVolumePerLengthUomExt.gcm4 = 'g/cm4'       # originally MassPerVolumePerLengthUom.gcm4
MassPerVolumePerLengthUomExt.kgdm4 = 'kg/dm4'     # originally MassPerVolumePerLengthUom.kgdm4
MassPerVolumePerLengthUomExt.kgm4 = 'kg/m4'       # originally MassPerVolumePerLengthUom.kgm4
MassPerVolumePerLengthUomExt.lbmgalUK_ft = 'lbm/(gal[UK].ft)'# originally MassPerVolumePerLengthUom.lbmgalUK_ft
MassPerVolumePerLengthUomExt.lbmgalUS_ft = 'lbm/(gal[US].ft)'# originally MassPerVolumePerLengthUom.lbmgalUS_ft
MassPerVolumePerLengthUomExt.lbmft4 = 'lbm/ft4'   # originally MassPerVolumePerLengthUom.lbmft4
MassPerVolumePerLengthUomExt.Pa_s2m3 = 'Pa.s2/m3' # originally MassPerVolumePerLengthUom.Pa_s2m3
MassPerVolumePerLengthUomExt._InitializeFacetMap(MassPerVolumePerLengthUomExt._CF_pattern,
   MassPerVolumePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerLengthUomExt', MassPerVolumePerLengthUomExt)
_module_typeBindings.MassPerVolumePerLengthUomExt = MassPerVolumePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyPerMassPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyPerMassPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5974, 1)
    _Documentation = None

    _MemberTypes = ( EnergyPerMassPerTimeUom, EnumExtensionPattern, )
EnergyPerMassPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyPerMassPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerMassPerTimeUomExt)
EnergyPerMassPerTimeUomExt.mremh = 'mrem/h'       # originally EnergyPerMassPerTimeUom.mremh
EnergyPerMassPerTimeUomExt.mSvh = 'mSv/h'         # originally EnergyPerMassPerTimeUom.mSvh
EnergyPerMassPerTimeUomExt.remh = 'rem/h'         # originally EnergyPerMassPerTimeUom.remh
EnergyPerMassPerTimeUomExt.Svh = 'Sv/h'           # originally EnergyPerMassPerTimeUom.Svh
EnergyPerMassPerTimeUomExt.Svs = 'Sv/s'           # originally EnergyPerMassPerTimeUom.Svs
EnergyPerMassPerTimeUomExt._InitializeFacetMap(EnergyPerMassPerTimeUomExt._CF_pattern,
   EnergyPerMassPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassPerTimeUomExt', EnergyPerMassPerTimeUomExt)
_module_typeBindings.EnergyPerMassPerTimeUomExt = EnergyPerMassPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class PowerPerPowerUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of PowerPerPowerUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerPowerUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5986, 1)
    _Documentation = None

    _MemberTypes = ( PowerPerPowerUom, EnumExtensionPattern, )
PowerPerPowerUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
PowerPerPowerUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowerPerPowerUomExt)
PowerPerPowerUomExt.emptyString = '%'             # originally PowerPerPowerUom.emptyString
PowerPerPowerUomExt.BtuIThp_h = 'Btu[IT]/(hp.h)'  # originally PowerPerPowerUom.BtuIThp_h
PowerPerPowerUomExt.Euc = 'Euc'                   # originally PowerPerPowerUom.Euc
PowerPerPowerUomExt.WkW = 'W/kW'                  # originally PowerPerPowerUom.WkW
PowerPerPowerUomExt.WW = 'W/W'                    # originally PowerPerPowerUom.WW
PowerPerPowerUomExt._InitializeFacetMap(PowerPerPowerUomExt._CF_pattern,
   PowerPerPowerUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowerPerPowerUomExt', PowerPerPowerUomExt)
_module_typeBindings.PowerPerPowerUomExt = PowerPerPowerUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 5989, 1)
    _Documentation = None

    _MemberTypes = ( MassPerAreaUom, EnumExtensionPattern, )
MassPerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerAreaUomExt)
MassPerAreaUomExt.n0_01_lbmft2 = '0.01 lbm/ft2'   # originally MassPerAreaUom.n0_01_lbmft2
MassPerAreaUomExt.kgm2 = 'kg/m2'                  # originally MassPerAreaUom.kgm2
MassPerAreaUomExt.lbmft2 = 'lbm/ft2'              # originally MassPerAreaUom.lbmft2
MassPerAreaUomExt.Mgm2 = 'Mg/m2'                  # originally MassPerAreaUom.Mgm2
MassPerAreaUomExt.tonUSft2 = 'ton[US]/ft2'        # originally MassPerAreaUom.tonUSft2
MassPerAreaUomExt._InitializeFacetMap(MassPerAreaUomExt._CF_pattern,
   MassPerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerAreaUomExt', MassPerAreaUomExt)
_module_typeBindings.MassPerAreaUomExt = MassPerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ThermalInsulanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ThermalInsulanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalInsulanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6213, 1)
    _Documentation = None

    _MemberTypes = ( ThermalInsulanceUom, EnumExtensionPattern, )
ThermalInsulanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ThermalInsulanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalInsulanceUomExt)
ThermalInsulanceUomExt.deltaC_m2_hkcalth = 'deltaC.m2.h/kcal[th]'# originally ThermalInsulanceUom.deltaC_m2_hkcalth
ThermalInsulanceUomExt.deltaF_ft2_hBtuIT = 'deltaF.ft2.h/Btu[IT]'# originally ThermalInsulanceUom.deltaF_ft2_hBtuIT
ThermalInsulanceUomExt.deltaK_m2kW = 'deltaK.m2/kW'# originally ThermalInsulanceUom.deltaK_m2kW
ThermalInsulanceUomExt.deltaK_m2W = 'deltaK.m2/W' # originally ThermalInsulanceUom.deltaK_m2W
ThermalInsulanceUomExt._InitializeFacetMap(ThermalInsulanceUomExt._CF_pattern,
   ThermalInsulanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalInsulanceUomExt', ThermalInsulanceUomExt)
_module_typeBindings.ThermalInsulanceUomExt = ThermalInsulanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}TimePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class TimePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of TimePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6216, 1)
    _Documentation = None

    _MemberTypes = ( TimePerLengthUom, EnumExtensionPattern, )
TimePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
TimePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePerLengthUomExt)
TimePerLengthUomExt.n0_001_hft = '0.001 h/ft'     # originally TimePerLengthUom.n0_001_hft
TimePerLengthUomExt.hkm = 'h/km'                  # originally TimePerLengthUom.hkm
TimePerLengthUomExt.minft = 'min/ft'              # originally TimePerLengthUom.minft
TimePerLengthUomExt.minm = 'min/m'                # originally TimePerLengthUom.minm
TimePerLengthUomExt.mscm = 'ms/cm'                # originally TimePerLengthUom.mscm
TimePerLengthUomExt.msft = 'ms/ft'                # originally TimePerLengthUom.msft
TimePerLengthUomExt.msin = 'ms/in'                # originally TimePerLengthUom.msin
TimePerLengthUomExt.msm = 'ms/m'                  # originally TimePerLengthUom.msm
TimePerLengthUomExt.nsft = 'ns/ft'                # originally TimePerLengthUom.nsft
TimePerLengthUomExt.nsm = 'ns/m'                  # originally TimePerLengthUom.nsm
TimePerLengthUomExt.scm = 's/cm'                  # originally TimePerLengthUom.scm
TimePerLengthUomExt.sft = 's/ft'                  # originally TimePerLengthUom.sft
TimePerLengthUomExt.sin = 's/in'                  # originally TimePerLengthUom.sin
TimePerLengthUomExt.sm = 's/m'                    # originally TimePerLengthUom.sm
TimePerLengthUomExt.usft = 'us/ft'                # originally TimePerLengthUom.usft
TimePerLengthUomExt.usin = 'us/in'                # originally TimePerLengthUom.usin
TimePerLengthUomExt.usm = 'us/m'                  # originally TimePerLengthUom.usm
TimePerLengthUomExt._InitializeFacetMap(TimePerLengthUomExt._CF_pattern,
   TimePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimePerLengthUomExt', TimePerLengthUomExt)
_module_typeBindings.TimePerLengthUomExt = TimePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DimensionlessUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DimensionlessUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DimensionlessUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionlessUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6219, 1)
    _Documentation = None

    _MemberTypes = ( DimensionlessUom, EnumExtensionPattern, )
DimensionlessUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DimensionlessUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DimensionlessUomExt)
DimensionlessUomExt.emptyString = '%'             # originally DimensionlessUom.emptyString
DimensionlessUomExt.cEuc = 'cEuc'                 # originally DimensionlessUom.cEuc
DimensionlessUomExt.dEuc = 'dEuc'                 # originally DimensionlessUom.dEuc
DimensionlessUomExt.EEuc = 'EEuc'                 # originally DimensionlessUom.EEuc
DimensionlessUomExt.Euc = 'Euc'                   # originally DimensionlessUom.Euc
DimensionlessUomExt.fEuc = 'fEuc'                 # originally DimensionlessUom.fEuc
DimensionlessUomExt.GEuc = 'GEuc'                 # originally DimensionlessUom.GEuc
DimensionlessUomExt.kEuc = 'kEuc'                 # originally DimensionlessUom.kEuc
DimensionlessUomExt.MEuc = 'MEuc'                 # originally DimensionlessUom.MEuc
DimensionlessUomExt.mEuc = 'mEuc'                 # originally DimensionlessUom.mEuc
DimensionlessUomExt.nEuc = 'nEuc'                 # originally DimensionlessUom.nEuc
DimensionlessUomExt.pEuc = 'pEuc'                 # originally DimensionlessUom.pEuc
DimensionlessUomExt.ppk = 'ppk'                   # originally DimensionlessUom.ppk
DimensionlessUomExt.ppm = 'ppm'                   # originally DimensionlessUom.ppm
DimensionlessUomExt.TEuc = 'TEuc'                 # originally DimensionlessUom.TEuc
DimensionlessUomExt.uEuc = 'uEuc'                 # originally DimensionlessUom.uEuc
DimensionlessUomExt._InitializeFacetMap(DimensionlessUomExt._CF_pattern,
   DimensionlessUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DimensionlessUomExt', DimensionlessUomExt)
_module_typeBindings.DimensionlessUomExt = DimensionlessUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MomentOfForceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MomentOfForceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MomentOfForceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfForceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6222, 1)
    _Documentation = None

    _MemberTypes = ( MomentOfForceUom, EnumExtensionPattern, )
MomentOfForceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MomentOfForceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MomentOfForceUomExt)
MomentOfForceUomExt.n1000_lbf_ft = '1000 lbf.ft'  # originally MomentOfForceUom.n1000_lbf_ft
MomentOfForceUomExt.daN_m = 'daN.m'               # originally MomentOfForceUom.daN_m
MomentOfForceUomExt.dN_m = 'dN.m'                 # originally MomentOfForceUom.dN_m
MomentOfForceUomExt.J = 'J'                       # originally MomentOfForceUom.J
MomentOfForceUomExt.kgf_m = 'kgf.m'               # originally MomentOfForceUom.kgf_m
MomentOfForceUomExt.kN_m = 'kN.m'                 # originally MomentOfForceUom.kN_m
MomentOfForceUomExt.lbf_ft = 'lbf.ft'             # originally MomentOfForceUom.lbf_ft
MomentOfForceUomExt.lbf_in = 'lbf.in'             # originally MomentOfForceUom.lbf_in
MomentOfForceUomExt.lbm_ft2s2 = 'lbm.ft2/s2'      # originally MomentOfForceUom.lbm_ft2s2
MomentOfForceUomExt.N_m = 'N.m'                   # originally MomentOfForceUom.N_m
MomentOfForceUomExt.pdl_ft = 'pdl.ft'             # originally MomentOfForceUom.pdl_ft
MomentOfForceUomExt.tonfUS_ft = 'tonf[US].ft'     # originally MomentOfForceUom.tonfUS_ft
MomentOfForceUomExt.tonfUS_mi = 'tonf[US].mi'     # originally MomentOfForceUom.tonfUS_mi
MomentOfForceUomExt._InitializeFacetMap(MomentOfForceUomExt._CF_pattern,
   MomentOfForceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MomentOfForceUomExt', MomentOfForceUomExt)
_module_typeBindings.MomentOfForceUomExt = MomentOfForceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DataTransferSpeedUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DataTransferSpeedUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataTransferSpeedUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6558, 1)
    _Documentation = None

    _MemberTypes = ( DataTransferSpeedUom, EnumExtensionPattern, )
DataTransferSpeedUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DataTransferSpeedUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DataTransferSpeedUomExt)
DataTransferSpeedUomExt.bits = 'bit/s'            # originally DataTransferSpeedUom.bits
DataTransferSpeedUomExt.bytes = 'byte/s'          # originally DataTransferSpeedUom.bytes
DataTransferSpeedUomExt._InitializeFacetMap(DataTransferSpeedUomExt._CF_pattern,
   DataTransferSpeedUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DataTransferSpeedUomExt', DataTransferSpeedUomExt)
_module_typeBindings.DataTransferSpeedUomExt = DataTransferSpeedUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6990, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalAreaUom, EnumExtensionPattern, )
ReciprocalAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalAreaUomExt)
ReciprocalAreaUomExt.n1ft2 = '1/ft2'              # originally ReciprocalAreaUom.n1ft2
ReciprocalAreaUomExt.n1km2 = '1/km2'              # originally ReciprocalAreaUom.n1km2
ReciprocalAreaUomExt.n1m2 = '1/m2'                # originally ReciprocalAreaUom.n1m2
ReciprocalAreaUomExt.n1mi2 = '1/mi2'              # originally ReciprocalAreaUom.n1mi2
ReciprocalAreaUomExt._InitializeFacetMap(ReciprocalAreaUomExt._CF_pattern,
   ReciprocalAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalAreaUomExt', ReciprocalAreaUomExt)
_module_typeBindings.ReciprocalAreaUomExt = ReciprocalAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AmountOfSubstancePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AmountOfSubstancePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6993, 1)
    _Documentation = None

    _MemberTypes = ( AmountOfSubstancePerVolumeUom, EnumExtensionPattern, )
AmountOfSubstancePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AmountOfSubstancePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AmountOfSubstancePerVolumeUomExt)
AmountOfSubstancePerVolumeUomExt.kmolm3 = 'kmol/m3'# originally AmountOfSubstancePerVolumeUom.kmolm3
AmountOfSubstancePerVolumeUomExt.lbmolft3 = 'lbmol/ft3'# originally AmountOfSubstancePerVolumeUom.lbmolft3
AmountOfSubstancePerVolumeUomExt.lbmolgalUK = 'lbmol/gal[UK]'# originally AmountOfSubstancePerVolumeUom.lbmolgalUK
AmountOfSubstancePerVolumeUomExt.lbmolgalUS = 'lbmol/gal[US]'# originally AmountOfSubstancePerVolumeUom.lbmolgalUS
AmountOfSubstancePerVolumeUomExt.molm3 = 'mol/m3' # originally AmountOfSubstancePerVolumeUom.molm3
AmountOfSubstancePerVolumeUomExt._InitializeFacetMap(AmountOfSubstancePerVolumeUomExt._CF_pattern,
   AmountOfSubstancePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerVolumeUomExt', AmountOfSubstancePerVolumeUomExt)
_module_typeBindings.AmountOfSubstancePerVolumeUomExt = AmountOfSubstancePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 6996, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerLengthUom, EnumExtensionPattern, )
VolumePerTimePerLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerLengthUomExt)
VolumePerTimePerLengthUomExt.n1000_ft3d_ft = '1000 ft3/(d.ft)'# originally VolumePerTimePerLengthUom.n1000_ft3d_ft
VolumePerTimePerLengthUomExt.n1000_m3d_m = '1000 m3/(d.m)'# originally VolumePerTimePerLengthUom.n1000_m3d_m
VolumePerTimePerLengthUomExt.n1000_m3h_m = '1000 m3/(h.m)'# originally VolumePerTimePerLengthUom.n1000_m3h_m
VolumePerTimePerLengthUomExt.bbld_ft = 'bbl/(d.ft)'# originally VolumePerTimePerLengthUom.bbld_ft
VolumePerTimePerLengthUomExt.ft3d_ft = 'ft3/(d.ft)'# originally VolumePerTimePerLengthUom.ft3d_ft
VolumePerTimePerLengthUomExt.galUKh_ft = 'gal[UK]/(h.ft)'# originally VolumePerTimePerLengthUom.galUKh_ft
VolumePerTimePerLengthUomExt.galUKh_in = 'gal[UK]/(h.in)'# originally VolumePerTimePerLengthUom.galUKh_in
VolumePerTimePerLengthUomExt.galUKmin_ft = 'gal[UK]/(min.ft)'# originally VolumePerTimePerLengthUom.galUKmin_ft
VolumePerTimePerLengthUomExt.galUSh_ft = 'gal[US]/(h.ft)'# originally VolumePerTimePerLengthUom.galUSh_ft
VolumePerTimePerLengthUomExt.galUSh_in = 'gal[US]/(h.in)'# originally VolumePerTimePerLengthUom.galUSh_in
VolumePerTimePerLengthUomExt.galUSmin_ft = 'gal[US]/(min.ft)'# originally VolumePerTimePerLengthUom.galUSmin_ft
VolumePerTimePerLengthUomExt.m3d_m = 'm3/(d.m)'   # originally VolumePerTimePerLengthUom.m3d_m
VolumePerTimePerLengthUomExt.m3h_m = 'm3/(h.m)'   # originally VolumePerTimePerLengthUom.m3h_m
VolumePerTimePerLengthUomExt.m3s_ft = 'm3/(s.ft)' # originally VolumePerTimePerLengthUom.m3s_ft
VolumePerTimePerLengthUomExt.m3s_m = 'm3/(s.m)'   # originally VolumePerTimePerLengthUom.m3s_m
VolumePerTimePerLengthUomExt._InitializeFacetMap(VolumePerTimePerLengthUomExt._CF_pattern,
   VolumePerTimePerLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerLengthUomExt', VolumePerTimePerLengthUomExt)
_module_typeBindings.VolumePerTimePerLengthUomExt = VolumePerTimePerLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerTemperatureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerTemperatureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTemperatureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7028, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerTemperatureUom, EnumExtensionPattern, )
LengthPerTemperatureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerTemperatureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerTemperatureUomExt)
LengthPerTemperatureUomExt.ftdeltaF = 'ft/deltaF' # originally LengthPerTemperatureUom.ftdeltaF
LengthPerTemperatureUomExt.mdeltaK = 'm/deltaK'   # originally LengthPerTemperatureUom.mdeltaK
LengthPerTemperatureUomExt._InitializeFacetMap(LengthPerTemperatureUomExt._CF_pattern,
   LengthPerTemperatureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerTemperatureUomExt', LengthPerTemperatureUomExt)
_module_typeBindings.LengthPerTemperatureUomExt = LengthPerTemperatureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerForceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForcePerForceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForcePerForceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerForceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7182, 1)
    _Documentation = None

    _MemberTypes = ( ForcePerForceUom, EnumExtensionPattern, )
ForcePerForceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForcePerForceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerForceUomExt)
ForcePerForceUomExt.emptyString = '%'             # originally ForcePerForceUom.emptyString
ForcePerForceUomExt.Euc = 'Euc'                   # originally ForcePerForceUom.Euc
ForcePerForceUomExt.kgfkgf = 'kgf/kgf'            # originally ForcePerForceUom.kgfkgf
ForcePerForceUomExt.lbflbf = 'lbf/lbf'            # originally ForcePerForceUom.lbflbf
ForcePerForceUomExt.NN = 'N/N'                    # originally ForcePerForceUom.NN
ForcePerForceUomExt._InitializeFacetMap(ForcePerForceUomExt._CF_pattern,
   ForcePerForceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerForceUomExt', ForcePerForceUomExt)
_module_typeBindings.ForcePerForceUomExt = ForcePerForceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LengthPerTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LengthPerTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7185, 1)
    _Documentation = None

    _MemberTypes = ( LengthPerTimeUom, EnumExtensionPattern, )
LengthPerTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LengthPerTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthPerTimeUomExt)
LengthPerTimeUomExt.n1000_fth = '1000 ft/h'       # originally LengthPerTimeUom.n1000_fth
LengthPerTimeUomExt.n1000_fts = '1000 ft/s'       # originally LengthPerTimeUom.n1000_fts
LengthPerTimeUomExt.cma = 'cm/a'                  # originally LengthPerTimeUom.cma
LengthPerTimeUomExt.cms = 'cm/s'                  # originally LengthPerTimeUom.cms
LengthPerTimeUomExt.dms = 'dm/s'                  # originally LengthPerTimeUom.dms
LengthPerTimeUomExt.ftd = 'ft/d'                  # originally LengthPerTimeUom.ftd
LengthPerTimeUomExt.fth = 'ft/h'                  # originally LengthPerTimeUom.fth
LengthPerTimeUomExt.ftmin = 'ft/min'              # originally LengthPerTimeUom.ftmin
LengthPerTimeUomExt.ftms = 'ft/ms'                # originally LengthPerTimeUom.ftms
LengthPerTimeUomExt.fts = 'ft/s'                  # originally LengthPerTimeUom.fts
LengthPerTimeUomExt.ftus = 'ft/us'                # originally LengthPerTimeUom.ftus
LengthPerTimeUomExt.ina = 'in/a'                  # originally LengthPerTimeUom.ina
LengthPerTimeUomExt.inmin = 'in/min'              # originally LengthPerTimeUom.inmin
LengthPerTimeUomExt.ins = 'in/s'                  # originally LengthPerTimeUom.ins
LengthPerTimeUomExt.kmh = 'km/h'                  # originally LengthPerTimeUom.kmh
LengthPerTimeUomExt.kms = 'km/s'                  # originally LengthPerTimeUom.kms
LengthPerTimeUomExt.knot = 'knot'                 # originally LengthPerTimeUom.knot
LengthPerTimeUomExt.md = 'm/d'                    # originally LengthPerTimeUom.md
LengthPerTimeUomExt.mh = 'm/h'                    # originally LengthPerTimeUom.mh
LengthPerTimeUomExt.mmin = 'm/min'                # originally LengthPerTimeUom.mmin
LengthPerTimeUomExt.mms = 'm/ms'                  # originally LengthPerTimeUom.mms
LengthPerTimeUomExt.ms = 'm/s'                    # originally LengthPerTimeUom.ms
LengthPerTimeUomExt.mih = 'mi/h'                  # originally LengthPerTimeUom.mih
LengthPerTimeUomExt.mila = 'mil/a'                # originally LengthPerTimeUom.mila
LengthPerTimeUomExt.mma = 'mm/a'                  # originally LengthPerTimeUom.mma
LengthPerTimeUomExt.mms_ = 'mm/s'                 # originally LengthPerTimeUom.mms_
LengthPerTimeUomExt.nms = 'nm/s'                  # originally LengthPerTimeUom.nms
LengthPerTimeUomExt.ums = 'um/s'                  # originally LengthPerTimeUom.ums
LengthPerTimeUomExt._InitializeFacetMap(LengthPerTimeUomExt._CF_pattern,
   LengthPerTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthPerTimeUomExt', LengthPerTimeUomExt)
_module_typeBindings.LengthPerTimeUomExt = LengthPerTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricConductivityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricConductivityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductivityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7188, 1)
    _Documentation = None

    _MemberTypes = ( ElectricConductivityUom, EnumExtensionPattern, )
ElectricConductivityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricConductivityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricConductivityUomExt)
ElectricConductivityUomExt.kSm = 'kS/m'           # originally ElectricConductivityUom.kSm
ElectricConductivityUomExt.mScm = 'mS/cm'         # originally ElectricConductivityUom.mScm
ElectricConductivityUomExt.mSm = 'mS/m'           # originally ElectricConductivityUom.mSm
ElectricConductivityUomExt.Sm = 'S/m'             # originally ElectricConductivityUom.Sm
ElectricConductivityUomExt._InitializeFacetMap(ElectricConductivityUomExt._CF_pattern,
   ElectricConductivityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricConductivityUomExt', ElectricConductivityUomExt)
_module_typeBindings.ElectricConductivityUomExt = ElectricConductivityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7235, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerVolumeUom, EnumExtensionPattern, )
VolumePerTimePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerVolumeUomExt)
VolumePerTimePerVolumeUomExt.bbld_acre_ft = 'bbl/(d.acre.ft)'# originally VolumePerTimePerVolumeUom.bbld_acre_ft
VolumePerTimePerVolumeUomExt.m3s_m3 = 'm3/(s.m3)' # originally VolumePerTimePerVolumeUom.m3s_m3
VolumePerTimePerVolumeUomExt._InitializeFacetMap(VolumePerTimePerVolumeUomExt._CF_pattern,
   VolumePerTimePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerVolumeUomExt', VolumePerTimePerVolumeUomExt)
_module_typeBindings.VolumePerTimePerVolumeUomExt = VolumePerTimePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ForcePerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ForcePerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7238, 1)
    _Documentation = None

    _MemberTypes = ( ForcePerVolumeUom, EnumExtensionPattern, )
ForcePerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ForcePerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ForcePerVolumeUomExt)
ForcePerVolumeUomExt.n0_001_psift = '0.001 psi/ft'# originally ForcePerVolumeUom.n0_001_psift
ForcePerVolumeUomExt.n0_01_psift = '0.01 psi/ft'  # originally ForcePerVolumeUom.n0_01_psift
ForcePerVolumeUomExt.atmft = 'atm/ft'             # originally ForcePerVolumeUom.atmft
ForcePerVolumeUomExt.atmhm = 'atm/hm'             # originally ForcePerVolumeUom.atmhm
ForcePerVolumeUomExt.atmm = 'atm/m'               # originally ForcePerVolumeUom.atmm
ForcePerVolumeUomExt.barkm = 'bar/km'             # originally ForcePerVolumeUom.barkm
ForcePerVolumeUomExt.barm = 'bar/m'               # originally ForcePerVolumeUom.barm
ForcePerVolumeUomExt.GPacm = 'GPa/cm'             # originally ForcePerVolumeUom.GPacm
ForcePerVolumeUomExt.kPahm = 'kPa/hm'             # originally ForcePerVolumeUom.kPahm
ForcePerVolumeUomExt.kPam = 'kPa/m'               # originally ForcePerVolumeUom.kPam
ForcePerVolumeUomExt.lbfft3 = 'lbf/ft3'           # originally ForcePerVolumeUom.lbfft3
ForcePerVolumeUomExt.lbfgalUS = 'lbf/gal[US]'     # originally ForcePerVolumeUom.lbfgalUS
ForcePerVolumeUomExt.MPam = 'MPa/m'               # originally ForcePerVolumeUom.MPam
ForcePerVolumeUomExt.Nm3 = 'N/m3'                 # originally ForcePerVolumeUom.Nm3
ForcePerVolumeUomExt.Pam = 'Pa/m'                 # originally ForcePerVolumeUom.Pam
ForcePerVolumeUomExt.psift = 'psi/ft'             # originally ForcePerVolumeUom.psift
ForcePerVolumeUomExt.psim = 'psi/m'               # originally ForcePerVolumeUom.psim
ForcePerVolumeUomExt._InitializeFacetMap(ForcePerVolumeUomExt._CF_pattern,
   ForcePerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ForcePerVolumeUomExt', ForcePerVolumeUomExt)
_module_typeBindings.ForcePerVolumeUomExt = ForcePerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalLengthUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalLengthUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalLengthUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7310, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalLengthUom, EnumExtensionPattern, )
ReciprocalLengthUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalLengthUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalLengthUomExt)
ReciprocalLengthUomExt.n1angstrom = '1/angstrom'  # originally ReciprocalLengthUom.n1angstrom
ReciprocalLengthUomExt.n1cm = '1/cm'              # originally ReciprocalLengthUom.n1cm
ReciprocalLengthUomExt.n1ft = '1/ft'              # originally ReciprocalLengthUom.n1ft
ReciprocalLengthUomExt.n1in = '1/in'              # originally ReciprocalLengthUom.n1in
ReciprocalLengthUomExt.n1m = '1/m'                # originally ReciprocalLengthUom.n1m
ReciprocalLengthUomExt.n1mi = '1/mi'              # originally ReciprocalLengthUom.n1mi
ReciprocalLengthUomExt.n1mm = '1/mm'              # originally ReciprocalLengthUom.n1mm
ReciprocalLengthUomExt.n1nm = '1/nm'              # originally ReciprocalLengthUom.n1nm
ReciprocalLengthUomExt.n1yd = '1/yd'              # originally ReciprocalLengthUom.n1yd
ReciprocalLengthUomExt.n1E_9_1ft = '1E-9 1/ft'    # originally ReciprocalLengthUom.n1E_9_1ft
ReciprocalLengthUomExt._InitializeFacetMap(ReciprocalLengthUomExt._CF_pattern,
   ReciprocalLengthUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalLengthUomExt', ReciprocalLengthUomExt)
_module_typeBindings.ReciprocalLengthUomExt = ReciprocalLengthUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MagneticPermeabilityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MagneticPermeabilityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticPermeabilityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7313, 1)
    _Documentation = None

    _MemberTypes = ( MagneticPermeabilityUom, EnumExtensionPattern, )
MagneticPermeabilityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MagneticPermeabilityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MagneticPermeabilityUomExt)
MagneticPermeabilityUomExt.Hm = 'H/m'             # originally MagneticPermeabilityUom.Hm
MagneticPermeabilityUomExt.uHm = 'uH/m'           # originally MagneticPermeabilityUom.uHm
MagneticPermeabilityUomExt._InitializeFacetMap(MagneticPermeabilityUomExt._CF_pattern,
   MagneticPermeabilityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MagneticPermeabilityUomExt', MagneticPermeabilityUomExt)
_module_typeBindings.MagneticPermeabilityUomExt = MagneticPermeabilityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7545, 1)
    _Documentation = None

    _MemberTypes = ( AreaUom, EnumExtensionPattern, )
AreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaUomExt)
AreaUomExt.acre = 'acre'                          # originally AreaUom.acre
AreaUomExt.b = 'b'                                # originally AreaUom.b
AreaUomExt.cm2 = 'cm2'                            # originally AreaUom.cm2
AreaUomExt.ft2 = 'ft2'                            # originally AreaUom.ft2
AreaUomExt.ha = 'ha'                              # originally AreaUom.ha
AreaUomExt.in2 = 'in2'                            # originally AreaUom.in2
AreaUomExt.km2 = 'km2'                            # originally AreaUom.km2
AreaUomExt.m2 = 'm2'                              # originally AreaUom.m2
AreaUomExt.miUS2 = 'mi[US]2'                      # originally AreaUom.miUS2
AreaUomExt.mi2 = 'mi2'                            # originally AreaUom.mi2
AreaUomExt.mm2 = 'mm2'                            # originally AreaUom.mm2
AreaUomExt.section = 'section'                    # originally AreaUom.section
AreaUomExt.um2 = 'um2'                            # originally AreaUom.um2
AreaUomExt.yd2 = 'yd2'                            # originally AreaUom.yd2
AreaUomExt._InitializeFacetMap(AreaUomExt._CF_pattern,
   AreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaUomExt', AreaUomExt)
_module_typeBindings.AreaUomExt = AreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyPerVolumeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyPerVolumeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerVolumeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7824, 1)
    _Documentation = None

    _MemberTypes = ( EnergyPerVolumeUom, EnumExtensionPattern, )
EnergyPerVolumeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyPerVolumeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyPerVolumeUomExt)
EnergyPerVolumeUomExt.BtuITbbl = 'Btu[IT]/bbl'    # originally EnergyPerVolumeUom.BtuITbbl
EnergyPerVolumeUomExt.BtuITft3 = 'Btu[IT]/ft3'    # originally EnergyPerVolumeUom.BtuITft3
EnergyPerVolumeUomExt.BtuITgalUK = 'Btu[IT]/gal[UK]'# originally EnergyPerVolumeUom.BtuITgalUK
EnergyPerVolumeUomExt.BtuITgalUS = 'Btu[IT]/gal[US]'# originally EnergyPerVolumeUom.BtuITgalUS
EnergyPerVolumeUomExt.calthcm3 = 'cal[th]/cm3'    # originally EnergyPerVolumeUom.calthcm3
EnergyPerVolumeUomExt.calthmL = 'cal[th]/mL'      # originally EnergyPerVolumeUom.calthmL
EnergyPerVolumeUomExt.calthmm3 = 'cal[th]/mm3'    # originally EnergyPerVolumeUom.calthmm3
EnergyPerVolumeUomExt.ergcm3 = 'erg/cm3'          # originally EnergyPerVolumeUom.ergcm3
EnergyPerVolumeUomExt.ergm3 = 'erg/m3'            # originally EnergyPerVolumeUom.ergm3
EnergyPerVolumeUomExt.hp_hbbl = 'hp.h/bbl'        # originally EnergyPerVolumeUom.hp_hbbl
EnergyPerVolumeUomExt.Jdm3 = 'J/dm3'              # originally EnergyPerVolumeUom.Jdm3
EnergyPerVolumeUomExt.Jm3 = 'J/m3'                # originally EnergyPerVolumeUom.Jm3
EnergyPerVolumeUomExt.kcalthcm3 = 'kcal[th]/cm3'  # originally EnergyPerVolumeUom.kcalthcm3
EnergyPerVolumeUomExt.kcalthm3 = 'kcal[th]/m3'    # originally EnergyPerVolumeUom.kcalthm3
EnergyPerVolumeUomExt.kJdm3 = 'kJ/dm3'            # originally EnergyPerVolumeUom.kJdm3
EnergyPerVolumeUomExt.kJm3 = 'kJ/m3'              # originally EnergyPerVolumeUom.kJm3
EnergyPerVolumeUomExt.kW_hdm3 = 'kW.h/dm3'        # originally EnergyPerVolumeUom.kW_hdm3
EnergyPerVolumeUomExt.kW_hm3 = 'kW.h/m3'          # originally EnergyPerVolumeUom.kW_hm3
EnergyPerVolumeUomExt.lbf_ftbbl = 'lbf.ft/bbl'    # originally EnergyPerVolumeUom.lbf_ftbbl
EnergyPerVolumeUomExt.lbf_ftgalUS = 'lbf.ft/gal[US]'# originally EnergyPerVolumeUom.lbf_ftgalUS
EnergyPerVolumeUomExt.MJm3 = 'MJ/m3'              # originally EnergyPerVolumeUom.MJm3
EnergyPerVolumeUomExt.MW_hm3 = 'MW.h/m3'          # originally EnergyPerVolumeUom.MW_hm3
EnergyPerVolumeUomExt.tonfUS_mibbl = 'tonf[US].mi/bbl'# originally EnergyPerVolumeUom.tonfUS_mibbl
EnergyPerVolumeUomExt._InitializeFacetMap(EnergyPerVolumeUomExt._CF_pattern,
   EnergyPerVolumeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyPerVolumeUomExt', EnergyPerVolumeUomExt)
_module_typeBindings.EnergyPerVolumeUomExt = EnergyPerVolumeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DynamicViscosityUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DynamicViscosityUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicViscosityUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7890, 1)
    _Documentation = None

    _MemberTypes = ( DynamicViscosityUom, EnumExtensionPattern, )
DynamicViscosityUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DynamicViscosityUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DynamicViscosityUomExt)
DynamicViscosityUomExt.cP = 'cP'                  # originally DynamicViscosityUom.cP
DynamicViscosityUomExt.dP = 'dP'                  # originally DynamicViscosityUom.dP
DynamicViscosityUomExt.dyne_scm2 = 'dyne.s/cm2'   # originally DynamicViscosityUom.dyne_scm2
DynamicViscosityUomExt.EP = 'EP'                  # originally DynamicViscosityUom.EP
DynamicViscosityUomExt.fP = 'fP'                  # originally DynamicViscosityUom.fP
DynamicViscosityUomExt.GP = 'GP'                  # originally DynamicViscosityUom.GP
DynamicViscosityUomExt.kgf_sm2 = 'kgf.s/m2'       # originally DynamicViscosityUom.kgf_sm2
DynamicViscosityUomExt.kP = 'kP'                  # originally DynamicViscosityUom.kP
DynamicViscosityUomExt.lbf_sft2 = 'lbf.s/ft2'     # originally DynamicViscosityUom.lbf_sft2
DynamicViscosityUomExt.lbf_sin2 = 'lbf.s/in2'     # originally DynamicViscosityUom.lbf_sin2
DynamicViscosityUomExt.mP = 'mP'                  # originally DynamicViscosityUom.mP
DynamicViscosityUomExt.MP = 'MP'                  # originally DynamicViscosityUom.MP
DynamicViscosityUomExt.mPa_s = 'mPa.s'            # originally DynamicViscosityUom.mPa_s
DynamicViscosityUomExt.N_sm2 = 'N.s/m2'           # originally DynamicViscosityUom.N_sm2
DynamicViscosityUomExt.nP = 'nP'                  # originally DynamicViscosityUom.nP
DynamicViscosityUomExt.P = 'P'                    # originally DynamicViscosityUom.P
DynamicViscosityUomExt.Pa_s = 'Pa.s'              # originally DynamicViscosityUom.Pa_s
DynamicViscosityUomExt.pP = 'pP'                  # originally DynamicViscosityUom.pP
DynamicViscosityUomExt.psi_s = 'psi.s'            # originally DynamicViscosityUom.psi_s
DynamicViscosityUomExt.TP = 'TP'                  # originally DynamicViscosityUom.TP
DynamicViscosityUomExt.uP = 'uP'                  # originally DynamicViscosityUom.uP
DynamicViscosityUomExt._InitializeFacetMap(DynamicViscosityUomExt._CF_pattern,
   DynamicViscosityUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DynamicViscosityUomExt', DynamicViscosityUomExt)
_module_typeBindings.DynamicViscosityUomExt = DynamicViscosityUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerTimePerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerTimePerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 7922, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerTimePerPressureUom, EnumExtensionPattern, )
VolumePerTimePerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerTimePerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerTimePerPressureUomExt)
VolumePerTimePerPressureUomExt.n1000_ft3psi_d = '1000 ft3/(psi.d)'# originally VolumePerTimePerPressureUom.n1000_ft3psi_d
VolumePerTimePerPressureUomExt.bblkPa_d = 'bbl/(kPa.d)'# originally VolumePerTimePerPressureUom.bblkPa_d
VolumePerTimePerPressureUomExt.bblpsi_d = 'bbl/(psi.d)'# originally VolumePerTimePerPressureUom.bblpsi_d
VolumePerTimePerPressureUomExt.Lbar_min = 'L/(bar.min)'# originally VolumePerTimePerPressureUom.Lbar_min
VolumePerTimePerPressureUomExt.m3bar_d = 'm3/(bar.d)'# originally VolumePerTimePerPressureUom.m3bar_d
VolumePerTimePerPressureUomExt.m3bar_h = 'm3/(bar.h)'# originally VolumePerTimePerPressureUom.m3bar_h
VolumePerTimePerPressureUomExt.m3bar_min = 'm3/(bar.min)'# originally VolumePerTimePerPressureUom.m3bar_min
VolumePerTimePerPressureUomExt.m3kPa_d = 'm3/(kPa.d)'# originally VolumePerTimePerPressureUom.m3kPa_d
VolumePerTimePerPressureUomExt.m3kPa_h = 'm3/(kPa.h)'# originally VolumePerTimePerPressureUom.m3kPa_h
VolumePerTimePerPressureUomExt.m3Pa_s = 'm3/(Pa.s)'# originally VolumePerTimePerPressureUom.m3Pa_s
VolumePerTimePerPressureUomExt.m3psi_d = 'm3/(psi.d)'# originally VolumePerTimePerPressureUom.m3psi_d
VolumePerTimePerPressureUomExt._InitializeFacetMap(VolumePerTimePerPressureUomExt._CF_pattern,
   VolumePerTimePerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureUomExt', VolumePerTimePerPressureUomExt)
_module_typeBindings.VolumePerTimePerPressureUomExt = VolumePerTimePerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ElectricPotentialDifferenceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ElectricPotentialDifferenceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricPotentialDifferenceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8205, 1)
    _Documentation = None

    _MemberTypes = ( ElectricPotentialDifferenceUom, EnumExtensionPattern, )
ElectricPotentialDifferenceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ElectricPotentialDifferenceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ElectricPotentialDifferenceUomExt)
ElectricPotentialDifferenceUomExt.cV = 'cV'       # originally ElectricPotentialDifferenceUom.cV
ElectricPotentialDifferenceUomExt.dV = 'dV'       # originally ElectricPotentialDifferenceUom.dV
ElectricPotentialDifferenceUomExt.fV = 'fV'       # originally ElectricPotentialDifferenceUom.fV
ElectricPotentialDifferenceUomExt.GV = 'GV'       # originally ElectricPotentialDifferenceUom.GV
ElectricPotentialDifferenceUomExt.kV = 'kV'       # originally ElectricPotentialDifferenceUom.kV
ElectricPotentialDifferenceUomExt.mV = 'mV'       # originally ElectricPotentialDifferenceUom.mV
ElectricPotentialDifferenceUomExt.MV = 'MV'       # originally ElectricPotentialDifferenceUom.MV
ElectricPotentialDifferenceUomExt.nV = 'nV'       # originally ElectricPotentialDifferenceUom.nV
ElectricPotentialDifferenceUomExt.pV = 'pV'       # originally ElectricPotentialDifferenceUom.pV
ElectricPotentialDifferenceUomExt.TV = 'TV'       # originally ElectricPotentialDifferenceUom.TV
ElectricPotentialDifferenceUomExt.uV = 'uV'       # originally ElectricPotentialDifferenceUom.uV
ElectricPotentialDifferenceUomExt.V = 'V'         # originally ElectricPotentialDifferenceUom.V
ElectricPotentialDifferenceUomExt._InitializeFacetMap(ElectricPotentialDifferenceUomExt._CF_pattern,
   ElectricPotentialDifferenceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ElectricPotentialDifferenceUomExt', ElectricPotentialDifferenceUomExt)
_module_typeBindings.ElectricPotentialDifferenceUomExt = ElectricPotentialDifferenceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8505, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalTimeUom, EnumExtensionPattern, )
ReciprocalTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalTimeUomExt)
ReciprocalTimeUomExt.n1a = '1/a'                  # originally ReciprocalTimeUom.n1a
ReciprocalTimeUomExt.n1d = '1/d'                  # originally ReciprocalTimeUom.n1d
ReciprocalTimeUomExt.n1h = '1/h'                  # originally ReciprocalTimeUom.n1h
ReciprocalTimeUomExt.n1min = '1/min'              # originally ReciprocalTimeUom.n1min
ReciprocalTimeUomExt.n1ms = '1/ms'                # originally ReciprocalTimeUom.n1ms
ReciprocalTimeUomExt.n1s = '1/s'                  # originally ReciprocalTimeUom.n1s
ReciprocalTimeUomExt.n1us = '1/us'                # originally ReciprocalTimeUom.n1us
ReciprocalTimeUomExt.n1wk = '1/wk'                # originally ReciprocalTimeUom.n1wk
ReciprocalTimeUomExt._InitializeFacetMap(ReciprocalTimeUomExt._CF_pattern,
   ReciprocalTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalTimeUomExt', ReciprocalTimeUomExt)
_module_typeBindings.ReciprocalTimeUomExt = ReciprocalTimeUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}InductanceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class InductanceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of InductanceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InductanceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8542, 1)
    _Documentation = None

    _MemberTypes = ( InductanceUom, EnumExtensionPattern, )
InductanceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
InductanceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=InductanceUomExt)
InductanceUomExt.cH = 'cH'                        # originally InductanceUom.cH
InductanceUomExt.dH = 'dH'                        # originally InductanceUom.dH
InductanceUomExt.EH = 'EH'                        # originally InductanceUom.EH
InductanceUomExt.fH = 'fH'                        # originally InductanceUom.fH
InductanceUomExt.GH = 'GH'                        # originally InductanceUom.GH
InductanceUomExt.H = 'H'                          # originally InductanceUom.H
InductanceUomExt.kH = 'kH'                        # originally InductanceUom.kH
InductanceUomExt.MH = 'MH'                        # originally InductanceUom.MH
InductanceUomExt.mH = 'mH'                        # originally InductanceUom.mH
InductanceUomExt.nH = 'nH'                        # originally InductanceUom.nH
InductanceUomExt.TH = 'TH'                        # originally InductanceUom.TH
InductanceUomExt.uH = 'uH'                        # originally InductanceUom.uH
InductanceUomExt._InitializeFacetMap(InductanceUomExt._CF_pattern,
   InductanceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'InductanceUomExt', InductanceUomExt)
_module_typeBindings.InductanceUomExt = InductanceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LinearAccelerationUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LinearAccelerationUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearAccelerationUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8545, 1)
    _Documentation = None

    _MemberTypes = ( LinearAccelerationUom, EnumExtensionPattern, )
LinearAccelerationUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LinearAccelerationUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LinearAccelerationUomExt)
LinearAccelerationUomExt.cms2 = 'cm/s2'           # originally LinearAccelerationUom.cms2
LinearAccelerationUomExt.fts2 = 'ft/s2'           # originally LinearAccelerationUom.fts2
LinearAccelerationUomExt.Gal = 'Gal'              # originally LinearAccelerationUom.Gal
LinearAccelerationUomExt.gn = 'gn'                # originally LinearAccelerationUom.gn
LinearAccelerationUomExt.ins2 = 'in/s2'           # originally LinearAccelerationUom.ins2
LinearAccelerationUomExt.ms2 = 'm/s2'             # originally LinearAccelerationUom.ms2
LinearAccelerationUomExt.mGal = 'mGal'            # originally LinearAccelerationUom.mGal
LinearAccelerationUomExt.mgn = 'mgn'              # originally LinearAccelerationUom.mgn
LinearAccelerationUomExt._InitializeFacetMap(LinearAccelerationUomExt._CF_pattern,
   LinearAccelerationUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LinearAccelerationUomExt', LinearAccelerationUomExt)
_module_typeBindings.LinearAccelerationUomExt = LinearAccelerationUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class EnergyLengthPerTimeAreaTemperatureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of EnergyLengthPerTimeAreaTemperatureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerTimeAreaTemperatureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8607, 1)
    _Documentation = None

    _MemberTypes = ( EnergyLengthPerTimeAreaTemperatureUom, EnumExtensionPattern, )
EnergyLengthPerTimeAreaTemperatureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
EnergyLengthPerTimeAreaTemperatureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EnergyLengthPerTimeAreaTemperatureUomExt)
EnergyLengthPerTimeAreaTemperatureUomExt.BtuIT_inh_ft2_deltaF = 'Btu[IT].in/(h.ft2.deltaF)'# originally EnergyLengthPerTimeAreaTemperatureUom.BtuIT_inh_ft2_deltaF
EnergyLengthPerTimeAreaTemperatureUomExt.J_ms_m2_deltaK = 'J.m/(s.m2.deltaK)'# originally EnergyLengthPerTimeAreaTemperatureUom.J_ms_m2_deltaK
EnergyLengthPerTimeAreaTemperatureUomExt.kJ_mh_m2_deltaK = 'kJ.m/(h.m2.deltaK)'# originally EnergyLengthPerTimeAreaTemperatureUom.kJ_mh_m2_deltaK
EnergyLengthPerTimeAreaTemperatureUomExt.Wm_deltaK = 'W/(m.deltaK)'# originally EnergyLengthPerTimeAreaTemperatureUom.Wm_deltaK
EnergyLengthPerTimeAreaTemperatureUomExt._InitializeFacetMap(EnergyLengthPerTimeAreaTemperatureUomExt._CF_pattern,
   EnergyLengthPerTimeAreaTemperatureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerTimeAreaTemperatureUomExt', EnergyLengthPerTimeAreaTemperatureUomExt)
_module_typeBindings.EnergyLengthPerTimeAreaTemperatureUomExt = EnergyLengthPerTimeAreaTemperatureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class FrequencyIntervalUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of FrequencyIntervalUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyIntervalUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8717, 1)
    _Documentation = None

    _MemberTypes = ( FrequencyIntervalUom, EnumExtensionPattern, )
FrequencyIntervalUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
FrequencyIntervalUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FrequencyIntervalUomExt)
FrequencyIntervalUomExt.O = 'O'                   # originally FrequencyIntervalUom.O
FrequencyIntervalUomExt._InitializeFacetMap(FrequencyIntervalUomExt._CF_pattern,
   FrequencyIntervalUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FrequencyIntervalUomExt', FrequencyIntervalUomExt)
_module_typeBindings.FrequencyIntervalUomExt = FrequencyIntervalUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}AreaPerCountUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class AreaPerCountUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of AreaPerCountUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerCountUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8720, 1)
    _Documentation = None

    _MemberTypes = ( AreaPerCountUom, EnumExtensionPattern, )
AreaPerCountUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
AreaPerCountUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AreaPerCountUomExt)
AreaPerCountUomExt.belectron = 'b/electron'       # originally AreaPerCountUom.belectron
AreaPerCountUomExt._InitializeFacetMap(AreaPerCountUomExt._CF_pattern,
   AreaPerCountUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AreaPerCountUomExt', AreaPerCountUomExt)
_module_typeBindings.AreaPerCountUomExt = AreaPerCountUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}DigitalStorageUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class DigitalStorageUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of DigitalStorageUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalStorageUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8757, 1)
    _Documentation = None

    _MemberTypes = ( DigitalStorageUom, EnumExtensionPattern, )
DigitalStorageUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
DigitalStorageUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DigitalStorageUomExt)
DigitalStorageUomExt.bit = 'bit'                  # originally DigitalStorageUom.bit
DigitalStorageUomExt.byte = 'byte'                # originally DigitalStorageUom.byte
DigitalStorageUomExt.Kibyte = 'Kibyte'            # originally DigitalStorageUom.Kibyte
DigitalStorageUomExt.Mibyte = 'Mibyte'            # originally DigitalStorageUom.Mibyte
DigitalStorageUomExt._InitializeFacetMap(DigitalStorageUomExt._CF_pattern,
   DigitalStorageUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DigitalStorageUomExt', DigitalStorageUomExt)
_module_typeBindings.DigitalStorageUomExt = DigitalStorageUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8760, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerPressureUom, EnumExtensionPattern, )
VolumePerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerPressureUomExt)
VolumePerPressureUomExt.bblpsi = 'bbl/psi'        # originally VolumePerPressureUom.bblpsi
VolumePerPressureUomExt.m3kPa = 'm3/kPa'          # originally VolumePerPressureUom.m3kPa
VolumePerPressureUomExt.m3Pa = 'm3/Pa'            # originally VolumePerPressureUom.m3Pa
VolumePerPressureUomExt._InitializeFacetMap(VolumePerPressureUomExt._CF_pattern,
   VolumePerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerPressureUomExt', VolumePerPressureUomExt)
_module_typeBindings.VolumePerPressureUomExt = VolumePerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VerticalCoordinateUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VerticalCoordinateUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalCoordinateUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8763, 1)
    _Documentation = None

    _MemberTypes = ( VerticalCoordinateUom, EnumExtensionPattern, )
VerticalCoordinateUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VerticalCoordinateUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VerticalCoordinateUomExt)
VerticalCoordinateUomExt.m = 'm'                  # originally VerticalCoordinateUom.m
VerticalCoordinateUomExt.ft = 'ft'                # originally VerticalCoordinateUom.ft
VerticalCoordinateUomExt.ftUS = 'ftUS'            # originally VerticalCoordinateUom.ftUS
VerticalCoordinateUomExt.ftBr65 = 'ftBr(65)'      # originally VerticalCoordinateUom.ftBr65
VerticalCoordinateUomExt._InitializeFacetMap(VerticalCoordinateUomExt._CF_pattern,
   VerticalCoordinateUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VerticalCoordinateUomExt', VerticalCoordinateUomExt)
_module_typeBindings.VerticalCoordinateUomExt = VerticalCoordinateUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LuminousFluxUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LuminousFluxUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LuminousFluxUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousFluxUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8766, 1)
    _Documentation = None

    _MemberTypes = ( LuminousFluxUom, EnumExtensionPattern, )
LuminousFluxUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LuminousFluxUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LuminousFluxUomExt)
LuminousFluxUomExt.lm = 'lm'                      # originally LuminousFluxUom.lm
LuminousFluxUomExt._InitializeFacetMap(LuminousFluxUomExt._CF_pattern,
   LuminousFluxUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LuminousFluxUomExt', LuminousFluxUomExt)
_module_typeBindings.LuminousFluxUomExt = LuminousFluxUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerVolumePerPressureUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerVolumePerPressureUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerPressureUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8783, 1)
    _Documentation = None

    _MemberTypes = ( MassPerVolumePerPressureUom, EnumExtensionPattern, )
MassPerVolumePerPressureUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerVolumePerPressureUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerVolumePerPressureUomExt)
MassPerVolumePerPressureUomExt.kgm3_kPa = 'kg/m3.kPa'# originally MassPerVolumePerPressureUom.kgm3_kPa
MassPerVolumePerPressureUomExt.lbft_psi = 'lb/ft.psi'# originally MassPerVolumePerPressureUom.lbft_psi
MassPerVolumePerPressureUomExt._InitializeFacetMap(MassPerVolumePerPressureUomExt._CF_pattern,
   MassPerVolumePerPressureUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerPressureUomExt', MassPerVolumePerPressureUomExt)
_module_typeBindings.MassPerVolumePerPressureUomExt = MassPerVolumePerPressureUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LinearThermalExpansionUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LinearThermalExpansionUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearThermalExpansionUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8786, 1)
    _Documentation = None

    _MemberTypes = ( LinearThermalExpansionUom, EnumExtensionPattern, )
LinearThermalExpansionUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LinearThermalExpansionUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LinearThermalExpansionUomExt)
LinearThermalExpansionUomExt.n1deltaK = '1/deltaK'# originally LinearThermalExpansionUom.n1deltaK
LinearThermalExpansionUomExt.inin_deltaF = 'in/(in.deltaF)'# originally LinearThermalExpansionUom.inin_deltaF
LinearThermalExpansionUomExt.mm_deltaK = 'm/(m.deltaK)'# originally LinearThermalExpansionUom.mm_deltaK
LinearThermalExpansionUomExt.mmmm_deltaK = 'mm/(mm.deltaK)'# originally LinearThermalExpansionUom.mmmm_deltaK
LinearThermalExpansionUomExt._InitializeFacetMap(LinearThermalExpansionUomExt._CF_pattern,
   LinearThermalExpansionUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LinearThermalExpansionUomExt', LinearThermalExpansionUomExt)
_module_typeBindings.LinearThermalExpansionUomExt = LinearThermalExpansionUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalForceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalForceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalForceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8842, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalForceUom, EnumExtensionPattern, )
ReciprocalForceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalForceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalForceUomExt)
ReciprocalForceUomExt.n1lbf = '1/lbf'             # originally ReciprocalForceUom.n1lbf
ReciprocalForceUomExt.n1N = '1/N'                 # originally ReciprocalForceUom.n1N
ReciprocalForceUomExt._InitializeFacetMap(ReciprocalForceUomExt._CF_pattern,
   ReciprocalForceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalForceUomExt', ReciprocalForceUomExt)
_module_typeBindings.ReciprocalForceUomExt = ReciprocalForceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassPerMassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassPerMassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassPerMassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerMassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8845, 1)
    _Documentation = None

    _MemberTypes = ( MassPerMassUom, EnumExtensionPattern, )
MassPerMassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassPerMassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassPerMassUomExt)
MassPerMassUomExt.emptyString = '%'               # originally MassPerMassUom.emptyString
MassPerMassUomExt.mass = '%[mass]'                # originally MassPerMassUom.mass
MassPerMassUomExt.Euc = 'Euc'                     # originally MassPerMassUom.Euc
MassPerMassUomExt.gkg = 'g/kg'                    # originally MassPerMassUom.gkg
MassPerMassUomExt.gt = 'g/t'                      # originally MassPerMassUom.gt
MassPerMassUomExt.kgkg = 'kg/kg'                  # originally MassPerMassUom.kgkg
MassPerMassUomExt.kgsack94lbm = 'kg/sack[94lbm]'  # originally MassPerMassUom.kgsack94lbm
MassPerMassUomExt.kgt = 'kg/t'                    # originally MassPerMassUom.kgt
MassPerMassUomExt.mgg = 'mg/g'                    # originally MassPerMassUom.mgg
MassPerMassUomExt.mgkg = 'mg/kg'                  # originally MassPerMassUom.mgkg
MassPerMassUomExt.ngg = 'ng/g'                    # originally MassPerMassUom.ngg
MassPerMassUomExt.ngmg = 'ng/mg'                  # originally MassPerMassUom.ngmg
MassPerMassUomExt.ppk = 'ppk'                     # originally MassPerMassUom.ppk
MassPerMassUomExt.ppm = 'ppm'                     # originally MassPerMassUom.ppm
MassPerMassUomExt.ppmmass = 'ppm[mass]'           # originally MassPerMassUom.ppmmass
MassPerMassUomExt.ugg = 'ug/g'                    # originally MassPerMassUom.ugg
MassPerMassUomExt.ugmg = 'ug/mg'                  # originally MassPerMassUom.ugmg
MassPerMassUomExt._InitializeFacetMap(MassPerMassUomExt._CF_pattern,
   MassPerMassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassPerMassUomExt', MassPerMassUomExt)
_module_typeBindings.MassPerMassUomExt = MassPerMassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalElectricPotentialDifferenceUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalElectricPotentialDifferenceUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalElectricPotentialDifferenceUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8848, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalElectricPotentialDifferenceUom, EnumExtensionPattern, )
ReciprocalElectricPotentialDifferenceUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalElectricPotentialDifferenceUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalElectricPotentialDifferenceUomExt)
ReciprocalElectricPotentialDifferenceUomExt.n1uV = '1/uV'# originally ReciprocalElectricPotentialDifferenceUom.n1uV
ReciprocalElectricPotentialDifferenceUomExt.n1V = '1/V'# originally ReciprocalElectricPotentialDifferenceUom.n1V
ReciprocalElectricPotentialDifferenceUomExt._InitializeFacetMap(ReciprocalElectricPotentialDifferenceUomExt._CF_pattern,
   ReciprocalElectricPotentialDifferenceUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalElectricPotentialDifferenceUomExt', ReciprocalElectricPotentialDifferenceUomExt)
_module_typeBindings.ReciprocalElectricPotentialDifferenceUomExt = ReciprocalElectricPotentialDifferenceUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class VolumePerAreaUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of VolumePerAreaUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerAreaUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8851, 1)
    _Documentation = None

    _MemberTypes = ( VolumePerAreaUom, EnumExtensionPattern, )
VolumePerAreaUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
VolumePerAreaUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VolumePerAreaUomExt)
VolumePerAreaUomExt.n1E6_bblacre = '1E6 bbl/acre' # originally VolumePerAreaUom.n1E6_bblacre
VolumePerAreaUomExt.bblacre = 'bbl/acre'          # originally VolumePerAreaUom.bblacre
VolumePerAreaUomExt.ft3ft2 = 'ft3/ft2'            # originally VolumePerAreaUom.ft3ft2
VolumePerAreaUomExt.m3m2 = 'm3/m2'                # originally VolumePerAreaUom.m3m2
VolumePerAreaUomExt._InitializeFacetMap(VolumePerAreaUomExt._CF_pattern,
   VolumePerAreaUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VolumePerAreaUomExt', VolumePerAreaUomExt)
_module_typeBindings.VolumePerAreaUomExt = VolumePerAreaUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}MassUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class MassUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of MassUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8854, 1)
    _Documentation = None

    _MemberTypes = ( MassUom, EnumExtensionPattern, )
MassUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
MassUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MassUomExt)
MassUomExt.ag = 'ag'                              # originally MassUom.ag
MassUomExt.cg = 'cg'                              # originally MassUom.cg
MassUomExt.ct = 'ct'                              # originally MassUom.ct
MassUomExt.cwtUK = 'cwt[UK]'                      # originally MassUom.cwtUK
MassUomExt.cwtUS = 'cwt[US]'                      # originally MassUom.cwtUS
MassUomExt.Eg = 'Eg'                              # originally MassUom.Eg
MassUomExt.fg = 'fg'                              # originally MassUom.fg
MassUomExt.g = 'g'                                # originally MassUom.g
MassUomExt.Gg = 'Gg'                              # originally MassUom.Gg
MassUomExt.grain = 'grain'                        # originally MassUom.grain
MassUomExt.hg = 'hg'                              # originally MassUom.hg
MassUomExt.kg = 'kg'                              # originally MassUom.kg
MassUomExt.klbm = 'klbm'                          # originally MassUom.klbm
MassUomExt.lbm = 'lbm'                            # originally MassUom.lbm
MassUomExt.mg = 'mg'                              # originally MassUom.mg
MassUomExt.Mg = 'Mg'                              # originally MassUom.Mg
MassUomExt.ng = 'ng'                              # originally MassUom.ng
MassUomExt.ozm = 'ozm'                            # originally MassUom.ozm
MassUomExt.ozmtroy = 'ozm[troy]'                  # originally MassUom.ozmtroy
MassUomExt.pg = 'pg'                              # originally MassUom.pg
MassUomExt.sack94lbm = 'sack[94lbm]'              # originally MassUom.sack94lbm
MassUomExt.t = 't'                                # originally MassUom.t
MassUomExt.Tg = 'Tg'                              # originally MassUom.Tg
MassUomExt.tonUK = 'ton[UK]'                      # originally MassUom.tonUK
MassUomExt.tonUS = 'ton[US]'                      # originally MassUom.tonUS
MassUomExt.ug = 'ug'                              # originally MassUom.ug
MassUomExt._InitializeFacetMap(MassUomExt._CF_pattern,
   MassUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MassUomExt', MassUomExt)
_module_typeBindings.MassUomExt = MassUomExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeUomExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReciprocalMassTimeUomExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReciprocalMassTimeUom, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassTimeUomExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/QuantityClass.xsd', 8881, 1)
    _Documentation = None

    _MemberTypes = ( ReciprocalMassTimeUom, EnumExtensionPattern, )
ReciprocalMassTimeUomExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReciprocalMassTimeUomExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReciprocalMassTimeUomExt)
ReciprocalMassTimeUomExt.n1kg_s = '1/(kg.s)'      # originally ReciprocalMassTimeUom.n1kg_s
ReciprocalMassTimeUomExt.Bqkg = 'Bq/kg'           # originally ReciprocalMassTimeUom.Bqkg
ReciprocalMassTimeUomExt.pCig = 'pCi/g'           # originally ReciprocalMassTimeUom.pCig
ReciprocalMassTimeUomExt._InitializeFacetMap(ReciprocalMassTimeUomExt._CF_pattern,
   ReciprocalMassTimeUomExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassTimeUomExt', ReciprocalMassTimeUomExt)
_module_typeBindings.ReciprocalMassTimeUomExt = ReciprocalMassTimeUomExt

# Atomic simple type: {http://www.energistics.org/energyml/data/commonv2}ReferencePressureKind
class ReferencePressureKind (TypeEnum, pyxb.binding.basis.enumeration_mixin):

    """ReferencePressureKind"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferencePressureKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 23, 3)
    _Documentation = 'ReferencePressureKind'
ReferencePressureKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReferencePressureKind, enum_prefix=None)
ReferencePressureKind.absolute = ReferencePressureKind._CF_enumeration.addEnumeration(unicode_value='absolute', tag='absolute')
ReferencePressureKind.ambient = ReferencePressureKind._CF_enumeration.addEnumeration(unicode_value='ambient', tag='ambient')
ReferencePressureKind.legal = ReferencePressureKind._CF_enumeration.addEnumeration(unicode_value='legal', tag='legal')
ReferencePressureKind._InitializeFacetMap(ReferencePressureKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReferencePressureKind', ReferencePressureKind)
_module_typeBindings.ReferencePressureKind = ReferencePressureKind

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LithologyKindExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LithologyKindExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LithologyKind, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LithologyKindExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 57, 1)
    _Documentation = None

    _MemberTypes = ( LithologyKind, EnumExtensionPattern, )
LithologyKindExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LithologyKindExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LithologyKindExt)
LithologyKindExt.alkali_feldspar_rhyolite = 'alkali feldspar rhyolite'# originally LithologyKind.alkali_feldspar_rhyolite
LithologyKindExt.alkali_olivine_basalt = 'alkali olivine basalt'# originally LithologyKind.alkali_olivine_basalt
LithologyKindExt.amphibolite = 'amphibolite'      # originally LithologyKind.amphibolite
LithologyKindExt.andesite = 'andesite'            # originally LithologyKind.andesite
LithologyKindExt.anhydrite = 'anhydrite'          # originally LithologyKind.anhydrite
LithologyKindExt.anorthositic_rock = 'anorthositic rock'# originally LithologyKind.anorthositic_rock
LithologyKindExt.anthracite = 'anthracite'        # originally LithologyKind.anthracite
LithologyKindExt.aplite = 'aplite'                # originally LithologyKind.aplite
LithologyKindExt.arenite = 'arenite'              # originally LithologyKind.arenite
LithologyKindExt.argillaceous = 'argillaceous'    # originally LithologyKind.argillaceous
LithologyKindExt.arkose = 'arkose'                # originally LithologyKind.arkose
LithologyKindExt.basalt = 'basalt'                # originally LithologyKind.basalt
LithologyKindExt.basanite = 'basanite'            # originally LithologyKind.basanite
LithologyKindExt.bauxite = 'bauxite'              # originally LithologyKind.bauxite
LithologyKindExt.bituminous_coal = 'bituminous coal'# originally LithologyKind.bituminous_coal
LithologyKindExt.blueschist_metamorphic_rock = 'blueschist metamorphic rock'# originally LithologyKind.blueschist_metamorphic_rock
LithologyKindExt.boninite = 'boninite'            # originally LithologyKind.boninite
LithologyKindExt.breccia = 'breccia'              # originally LithologyKind.breccia
LithologyKindExt.carbonate_ooze = 'carbonate ooze'# originally LithologyKind.carbonate_ooze
LithologyKindExt.carbonatite = 'carbonatite'      # originally LithologyKind.carbonatite
LithologyKindExt.chalk = 'chalk'                  # originally LithologyKind.chalk
LithologyKindExt.chert = 'chert'                  # originally LithologyKind.chert
LithologyKindExt.clay = 'clay'                    # originally LithologyKind.clay
LithologyKindExt.claystone = 'claystone'          # originally LithologyKind.claystone
LithologyKindExt.coal = 'coal'                    # originally LithologyKind.coal
LithologyKindExt.conglomerate = 'conglomerate'    # originally LithologyKind.conglomerate
LithologyKindExt.dacite = 'dacite'                # originally LithologyKind.dacite
LithologyKindExt.diabase = 'diabase'              # originally LithologyKind.diabase
LithologyKindExt.diamictite = 'diamictite'        # originally LithologyKind.diamictite
LithologyKindExt.diorite = 'diorite'              # originally LithologyKind.diorite
LithologyKindExt.dioritoid = 'dioritoid'          # originally LithologyKind.dioritoid
LithologyKindExt.doleritic_rock = 'doleritic rock'# originally LithologyKind.doleritic_rock
LithologyKindExt.dolomite = 'dolomite'            # originally LithologyKind.dolomite
LithologyKindExt.dolomitic = 'dolomitic'          # originally LithologyKind.dolomitic
LithologyKindExt.eclogite = 'eclogite'            # originally LithologyKind.eclogite
LithologyKindExt.exotic_alkaline_rock = 'exotic alkaline rock'# originally LithologyKind.exotic_alkaline_rock
LithologyKindExt.feldspar = 'feldspar'            # originally LithologyKind.feldspar
LithologyKindExt.feldspathic_arenite = 'feldspathic arenite'# originally LithologyKind.feldspathic_arenite
LithologyKindExt.fine_grained_igneous_rock = 'fine grained igneous rock'# originally LithologyKind.fine_grained_igneous_rock
LithologyKindExt.foid_dioritoid = 'foid dioritoid'# originally LithologyKind.foid_dioritoid
LithologyKindExt.foid_gabbroid = 'foid gabbroid'  # originally LithologyKind.foid_gabbroid
LithologyKindExt.foid_syenitoid = 'foid syenitoid'# originally LithologyKind.foid_syenitoid
LithologyKindExt.foidite = 'foidite'              # originally LithologyKind.foidite
LithologyKindExt.foiditoid = 'foiditoid'          # originally LithologyKind.foiditoid
LithologyKindExt.foidolite = 'foidolite'          # originally LithologyKind.foidolite
LithologyKindExt.foliated_metamorphic_rock = 'foliated metamorphic rock'# originally LithologyKind.foliated_metamorphic_rock
LithologyKindExt.fragmental_igneous_rock = 'fragmental igneous rock'# originally LithologyKind.fragmental_igneous_rock
LithologyKindExt.gabbro = 'gabbro'                # originally LithologyKind.gabbro
LithologyKindExt.gabbroic_rock = 'gabbroic rock'  # originally LithologyKind.gabbroic_rock
LithologyKindExt.gabbroid = 'gabbroid'            # originally LithologyKind.gabbroid
LithologyKindExt.glauconite = 'glauconite'        # originally LithologyKind.glauconite
LithologyKindExt.gneiss = 'gneiss'                # originally LithologyKind.gneiss
LithologyKindExt.granite = 'granite'              # originally LithologyKind.granite
LithologyKindExt.granodiorite = 'granodiorite'    # originally LithologyKind.granodiorite
LithologyKindExt.granofels = 'granofels'          # originally LithologyKind.granofels
LithologyKindExt.granulite = 'granulite'          # originally LithologyKind.granulite
LithologyKindExt.gravel = 'gravel'                # originally LithologyKind.gravel
LithologyKindExt.greenstone = 'greenstone'        # originally LithologyKind.greenstone
LithologyKindExt.gumbo = 'gumbo'                  # originally LithologyKind.gumbo
LithologyKindExt.gypsum = 'gypsum'                # originally LithologyKind.gypsum
LithologyKindExt.halite = 'halite'                # originally LithologyKind.halite
LithologyKindExt.hornfels = 'hornfels'            # originally LithologyKind.hornfels
LithologyKindExt.igneous_rock = 'igneous rock'    # originally LithologyKind.igneous_rock
LithologyKindExt.impact_generated_material = 'impact generated material'# originally LithologyKind.impact_generated_material
LithologyKindExt.impure_dolomite = 'impure dolomite'# originally LithologyKind.impure_dolomite
LithologyKindExt.impure_limestone = 'impure limestone'# originally LithologyKind.impure_limestone
LithologyKindExt.intrusive_rock_plutonic = 'intrusive rock (plutonic)'# originally LithologyKind.intrusive_rock_plutonic
LithologyKindExt.iron_rich_sedimentary_rock = 'iron rich sedimentary rock'# originally LithologyKind.iron_rich_sedimentary_rock
LithologyKindExt.kalsilitic_and_melilitic_rocks = 'kalsilitic and melilitic rocks'# originally LithologyKind.kalsilitic_and_melilitic_rocks
LithologyKindExt.komatiitic_rock = 'komatiitic rock'# originally LithologyKind.komatiitic_rock
LithologyKindExt.latitic_rock = 'latitic rock'    # originally LithologyKind.latitic_rock
LithologyKindExt.lignite = 'lignite'              # originally LithologyKind.lignite
LithologyKindExt.lime_boundstone = 'lime boundstone'# originally LithologyKind.lime_boundstone
LithologyKindExt.lime_framestone = 'lime framestone'# originally LithologyKind.lime_framestone
LithologyKindExt.lime_grainstone = 'lime grainstone'# originally LithologyKind.lime_grainstone
LithologyKindExt.lime_mudstone = 'lime mudstone'  # originally LithologyKind.lime_mudstone
LithologyKindExt.lime_packstone = 'lime packstone'# originally LithologyKind.lime_packstone
LithologyKindExt.lime_wackestone = 'lime wackestone'# originally LithologyKind.lime_wackestone
LithologyKindExt.limestone = 'limestone'          # originally LithologyKind.limestone
LithologyKindExt.marble = 'marble'                # originally LithologyKind.marble
LithologyKindExt.marl = 'marl'                    # originally LithologyKind.marl
LithologyKindExt.metamorphic_rock = 'metamorphic rock'# originally LithologyKind.metamorphic_rock
LithologyKindExt.mica_schist = 'mica schist'      # originally LithologyKind.mica_schist
LithologyKindExt.migmatite = 'migmatite'          # originally LithologyKind.migmatite
LithologyKindExt.monzogabbro = 'monzogabbro'      # originally LithologyKind.monzogabbro
LithologyKindExt.mud = 'mud'                      # originally LithologyKind.mud
LithologyKindExt.mudstone = 'mudstone'            # originally LithologyKind.mudstone
LithologyKindExt.mylonitic_rock = 'mylonitic rock'# originally LithologyKind.mylonitic_rock
LithologyKindExt.no_description = 'no description'# originally LithologyKind.no_description
LithologyKindExt.no_sample = 'no sample'          # originally LithologyKind.no_sample
LithologyKindExt.ooze = 'ooze'                    # originally LithologyKind.ooze
LithologyKindExt.ophiolite = 'ophiolite'          # originally LithologyKind.ophiolite
LithologyKindExt.organic_bearing_mudstone = 'organic bearing mudstone'# originally LithologyKind.organic_bearing_mudstone
LithologyKindExt.peat = 'peat'                    # originally LithologyKind.peat
LithologyKindExt.pegmatite = 'pegmatite'          # originally LithologyKind.pegmatite
LithologyKindExt.peridotite = 'peridotite'        # originally LithologyKind.peridotite
LithologyKindExt.phaneritic_igneous_rock = 'phaneritic igneous rock'# originally LithologyKind.phaneritic_igneous_rock
LithologyKindExt.phonolite = 'phonolite'          # originally LithologyKind.phonolite
LithologyKindExt.phonolitoid = 'phonolitoid'      # originally LithologyKind.phonolitoid
LithologyKindExt.phosphate = 'phosphate'          # originally LithologyKind.phosphate
LithologyKindExt.phosphate_rock = 'phosphate rock'# originally LithologyKind.phosphate_rock
LithologyKindExt.phyllite = 'phyllite'            # originally LithologyKind.phyllite
LithologyKindExt.porphyry = 'porphyry'            # originally LithologyKind.porphyry
LithologyKindExt.potassium_and_magnesium_salts = 'potassium and magnesium salts'# originally LithologyKind.potassium_and_magnesium_salts
LithologyKindExt.pyroclastic_breccia = 'pyroclastic breccia'# originally LithologyKind.pyroclastic_breccia
LithologyKindExt.pyroclastic_rock = 'pyroclastic rock'# originally LithologyKind.pyroclastic_rock
LithologyKindExt.pyroxenite = 'pyroxenite'        # originally LithologyKind.pyroxenite
LithologyKindExt.quartz_arenite = 'quartz arenite'# originally LithologyKind.quartz_arenite
LithologyKindExt.quartzite = 'quartzite'          # originally LithologyKind.quartzite
LithologyKindExt.rhyolite = 'rhyolite'            # originally LithologyKind.rhyolite
LithologyKindExt.rock_salt = 'rock salt'          # originally LithologyKind.rock_salt
LithologyKindExt.sand = 'sand'                    # originally LithologyKind.sand
LithologyKindExt.sandstone = 'sandstone'          # originally LithologyKind.sandstone
LithologyKindExt.sandy = 'sandy'                  # originally LithologyKind.sandy
LithologyKindExt.sapropel = 'sapropel'            # originally LithologyKind.sapropel
LithologyKindExt.schist = 'schist'                # originally LithologyKind.schist
LithologyKindExt.serpentinite = 'serpentinite'    # originally LithologyKind.serpentinite
LithologyKindExt.shale = 'shale'                  # originally LithologyKind.shale
LithologyKindExt.siliceous_ooze = 'siliceous ooze'# originally LithologyKind.siliceous_ooze
LithologyKindExt.silt = 'silt'                    # originally LithologyKind.silt
LithologyKindExt.siltstone = 'siltstone'          # originally LithologyKind.siltstone
LithologyKindExt.skarn = 'skarn'                  # originally LithologyKind.skarn
LithologyKindExt.slate = 'slate'                  # originally LithologyKind.slate
LithologyKindExt.spilite = 'spilite'              # originally LithologyKind.spilite
LithologyKindExt.syenite = 'syenite'              # originally LithologyKind.syenite
LithologyKindExt.syenitoid = 'syenitoid'          # originally LithologyKind.syenitoid
LithologyKindExt.sylvite = 'sylvite'              # originally LithologyKind.sylvite
LithologyKindExt.tephrite = 'tephrite'            # originally LithologyKind.tephrite
LithologyKindExt.tephritoid = 'tephritoid'        # originally LithologyKind.tephritoid
LithologyKindExt.tholeiitic_basalt = 'tholeiitic basalt'# originally LithologyKind.tholeiitic_basalt
LithologyKindExt.tonalite = 'tonalite'            # originally LithologyKind.tonalite
LithologyKindExt.trachyte = 'trachyte'            # originally LithologyKind.trachyte
LithologyKindExt.trachytic_rock = 'trachytic rock'# originally LithologyKind.trachytic_rock
LithologyKindExt.trachytoid = 'trachytoid'        # originally LithologyKind.trachytoid
LithologyKindExt.travertine = 'travertine'        # originally LithologyKind.travertine
LithologyKindExt.tuff = 'tuff'                    # originally LithologyKind.tuff
LithologyKindExt.tuffite = 'tuffite'              # originally LithologyKind.tuffite
LithologyKindExt.ultrabasic = 'ultrabasic'        # originally LithologyKind.ultrabasic
LithologyKindExt.undifferentiated = 'undifferentiated'# originally LithologyKind.undifferentiated
LithologyKindExt.unknown = 'unknown'              # originally LithologyKind.unknown
LithologyKindExt.wacke = 'wacke'                  # originally LithologyKind.wacke
LithologyKindExt._InitializeFacetMap(LithologyKindExt._CF_pattern,
   LithologyKindExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LithologyKindExt', LithologyKindExt)
_module_typeBindings.LithologyKindExt = LithologyKindExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}QuantityClassKindExt
# superclasses pyxb.binding.datatypes.anySimpleType
class QuantityClassKindExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of QuantityClassKind, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityClassKindExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 296, 1)
    _Documentation = None

    _MemberTypes = ( QuantityClassKind, EnumExtensionPattern, )
QuantityClassKindExt._CF_pattern = pyxb.binding.facets.CF_pattern()
QuantityClassKindExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=QuantityClassKindExt)
QuantityClassKindExt.absorbed_dose = 'absorbed dose'# originally QuantityClassKind.absorbed_dose
QuantityClassKindExt.activity_of_radioactivity = 'activity of radioactivity'# originally QuantityClassKind.activity_of_radioactivity
QuantityClassKindExt.amount_of_substance = 'amount of substance'# originally QuantityClassKind.amount_of_substance
QuantityClassKindExt.amount_of_substance_per_amount_of_substance = 'amount of substance per amount of substance'# originally QuantityClassKind.amount_of_substance_per_amount_of_substance
QuantityClassKindExt.amount_of_substance_per_area = 'amount of substance per area'# originally QuantityClassKind.amount_of_substance_per_area
QuantityClassKindExt.amount_of_substance_per_time = 'amount of substance per time'# originally QuantityClassKind.amount_of_substance_per_time
QuantityClassKindExt.amount_of_substance_per_time_per_area = 'amount of substance per time per area'# originally QuantityClassKind.amount_of_substance_per_time_per_area
QuantityClassKindExt.amount_of_substance_per_volume = 'amount of substance per volume'# originally QuantityClassKind.amount_of_substance_per_volume
QuantityClassKindExt.angle_per_length = 'angle per length'# originally QuantityClassKind.angle_per_length
QuantityClassKindExt.angle_per_volume = 'angle per volume'# originally QuantityClassKind.angle_per_volume
QuantityClassKindExt.angular_acceleration = 'angular acceleration'# originally QuantityClassKind.angular_acceleration
QuantityClassKindExt.angular_velocity = 'angular velocity'# originally QuantityClassKind.angular_velocity
QuantityClassKindExt.api_gamma_ray = 'api gamma ray'# originally QuantityClassKind.api_gamma_ray
QuantityClassKindExt.api_gravity = 'api gravity'  # originally QuantityClassKind.api_gravity
QuantityClassKindExt.api_neutron = 'api neutron'  # originally QuantityClassKind.api_neutron
QuantityClassKindExt.area = 'area'                # originally QuantityClassKind.area
QuantityClassKindExt.area_per_amount_of_substance = 'area per amount of substance'# originally QuantityClassKind.area_per_amount_of_substance
QuantityClassKindExt.area_per_area = 'area per area'# originally QuantityClassKind.area_per_area
QuantityClassKindExt.area_per_count = 'area per count'# originally QuantityClassKind.area_per_count
QuantityClassKindExt.area_per_mass = 'area per mass'# originally QuantityClassKind.area_per_mass
QuantityClassKindExt.area_per_time = 'area per time'# originally QuantityClassKind.area_per_time
QuantityClassKindExt.area_per_volume = 'area per volume'# originally QuantityClassKind.area_per_volume
QuantityClassKindExt.attenuation_per_frequency_interval = 'attenuation per frequency interval'# originally QuantityClassKind.attenuation_per_frequency_interval
QuantityClassKindExt.capacitance = 'capacitance'  # originally QuantityClassKind.capacitance
QuantityClassKindExt.cation_exchange_capacity = 'cation exchange capacity'# originally QuantityClassKind.cation_exchange_capacity
QuantityClassKindExt.data_transfer_speed = 'data transfer speed'# originally QuantityClassKind.data_transfer_speed
QuantityClassKindExt.diffusion_coefficient = 'diffusion coefficient'# originally QuantityClassKind.diffusion_coefficient
QuantityClassKindExt.diffusive_time_of_flight = 'diffusive time of flight'# originally QuantityClassKind.diffusive_time_of_flight
QuantityClassKindExt.digital_storage = 'digital storage'# originally QuantityClassKind.digital_storage
QuantityClassKindExt.dimensionless = 'dimensionless'# originally QuantityClassKind.dimensionless
QuantityClassKindExt.dipole_moment = 'dipole moment'# originally QuantityClassKind.dipole_moment
QuantityClassKindExt.dose_equivalent = 'dose equivalent'# originally QuantityClassKind.dose_equivalent
QuantityClassKindExt.dynamic_viscosity = 'dynamic viscosity'# originally QuantityClassKind.dynamic_viscosity
QuantityClassKindExt.electric_charge = 'electric charge'# originally QuantityClassKind.electric_charge
QuantityClassKindExt.electric_charge_per_area = 'electric charge per area'# originally QuantityClassKind.electric_charge_per_area
QuantityClassKindExt.electric_charge_per_mass = 'electric charge per mass'# originally QuantityClassKind.electric_charge_per_mass
QuantityClassKindExt.electric_charge_per_volume = 'electric charge per volume'# originally QuantityClassKind.electric_charge_per_volume
QuantityClassKindExt.electric_conductance = 'electric conductance'# originally QuantityClassKind.electric_conductance
QuantityClassKindExt.electric_conductivity = 'electric conductivity'# originally QuantityClassKind.electric_conductivity
QuantityClassKindExt.electric_current = 'electric current'# originally QuantityClassKind.electric_current
QuantityClassKindExt.electric_current_density = 'electric current density'# originally QuantityClassKind.electric_current_density
QuantityClassKindExt.electric_field_strength = 'electric field strength'# originally QuantityClassKind.electric_field_strength
QuantityClassKindExt.electric_potential_difference = 'electric potential difference'# originally QuantityClassKind.electric_potential_difference
QuantityClassKindExt.electric_resistance = 'electric resistance'# originally QuantityClassKind.electric_resistance
QuantityClassKindExt.electric_resistance_per_length = 'electric resistance per length'# originally QuantityClassKind.electric_resistance_per_length
QuantityClassKindExt.electrical_resistivity = 'electrical resistivity'# originally QuantityClassKind.electrical_resistivity
QuantityClassKindExt.electromagnetic_moment = 'electromagnetic moment'# originally QuantityClassKind.electromagnetic_moment
QuantityClassKindExt.energy = 'energy'            # originally QuantityClassKind.energy
QuantityClassKindExt.energy_length_per_area = 'energy length per area'# originally QuantityClassKind.energy_length_per_area
QuantityClassKindExt.energy_length_per_time_area_temperature = 'energy length per time area temperature'# originally QuantityClassKind.energy_length_per_time_area_temperature
QuantityClassKindExt.energy_per_area = 'energy per area'# originally QuantityClassKind.energy_per_area
QuantityClassKindExt.energy_per_length = 'energy per length'# originally QuantityClassKind.energy_per_length
QuantityClassKindExt.energy_per_mass = 'energy per mass'# originally QuantityClassKind.energy_per_mass
QuantityClassKindExt.energy_per_mass_per_time = 'energy per mass per time'# originally QuantityClassKind.energy_per_mass_per_time
QuantityClassKindExt.energy_per_volume = 'energy per volume'# originally QuantityClassKind.energy_per_volume
QuantityClassKindExt.force = 'force'              # originally QuantityClassKind.force
QuantityClassKindExt.force_area = 'force area'    # originally QuantityClassKind.force_area
QuantityClassKindExt.force_length_per_length = 'force length per length'# originally QuantityClassKind.force_length_per_length
QuantityClassKindExt.force_per_force = 'force per force'# originally QuantityClassKind.force_per_force
QuantityClassKindExt.force_per_length = 'force per length'# originally QuantityClassKind.force_per_length
QuantityClassKindExt.force_per_volume = 'force per volume'# originally QuantityClassKind.force_per_volume
QuantityClassKindExt.frequency = 'frequency'      # originally QuantityClassKind.frequency
QuantityClassKindExt.frequency_interval = 'frequency interval'# originally QuantityClassKind.frequency_interval
QuantityClassKindExt.heat_capacity = 'heat capacity'# originally QuantityClassKind.heat_capacity
QuantityClassKindExt.heat_flow_rate = 'heat flow rate'# originally QuantityClassKind.heat_flow_rate
QuantityClassKindExt.heat_transfer_coefficient = 'heat transfer coefficient'# originally QuantityClassKind.heat_transfer_coefficient
QuantityClassKindExt.illuminance = 'illuminance'  # originally QuantityClassKind.illuminance
QuantityClassKindExt.inductance = 'inductance'    # originally QuantityClassKind.inductance
QuantityClassKindExt.isothermal_compressibility = 'isothermal compressibility'# originally QuantityClassKind.isothermal_compressibility
QuantityClassKindExt.kinematic_viscosity = 'kinematic viscosity'# originally QuantityClassKind.kinematic_viscosity
QuantityClassKindExt.length = 'length'            # originally QuantityClassKind.length
QuantityClassKindExt.length_per_length = 'length per length'# originally QuantityClassKind.length_per_length
QuantityClassKindExt.length_per_mass = 'length per mass'# originally QuantityClassKind.length_per_mass
QuantityClassKindExt.length_per_pressure = 'length per pressure'# originally QuantityClassKind.length_per_pressure
QuantityClassKindExt.length_per_temperature = 'length per temperature'# originally QuantityClassKind.length_per_temperature
QuantityClassKindExt.length_per_time = 'length per time'# originally QuantityClassKind.length_per_time
QuantityClassKindExt.length_per_volume = 'length per volume'# originally QuantityClassKind.length_per_volume
QuantityClassKindExt.light_exposure = 'light exposure'# originally QuantityClassKind.light_exposure
QuantityClassKindExt.linear_acceleration = 'linear acceleration'# originally QuantityClassKind.linear_acceleration
QuantityClassKindExt.linear_thermal_expansion = 'linear thermal expansion'# originally QuantityClassKind.linear_thermal_expansion
QuantityClassKindExt.logarithmic_power_ratio = 'logarithmic power ratio'# originally QuantityClassKind.logarithmic_power_ratio
QuantityClassKindExt.logarithmic_power_ratio_per_length = 'logarithmic power ratio per length'# originally QuantityClassKind.logarithmic_power_ratio_per_length
QuantityClassKindExt.luminance = 'luminance'      # originally QuantityClassKind.luminance
QuantityClassKindExt.luminous_efficacy = 'luminous efficacy'# originally QuantityClassKind.luminous_efficacy
QuantityClassKindExt.luminous_flux = 'luminous flux'# originally QuantityClassKind.luminous_flux
QuantityClassKindExt.luminous_intensity = 'luminous intensity'# originally QuantityClassKind.luminous_intensity
QuantityClassKindExt.magnetic_dipole_moment = 'magnetic dipole moment'# originally QuantityClassKind.magnetic_dipole_moment
QuantityClassKindExt.magnetic_field_strength = 'magnetic field strength'# originally QuantityClassKind.magnetic_field_strength
QuantityClassKindExt.magnetic_flux = 'magnetic flux'# originally QuantityClassKind.magnetic_flux
QuantityClassKindExt.magnetic_flux_density = 'magnetic flux density'# originally QuantityClassKind.magnetic_flux_density
QuantityClassKindExt.magnetic_flux_density_per_length = 'magnetic flux density per length'# originally QuantityClassKind.magnetic_flux_density_per_length
QuantityClassKindExt.magnetic_permeability = 'magnetic permeability'# originally QuantityClassKind.magnetic_permeability
QuantityClassKindExt.magnetic_vector_potential = 'magnetic vector potential'# originally QuantityClassKind.magnetic_vector_potential
QuantityClassKindExt.mass = 'mass'                # originally QuantityClassKind.mass
QuantityClassKindExt.mass_length = 'mass length'  # originally QuantityClassKind.mass_length
QuantityClassKindExt.mass_per_area = 'mass per area'# originally QuantityClassKind.mass_per_area
QuantityClassKindExt.mass_per_energy = 'mass per energy'# originally QuantityClassKind.mass_per_energy
QuantityClassKindExt.mass_per_length = 'mass per length'# originally QuantityClassKind.mass_per_length
QuantityClassKindExt.mass_per_mass = 'mass per mass'# originally QuantityClassKind.mass_per_mass
QuantityClassKindExt.mass_per_time = 'mass per time'# originally QuantityClassKind.mass_per_time
QuantityClassKindExt.mass_per_time_per_area = 'mass per time per area'# originally QuantityClassKind.mass_per_time_per_area
QuantityClassKindExt.mass_per_time_per_length = 'mass per time per length'# originally QuantityClassKind.mass_per_time_per_length
QuantityClassKindExt.mass_per_volume = 'mass per volume'# originally QuantityClassKind.mass_per_volume
QuantityClassKindExt.mass_per_volume_per_length = 'mass per volume per length'# originally QuantityClassKind.mass_per_volume_per_length
QuantityClassKindExt.mass_per_volume_per_pressure = 'mass per volume per pressure'# originally QuantityClassKind.mass_per_volume_per_pressure
QuantityClassKindExt.mass_per_volume_per_temperature = 'mass per volume per temperature'# originally QuantityClassKind.mass_per_volume_per_temperature
QuantityClassKindExt.mobility = 'mobility'        # originally QuantityClassKind.mobility
QuantityClassKindExt.molar_energy = 'molar energy'# originally QuantityClassKind.molar_energy
QuantityClassKindExt.molar_heat_capacity = 'molar heat capacity'# originally QuantityClassKind.molar_heat_capacity
QuantityClassKindExt.molar_volume = 'molar volume'# originally QuantityClassKind.molar_volume
QuantityClassKindExt.molecular_weight = 'molecular weight'# originally QuantityClassKind.molecular_weight
QuantityClassKindExt.moment_of_force = 'moment of force'# originally QuantityClassKind.moment_of_force
QuantityClassKindExt.moment_of_inertia = 'moment of inertia'# originally QuantityClassKind.moment_of_inertia
QuantityClassKindExt.momentum = 'momentum'        # originally QuantityClassKind.momentum
QuantityClassKindExt.normalized_power = 'normalized power'# originally QuantityClassKind.normalized_power
QuantityClassKindExt.permeability_length = 'permeability length'# originally QuantityClassKind.permeability_length
QuantityClassKindExt.permeability_rock = 'permeability rock'# originally QuantityClassKind.permeability_rock
QuantityClassKindExt.permittivity = 'permittivity'# originally QuantityClassKind.permittivity
QuantityClassKindExt.plane_angle = 'plane angle'  # originally QuantityClassKind.plane_angle
QuantityClassKindExt.potential_difference_per_power_drop = 'potential difference per power drop'# originally QuantityClassKind.potential_difference_per_power_drop
QuantityClassKindExt.power = 'power'              # originally QuantityClassKind.power
QuantityClassKindExt.power_per_area = 'power per area'# originally QuantityClassKind.power_per_area
QuantityClassKindExt.power_per_power = 'power per power'# originally QuantityClassKind.power_per_power
QuantityClassKindExt.power_per_volume = 'power per volume'# originally QuantityClassKind.power_per_volume
QuantityClassKindExt.pressure = 'pressure'        # originally QuantityClassKind.pressure
QuantityClassKindExt.pressure_per_pressure = 'pressure per pressure'# originally QuantityClassKind.pressure_per_pressure
QuantityClassKindExt.pressure_per_time = 'pressure per time'# originally QuantityClassKind.pressure_per_time
QuantityClassKindExt.pressure_per_volume = 'pressure per volume'# originally QuantityClassKind.pressure_per_volume
QuantityClassKindExt.pressure_squared = 'pressure squared'# originally QuantityClassKind.pressure_squared
QuantityClassKindExt.pressure_squared_per_force_time_per_area = 'pressure squared per force time per area'# originally QuantityClassKind.pressure_squared_per_force_time_per_area
QuantityClassKindExt.pressure_time_per_volume = 'pressure time per volume'# originally QuantityClassKind.pressure_time_per_volume
QuantityClassKindExt.quantity_of_light = 'quantity of light'# originally QuantityClassKind.quantity_of_light
QuantityClassKindExt.radiance = 'radiance'        # originally QuantityClassKind.radiance
QuantityClassKindExt.radiant_intensity = 'radiant intensity'# originally QuantityClassKind.radiant_intensity
QuantityClassKindExt.reciprocal_area = 'reciprocal area'# originally QuantityClassKind.reciprocal_area
QuantityClassKindExt.reciprocal_electric_potential_difference = 'reciprocal electric potential difference'# originally QuantityClassKind.reciprocal_electric_potential_difference
QuantityClassKindExt.reciprocal_force = 'reciprocal force'# originally QuantityClassKind.reciprocal_force
QuantityClassKindExt.reciprocal_length = 'reciprocal length'# originally QuantityClassKind.reciprocal_length
QuantityClassKindExt.reciprocal_mass = 'reciprocal mass'# originally QuantityClassKind.reciprocal_mass
QuantityClassKindExt.reciprocal_mass_time = 'reciprocal mass time'# originally QuantityClassKind.reciprocal_mass_time
QuantityClassKindExt.reciprocal_pressure = 'reciprocal pressure'# originally QuantityClassKind.reciprocal_pressure
QuantityClassKindExt.reciprocal_time = 'reciprocal time'# originally QuantityClassKind.reciprocal_time
QuantityClassKindExt.reciprocal_volume = 'reciprocal volume'# originally QuantityClassKind.reciprocal_volume
QuantityClassKindExt.reluctance = 'reluctance'    # originally QuantityClassKind.reluctance
QuantityClassKindExt.second_moment_of_area = 'second moment of area'# originally QuantityClassKind.second_moment_of_area
QuantityClassKindExt.signaling_event_per_time = 'signaling event per time'# originally QuantityClassKind.signaling_event_per_time
QuantityClassKindExt.solid_angle = 'solid angle'  # originally QuantityClassKind.solid_angle
QuantityClassKindExt.specific_heat_capacity = 'specific heat capacity'# originally QuantityClassKind.specific_heat_capacity
QuantityClassKindExt.temperature_interval = 'temperature interval'# originally QuantityClassKind.temperature_interval
QuantityClassKindExt.temperature_interval_per_length = 'temperature interval per length'# originally QuantityClassKind.temperature_interval_per_length
QuantityClassKindExt.temperature_interval_per_pressure = 'temperature interval per pressure'# originally QuantityClassKind.temperature_interval_per_pressure
QuantityClassKindExt.temperature_interval_per_time = 'temperature interval per time'# originally QuantityClassKind.temperature_interval_per_time
QuantityClassKindExt.thermal_conductance = 'thermal conductance'# originally QuantityClassKind.thermal_conductance
QuantityClassKindExt.thermal_conductivity = 'thermal conductivity'# originally QuantityClassKind.thermal_conductivity
QuantityClassKindExt.thermal_diffusivity = 'thermal diffusivity'# originally QuantityClassKind.thermal_diffusivity
QuantityClassKindExt.thermal_insulance = 'thermal insulance'# originally QuantityClassKind.thermal_insulance
QuantityClassKindExt.thermal_resistance = 'thermal resistance'# originally QuantityClassKind.thermal_resistance
QuantityClassKindExt.thermodynamic_temperature = 'thermodynamic temperature'# originally QuantityClassKind.thermodynamic_temperature
QuantityClassKindExt.thermodynamic_temperature_per_thermodynamic_temperature = 'thermodynamic temperature per thermodynamic temperature'# originally QuantityClassKind.thermodynamic_temperature_per_thermodynamic_temperature
QuantityClassKindExt.time = 'time'                # originally QuantityClassKind.time
QuantityClassKindExt.time_per_length = 'time per length'# originally QuantityClassKind.time_per_length
QuantityClassKindExt.time_per_mass = 'time per mass'# originally QuantityClassKind.time_per_mass
QuantityClassKindExt.time_per_time = 'time per time'# originally QuantityClassKind.time_per_time
QuantityClassKindExt.time_per_volume = 'time per volume'# originally QuantityClassKind.time_per_volume
QuantityClassKindExt.vertical_coordinate = 'vertical coordinate'# originally QuantityClassKind.vertical_coordinate
QuantityClassKindExt.volume = 'volume'            # originally QuantityClassKind.volume
QuantityClassKindExt.volume_flow_rate_per_volume_flow_rate = 'volume flow rate per volume flow rate'# originally QuantityClassKind.volume_flow_rate_per_volume_flow_rate
QuantityClassKindExt.volume_per_area = 'volume per area'# originally QuantityClassKind.volume_per_area
QuantityClassKindExt.volume_per_length = 'volume per length'# originally QuantityClassKind.volume_per_length
QuantityClassKindExt.volume_per_mass = 'volume per mass'# originally QuantityClassKind.volume_per_mass
QuantityClassKindExt.volume_per_pressure = 'volume per pressure'# originally QuantityClassKind.volume_per_pressure
QuantityClassKindExt.volume_per_rotation = 'volume per rotation'# originally QuantityClassKind.volume_per_rotation
QuantityClassKindExt.volume_per_time = 'volume per time'# originally QuantityClassKind.volume_per_time
QuantityClassKindExt.volume_per_time_length = 'volume per time length'# originally QuantityClassKind.volume_per_time_length
QuantityClassKindExt.volume_per_time_per_area = 'volume per time per area'# originally QuantityClassKind.volume_per_time_per_area
QuantityClassKindExt.volume_per_time_per_length = 'volume per time per length'# originally QuantityClassKind.volume_per_time_per_length
QuantityClassKindExt.volume_per_time_per_pressure = 'volume per time per pressure'# originally QuantityClassKind.volume_per_time_per_pressure
QuantityClassKindExt.volume_per_time_per_pressure_length = 'volume per time per pressure length'# originally QuantityClassKind.volume_per_time_per_pressure_length
QuantityClassKindExt.volume_per_time_per_time = 'volume per time per time'# originally QuantityClassKind.volume_per_time_per_time
QuantityClassKindExt.volume_per_time_per_volume = 'volume per time per volume'# originally QuantityClassKind.volume_per_time_per_volume
QuantityClassKindExt.volume_per_volume = 'volume per volume'# originally QuantityClassKind.volume_per_volume
QuantityClassKindExt.volumetric_heat_transfer_coefficient = 'volumetric heat transfer coefficient'# originally QuantityClassKind.volumetric_heat_transfer_coefficient
QuantityClassKindExt.volumetric_thermal_expansion = 'volumetric thermal expansion'# originally QuantityClassKind.volumetric_thermal_expansion
QuantityClassKindExt.unitless = 'unitless'        # originally QuantityClassKind.unitless
QuantityClassKindExt.not_a_measure = 'not a measure'# originally QuantityClassKind.not_a_measure
QuantityClassKindExt._InitializeFacetMap(QuantityClassKindExt._CF_pattern,
   QuantityClassKindExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'QuantityClassKindExt', QuantityClassKindExt)
_module_typeBindings.QuantityClassKindExt = QuantityClassKindExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}LithologyQualifierKindExt
# superclasses pyxb.binding.datatypes.anySimpleType
class LithologyQualifierKindExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of LithologyQualifierKind, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LithologyQualifierKindExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 368, 1)
    _Documentation = None

    _MemberTypes = ( LithologyQualifierKind, EnumExtensionPattern, )
LithologyQualifierKindExt._CF_pattern = pyxb.binding.facets.CF_pattern()
LithologyQualifierKindExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LithologyQualifierKindExt)
LithologyQualifierKindExt.alkali_feldspar_rhyolite = 'alkali feldspar rhyolite'# originally LithologyQualifierKind.alkali_feldspar_rhyolite
LithologyQualifierKindExt.alkali_olivine_basalt = 'alkali olivine basalt'# originally LithologyQualifierKind.alkali_olivine_basalt
LithologyQualifierKindExt.amphibolite = 'amphibolite'# originally LithologyQualifierKind.amphibolite
LithologyQualifierKindExt.amphibolitic = 'amphibolitic'# originally LithologyQualifierKind.amphibolitic
LithologyQualifierKindExt.andesite = 'andesite'   # originally LithologyQualifierKind.andesite
LithologyQualifierKindExt.andesitic = 'andesitic' # originally LithologyQualifierKind.andesitic
LithologyQualifierKindExt.anhydrite = 'anhydrite' # originally LithologyQualifierKind.anhydrite
LithologyQualifierKindExt.anhydritic = 'anhydritic'# originally LithologyQualifierKind.anhydritic
LithologyQualifierKindExt.ankerite = 'ankerite'   # originally LithologyQualifierKind.ankerite
LithologyQualifierKindExt.ankeritic = 'ankeritic' # originally LithologyQualifierKind.ankeritic
LithologyQualifierKindExt.anorthositic_rock = 'anorthositic rock'# originally LithologyQualifierKind.anorthositic_rock
LithologyQualifierKindExt.anthracite = 'anthracite'# originally LithologyQualifierKind.anthracite
LithologyQualifierKindExt.anthracitic = 'anthracitic'# originally LithologyQualifierKind.anthracitic
LithologyQualifierKindExt.aplite = 'aplite'       # originally LithologyQualifierKind.aplite
LithologyQualifierKindExt.aplitic = 'aplitic'     # originally LithologyQualifierKind.aplitic
LithologyQualifierKindExt.arenite = 'arenite'     # originally LithologyQualifierKind.arenite
LithologyQualifierKindExt.arenitic = 'arenitic'   # originally LithologyQualifierKind.arenitic
LithologyQualifierKindExt.argillaceous = 'argillaceous'# originally LithologyQualifierKind.argillaceous
LithologyQualifierKindExt.arkose = 'arkose'       # originally LithologyQualifierKind.arkose
LithologyQualifierKindExt.arkosic = 'arkosic'     # originally LithologyQualifierKind.arkosic
LithologyQualifierKindExt.barite = 'barite'       # originally LithologyQualifierKind.barite
LithologyQualifierKindExt.baritic = 'baritic'     # originally LithologyQualifierKind.baritic
LithologyQualifierKindExt.basalt = 'basalt'       # originally LithologyQualifierKind.basalt
LithologyQualifierKindExt.basaltic = 'basaltic'   # originally LithologyQualifierKind.basaltic
LithologyQualifierKindExt.basanite = 'basanite'   # originally LithologyQualifierKind.basanite
LithologyQualifierKindExt.basanitic = 'basanitic' # originally LithologyQualifierKind.basanitic
LithologyQualifierKindExt.bauxite = 'bauxite'     # originally LithologyQualifierKind.bauxite
LithologyQualifierKindExt.bauxitic = 'bauxitic'   # originally LithologyQualifierKind.bauxitic
LithologyQualifierKindExt.belemnites = 'belemnites'# originally LithologyQualifierKind.belemnites
LithologyQualifierKindExt.belemnitic = 'belemnitic'# originally LithologyQualifierKind.belemnitic
LithologyQualifierKindExt.bioturbated = 'bioturbated'# originally LithologyQualifierKind.bioturbated
LithologyQualifierKindExt.bioturbation = 'bioturbation'# originally LithologyQualifierKind.bioturbation
LithologyQualifierKindExt.bitumen = 'bitumen'     # originally LithologyQualifierKind.bitumen
LithologyQualifierKindExt.bituminous = 'bituminous'# originally LithologyQualifierKind.bituminous
LithologyQualifierKindExt.bituminous_coal = 'bituminous coal'# originally LithologyQualifierKind.bituminous_coal
LithologyQualifierKindExt.blueschist_metamorphic_rock = 'blueschist metamorphic rock'# originally LithologyQualifierKind.blueschist_metamorphic_rock
LithologyQualifierKindExt.boninite = 'boninite'   # originally LithologyQualifierKind.boninite
LithologyQualifierKindExt.breccia = 'breccia'     # originally LithologyQualifierKind.breccia
LithologyQualifierKindExt.brecciated = 'brecciated'# originally LithologyQualifierKind.brecciated
LithologyQualifierKindExt.bryozoan = 'bryozoan'   # originally LithologyQualifierKind.bryozoan
LithologyQualifierKindExt.bryozoans = 'bryozoans' # originally LithologyQualifierKind.bryozoans
LithologyQualifierKindExt.burrowed = 'burrowed'   # originally LithologyQualifierKind.burrowed
LithologyQualifierKindExt.burrows = 'burrows'     # originally LithologyQualifierKind.burrows
LithologyQualifierKindExt.calcareous = 'calcareous'# originally LithologyQualifierKind.calcareous
LithologyQualifierKindExt.calcite = 'calcite'     # originally LithologyQualifierKind.calcite
LithologyQualifierKindExt.calcite_concretion = 'calcite concretion'# originally LithologyQualifierKind.calcite_concretion
LithologyQualifierKindExt.calcitic = 'calcitic'   # originally LithologyQualifierKind.calcitic
LithologyQualifierKindExt.carbonaceous = 'carbonaceous'# originally LithologyQualifierKind.carbonaceous
LithologyQualifierKindExt.carbonate_ooze = 'carbonate ooze'# originally LithologyQualifierKind.carbonate_ooze
LithologyQualifierKindExt.carbonatite = 'carbonatite'# originally LithologyQualifierKind.carbonatite
LithologyQualifierKindExt.carbonatitic = 'carbonatitic'# originally LithologyQualifierKind.carbonatitic
LithologyQualifierKindExt.chalk = 'chalk'         # originally LithologyQualifierKind.chalk
LithologyQualifierKindExt.chalky = 'chalky'       # originally LithologyQualifierKind.chalky
LithologyQualifierKindExt.chamosite = 'chamosite' # originally LithologyQualifierKind.chamosite
LithologyQualifierKindExt.chamositic = 'chamositic'# originally LithologyQualifierKind.chamositic
LithologyQualifierKindExt.chert = 'chert'         # originally LithologyQualifierKind.chert
LithologyQualifierKindExt.cherty = 'cherty'       # originally LithologyQualifierKind.cherty
LithologyQualifierKindExt.chlorite = 'chlorite'   # originally LithologyQualifierKind.chlorite
LithologyQualifierKindExt.chloritic = 'chloritic' # originally LithologyQualifierKind.chloritic
LithologyQualifierKindExt.clay = 'clay'           # originally LithologyQualifierKind.clay
LithologyQualifierKindExt.claystone = 'claystone' # originally LithologyQualifierKind.claystone
LithologyQualifierKindExt.coal = 'coal'           # originally LithologyQualifierKind.coal
LithologyQualifierKindExt.concretionary = 'concretionary'# originally LithologyQualifierKind.concretionary
LithologyQualifierKindExt.concretions = 'concretions'# originally LithologyQualifierKind.concretions
LithologyQualifierKindExt.conglomerate = 'conglomerate'# originally LithologyQualifierKind.conglomerate
LithologyQualifierKindExt.conglomeratic = 'conglomeratic'# originally LithologyQualifierKind.conglomeratic
LithologyQualifierKindExt.coral_fragments = 'coral fragments'# originally LithologyQualifierKind.coral_fragments
LithologyQualifierKindExt.coralline = 'coralline' # originally LithologyQualifierKind.coralline
LithologyQualifierKindExt.crinoidal = 'crinoidal' # originally LithologyQualifierKind.crinoidal
LithologyQualifierKindExt.crinoids = 'crinoids'   # originally LithologyQualifierKind.crinoids
LithologyQualifierKindExt.dacite = 'dacite'       # originally LithologyQualifierKind.dacite
LithologyQualifierKindExt.dacitic = 'dacitic'     # originally LithologyQualifierKind.dacitic
LithologyQualifierKindExt.diabase = 'diabase'     # originally LithologyQualifierKind.diabase
LithologyQualifierKindExt.diabasic = 'diabasic'   # originally LithologyQualifierKind.diabasic
LithologyQualifierKindExt.diamictite = 'diamictite'# originally LithologyQualifierKind.diamictite
LithologyQualifierKindExt.diamictitic = 'diamictitic'# originally LithologyQualifierKind.diamictitic
LithologyQualifierKindExt.diatomaceous = 'diatomaceous'# originally LithologyQualifierKind.diatomaceous
LithologyQualifierKindExt.diatoms = 'diatoms'     # originally LithologyQualifierKind.diatoms
LithologyQualifierKindExt.diorite = 'diorite'     # originally LithologyQualifierKind.diorite
LithologyQualifierKindExt.dioritic = 'dioritic'   # originally LithologyQualifierKind.dioritic
LithologyQualifierKindExt.dioritoid = 'dioritoid' # originally LithologyQualifierKind.dioritoid
LithologyQualifierKindExt.dioritoidic = 'dioritoidic'# originally LithologyQualifierKind.dioritoidic
LithologyQualifierKindExt.doleritic_rock = 'doleritic rock'# originally LithologyQualifierKind.doleritic_rock
LithologyQualifierKindExt.dolomite = 'dolomite'   # originally LithologyQualifierKind.dolomite
LithologyQualifierKindExt.dolomite_concretion = 'dolomite concretion'# originally LithologyQualifierKind.dolomite_concretion
LithologyQualifierKindExt.dolomite_stringer = 'dolomite stringer'# originally LithologyQualifierKind.dolomite_stringer
LithologyQualifierKindExt.dolomitic = 'dolomitic' # originally LithologyQualifierKind.dolomitic
LithologyQualifierKindExt.eclogite = 'eclogite'   # originally LithologyQualifierKind.eclogite
LithologyQualifierKindExt.eclogitic = 'eclogitic' # originally LithologyQualifierKind.eclogitic
LithologyQualifierKindExt.exotic_alkaline_rock = 'exotic alkaline rock'# originally LithologyQualifierKind.exotic_alkaline_rock
LithologyQualifierKindExt.feldspar = 'feldspar'   # originally LithologyQualifierKind.feldspar
LithologyQualifierKindExt.feldsparic = 'feldsparic'# originally LithologyQualifierKind.feldsparic
LithologyQualifierKindExt.feldspathic = 'feldspathic'# originally LithologyQualifierKind.feldspathic
LithologyQualifierKindExt.feldspathic_arenite = 'feldspathic arenite'# originally LithologyQualifierKind.feldspathic_arenite
LithologyQualifierKindExt.ferruginous = 'ferruginous'# originally LithologyQualifierKind.ferruginous
LithologyQualifierKindExt.fine_grained_igneous_rock = 'fine grained igneous rock'# originally LithologyQualifierKind.fine_grained_igneous_rock
LithologyQualifierKindExt.foid_dioritoid = 'foid dioritoid'# originally LithologyQualifierKind.foid_dioritoid
LithologyQualifierKindExt.foid_gabbroid = 'foid gabbroid'# originally LithologyQualifierKind.foid_gabbroid
LithologyQualifierKindExt.foid_syenitoid = 'foid syenitoid'# originally LithologyQualifierKind.foid_syenitoid
LithologyQualifierKindExt.foidite = 'foidite'     # originally LithologyQualifierKind.foidite
LithologyQualifierKindExt.foiditic = 'foiditic'   # originally LithologyQualifierKind.foiditic
LithologyQualifierKindExt.foiditoid = 'foiditoid' # originally LithologyQualifierKind.foiditoid
LithologyQualifierKindExt.foidolite = 'foidolite' # originally LithologyQualifierKind.foidolite
LithologyQualifierKindExt.foidolitic = 'foidolitic'# originally LithologyQualifierKind.foidolitic
LithologyQualifierKindExt.foliated_metamorphic_rock = 'foliated metamorphic rock'# originally LithologyQualifierKind.foliated_metamorphic_rock
LithologyQualifierKindExt.foraminifera = 'foraminifera'# originally LithologyQualifierKind.foraminifera
LithologyQualifierKindExt.foraminiferous = 'foraminiferous'# originally LithologyQualifierKind.foraminiferous
LithologyQualifierKindExt.forams = 'forams'       # originally LithologyQualifierKind.forams
LithologyQualifierKindExt.fossil_fragments = 'fossil fragments'# originally LithologyQualifierKind.fossil_fragments
LithologyQualifierKindExt.fossiliferous = 'fossiliferous'# originally LithologyQualifierKind.fossiliferous
LithologyQualifierKindExt.fossils_undifferentiated = 'fossils undifferentiated'# originally LithologyQualifierKind.fossils_undifferentiated
LithologyQualifierKindExt.fragmental_igneous_rock = 'fragmental igneous rock'# originally LithologyQualifierKind.fragmental_igneous_rock
LithologyQualifierKindExt.gabbro = 'gabbro'       # originally LithologyQualifierKind.gabbro
LithologyQualifierKindExt.gabbroic = 'gabbroic'   # originally LithologyQualifierKind.gabbroic
LithologyQualifierKindExt.gabbroic_rock = 'gabbroic rock'# originally LithologyQualifierKind.gabbroic_rock
LithologyQualifierKindExt.gabbroid = 'gabbroid'   # originally LithologyQualifierKind.gabbroid
LithologyQualifierKindExt.gabbroidic = 'gabbroidic'# originally LithologyQualifierKind.gabbroidic
LithologyQualifierKindExt.gilsonite = 'gilsonite' # originally LithologyQualifierKind.gilsonite
LithologyQualifierKindExt.gilsonitic = 'gilsonitic'# originally LithologyQualifierKind.gilsonitic
LithologyQualifierKindExt.glauconite = 'glauconite'# originally LithologyQualifierKind.glauconite
LithologyQualifierKindExt.glauconitic = 'glauconitic'# originally LithologyQualifierKind.glauconitic
LithologyQualifierKindExt.gneiss = 'gneiss'       # originally LithologyQualifierKind.gneiss
LithologyQualifierKindExt.gneissic = 'gneissic'   # originally LithologyQualifierKind.gneissic
LithologyQualifierKindExt.granite = 'granite'     # originally LithologyQualifierKind.granite
LithologyQualifierKindExt.granitic = 'granitic'   # originally LithologyQualifierKind.granitic
LithologyQualifierKindExt.granodiorite = 'granodiorite'# originally LithologyQualifierKind.granodiorite
LithologyQualifierKindExt.granodioritic = 'granodioritic'# originally LithologyQualifierKind.granodioritic
LithologyQualifierKindExt.granofels = 'granofels' # originally LithologyQualifierKind.granofels
LithologyQualifierKindExt.granulite = 'granulite' # originally LithologyQualifierKind.granulite
LithologyQualifierKindExt.granulitic = 'granulitic'# originally LithologyQualifierKind.granulitic
LithologyQualifierKindExt.gravel = 'gravel'       # originally LithologyQualifierKind.gravel
LithologyQualifierKindExt.gravelly = 'gravelly'   # originally LithologyQualifierKind.gravelly
LithologyQualifierKindExt.greenstone = 'greenstone'# originally LithologyQualifierKind.greenstone
LithologyQualifierKindExt.gumbo = 'gumbo'         # originally LithologyQualifierKind.gumbo
LithologyQualifierKindExt.gypsiferous = 'gypsiferous'# originally LithologyQualifierKind.gypsiferous
LithologyQualifierKindExt.gypsum = 'gypsum'       # originally LithologyQualifierKind.gypsum
LithologyQualifierKindExt.halite = 'halite'       # originally LithologyQualifierKind.halite
LithologyQualifierKindExt.halitic = 'halitic'     # originally LithologyQualifierKind.halitic
LithologyQualifierKindExt.hornfels = 'hornfels'   # originally LithologyQualifierKind.hornfels
LithologyQualifierKindExt.hornfelsic = 'hornfelsic'# originally LithologyQualifierKind.hornfelsic
LithologyQualifierKindExt.igneous = 'igneous'     # originally LithologyQualifierKind.igneous
LithologyQualifierKindExt.igneous_rock = 'igneous rock'# originally LithologyQualifierKind.igneous_rock
LithologyQualifierKindExt.illite = 'illite'       # originally LithologyQualifierKind.illite
LithologyQualifierKindExt.illitic = 'illitic'     # originally LithologyQualifierKind.illitic
LithologyQualifierKindExt.impact_generated_material = 'impact generated material'# originally LithologyQualifierKind.impact_generated_material
LithologyQualifierKindExt.impure_dolomite = 'impure dolomite'# originally LithologyQualifierKind.impure_dolomite
LithologyQualifierKindExt.impure_limestone = 'impure limestone'# originally LithologyQualifierKind.impure_limestone
LithologyQualifierKindExt.intrusive_rock_plutonic = 'intrusive rock (plutonic)'# originally LithologyQualifierKind.intrusive_rock_plutonic
LithologyQualifierKindExt.iron_rich_sedimentary_rock = 'iron rich sedimentary rock'# originally LithologyQualifierKind.iron_rich_sedimentary_rock
LithologyQualifierKindExt.kalsilitic_and_melilitic_rocks = 'kalsilitic and melilitic rocks'# originally LithologyQualifierKind.kalsilitic_and_melilitic_rocks
LithologyQualifierKindExt.kaolinite = 'kaolinite' # originally LithologyQualifierKind.kaolinite
LithologyQualifierKindExt.kaolinitic = 'kaolinitic'# originally LithologyQualifierKind.kaolinitic
LithologyQualifierKindExt.komatiitic_rock = 'komatiitic rock'# originally LithologyQualifierKind.komatiitic_rock
LithologyQualifierKindExt.latitic_rock = 'latitic rock'# originally LithologyQualifierKind.latitic_rock
LithologyQualifierKindExt.lignite = 'lignite'     # originally LithologyQualifierKind.lignite
LithologyQualifierKindExt.lignitic = 'lignitic'   # originally LithologyQualifierKind.lignitic
LithologyQualifierKindExt.lime_boundstone = 'lime boundstone'# originally LithologyQualifierKind.lime_boundstone
LithologyQualifierKindExt.lime_framestone = 'lime framestone'# originally LithologyQualifierKind.lime_framestone
LithologyQualifierKindExt.lime_grainstone = 'lime grainstone'# originally LithologyQualifierKind.lime_grainstone
LithologyQualifierKindExt.lime_mudstone = 'lime mudstone'# originally LithologyQualifierKind.lime_mudstone
LithologyQualifierKindExt.lime_packstone = 'lime packstone'# originally LithologyQualifierKind.lime_packstone
LithologyQualifierKindExt.lime_wackestone = 'lime wackestone'# originally LithologyQualifierKind.lime_wackestone
LithologyQualifierKindExt.limestone = 'limestone' # originally LithologyQualifierKind.limestone
LithologyQualifierKindExt.limestone_stringer = 'limestone stringer'# originally LithologyQualifierKind.limestone_stringer
LithologyQualifierKindExt.lithic = 'lithic'       # originally LithologyQualifierKind.lithic
LithologyQualifierKindExt.lithic_fragments = 'lithic fragments'# originally LithologyQualifierKind.lithic_fragments
LithologyQualifierKindExt.marble = 'marble'       # originally LithologyQualifierKind.marble
LithologyQualifierKindExt.marcasite = 'marcasite' # originally LithologyQualifierKind.marcasite
LithologyQualifierKindExt.marcasitic = 'marcasitic'# originally LithologyQualifierKind.marcasitic
LithologyQualifierKindExt.marl = 'marl'           # originally LithologyQualifierKind.marl
LithologyQualifierKindExt.marly = 'marly'         # originally LithologyQualifierKind.marly
LithologyQualifierKindExt.metamorphic_rock = 'metamorphic rock'# originally LithologyQualifierKind.metamorphic_rock
LithologyQualifierKindExt.mica = 'mica'           # originally LithologyQualifierKind.mica
LithologyQualifierKindExt.mica_schist = 'mica schist'# originally LithologyQualifierKind.mica_schist
LithologyQualifierKindExt.micaceous = 'micaceous' # originally LithologyQualifierKind.micaceous
LithologyQualifierKindExt.microfossiliferous = 'microfossiliferous'# originally LithologyQualifierKind.microfossiliferous
LithologyQualifierKindExt.microfossils = 'microfossils'# originally LithologyQualifierKind.microfossils
LithologyQualifierKindExt.migmatite = 'migmatite' # originally LithologyQualifierKind.migmatite
LithologyQualifierKindExt.migmatitic = 'migmatitic'# originally LithologyQualifierKind.migmatitic
LithologyQualifierKindExt.monzogabbro = 'monzogabbro'# originally LithologyQualifierKind.monzogabbro
LithologyQualifierKindExt.monzogabbroic = 'monzogabbroic'# originally LithologyQualifierKind.monzogabbroic
LithologyQualifierKindExt.mud = 'mud'             # originally LithologyQualifierKind.mud
LithologyQualifierKindExt.muddy = 'muddy'         # originally LithologyQualifierKind.muddy
LithologyQualifierKindExt.mudstone = 'mudstone'   # originally LithologyQualifierKind.mudstone
LithologyQualifierKindExt.mylonitic_rock = 'mylonitic rock'# originally LithologyQualifierKind.mylonitic_rock
LithologyQualifierKindExt.no_sample = 'no sample' # originally LithologyQualifierKind.no_sample
LithologyQualifierKindExt.oncolite = 'oncolite'   # originally LithologyQualifierKind.oncolite
LithologyQualifierKindExt.oncoliths = 'oncoliths' # originally LithologyQualifierKind.oncoliths
LithologyQualifierKindExt.oncolitic = 'oncolitic' # originally LithologyQualifierKind.oncolitic
LithologyQualifierKindExt.ooids = 'ooids'         # originally LithologyQualifierKind.ooids
LithologyQualifierKindExt.ooliths = 'ooliths'     # originally LithologyQualifierKind.ooliths
LithologyQualifierKindExt.oolitic = 'oolitic'     # originally LithologyQualifierKind.oolitic
LithologyQualifierKindExt.ooze = 'ooze'           # originally LithologyQualifierKind.ooze
LithologyQualifierKindExt.ophiolite = 'ophiolite' # originally LithologyQualifierKind.ophiolite
LithologyQualifierKindExt.ophiolitic = 'ophiolitic'# originally LithologyQualifierKind.ophiolitic
LithologyQualifierKindExt.organic_bearing_mudstone = 'organic bearing mudstone'# originally LithologyQualifierKind.organic_bearing_mudstone
LithologyQualifierKindExt.ostracodal = 'ostracodal'# originally LithologyQualifierKind.ostracodal
LithologyQualifierKindExt.ostracods = 'ostracods' # originally LithologyQualifierKind.ostracods
LithologyQualifierKindExt.peat = 'peat'           # originally LithologyQualifierKind.peat
LithologyQualifierKindExt.peaty = 'peaty'         # originally LithologyQualifierKind.peaty
LithologyQualifierKindExt.pebble = 'pebble'       # originally LithologyQualifierKind.pebble
LithologyQualifierKindExt.pebbly = 'pebbly'       # originally LithologyQualifierKind.pebbly
LithologyQualifierKindExt.pegmatite = 'pegmatite' # originally LithologyQualifierKind.pegmatite
LithologyQualifierKindExt.pegmatitic = 'pegmatitic'# originally LithologyQualifierKind.pegmatitic
LithologyQualifierKindExt.pelletal = 'pelletal'   # originally LithologyQualifierKind.pelletal
LithologyQualifierKindExt.pellets = 'pellets'     # originally LithologyQualifierKind.pellets
LithologyQualifierKindExt.peloidal = 'peloidal'   # originally LithologyQualifierKind.peloidal
LithologyQualifierKindExt.peloids = 'peloids'     # originally LithologyQualifierKind.peloids
LithologyQualifierKindExt.peridotite = 'peridotite'# originally LithologyQualifierKind.peridotite
LithologyQualifierKindExt.peridotitic = 'peridotitic'# originally LithologyQualifierKind.peridotitic
LithologyQualifierKindExt.phaneritic_igneous_rock = 'phaneritic igneous rock'# originally LithologyQualifierKind.phaneritic_igneous_rock
LithologyQualifierKindExt.phonolite = 'phonolite' # originally LithologyQualifierKind.phonolite
LithologyQualifierKindExt.phonolitic = 'phonolitic'# originally LithologyQualifierKind.phonolitic
LithologyQualifierKindExt.phonolitoid = 'phonolitoid'# originally LithologyQualifierKind.phonolitoid
LithologyQualifierKindExt.phosphate = 'phosphate' # originally LithologyQualifierKind.phosphate
LithologyQualifierKindExt.phosphate_rock = 'phosphate rock'# originally LithologyQualifierKind.phosphate_rock
LithologyQualifierKindExt.phosphatic = 'phosphatic'# originally LithologyQualifierKind.phosphatic
LithologyQualifierKindExt.phyllite = 'phyllite'   # originally LithologyQualifierKind.phyllite
LithologyQualifierKindExt.phyllitic = 'phyllitic' # originally LithologyQualifierKind.phyllitic
LithologyQualifierKindExt.pisolite = 'pisolite'   # originally LithologyQualifierKind.pisolite
LithologyQualifierKindExt.pisoliths = 'pisoliths' # originally LithologyQualifierKind.pisoliths
LithologyQualifierKindExt.pisolitic = 'pisolitic' # originally LithologyQualifierKind.pisolitic
LithologyQualifierKindExt.plant_remains = 'plant remains'# originally LithologyQualifierKind.plant_remains
LithologyQualifierKindExt.porphyritic = 'porphyritic'# originally LithologyQualifierKind.porphyritic
LithologyQualifierKindExt.porphyry = 'porphyry'   # originally LithologyQualifierKind.porphyry
LithologyQualifierKindExt.potassium_and_magnesium_salts = 'potassium and magnesium salts'# originally LithologyQualifierKind.potassium_and_magnesium_salts
LithologyQualifierKindExt.pyrite = 'pyrite'       # originally LithologyQualifierKind.pyrite
LithologyQualifierKindExt.pyritic = 'pyritic'     # originally LithologyQualifierKind.pyritic
LithologyQualifierKindExt.pyroclastic_breccia = 'pyroclastic breccia'# originally LithologyQualifierKind.pyroclastic_breccia
LithologyQualifierKindExt.pyroclastic_rock = 'pyroclastic rock'# originally LithologyQualifierKind.pyroclastic_rock
LithologyQualifierKindExt.pyroxenite = 'pyroxenite'# originally LithologyQualifierKind.pyroxenite
LithologyQualifierKindExt.pyroxenitic = 'pyroxenitic'# originally LithologyQualifierKind.pyroxenitic
LithologyQualifierKindExt.quartiferous = 'quartiferous'# originally LithologyQualifierKind.quartiferous
LithologyQualifierKindExt.quartz = 'quartz'       # originally LithologyQualifierKind.quartz
LithologyQualifierKindExt.quartz_arenite = 'quartz arenite'# originally LithologyQualifierKind.quartz_arenite
LithologyQualifierKindExt.quartzite = 'quartzite' # originally LithologyQualifierKind.quartzite
LithologyQualifierKindExt.quartzitic = 'quartzitic'# originally LithologyQualifierKind.quartzitic
LithologyQualifierKindExt.radiolaria = 'radiolaria'# originally LithologyQualifierKind.radiolaria
LithologyQualifierKindExt.radiolarian = 'radiolarian'# originally LithologyQualifierKind.radiolarian
LithologyQualifierKindExt.rhyolite = 'rhyolite'   # originally LithologyQualifierKind.rhyolite
LithologyQualifierKindExt.rhyolitic = 'rhyolitic' # originally LithologyQualifierKind.rhyolitic
LithologyQualifierKindExt.rock_salt = 'rock salt' # originally LithologyQualifierKind.rock_salt
LithologyQualifierKindExt.rootlets = 'rootlets'   # originally LithologyQualifierKind.rootlets
LithologyQualifierKindExt.salty = 'salty'         # originally LithologyQualifierKind.salty
LithologyQualifierKindExt.sand = 'sand'           # originally LithologyQualifierKind.sand
LithologyQualifierKindExt.sandstone = 'sandstone' # originally LithologyQualifierKind.sandstone
LithologyQualifierKindExt.sandy = 'sandy'         # originally LithologyQualifierKind.sandy
LithologyQualifierKindExt.sapropel = 'sapropel'   # originally LithologyQualifierKind.sapropel
LithologyQualifierKindExt.sapropelic = 'sapropelic'# originally LithologyQualifierKind.sapropelic
LithologyQualifierKindExt.schist = 'schist'       # originally LithologyQualifierKind.schist
LithologyQualifierKindExt.schisty = 'schisty'     # originally LithologyQualifierKind.schisty
LithologyQualifierKindExt.sepentinitic = 'sepentinitic'# originally LithologyQualifierKind.sepentinitic
LithologyQualifierKindExt.serpentinite = 'serpentinite'# originally LithologyQualifierKind.serpentinite
LithologyQualifierKindExt.shale = 'shale'         # originally LithologyQualifierKind.shale
LithologyQualifierKindExt.shaly = 'shaly'         # originally LithologyQualifierKind.shaly
LithologyQualifierKindExt.shell_fragments = 'shell fragments'# originally LithologyQualifierKind.shell_fragments
LithologyQualifierKindExt.shelly = 'shelly'       # originally LithologyQualifierKind.shelly
LithologyQualifierKindExt.siderite = 'siderite'   # originally LithologyQualifierKind.siderite
LithologyQualifierKindExt.siderite_concretion = 'siderite concretion'# originally LithologyQualifierKind.siderite_concretion
LithologyQualifierKindExt.sideritic = 'sideritic' # originally LithologyQualifierKind.sideritic
LithologyQualifierKindExt.siliceous_ooze = 'siliceous ooze'# originally LithologyQualifierKind.siliceous_ooze
LithologyQualifierKindExt.silt = 'silt'           # originally LithologyQualifierKind.silt
LithologyQualifierKindExt.siltstone = 'siltstone' # originally LithologyQualifierKind.siltstone
LithologyQualifierKindExt.silty = 'silty'         # originally LithologyQualifierKind.silty
LithologyQualifierKindExt.skarn = 'skarn'         # originally LithologyQualifierKind.skarn
LithologyQualifierKindExt.skarny = 'skarny'       # originally LithologyQualifierKind.skarny
LithologyQualifierKindExt.slate = 'slate'         # originally LithologyQualifierKind.slate
LithologyQualifierKindExt.slaty = 'slaty'         # originally LithologyQualifierKind.slaty
LithologyQualifierKindExt.smectite = 'smectite'   # originally LithologyQualifierKind.smectite
LithologyQualifierKindExt.smectitic = 'smectitic' # originally LithologyQualifierKind.smectitic
LithologyQualifierKindExt.spicular = 'spicular'   # originally LithologyQualifierKind.spicular
LithologyQualifierKindExt.spicules = 'spicules'   # originally LithologyQualifierKind.spicules
LithologyQualifierKindExt.spilite = 'spilite'     # originally LithologyQualifierKind.spilite
LithologyQualifierKindExt.spilitic = 'spilitic'   # originally LithologyQualifierKind.spilitic
LithologyQualifierKindExt.stylolites = 'stylolites'# originally LithologyQualifierKind.stylolites
LithologyQualifierKindExt.stylolitic = 'stylolitic'# originally LithologyQualifierKind.stylolitic
LithologyQualifierKindExt.syenite = 'syenite'     # originally LithologyQualifierKind.syenite
LithologyQualifierKindExt.syenitic = 'syenitic'   # originally LithologyQualifierKind.syenitic
LithologyQualifierKindExt.syenitoid = 'syenitoid' # originally LithologyQualifierKind.syenitoid
LithologyQualifierKindExt.sylvite = 'sylvite'     # originally LithologyQualifierKind.sylvite
LithologyQualifierKindExt.sylvitic = 'sylvitic'   # originally LithologyQualifierKind.sylvitic
LithologyQualifierKindExt.tarry = 'tarry'         # originally LithologyQualifierKind.tarry
LithologyQualifierKindExt.tephrite = 'tephrite'   # originally LithologyQualifierKind.tephrite
LithologyQualifierKindExt.tephritic = 'tephritic' # originally LithologyQualifierKind.tephritic
LithologyQualifierKindExt.tephritoid = 'tephritoid'# originally LithologyQualifierKind.tephritoid
LithologyQualifierKindExt.tholeiitic_basalt = 'tholeiitic basalt'# originally LithologyQualifierKind.tholeiitic_basalt
LithologyQualifierKindExt.tonalite = 'tonalite'   # originally LithologyQualifierKind.tonalite
LithologyQualifierKindExt.tonalitic = 'tonalitic' # originally LithologyQualifierKind.tonalitic
LithologyQualifierKindExt.trachyte = 'trachyte'   # originally LithologyQualifierKind.trachyte
LithologyQualifierKindExt.trachytic = 'trachytic' # originally LithologyQualifierKind.trachytic
LithologyQualifierKindExt.trachytic_rock = 'trachytic rock'# originally LithologyQualifierKind.trachytic_rock
LithologyQualifierKindExt.trachytoid = 'trachytoid'# originally LithologyQualifierKind.trachytoid
LithologyQualifierKindExt.travertine = 'travertine'# originally LithologyQualifierKind.travertine
LithologyQualifierKindExt.tuff = 'tuff'           # originally LithologyQualifierKind.tuff
LithologyQualifierKindExt.tuffaceous = 'tuffaceous'# originally LithologyQualifierKind.tuffaceous
LithologyQualifierKindExt.tuffite = 'tuffite'     # originally LithologyQualifierKind.tuffite
LithologyQualifierKindExt.tuffitic = 'tuffitic'   # originally LithologyQualifierKind.tuffitic
LithologyQualifierKindExt.ultrabasic = 'ultrabasic'# originally LithologyQualifierKind.ultrabasic
LithologyQualifierKindExt.undifferentiated = 'undifferentiated'# originally LithologyQualifierKind.undifferentiated
LithologyQualifierKindExt.unknown = 'unknown'     # originally LithologyQualifierKind.unknown
LithologyQualifierKindExt.wacke = 'wacke'         # originally LithologyQualifierKind.wacke
LithologyQualifierKindExt._InitializeFacetMap(LithologyQualifierKindExt._CF_pattern,
   LithologyQualifierKindExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LithologyQualifierKindExt', LithologyQualifierKindExt)
_module_typeBindings.LithologyQualifierKindExt = LithologyQualifierKindExt

# Union simple type: {http://www.energistics.org/energyml/data/commonv2}ReferenceConditionExt
# superclasses pyxb.binding.datatypes.anySimpleType
class ReferenceConditionExt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ReferenceCondition, EnumExtensionPattern."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceConditionExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonEnumerations.xsd', 2479, 1)
    _Documentation = None

    _MemberTypes = ( ReferenceCondition, EnumExtensionPattern, )
ReferenceConditionExt._CF_pattern = pyxb.binding.facets.CF_pattern()
ReferenceConditionExt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReferenceConditionExt)
ReferenceConditionExt.n0_degC_1_atm = '0 degC 1 atm'# originally ReferenceCondition.n0_degC_1_atm
ReferenceConditionExt.n0_degC_1_bar = '0 degC 1 bar'# originally ReferenceCondition.n0_degC_1_bar
ReferenceConditionExt.n15_degC_1_atm = '15 degC 1 atm'# originally ReferenceCondition.n15_degC_1_atm
ReferenceConditionExt.n15_degC_1_bar = '15 degC 1 bar'# originally ReferenceCondition.n15_degC_1_bar
ReferenceConditionExt.n20_degC_1_atm = '20 degC 1 atm'# originally ReferenceCondition.n20_degC_1_atm
ReferenceConditionExt.n20_degC_1_bar = '20 degC 1 bar'# originally ReferenceCondition.n20_degC_1_bar
ReferenceConditionExt.n25_degC_1_bar = '25 degC 1 bar'# originally ReferenceCondition.n25_degC_1_bar
ReferenceConditionExt.n60_degF_1_atm = '60 degF 1 atm'# originally ReferenceCondition.n60_degF_1_atm
ReferenceConditionExt.n60_degF_30_in_Hg = '60 degF 30 in Hg'# originally ReferenceCondition.n60_degF_30_in_Hg
ReferenceConditionExt.ambient = 'ambient'         # originally ReferenceCondition.ambient
ReferenceConditionExt._InitializeFacetMap(ReferenceConditionExt._CF_pattern,
   ReferenceConditionExt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReferenceConditionExt', ReferenceConditionExt)
_module_typeBindings.ReferenceConditionExt = ReferenceConditionExt

# Complex type {http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue with content type ELEMENT_ONLY
class ExtensionNameValue (pyxb.binding.basis.complexTypeDefinition):
    """WITSML - Extension values Schema. The intent is to allow standard WITSML "named" 
extensions without having to modify the schema. A client or server can ignore any name that it 
does not recognize but certain meta data is required in order to allow 
generic clients or servers to process the value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 20, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2Name', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 28, 3), )

    
    Name = property(__Name.value, __Name.set, None, 'The name of the extension.\nEach standard name should document the expected measure class.\nEach standard name should document the expected maximum size. \nFor numeric values the size should be in terms of xsd types\nsuch as int, long, short, byte, float or double.\nFor strings, the maximum length should be defined in number of characters.\nLocal extensions to the list of standard names are allowed but it is strongly\nrecommended that the names and definitions be approved by the \nrespective SIG Technical Team before use.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 41, 3), )

    
    Value = property(__Value.value, __Value.set, None, 'The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MeasureClass uses Python identifier MeasureClass
    __MeasureClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasureClass'), 'MeasureClass', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2MeasureClass', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 46, 3), )

    
    MeasureClass = property(__MeasureClass.value, __MeasureClass.set, None, 'The kind of the measure. For example, "length".\nThis should be specified if the value requires a unit of measure.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DTim uses Python identifier DTim
    __DTim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DTim'), 'DTim', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2DTim', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 52, 3), )

    
    DTim = property(__DTim.value, __DTim.set, None, 'The date-time associated with the value.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Index uses Python identifier Index
    __Index = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Index'), 'Index', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2Index', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 57, 3), )

    
    Index = property(__Index.value, __Index.set, None, 'Indexes things with the same name. \nThat is, 1 indicates the first one, 2 indicates the second one, etc.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpwww_energistics_orgenergymldatacommonv2_ExtensionNameValue_httpwww_energistics_orgenergymldatacommonv2Description', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 63, 3), )

    
    Description = property(__Description.value, __Description.set, None, 'A textual description of the extension.')

    _ElementMap.update({
        __Name.name() : __Name,
        __Value.name() : __Value,
        __MeasureClass.name() : __MeasureClass,
        __DTim.name() : __DTim,
        __Index.name() : __Index,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExtensionNameValue = ExtensionNameValue
Namespace.addCategoryObject('typeBinding', 'ExtensionNameValue', ExtensionNameValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}CustomData with content type ELEMENT_ONLY
class CustomData (pyxb.binding.basis.complexTypeDefinition):
    """WITSML - Custom or User Defined Element and Attributes Component Schema.
                                                Specify custom element, attributes, and types in the custom data area."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CustomData')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CustomData = CustomData
Namespace.addCategoryObject('typeBinding', 'CustomData', CustomData)


# Complex type {http://www.energistics.org/energyml/data/commonv2}Citation with content type ELEMENT_ONLY
class Citation (pyxb.binding.basis.complexTypeDefinition):
    """An ISO 19115 EIP-derived set of metadata attached to all specializations of AbstractObject to ensure the traceability of each individual independent (top level) element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Citation')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 114, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Title', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 119, 3), )

    
    Title = property(__Title.value, __Title.set, None, 'One line description/name of the object.\n\nThis is the equivalent in ISO 19115 of CI_Citation.title\n\nLegacy DCGroup - title')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Originator uses Python identifier Originator
    __Originator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Originator'), 'Originator', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Originator', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 128, 3), )

    
    Originator = property(__Originator.value, __Originator.set, None, 'Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited. \n\nThis is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "originator".\n\nLegacy DCGroup - author')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Creation uses Python identifier Creation
    __Creation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Creation'), 'Creation', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Creation', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 137, 3), )

    
    Creation = property(__Creation.value, __Creation.set, None, 'Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.\n\nThis is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation"\n\nFormat:\nYYYY-MM-DDThh:mm:ssZ[+/-]hh:mm\n\nLegacy DCGroup - created')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Format uses Python identifier Format
    __Format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Format'), 'Format', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Format', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 149, 3), )

    
    Format = property(__Format.value, __Format.set, None, 'Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.\n\nThe ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.\n\nSIG Implementation Notes\n- Legacy DCGroup from v1.1 - publisher\n- fileExtension is not relevant and will be ignored if present.\n- vendor and applicationName are mandatory.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Editor uses Python identifier Editor
    __Editor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Editor'), 'Editor', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Editor', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 161, 3), )

    
    Editor = property(__Editor.value, __Editor.set, None, 'Name (or other human-readable identifier) of the last person who updated the object. \n\nThis is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "editor".\n\nLegacy DCGroup - contributor ')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}LastUpdate uses Python identifier LastUpdate
    __LastUpdate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LastUpdate'), 'LastUpdate', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2LastUpdate', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 170, 3), )

    
    LastUpdate = property(__LastUpdate.value, __LastUpdate.set, None, 'Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.\n\nThis is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate"\n\n\nFormat:\nYYYY-MM-DDThh:mm:ssZ[+/-]hh:mm\n\nLegacy DCGroup - modified ')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}VersionString uses Python identifier VersionString
    __VersionString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VersionString'), 'VersionString', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2VersionString', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 183, 3), )

    
    VersionString = property(__VersionString.value, __VersionString.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2Description', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 184, 3), )

    
    Description = property(__Description.value, __Description.set, None, 'User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.\n\nThis is the equivalent of the ISO 19115 abstract.CharacterString\n\nLegacy DCGroup - description')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DescriptiveKeywords uses Python identifier DescriptiveKeywords
    __DescriptiveKeywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DescriptiveKeywords'), 'DescriptiveKeywords', '__httpwww_energistics_orgenergymldatacommonv2_Citation_httpwww_energistics_orgenergymldatacommonv2DescriptiveKeywords', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 193, 3), )

    
    DescriptiveKeywords = property(__DescriptiveKeywords.value, __DescriptiveKeywords.set, None, 'Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.\n\nThis is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords\n\nLegacy DCGroup - subject')

    _ElementMap.update({
        __Title.name() : __Title,
        __Originator.name() : __Originator,
        __Creation.name() : __Creation,
        __Format.name() : __Format,
        __Editor.name() : __Editor,
        __LastUpdate.name() : __LastUpdate,
        __VersionString.name() : __VersionString,
        __Description.name() : __Description,
        __DescriptiveKeywords.name() : __DescriptiveKeywords
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Citation = Citation
Namespace.addCategoryObject('typeBinding', 'Citation', Citation)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ParameterTemplate with content type ELEMENT_ONLY
class ParameterTemplate (pyxb.binding.basis.complexTypeDefinition):
    """Description of one parameter that participate in one type of activity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ParameterTemplate')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 39, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AllowedKind uses Python identifier AllowedKind
    __AllowedKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllowedKind'), 'AllowedKind', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2AllowedKind', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 44, 3), )

    
    AllowedKind = property(__AllowedKind.value, __AllowedKind.set, None, 'If no allowed type is given, then all kind of datatypes is allowed.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}IsInput uses Python identifier IsInput
    __IsInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsInput'), 'IsInput', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2IsInput', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 49, 3), )

    
    IsInput = property(__IsInput.value, __IsInput.set, None, 'Indicates if the parameter is an input of the activity.\nIf the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}KeyConstraint uses Python identifier KeyConstraint
    __KeyConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyConstraint'), 'KeyConstraint', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2KeyConstraint', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 55, 3), )

    
    KeyConstraint = property(__KeyConstraint.value, __KeyConstraint.set, None, 'Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}IsOutput uses Python identifier IsOutput
    __IsOutput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsOutput'), 'IsOutput', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2IsOutput', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 60, 3), )

    
    IsOutput = property(__IsOutput.value, __IsOutput.set, None, 'Indicates if the parameter is an output of the activity.\nIf the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2Title', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 66, 3), )

    
    Title = property(__Title.value, __Title.set, None, 'Name of the parameter in the activity. Key to identify parameter.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DataObjectContentType uses Python identifier DataObjectContentType
    __DataObjectContentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataObjectContentType'), 'DataObjectContentType', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2DataObjectContentType', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 71, 3), )

    
    DataObjectContentType = property(__DataObjectContentType.value, __DataObjectContentType.set, None, 'When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject ')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MaxOccurs uses Python identifier MaxOccurs
    __MaxOccurs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaxOccurs'), 'MaxOccurs', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2MaxOccurs', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 76, 3), )

    
    MaxOccurs = property(__MaxOccurs.value, __MaxOccurs.set, None, 'Maximum number of parameters of this type allowed in the activity.\nIf the maximum number of parameters is infinite, use -1 value.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MinOccurs uses Python identifier MinOccurs
    __MinOccurs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MinOccurs'), 'MinOccurs', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2MinOccurs', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 82, 3), )

    
    MinOccurs = property(__MinOccurs.value, __MinOccurs.set, None, 'Minimum number of parameter of this type required by the activity.\nIf the minimum number of parameters is infinite, use -1 value.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Constraint uses Python identifier Constraint
    __Constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), 'Constraint', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2Constraint', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 88, 3), )

    
    Constraint = property(__Constraint.value, __Constraint.set, None, 'Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DefaultValue uses Python identifier DefaultValue
    __DefaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DefaultValue'), 'DefaultValue', '__httpwww_energistics_orgenergymldatacommonv2_ParameterTemplate_httpwww_energistics_orgenergymldatacommonv2DefaultValue', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 93, 3), )

    
    DefaultValue = property(__DefaultValue.value, __DefaultValue.set, None, None)

    _ElementMap.update({
        __AllowedKind.name() : __AllowedKind,
        __IsInput.name() : __IsInput,
        __KeyConstraint.name() : __KeyConstraint,
        __IsOutput.name() : __IsOutput,
        __Title.name() : __Title,
        __DataObjectContentType.name() : __DataObjectContentType,
        __MaxOccurs.name() : __MaxOccurs,
        __MinOccurs.name() : __MinOccurs,
        __Constraint.name() : __Constraint,
        __DefaultValue.name() : __DefaultValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ParameterTemplate = ParameterTemplate
Namespace.addCategoryObject('typeBinding', 'ParameterTemplate', ParameterTemplate)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractParameterKey with content type EMPTY
class AbstractParameterKey (pyxb.binding.basis.complexTypeDefinition):
    """Abstract class describing a key used to identify a parameter value. When multiple values are provided for a given parameter, provides a way to identify the parameter through its association with an object, a time index... """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractParameterKey')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 118, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractParameterKey = AbstractParameterKey
Namespace.addCategoryObject('typeBinding', 'AbstractParameterKey', AbstractParameterKey)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter with content type ELEMENT_ONLY
class AbstractActivityParameter (pyxb.binding.basis.complexTypeDefinition):
    """General parameter value used in one instance of activity"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractActivityParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 208, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_energistics_orgenergymldatacommonv2_AbstractActivityParameter_httpwww_energistics_orgenergymldatacommonv2Title', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3), )

    
    Title = property(__Title.value, __Title.set, None, 'Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Index uses Python identifier Index
    __Index = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Index'), 'Index', '__httpwww_energistics_orgenergymldatacommonv2_AbstractActivityParameter_httpwww_energistics_orgenergymldatacommonv2Index', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3), )

    
    Index = property(__Index.value, __Index.set, None, 'When parameter is an array, used to indicate the index in the array')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Selection uses Python identifier Selection
    __Selection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Selection'), 'Selection', '__httpwww_energistics_orgenergymldatacommonv2_AbstractActivityParameter_httpwww_energistics_orgenergymldatacommonv2Selection', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3), )

    
    Selection = property(__Selection.value, __Selection.set, None, 'Textual description about how this parameter was selected.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Key uses Python identifier Key
    __Key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Key'), 'Key', '__httpwww_energistics_orgenergymldatacommonv2_AbstractActivityParameter_httpwww_energistics_orgenergymldatacommonv2Key', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3), )

    
    Key = property(__Key.value, __Key.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title,
        __Index.name() : __Index,
        __Selection.name() : __Selection,
        __Key.name() : __Key
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractActivityParameter = AbstractActivityParameter
Namespace.addCategoryObject('typeBinding', 'AbstractActivityParameter', AbstractActivityParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}JaggedArray with content type ELEMENT_ONLY
class JaggedArray (pyxb.binding.basis.complexTypeDefinition):
    """Data storage object for an array of variable length 1D sub-arrays. The jagged array object consists of these two arrays: 

	- An aggregation of all the variable length sub-arrays into a single 1D array.   
	- The offsets into the single 1D array, given by the sum of all the sub-array lengths up to and including the current sub-array.  

Often referred to as a "list-of-lists" or "array-of-arrays" construction.

For example to store the following three arrays as a jagged array:
(a b c)
(d e f g)
(h)
Elements = (a b c d e f g h)
Cumulative Length = (3 7 8)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'JaggedArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Elements uses Python identifier Elements
    __Elements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Elements'), 'Elements', '__httpwww_energistics_orgenergymldatacommonv2_JaggedArray_httpwww_energistics_orgenergymldatacommonv2Elements', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 272, 3), )

    
    Elements = property(__Elements.value, __Elements.set, None, '1D array of elements containing the aggregation of individual array data.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}CumulativeLength uses Python identifier CumulativeLength
    __CumulativeLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CumulativeLength'), 'CumulativeLength', '__httpwww_energistics_orgenergymldatacommonv2_JaggedArray_httpwww_energistics_orgenergymldatacommonv2CumulativeLength', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 277, 3), )

    
    CumulativeLength = property(__CumulativeLength.value, __CumulativeLength.set, None, '1D array of cumulative lengths to the end of the current sub-array. Each cumulative length is also equal to the index of the first element of the next sub-array, i.e., the index in the elements array for which the next variable length sub-array begins.')

    _ElementMap.update({
        __Elements.name() : __Elements,
        __CumulativeLength.name() : __CumulativeLength
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.JaggedArray = JaggedArray
Namespace.addCategoryObject('typeBinding', 'JaggedArray', JaggedArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractValueArray with content type EMPTY
class AbstractValueArray (pyxb.binding.basis.complexTypeDefinition):
    """Generic representation of an array of numeric, Boolean, and string values. Each derived element provides specialized implementation for specific content types or for optimization of the representation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractValueArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractValueArray = AbstractValueArray
Namespace.addCategoryObject('typeBinding', 'AbstractValueArray', AbstractValueArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractGeodeticCrs with content type EMPTY
class AbstractGeodeticCrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractGeodeticCrs with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractGeodeticCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 32, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractGeodeticCrs = AbstractGeodeticCrs
Namespace.addCategoryObject('typeBinding', 'AbstractGeodeticCrs', AbstractGeodeticCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractProjectedCrs with content type EMPTY
class AbstractProjectedCrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractProjectedCrs with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractProjectedCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractProjectedCrs = AbstractProjectedCrs
Namespace.addCategoryObject('typeBinding', 'AbstractProjectedCrs', AbstractProjectedCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractVerticalCrs with content type EMPTY
class AbstractVerticalCrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractVerticalCrs with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractVerticalCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 276, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractVerticalCrs = AbstractVerticalCrs
Namespace.addCategoryObject('typeBinding', 'AbstractVerticalCrs', AbstractVerticalCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeIndex with content type ELEMENT_ONLY
class TimeIndex (pyxb.binding.basis.complexTypeDefinition):
    """Index into a time series. Used to specify time. (Not to be confused with time step.)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeIndex')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 26, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Index uses Python identifier Index
    __Index = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Index'), 'Index', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndex_httpwww_energistics_orgenergymldatacommonv2Index', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 31, 3), )

    
    Index = property(__Index.value, __Index.set, None, 'The index of the time in the time series.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeSeries uses Python identifier TimeSeries
    __TimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries'), 'TimeSeries', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndex_httpwww_energistics_orgenergymldatacommonv2TimeSeries', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 36, 3), )

    
    TimeSeries = property(__TimeSeries.value, __TimeSeries.set, None, None)

    _ElementMap.update({
        __Index.name() : __Index,
        __TimeSeries.name() : __TimeSeries
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeIndex = TimeIndex
Namespace.addCategoryObject('typeBinding', 'TimeIndex', TimeIndex)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeologicTime with content type ELEMENT_ONLY
class GeologicTime (pyxb.binding.basis.complexTypeDefinition):
    """This class is used to represent a time at several scales: 

	- A mandatory and precise DateTime used to characterize a TimeStep in a TimeSeries


	- An optional Age Offset (corresponding to a geological event occurrence) in  years. This age offset must be positive when it represents a GeologicalEvent occurrence in the past. This Age Offset is not required to be positive, to allow for the case of simulating future geological events.  


When geological time is used to represent a geological event cccurrence, the DateTime must be set by the software writer at a date no earlier than 01/01/1950. Any DateTime (even the creation DateTime of the instance) can be set in this attribute field."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeologicTime')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 39, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AgeOffsetAttribute uses Python identifier AgeOffsetAttribute
    __AgeOffsetAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgeOffsetAttribute'), 'AgeOffsetAttribute', '__httpwww_energistics_orgenergymldatacommonv2_GeologicTime_httpwww_energistics_orgenergymldatacommonv2AgeOffsetAttribute', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 52, 3), )

    
    AgeOffsetAttribute = property(__AgeOffsetAttribute.value, __AgeOffsetAttribute.set, None, 'A Value in Years of the Age Offset between the DateTime Attribute value and the DateTime of a GeologicalEvent Occurrence. This value must be POSITIVE when it represents a Geological Event in The past.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DateTime uses Python identifier DateTime
    __DateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime'), 'DateTime', '__httpwww_energistics_orgenergymldatacommonv2_GeologicTime_httpwww_energistics_orgenergymldatacommonv2DateTime', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 57, 3), )

    
    DateTime = property(__DateTime.value, __DateTime.set, None, 'A date, which can be represented according to the W3CDTF format.')

    _ElementMap.update({
        __AgeOffsetAttribute.name() : __AgeOffsetAttribute,
        __DateTime.name() : __DateTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeologicTime = GeologicTime
Namespace.addCategoryObject('typeBinding', 'GeologicTime', GeologicTime)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeIndices with content type ELEMENT_ONLY
class TimeIndices (pyxb.binding.basis.complexTypeDefinition):
    """Indices
into a time series. Used to specify time. (Not to be confused with time step.)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeIndices')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 64, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeIndexCount uses Python identifier TimeIndexCount
    __TimeIndexCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexCount'), 'TimeIndexCount', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndices_httpwww_energistics_orgenergymldatacommonv2TimeIndexCount', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 70, 3), )

    
    TimeIndexCount = property(__TimeIndexCount.value, __TimeIndexCount.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeIndexStart uses Python identifier TimeIndexStart
    __TimeIndexStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexStart'), 'TimeIndexStart', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndices_httpwww_energistics_orgenergymldatacommonv2TimeIndexStart', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 71, 3), )

    
    TimeIndexStart = property(__TimeIndexStart.value, __TimeIndexStart.set, None, 'The index of the start time in the time series, if not zero.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}SimulatorTimeStep uses Python identifier SimulatorTimeStep
    __SimulatorTimeStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimulatorTimeStep'), 'SimulatorTimeStep', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndices_httpwww_energistics_orgenergymldatacommonv2SimulatorTimeStep', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 76, 3), )

    
    SimulatorTimeStep = property(__SimulatorTimeStep.value, __SimulatorTimeStep.set, None, 'Simulation time step for each time index')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}UseInterval uses Python identifier UseInterval
    __UseInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UseInterval'), 'UseInterval', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndices_httpwww_energistics_orgenergymldatacommonv2UseInterval', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 81, 3), )

    
    UseInterval = property(__UseInterval.value, __UseInterval.set, None, 'When UseInterval is true, the values are associated with each time intervals between two consecutive time entries instead of each individual time entry. As a consequence the dimension of the value array corresponding to the time series is the number of entry in the series minus one.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeSeries uses Python identifier TimeSeries
    __TimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries'), 'TimeSeries', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndices_httpwww_energistics_orgenergymldatacommonv2TimeSeries', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 86, 3), )

    
    TimeSeries = property(__TimeSeries.value, __TimeSeries.set, None, None)

    _ElementMap.update({
        __TimeIndexCount.name() : __TimeIndexCount,
        __TimeIndexStart.name() : __TimeIndexStart,
        __SimulatorTimeStep.name() : __SimulatorTimeStep,
        __UseInterval.name() : __UseInterval,
        __TimeSeries.name() : __TimeSeries
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeIndices = TimeIndices
Namespace.addCategoryObject('typeBinding', 'TimeIndices', TimeIndices)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeSeriesParentage with content type ELEMENT_ONLY
class TimeSeriesParentage (pyxb.binding.basis.complexTypeDefinition):
    """Indicates that a time series has the associated time series as a parent, i.e., that the series continues from the parent time series."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeSeriesParentage')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 107, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}HasOverlap uses Python identifier HasOverlap
    __HasOverlap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HasOverlap'), 'HasOverlap', '__httpwww_energistics_orgenergymldatacommonv2_TimeSeriesParentage_httpwww_energistics_orgenergymldatacommonv2HasOverlap', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 112, 3), )

    
    HasOverlap = property(__HasOverlap.value, __HasOverlap.set, None, 'Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ParentTimeIndex uses Python identifier ParentTimeIndex
    __ParentTimeIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ParentTimeIndex'), 'ParentTimeIndex', '__httpwww_energistics_orgenergymldatacommonv2_TimeSeriesParentage_httpwww_energistics_orgenergymldatacommonv2ParentTimeIndex', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 117, 3), )

    
    ParentTimeIndex = property(__ParentTimeIndex.value, __ParentTimeIndex.set, None, None)

    _ElementMap.update({
        __HasOverlap.name() : __HasOverlap,
        __ParentTimeIndex.name() : __ParentTimeIndex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeSeriesParentage = TimeSeriesParentage
Namespace.addCategoryObject('typeBinding', 'TimeSeriesParentage', TimeSeriesParentage)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IndexRange with content type ELEMENT_ONLY
class IndexRange (pyxb.binding.basis.complexTypeDefinition):
    """In the case that the ReferencedData is indexed and the conformance with the DataAssurance policy applies to a range within that index space, this class represents that range.

The elements are string types because the index could be of numerous data types, including integer, float and date."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IndexRange')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 9, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}IndexMinimum uses Python identifier IndexMinimum
    __IndexMinimum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IndexMinimum'), 'IndexMinimum', '__httpwww_energistics_orgenergymldatacommonv2_IndexRange_httpwww_energistics_orgenergymldatacommonv2IndexMinimum', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 16, 3), )

    
    IndexMinimum = property(__IndexMinimum.value, __IndexMinimum.set, None, "The minimum index for the range over which the referenced data's conformance with the policy is being assessed.")

    
    # Element {http://www.energistics.org/energyml/data/commonv2}IndexMaximum uses Python identifier IndexMaximum
    __IndexMaximum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IndexMaximum'), 'IndexMaximum', '__httpwww_energistics_orgenergymldatacommonv2_IndexRange_httpwww_energistics_orgenergymldatacommonv2IndexMaximum', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 21, 3), )

    
    IndexMaximum = property(__IndexMaximum.value, __IndexMaximum.set, None, "The maximum index for the range over which the referenced data's conformance with the policy is being assessed.")

    _ElementMap.update({
        __IndexMinimum.name() : __IndexMinimum,
        __IndexMaximum.name() : __IndexMaximum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IndexRange = IndexRange
Namespace.addCategoryObject('typeBinding', 'IndexRange', IndexRange)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FailingRule with content type ELEMENT_ONLY
class FailingRule (pyxb.binding.basis.complexTypeDefinition):
    """The FailingRule class holds summary information on which of the rules within a policy failed."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FailingRule')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 81, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}RuleId uses Python identifier RuleId
    __RuleId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RuleId'), 'RuleId', '__httpwww_energistics_orgenergymldatacommonv2_FailingRule_httpwww_energistics_orgenergymldatacommonv2RuleId', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 86, 3), )

    
    RuleId = property(__RuleId.value, __RuleId.set, None, 'Identifier of the atomic rule being checked against the data.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}RuleName uses Python identifier RuleName
    __RuleName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RuleName'), 'RuleName', '__httpwww_energistics_orgenergymldatacommonv2_FailingRule_httpwww_energistics_orgenergymldatacommonv2RuleName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 91, 3), )

    
    RuleName = property(__RuleName.value, __RuleName.set, None, 'Human-readable name of the atomic rule being checked against the data.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Severity uses Python identifier Severity
    __Severity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Severity'), 'Severity', '__httpwww_energistics_orgenergymldatacommonv2_FailingRule_httpwww_energistics_orgenergymldatacommonv2Severity', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 96, 3), )

    
    Severity = property(__Severity.value, __Severity.set, None, 'Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.\n\nThe meaning of this field should be standardized within a company to maximize its utility.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}FailingRuleExtensions uses Python identifier FailingRuleExtensions
    __FailingRuleExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FailingRuleExtensions'), 'FailingRuleExtensions', '__httpwww_energistics_orgenergymldatacommonv2_FailingRule_httpwww_energistics_orgenergymldatacommonv2FailingRuleExtensions', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 103, 3), )

    
    FailingRuleExtensions = property(__FailingRuleExtensions.value, __FailingRuleExtensions.set, None, 'This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.\n\nUses for this might include why the rule failed or by how much.')

    _ElementMap.update({
        __RuleId.name() : __RuleId,
        __RuleName.name() : __RuleName,
        __Severity.name() : __Severity,
        __FailingRuleExtensions.name() : __FailingRuleExtensions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FailingRule = FailingRule
Namespace.addCategoryObject('typeBinding', 'FailingRule', FailingRule)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractGraphicalInformation with content type ELEMENT_ONLY
class AbstractGraphicalInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractGraphicalInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractGraphicalInformation')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TargetObject uses Python identifier TargetObject
    __TargetObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetObject'), 'TargetObject', '__httpwww_energistics_orgenergymldatacommonv2_AbstractGraphicalInformation_httpwww_energistics_orgenergymldatacommonv2TargetObject', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 10, 3), )

    
    TargetObject = property(__TargetObject.value, __TargetObject.set, None, None)

    _ElementMap.update({
        __TargetObject.name() : __TargetObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractGraphicalInformation = AbstractGraphicalInformation
Namespace.addCategoryObject('typeBinding', 'AbstractGraphicalInformation', AbstractGraphicalInformation)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ExternalDataset with content type ELEMENT_ONLY
class ExternalDataset (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ExternalDataset with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExternalDataset')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 20, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}ExternalFileProxy uses Python identifier ExternalFileProxy
    __ExternalFileProxy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalFileProxy'), 'ExternalFileProxy', '__httpwww_energistics_orgenergymldatacommonv2_ExternalDataset_httpwww_energistics_orgenergymldatacommonv2ExternalFileProxy', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 22, 3), )

    
    ExternalFileProxy = property(__ExternalFileProxy.value, __ExternalFileProxy.set, None, None)

    _ElementMap.update({
        __ExternalFileProxy.name() : __ExternalFileProxy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExternalDataset = ExternalDataset
Namespace.addCategoryObject('typeBinding', 'ExternalDataset', ExternalDataset)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ExternalDatasetPart with content type ELEMENT_ONLY
class ExternalDatasetPart (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ExternalDatasetPart with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExternalDatasetPart')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_ExternalDatasetPart_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 49, 3), )

    
    Count = property(__Count.value, __Count.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}PathInExternalFile uses Python identifier PathInExternalFile
    __PathInExternalFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PathInExternalFile'), 'PathInExternalFile', '__httpwww_energistics_orgenergymldatacommonv2_ExternalDatasetPart_httpwww_energistics_orgenergymldatacommonv2PathInExternalFile', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 50, 3), )

    
    PathInExternalFile = property(__PathInExternalFile.value, __PathInExternalFile.set, None, "A string which is meaningful to the API which will store and retrieve data from the external file.\n\nFor an HDF file this is the path of the referenced dataset in the external file. The separator between groups and final dataset is a slash '/' in an hdf file.\n\nFor a LAS file this could be the list of mnemonics in the ~A block.\n\nFor a SEG-Y file this could be a list of trace headers.")

    
    # Element {http://www.energistics.org/energyml/data/commonv2}StartIndex uses Python identifier StartIndex
    __StartIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartIndex'), 'StartIndex', '__httpwww_energistics_orgenergymldatacommonv2_ExternalDatasetPart_httpwww_energistics_orgenergymldatacommonv2StartIndex', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 61, 3), )

    
    StartIndex = property(__StartIndex.value, __StartIndex.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}EpcExternalPartReference uses Python identifier EpcExternalPartReference
    __EpcExternalPartReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EpcExternalPartReference'), 'EpcExternalPartReference', '__httpwww_energistics_orgenergymldatacommonv2_ExternalDatasetPart_httpwww_energistics_orgenergymldatacommonv2EpcExternalPartReference', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 62, 3), )

    
    EpcExternalPartReference = property(__EpcExternalPartReference.value, __EpcExternalPartReference.set, None, None)

    _ElementMap.update({
        __Count.name() : __Count,
        __PathInExternalFile.name() : __PathInExternalFile,
        __StartIndex.name() : __StartIndex,
        __EpcExternalPartReference.name() : __EpcExternalPartReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExternalDatasetPart = ExternalDatasetPart
Namespace.addCategoryObject('typeBinding', 'ExternalDatasetPart', ExternalDatasetPart)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DataObjectReference with content type ELEMENT_ONLY
class DataObjectReference (pyxb.binding.basis.complexTypeDefinition):
    """It only applies for Energistics data object."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataObjectReference')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 65, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}ContentType uses Python identifier ContentType
    __ContentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContentType'), 'ContentType', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2ContentType', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 70, 3), )

    
    ContentType = property(__ContentType.value, __ContentType.set, None, 'The content type of the referenced element.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2Title', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 75, 3), )

    
    Title = property(__Title.value, __Title.set, None, 'The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object. ')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Uuid uses Python identifier Uuid
    __Uuid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Uuid'), 'Uuid', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2Uuid', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 80, 3), )

    
    Uuid = property(__Uuid.value, __Uuid.set, None, 'Reference to an object using its global UID.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}UuidAuthority uses Python identifier UuidAuthority
    __UuidAuthority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UuidAuthority'), 'UuidAuthority', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2UuidAuthority', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 85, 3), )

    
    UuidAuthority = property(__UuidAuthority.value, __UuidAuthority.set, None, 'The authority that issued and maintains the uuid of the referenced object.\nUsed mainly in alias context.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Uri uses Python identifier Uri
    __Uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Uri'), 'Uri', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2Uri', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 91, 3), )

    
    Uri = property(__Uri.value, __Uri.set, None, 'This is the URI of a referenced object. \n\nDo not use this to store the path and file names of an external object - that is done through the External Dataset machinery.\n\nThis element is intended for use with the Energistics Transfer Protocol.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}VersionString uses Python identifier VersionString
    __VersionString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VersionString'), 'VersionString', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectReference_httpwww_energistics_orgenergymldatacommonv2VersionString', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 100, 3), )

    
    VersionString = property(__VersionString.value, __VersionString.set, None, 'Indicates the version of the object which is referenced.')

    _ElementMap.update({
        __ContentType.name() : __ContentType,
        __Title.name() : __Title,
        __Uuid.name() : __Uuid,
        __UuidAuthority.name() : __UuidAuthority,
        __Uri.name() : __Uri,
        __VersionString.name() : __VersionString
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataObjectReference = DataObjectReference
Namespace.addCategoryObject('typeBinding', 'DataObjectReference', DataObjectReference)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractPressureValue with content type EMPTY
class AbstractPressureValue (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractPressureValue with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractPressureValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 53, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractPressureValue = AbstractPressureValue
Namespace.addCategoryObject('typeBinding', 'AbstractPressureValue', AbstractPressureValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractTemperaturePressure with content type EMPTY
class AbstractTemperaturePressure (pyxb.binding.basis.complexTypeDefinition):
    """The Abstract base type of standard pressure and temperature"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractTemperaturePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 56, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractTemperaturePressure = AbstractTemperaturePressure
Namespace.addCategoryObject('typeBinding', 'AbstractTemperaturePressure', AbstractTemperaturePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DensityValue with content type ELEMENT_ONLY
class DensityValue (pyxb.binding.basis.complexTypeDefinition):
    """A possibly temperature and pressure corrected desity value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DensityValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 62, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Density uses Python identifier Density
    __Density = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Density'), 'Density', '__httpwww_energistics_orgenergymldatacommonv2_DensityValue_httpwww_energistics_orgenergymldatacommonv2Density', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 67, 9), )

    
    Density = property(__Density.value, __Density.set, None, 'The density of the product.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MeasurementPressureTemperature uses Python identifier MeasurementPressureTemperature
    __MeasurementPressureTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), 'MeasurementPressureTemperature', '__httpwww_energistics_orgenergymldatacommonv2_DensityValue_httpwww_energistics_orgenergymldatacommonv2MeasurementPressureTemperature', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 75, 9), )

    
    MeasurementPressureTemperature = property(__MeasurementPressureTemperature.value, __MeasurementPressureTemperature.set, None, None)

    _ElementMap.update({
        __Density.name() : __Density,
        __MeasurementPressureTemperature.name() : __MeasurementPressureTemperature
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DensityValue = DensityValue
Namespace.addCategoryObject('typeBinding', 'DensityValue', DensityValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FlowRateValue with content type ELEMENT_ONLY
class FlowRateValue (pyxb.binding.basis.complexTypeDefinition):
    """A possibly temperature and pressure corrected flow rate value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FlowRateValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 81, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}FlowRate uses Python identifier FlowRate
    __FlowRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FlowRate'), 'FlowRate', '__httpwww_energistics_orgenergymldatacommonv2_FlowRateValue_httpwww_energistics_orgenergymldatacommonv2FlowRate', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 86, 9), )

    
    FlowRate = property(__FlowRate.value, __FlowRate.set, None, 'The flow rate of the product. If the \'status\' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MeasurementPressureTemperature uses Python identifier MeasurementPressureTemperature
    __MeasurementPressureTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), 'MeasurementPressureTemperature', '__httpwww_energistics_orgenergymldatacommonv2_FlowRateValue_httpwww_energistics_orgenergymldatacommonv2MeasurementPressureTemperature', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 94, 9), )

    
    MeasurementPressureTemperature = property(__MeasurementPressureTemperature.value, __MeasurementPressureTemperature.set, None, None)

    _ElementMap.update({
        __FlowRate.name() : __FlowRate,
        __MeasurementPressureTemperature.name() : __MeasurementPressureTemperature
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FlowRateValue = FlowRateValue
Namespace.addCategoryObject('typeBinding', 'FlowRateValue', FlowRateValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureValue with content type ELEMENT_ONLY
class PressureValue (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureValue with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 116, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AbstractPressureValue uses Python identifier AbstractPressureValue
    __AbstractPressureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractPressureValue'), 'AbstractPressureValue', '__httpwww_energistics_orgenergymldatacommonv2_PressureValue_httpwww_energistics_orgenergymldatacommonv2AbstractPressureValue', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 118, 9), )

    
    AbstractPressureValue = property(__AbstractPressureValue.value, __AbstractPressureValue.set, None, None)

    _ElementMap.update({
        __AbstractPressureValue.name() : __AbstractPressureValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PressureValue = PressureValue
Namespace.addCategoryObject('typeBinding', 'PressureValue', PressureValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeValue with content type ELEMENT_ONLY
class VolumeValue (pyxb.binding.basis.complexTypeDefinition):
    """A possibly temperature and pressure corrected volume value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeValue')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 196, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Volume uses Python identifier Volume
    __Volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Volume'), 'Volume', '__httpwww_energistics_orgenergymldatacommonv2_VolumeValue_httpwww_energistics_orgenergymldatacommonv2Volume', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 201, 9), )

    
    Volume = property(__Volume.value, __Volume.set, None, 'The volume of the product. If the \'status\' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MeasurementPressureTemperature uses Python identifier MeasurementPressureTemperature
    __MeasurementPressureTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), 'MeasurementPressureTemperature', '__httpwww_energistics_orgenergymldatacommonv2_VolumeValue_httpwww_energistics_orgenergymldatacommonv2MeasurementPressureTemperature', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 209, 9), )

    
    MeasurementPressureTemperature = property(__MeasurementPressureTemperature.value, __MeasurementPressureTemperature.set, None, None)

    _ElementMap.update({
        __Volume.name() : __Volume,
        __MeasurementPressureTemperature.name() : __MeasurementPressureTemperature
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VolumeValue = VolumeValue
Namespace.addCategoryObject('typeBinding', 'VolumeValue', VolumeValue)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeIndexParameter with content type ELEMENT_ONLY
class TimeIndexParameter (AbstractActivityParameter):
    """Parameter containing a time index value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeIndexParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 96, 1)
    _ElementMap = AbstractActivityParameter._ElementMap.copy()
    _AttributeMap = AbstractActivityParameter._AttributeMap.copy()
    # Base type is AbstractActivityParameter
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeIndex uses Python identifier TimeIndex
    __TimeIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex'), 'TimeIndex', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndexParameter_httpwww_energistics_orgenergymldatacommonv2TimeIndex', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 103, 5), )

    
    TimeIndex = property(__TimeIndex.value, __TimeIndex.set, None, None)

    
    # Element Title ({http://www.energistics.org/energyml/data/commonv2}Title) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Index ({http://www.energistics.org/energyml/data/commonv2}Index) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Selection ({http://www.energistics.org/energyml/data/commonv2}Selection) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Key ({http://www.energistics.org/energyml/data/commonv2}Key) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    _ElementMap.update({
        __TimeIndex.name() : __TimeIndex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeIndexParameter = TimeIndexParameter
Namespace.addCategoryObject('typeBinding', 'TimeIndexParameter', TimeIndexParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DoubleQuantityParameter with content type ELEMENT_ONLY
class DoubleQuantityParameter (AbstractActivityParameter):
    """Parameter containing a double value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoubleQuantityParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 124, 1)
    _ElementMap = AbstractActivityParameter._ElementMap.copy()
    _AttributeMap = AbstractActivityParameter._AttributeMap.copy()
    # Base type is AbstractActivityParameter
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_DoubleQuantityParameter_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 131, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Double value')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Uom uses Python identifier Uom
    __Uom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Uom'), 'Uom', '__httpwww_energistics_orgenergymldatacommonv2_DoubleQuantityParameter_httpwww_energistics_orgenergymldatacommonv2Uom', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 136, 5), )

    
    Uom = property(__Uom.value, __Uom.set, None, 'Unit of measure associated with the value')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}CustomUnitDictionary uses Python identifier CustomUnitDictionary
    __CustomUnitDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CustomUnitDictionary'), 'CustomUnitDictionary', '__httpwww_energistics_orgenergymldatacommonv2_DoubleQuantityParameter_httpwww_energistics_orgenergymldatacommonv2CustomUnitDictionary', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 141, 5), )

    
    CustomUnitDictionary = property(__CustomUnitDictionary.value, __CustomUnitDictionary.set, None, None)

    
    # Element Title ({http://www.energistics.org/energyml/data/commonv2}Title) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Index ({http://www.energistics.org/energyml/data/commonv2}Index) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Selection ({http://www.energistics.org/energyml/data/commonv2}Selection) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Key ({http://www.energistics.org/energyml/data/commonv2}Key) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    _ElementMap.update({
        __Value.name() : __Value,
        __Uom.name() : __Uom,
        __CustomUnitDictionary.name() : __CustomUnitDictionary
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DoubleQuantityParameter = DoubleQuantityParameter
Namespace.addCategoryObject('typeBinding', 'DoubleQuantityParameter', DoubleQuantityParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerQuantityParameter with content type ELEMENT_ONLY
class IntegerQuantityParameter (AbstractActivityParameter):
    """Parameter containing an integer value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerQuantityParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 146, 1)
    _ElementMap = AbstractActivityParameter._ElementMap.copy()
    _AttributeMap = AbstractActivityParameter._AttributeMap.copy()
    # Base type is AbstractActivityParameter
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_IntegerQuantityParameter_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 153, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Integer value')

    
    # Element Title ({http://www.energistics.org/energyml/data/commonv2}Title) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Index ({http://www.energistics.org/energyml/data/commonv2}Index) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Selection ({http://www.energistics.org/energyml/data/commonv2}Selection) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Key ({http://www.energistics.org/energyml/data/commonv2}Key) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    _ElementMap.update({
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerQuantityParameter = IntegerQuantityParameter
Namespace.addCategoryObject('typeBinding', 'IntegerQuantityParameter', IntegerQuantityParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}StringParameter with content type ELEMENT_ONLY
class StringParameter (AbstractActivityParameter):
    """Parameter containing a string value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StringParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 162, 1)
    _ElementMap = AbstractActivityParameter._ElementMap.copy()
    _AttributeMap = AbstractActivityParameter._AttributeMap.copy()
    # Base type is AbstractActivityParameter
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_StringParameter_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 169, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'String value')

    
    # Element Title ({http://www.energistics.org/energyml/data/commonv2}Title) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Index ({http://www.energistics.org/energyml/data/commonv2}Index) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Selection ({http://www.energistics.org/energyml/data/commonv2}Selection) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Key ({http://www.energistics.org/energyml/data/commonv2}Key) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    _ElementMap.update({
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StringParameter = StringParameter
Namespace.addCategoryObject('typeBinding', 'StringParameter', StringParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DataObjectParameter with content type ELEMENT_ONLY
class DataObjectParameter (AbstractActivityParameter):
    """Parameter referencing to a top level object."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataObjectParameter')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 178, 1)
    _ElementMap = AbstractActivityParameter._ElementMap.copy()
    _AttributeMap = AbstractActivityParameter._AttributeMap.copy()
    # Base type is AbstractActivityParameter
    
    # Element {http://www.energistics.org/energyml/data/commonv2}DataObject uses Python identifier DataObject
    __DataObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataObject'), 'DataObject', '__httpwww_energistics_orgenergymldatacommonv2_DataObjectParameter_httpwww_energistics_orgenergymldatacommonv2DataObject', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 185, 5), )

    
    DataObject = property(__DataObject.value, __DataObject.set, None, None)

    
    # Element Title ({http://www.energistics.org/energyml/data/commonv2}Title) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Index ({http://www.energistics.org/energyml/data/commonv2}Index) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Selection ({http://www.energistics.org/energyml/data/commonv2}Selection) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    
    # Element Key ({http://www.energistics.org/energyml/data/commonv2}Key) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractActivityParameter
    _ElementMap.update({
        __DataObject.name() : __DataObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataObjectParameter = DataObjectParameter
Namespace.addCategoryObject('typeBinding', 'DataObjectParameter', DataObjectParameter)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeIndexParameterKey with content type ELEMENT_ONLY
class TimeIndexParameterKey (AbstractParameterKey):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimeIndexParameterKey with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeIndexParameterKey')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 190, 1)
    _ElementMap = AbstractParameterKey._ElementMap.copy()
    _AttributeMap = AbstractParameterKey._AttributeMap.copy()
    # Base type is AbstractParameterKey
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeIndex uses Python identifier TimeIndex
    __TimeIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex'), 'TimeIndex', '__httpwww_energistics_orgenergymldatacommonv2_TimeIndexParameterKey_httpwww_energistics_orgenergymldatacommonv2TimeIndex', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 194, 5), )

    
    TimeIndex = property(__TimeIndex.value, __TimeIndex.set, None, None)

    _ElementMap.update({
        __TimeIndex.name() : __TimeIndex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeIndexParameterKey = TimeIndexParameterKey
Namespace.addCategoryObject('typeBinding', 'TimeIndexParameterKey', TimeIndexParameterKey)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ObjectParameterKey with content type ELEMENT_ONLY
class ObjectParameterKey (AbstractParameterKey):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ObjectParameterKey with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectParameterKey')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 199, 1)
    _ElementMap = AbstractParameterKey._ElementMap.copy()
    _AttributeMap = AbstractParameterKey._AttributeMap.copy()
    # Base type is AbstractParameterKey
    
    # Element {http://www.energistics.org/energyml/data/commonv2}DataObject uses Python identifier DataObject
    __DataObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataObject'), 'DataObject', '__httpwww_energistics_orgenergymldatacommonv2_ObjectParameterKey_httpwww_energistics_orgenergymldatacommonv2DataObject', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 203, 5), )

    
    DataObject = property(__DataObject.value, __DataObject.set, None, None)

    _ElementMap.update({
        __DataObject.name() : __DataObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ObjectParameterKey = ObjectParameterKey
Namespace.addCategoryObject('typeBinding', 'ObjectParameterKey', ObjectParameterKey)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractBooleanArray with content type EMPTY
class AbstractBooleanArray (AbstractValueArray):
    """Generic representation of an array of Boolean values. Each derived element provides a specialized implementation to allow specific optimization of the representation. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractBooleanArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 191, 1)
    _ElementMap = AbstractValueArray._ElementMap.copy()
    _AttributeMap = AbstractValueArray._AttributeMap.copy()
    # Base type is AbstractValueArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractBooleanArray = AbstractBooleanArray
Namespace.addCategoryObject('typeBinding', 'AbstractBooleanArray', AbstractBooleanArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractNumericArray with content type EMPTY
class AbstractNumericArray (AbstractValueArray):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractNumericArray with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractNumericArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 326, 1)
    _ElementMap = AbstractValueArray._ElementMap.copy()
    _AttributeMap = AbstractValueArray._AttributeMap.copy()
    # Base type is AbstractValueArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractNumericArray = AbstractNumericArray
Namespace.addCategoryObject('typeBinding', 'AbstractNumericArray', AbstractNumericArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractStringArray with content type EMPTY
class AbstractStringArray (AbstractValueArray):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractStringArray with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractStringArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 477, 1)
    _ElementMap = AbstractValueArray._ElementMap.copy()
    _AttributeMap = AbstractValueArray._AttributeMap.copy()
    # Base type is AbstractValueArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractStringArray = AbstractStringArray
Namespace.addCategoryObject('typeBinding', 'AbstractStringArray', AbstractStringArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedEpsgCrs with content type ELEMENT_ONLY
class ProjectedEpsgCrs (AbstractProjectedCrs):
    """This class contains the EPSG code for a projected CRS."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedEpsgCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 9, 1)
    _ElementMap = AbstractProjectedCrs._ElementMap.copy()
    _AttributeMap = AbstractProjectedCrs._AttributeMap.copy()
    # Base type is AbstractProjectedCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}EpsgCode uses Python identifier EpsgCode
    __EpsgCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), 'EpsgCode', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedEpsgCrs_httpwww_energistics_orgenergymldatacommonv2EpsgCode', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 16, 5), )

    
    EpsgCode = property(__EpsgCode.value, __EpsgCode.set, None, None)

    _ElementMap.update({
        __EpsgCode.name() : __EpsgCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectedEpsgCrs = ProjectedEpsgCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedEpsgCrs', ProjectedEpsgCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalUnknownCrs with content type ELEMENT_ONLY
class VerticalUnknownCrs (AbstractVerticalCrs):
    """This class is used in a case where the coordinate reference system is either unknown or is intentionally not being transferred. In this case, the uom and Direction need to be provided on the VerticalCrs class."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalUnknownCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 35, 1)
    _ElementMap = AbstractVerticalCrs._ElementMap.copy()
    _AttributeMap = AbstractVerticalCrs._AttributeMap.copy()
    # Base type is AbstractVerticalCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Unknown uses Python identifier Unknown
    __Unknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), 'Unknown', '__httpwww_energistics_orgenergymldatacommonv2_VerticalUnknownCrs_httpwww_energistics_orgenergymldatacommonv2Unknown', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 42, 5), )

    
    Unknown = property(__Unknown.value, __Unknown.set, None, None)

    _ElementMap.update({
        __Unknown.name() : __Unknown
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalUnknownCrs = VerticalUnknownCrs
Namespace.addCategoryObject('typeBinding', 'VerticalUnknownCrs', VerticalUnknownCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticUnknownCrs with content type ELEMENT_ONLY
class GeodeticUnknownCrs (AbstractGeodeticCrs):
    """This class is used in a case where the coordinate reference system is either unknown or is intentionally not being transferred."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticUnknownCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 61, 1)
    _ElementMap = AbstractGeodeticCrs._ElementMap.copy()
    _AttributeMap = AbstractGeodeticCrs._AttributeMap.copy()
    # Base type is AbstractGeodeticCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Unknown uses Python identifier Unknown
    __Unknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), 'Unknown', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticUnknownCrs_httpwww_energistics_orgenergymldatacommonv2Unknown', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 68, 5), )

    
    Unknown = property(__Unknown.value, __Unknown.set, None, None)

    _ElementMap.update({
        __Unknown.name() : __Unknown
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticUnknownCrs = GeodeticUnknownCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticUnknownCrs', GeodeticUnknownCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedWktCrs with content type ELEMENT_ONLY
class ProjectedWktCrs (AbstractProjectedCrs):
    """ISO 19162-compliant well-known text for the projected CRS"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedWktCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 76, 1)
    _ElementMap = AbstractProjectedCrs._ElementMap.copy()
    _AttributeMap = AbstractProjectedCrs._AttributeMap.copy()
    # Base type is AbstractProjectedCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}WellKnownText uses Python identifier WellKnownText
    __WellKnownText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), 'WellKnownText', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedWktCrs_httpwww_energistics_orgenergymldatacommonv2WellKnownText', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 83, 5), )

    
    WellKnownText = property(__WellKnownText.value, __WellKnownText.set, None, 'ISO 19162 compliant well known text of the CRS')

    _ElementMap.update({
        __WellKnownText.name() : __WellKnownText
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectedWktCrs = ProjectedWktCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedWktCrs', ProjectedWktCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalEpsgCrs with content type ELEMENT_ONLY
class VerticalEpsgCrs (AbstractVerticalCrs):
    """This class contains the EPSG code for a vertical CRS."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalEpsgCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 92, 1)
    _ElementMap = AbstractVerticalCrs._ElementMap.copy()
    _AttributeMap = AbstractVerticalCrs._AttributeMap.copy()
    # Base type is AbstractVerticalCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}EpsgCode uses Python identifier EpsgCode
    __EpsgCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), 'EpsgCode', '__httpwww_energistics_orgenergymldatacommonv2_VerticalEpsgCrs_httpwww_energistics_orgenergymldatacommonv2EpsgCode', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 99, 5), )

    
    EpsgCode = property(__EpsgCode.value, __EpsgCode.set, None, None)

    _ElementMap.update({
        __EpsgCode.name() : __EpsgCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalEpsgCrs = VerticalEpsgCrs
Namespace.addCategoryObject('typeBinding', 'VerticalEpsgCrs', VerticalEpsgCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalLocalAuthorityCrs with content type ELEMENT_ONLY
class VerticalLocalAuthorityCrs (AbstractVerticalCrs):
    """This class contains a code for a vertical CRS according to a local authority. This would be used in a case where a company or regulatory regime has chosen not to use EPSG codes. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalLocalAuthorityCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 104, 1)
    _ElementMap = AbstractVerticalCrs._ElementMap.copy()
    _AttributeMap = AbstractVerticalCrs._AttributeMap.copy()
    # Base type is AbstractVerticalCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}LocalAuthorityCrsName uses Python identifier LocalAuthorityCrsName
    __LocalAuthorityCrsName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), 'LocalAuthorityCrsName', '__httpwww_energistics_orgenergymldatacommonv2_VerticalLocalAuthorityCrs_httpwww_energistics_orgenergymldatacommonv2LocalAuthorityCrsName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 111, 5), )

    
    LocalAuthorityCrsName = property(__LocalAuthorityCrsName.value, __LocalAuthorityCrsName.set, None, None)

    _ElementMap.update({
        __LocalAuthorityCrsName.name() : __LocalAuthorityCrsName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalLocalAuthorityCrs = VerticalLocalAuthorityCrs
Namespace.addCategoryObject('typeBinding', 'VerticalLocalAuthorityCrs', VerticalLocalAuthorityCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalGmlCrs with content type ELEMENT_ONLY
class VerticalGmlCrs (AbstractVerticalCrs):
    """This is the Energistics encapsulation of the VerticalCrs type from GML. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalGmlCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 116, 1)
    _ElementMap = AbstractVerticalCrs._ElementMap.copy()
    _AttributeMap = AbstractVerticalCrs._AttributeMap.copy()
    # Base type is AbstractVerticalCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}GmlVerticalCrsDefinition uses Python identifier GmlVerticalCrsDefinition
    __GmlVerticalCrsDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GmlVerticalCrsDefinition'), 'GmlVerticalCrsDefinition', '__httpwww_energistics_orgenergymldatacommonv2_VerticalGmlCrs_httpwww_energistics_orgenergymldatacommonv2GmlVerticalCrsDefinition', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 123, 5), )

    
    GmlVerticalCrsDefinition = property(__GmlVerticalCrsDefinition.value, __GmlVerticalCrsDefinition.set, None, None)

    _ElementMap.update({
        __GmlVerticalCrsDefinition.name() : __GmlVerticalCrsDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalGmlCrs = VerticalGmlCrs
Namespace.addCategoryObject('typeBinding', 'VerticalGmlCrs', VerticalGmlCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticLocalAuthorityCrs with content type ELEMENT_ONLY
class GeodeticLocalAuthorityCrs (AbstractGeodeticCrs):
    """This class contains a code for a geodetic CRS according to a local authority. This would be used in a case where a company or regulatory regime has chosen not to use EPSG codes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticLocalAuthorityCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 128, 1)
    _ElementMap = AbstractGeodeticCrs._ElementMap.copy()
    _AttributeMap = AbstractGeodeticCrs._AttributeMap.copy()
    # Base type is AbstractGeodeticCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}LocalAuthorityCrsName uses Python identifier LocalAuthorityCrsName
    __LocalAuthorityCrsName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), 'LocalAuthorityCrsName', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticLocalAuthorityCrs_httpwww_energistics_orgenergymldatacommonv2LocalAuthorityCrsName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 135, 5), )

    
    LocalAuthorityCrsName = property(__LocalAuthorityCrsName.value, __LocalAuthorityCrsName.set, None, None)

    _ElementMap.update({
        __LocalAuthorityCrsName.name() : __LocalAuthorityCrsName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticLocalAuthorityCrs = GeodeticLocalAuthorityCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticLocalAuthorityCrs', GeodeticLocalAuthorityCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedUnknownCrs with content type ELEMENT_ONLY
class ProjectedUnknownCrs (AbstractProjectedCrs):
    """This class is used in a case where the coordinate reference system is either unknown or is intentionally not being transferred. In this case, the uom and AxisOrder need to be provided on the ProjectedCrs class."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedUnknownCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 140, 1)
    _ElementMap = AbstractProjectedCrs._ElementMap.copy()
    _AttributeMap = AbstractProjectedCrs._AttributeMap.copy()
    # Base type is AbstractProjectedCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Unknown uses Python identifier Unknown
    __Unknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), 'Unknown', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedUnknownCrs_httpwww_energistics_orgenergymldatacommonv2Unknown', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 147, 5), )

    
    Unknown = property(__Unknown.value, __Unknown.set, None, None)

    _ElementMap.update({
        __Unknown.name() : __Unknown
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectedUnknownCrs = ProjectedUnknownCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedUnknownCrs', ProjectedUnknownCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticEpsgCrs with content type ELEMENT_ONLY
class GeodeticEpsgCrs (AbstractGeodeticCrs):
    """This class contains the EPSG code for a geodetic CRS. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticEpsgCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 152, 1)
    _ElementMap = AbstractGeodeticCrs._ElementMap.copy()
    _AttributeMap = AbstractGeodeticCrs._AttributeMap.copy()
    # Base type is AbstractGeodeticCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}EpsgCode uses Python identifier EpsgCode
    __EpsgCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), 'EpsgCode', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticEpsgCrs_httpwww_energistics_orgenergymldatacommonv2EpsgCode', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 159, 5), )

    
    EpsgCode = property(__EpsgCode.value, __EpsgCode.set, None, None)

    _ElementMap.update({
        __EpsgCode.name() : __EpsgCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticEpsgCrs = GeodeticEpsgCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticEpsgCrs', GeodeticEpsgCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticGmlCrs with content type ELEMENT_ONLY
class GeodeticGmlCrs (AbstractGeodeticCrs):
    """This is the Energistics encapsulation of the GeodeticCrs type from GML. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticGmlCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 164, 1)
    _ElementMap = AbstractGeodeticCrs._ElementMap.copy()
    _AttributeMap = AbstractGeodeticCrs._AttributeMap.copy()
    # Base type is AbstractGeodeticCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}GmlProjectedCrsDefinition uses Python identifier GmlProjectedCrsDefinition
    __GmlProjectedCrsDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition'), 'GmlProjectedCrsDefinition', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticGmlCrs_httpwww_energistics_orgenergymldatacommonv2GmlProjectedCrsDefinition', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 171, 5), )

    
    GmlProjectedCrsDefinition = property(__GmlProjectedCrsDefinition.value, __GmlProjectedCrsDefinition.set, None, None)

    _ElementMap.update({
        __GmlProjectedCrsDefinition.name() : __GmlProjectedCrsDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticGmlCrs = GeodeticGmlCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticGmlCrs', GeodeticGmlCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedGmlCrs with content type ELEMENT_ONLY
class ProjectedGmlCrs (AbstractProjectedCrs):
    """This is the Energistics encapsulation of the ProjectedCrs type from GML. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedGmlCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 176, 1)
    _ElementMap = AbstractProjectedCrs._ElementMap.copy()
    _AttributeMap = AbstractProjectedCrs._AttributeMap.copy()
    # Base type is AbstractProjectedCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}GmlProjectedCrsDefinition uses Python identifier GmlProjectedCrsDefinition
    __GmlProjectedCrsDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition'), 'GmlProjectedCrsDefinition', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedGmlCrs_httpwww_energistics_orgenergymldatacommonv2GmlProjectedCrsDefinition', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 183, 5), )

    
    GmlProjectedCrsDefinition = property(__GmlProjectedCrsDefinition.value, __GmlProjectedCrsDefinition.set, None, None)

    _ElementMap.update({
        __GmlProjectedCrsDefinition.name() : __GmlProjectedCrsDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectedGmlCrs = ProjectedGmlCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedGmlCrs', ProjectedGmlCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedLocalAuthorityCrs with content type ELEMENT_ONLY
class ProjectedLocalAuthorityCrs (AbstractProjectedCrs):
    """This class contains a code for a projected CRS according to a local authority. This would be used in a case where a company or regulatory regime has chosen not to use EPSG codes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedLocalAuthorityCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 188, 1)
    _ElementMap = AbstractProjectedCrs._ElementMap.copy()
    _AttributeMap = AbstractProjectedCrs._AttributeMap.copy()
    # Base type is AbstractProjectedCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}LocalAuthorityCrsName uses Python identifier LocalAuthorityCrsName
    __LocalAuthorityCrsName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), 'LocalAuthorityCrsName', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedLocalAuthorityCrs_httpwww_energistics_orgenergymldatacommonv2LocalAuthorityCrsName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 195, 5), )

    
    LocalAuthorityCrsName = property(__LocalAuthorityCrsName.value, __LocalAuthorityCrsName.set, None, None)

    _ElementMap.update({
        __LocalAuthorityCrsName.name() : __LocalAuthorityCrsName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectedLocalAuthorityCrs = ProjectedLocalAuthorityCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedLocalAuthorityCrs', ProjectedLocalAuthorityCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticWktCrs with content type ELEMENT_ONLY
class GeodeticWktCrs (AbstractGeodeticCrs):
    """ISO 19162-compliant well-known text for the Geodetic CRS."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticWktCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 200, 1)
    _ElementMap = AbstractGeodeticCrs._ElementMap.copy()
    _AttributeMap = AbstractGeodeticCrs._AttributeMap.copy()
    # Base type is AbstractGeodeticCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}WellKnownText uses Python identifier WellKnownText
    __WellKnownText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), 'WellKnownText', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticWktCrs_httpwww_energistics_orgenergymldatacommonv2WellKnownText', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 207, 5), )

    
    WellKnownText = property(__WellKnownText.value, __WellKnownText.set, None, 'ISO 19162 compliant well known text of the CRS')

    _ElementMap.update({
        __WellKnownText.name() : __WellKnownText
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticWktCrs = GeodeticWktCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticWktCrs', GeodeticWktCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalWktCrs with content type ELEMENT_ONLY
class VerticalWktCrs (AbstractVerticalCrs):
    """ISO 19162-compliant well-known text for the vertical CRS"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalWktCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 279, 1)
    _ElementMap = AbstractVerticalCrs._ElementMap.copy()
    _AttributeMap = AbstractVerticalCrs._AttributeMap.copy()
    # Base type is AbstractVerticalCrs
    
    # Element {http://www.energistics.org/energyml/data/commonv2}WellKnownText uses Python identifier WellKnownText
    __WellKnownText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), 'WellKnownText', '__httpwww_energistics_orgenergymldatacommonv2_VerticalWktCrs_httpwww_energistics_orgenergymldatacommonv2WellKnownText', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 286, 5), )

    
    WellKnownText = property(__WellKnownText.value, __WellKnownText.set, None, 'ISO 19162 compliant well known text of the CRS')

    _ElementMap.update({
        __WellKnownText.name() : __WellKnownText
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalWktCrs = VerticalWktCrs
Namespace.addCategoryObject('typeBinding', 'VerticalWktCrs', VerticalWktCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}UnitlessMeasure with content type SIMPLE
class UnitlessMeasure (pyxb.binding.basis.complexTypeDefinition):
    """A unitless measure is a measure which has no unit of measure symbol, but could be a real physical measurement. Examples would be pH, wire gauge (AWG and BWG) and shoe size.

This is different from a dimensionless measure which represents a ratio whose units of measure have cancelled each other. DImensionless measures can have units of measure (like ppm or %) or may not have a displayable unit of measure symbol (in which case the units symbol Euc is used in a data transfer)."""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnitlessMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2583, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UnitlessMeasure = UnitlessMeasure
Namespace.addCategoryObject('typeBinding', 'UnitlessMeasure', UnitlessMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbsolutePressure with content type ELEMENT_ONLY
class AbsolutePressure (AbstractPressureValue):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbsolutePressure with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsolutePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 41, 3)
    _ElementMap = AbstractPressureValue._ElementMap.copy()
    _AttributeMap = AbstractPressureValue._AttributeMap.copy()
    # Base type is AbstractPressureValue
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AbsolutePressure uses Python identifier AbsolutePressure
    __AbsolutePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbsolutePressure'), 'AbsolutePressure', '__httpwww_energistics_orgenergymldatacommonv2_AbsolutePressure_httpwww_energistics_orgenergymldatacommonv2AbsolutePressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 45, 15), )

    
    AbsolutePressure = property(__AbsolutePressure.value, __AbsolutePressure.set, None, None)

    _ElementMap.update({
        __AbsolutePressure.name() : __AbsolutePressure
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbsolutePressure = AbsolutePressure
Namespace.addCategoryObject('typeBinding', 'AbsolutePressure', AbsolutePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GaugePressure with content type ELEMENT_ONLY
class GaugePressure (AbstractPressureValue):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}GaugePressure with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GaugePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 100, 3)
    _ElementMap = AbstractPressureValue._ElementMap.copy()
    _AttributeMap = AbstractPressureValue._AttributeMap.copy()
    # Base type is AbstractPressureValue
    
    # Element {http://www.energistics.org/energyml/data/commonv2}GaugePressure uses Python identifier GaugePressure
    __GaugePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GaugePressure'), 'GaugePressure', '__httpwww_energistics_orgenergymldatacommonv2_GaugePressure_httpwww_energistics_orgenergymldatacommonv2GaugePressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 104, 15), )

    
    GaugePressure = property(__GaugePressure.value, __GaugePressure.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferencePressure uses Python identifier ReferencePressure
    __ReferencePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure'), 'ReferencePressure', '__httpwww_energistics_orgenergymldatacommonv2_GaugePressure_httpwww_energistics_orgenergymldatacommonv2ReferencePressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 108, 15), )

    
    ReferencePressure = property(__ReferencePressure.value, __ReferencePressure.set, None, None)

    _ElementMap.update({
        __GaugePressure.name() : __GaugePressure,
        __ReferencePressure.name() : __ReferencePressure
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GaugePressure = GaugePressure
Namespace.addCategoryObject('typeBinding', 'GaugePressure', GaugePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReferenceTemperaturePressure with content type ELEMENT_ONLY
class ReferenceTemperaturePressure (AbstractTemperaturePressure):
    """StdTempPress"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceTemperaturePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 134, 3)
    _ElementMap = AbstractTemperaturePressure._ElementMap.copy()
    _AttributeMap = AbstractTemperaturePressure._AttributeMap.copy()
    # Base type is AbstractTemperaturePressure
    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferenceTempPres uses Python identifier ReferenceTempPres
    __ReferenceTempPres = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferenceTempPres'), 'ReferenceTempPres', '__httpwww_energistics_orgenergymldatacommonv2_ReferenceTemperaturePressure_httpwww_energistics_orgenergymldatacommonv2ReferenceTempPres', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 141, 15), )

    
    ReferenceTempPres = property(__ReferenceTempPres.value, __ReferenceTempPres.set, None, 'Defines the reference temperature and pressure to which the density has been corrected. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the procuctVolume root.')

    _ElementMap.update({
        __ReferenceTempPres.name() : __ReferenceTempPres
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReferenceTemperaturePressure = ReferenceTemperaturePressure
Namespace.addCategoryObject('typeBinding', 'ReferenceTemperaturePressure', ReferenceTemperaturePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}RelativePressure with content type ELEMENT_ONLY
class RelativePressure (AbstractPressureValue):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}RelativePressure with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelativePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 153, 3)
    _ElementMap = AbstractPressureValue._ElementMap.copy()
    _AttributeMap = AbstractPressureValue._AttributeMap.copy()
    # Base type is AbstractPressureValue
    
    # Element {http://www.energistics.org/energyml/data/commonv2}RelativePressure uses Python identifier RelativePressure
    __RelativePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelativePressure'), 'RelativePressure', '__httpwww_energistics_orgenergymldatacommonv2_RelativePressure_httpwww_energistics_orgenergymldatacommonv2RelativePressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 157, 15), )

    
    RelativePressure = property(__RelativePressure.value, __RelativePressure.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferencePressure uses Python identifier ReferencePressure
    __ReferencePressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure'), 'ReferencePressure', '__httpwww_energistics_orgenergymldatacommonv2_RelativePressure_httpwww_energistics_orgenergymldatacommonv2ReferencePressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 161, 15), )

    
    ReferencePressure = property(__ReferencePressure.value, __ReferencePressure.set, None, None)

    _ElementMap.update({
        __RelativePressure.name() : __RelativePressure,
        __ReferencePressure.name() : __ReferencePressure
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RelativePressure = RelativePressure
Namespace.addCategoryObject('typeBinding', 'RelativePressure', RelativePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperaturePressure with content type ELEMENT_ONLY
class TemperaturePressure (AbstractTemperaturePressure):
    """temperature and pressure"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperaturePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 169, 3)
    _ElementMap = AbstractTemperaturePressure._ElementMap.copy()
    _AttributeMap = AbstractTemperaturePressure._AttributeMap.copy()
    # Base type is AbstractTemperaturePressure
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Temperature uses Python identifier Temperature
    __Temperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Temperature'), 'Temperature', '__httpwww_energistics_orgenergymldatacommonv2_TemperaturePressure_httpwww_energistics_orgenergymldatacommonv2Temperature', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 176, 15), )

    
    Temperature = property(__Temperature.value, __Temperature.set, None, 'The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Pressure uses Python identifier Pressure
    __Pressure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pressure'), 'Pressure', '__httpwww_energistics_orgenergymldatacommonv2_TemperaturePressure_httpwww_energistics_orgenergymldatacommonv2Pressure', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 184, 15), )

    
    Pressure = property(__Pressure.value, __Pressure.set, None, 'The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.')

    _ElementMap.update({
        __Temperature.name() : __Temperature,
        __Pressure.name() : __Pressure
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TemperaturePressure = TemperaturePressure
Namespace.addCategoryObject('typeBinding', 'TemperaturePressure', TemperaturePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ObjectAlias with content type ELEMENT_ONLY
class ObjectAlias (pyxb.binding.basis.complexTypeDefinition):
    """Use this to create multiple aliases for any object instance. Note that an Authority is required for each alias."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectAlias')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 204, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Identifier uses Python identifier Identifier
    __Identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Identifier'), 'Identifier', '__httpwww_energistics_orgenergymldatacommonv2_ObjectAlias_httpwww_energistics_orgenergymldatacommonv2Identifier', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 209, 3), )

    
    Identifier = property(__Identifier.value, __Identifier.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpwww_energistics_orgenergymldatacommonv2_ObjectAlias_httpwww_energistics_orgenergymldatacommonv2Description', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 210, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    
    # Attribute authority uses Python identifier authority
    __authority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authority'), 'authority', '__httpwww_energistics_orgenergymldatacommonv2_ObjectAlias_authority', _module_typeBindings.String64, required=True)
    __authority._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 212, 2)
    __authority._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 212, 2)
    
    authority = property(__authority.value, __authority.set, None, None)

    _ElementMap.update({
        __Identifier.name() : __Identifier,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        __authority.name() : __authority
    })
_module_typeBindings.ObjectAlias = ObjectAlias
Namespace.addCategoryObject('typeBinding', 'ObjectAlias', ObjectAlias)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractFloatingPointArray with content type EMPTY
class AbstractFloatingPointArray (AbstractNumericArray):
    """Generic representation of an array of double values. Each derived element provides specialized implementation to allow specific optimization of the representation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractFloatingPointArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 31, 1)
    _ElementMap = AbstractNumericArray._ElementMap.copy()
    _AttributeMap = AbstractNumericArray._AttributeMap.copy()
    # Base type is AbstractNumericArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractFloatingPointArray = AbstractFloatingPointArray
Namespace.addCategoryObject('typeBinding', 'AbstractFloatingPointArray', AbstractFloatingPointArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TvdInterval with content type ELEMENT_ONLY
class TvdInterval (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TvdInterval with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TvdInterval')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 143, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TvdTop uses Python identifier TvdTop
    __TvdTop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TvdTop'), 'TvdTop', '__httpwww_energistics_orgenergymldatacommonv2_TvdInterval_httpwww_energistics_orgenergymldatacommonv2TvdTop', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 145, 3), )

    
    TvdTop = property(__TvdTop.value, __TvdTop.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}TvdBase uses Python identifier TvdBase
    __TvdBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TvdBase'), 'TvdBase', '__httpwww_energistics_orgenergymldatacommonv2_TvdInterval_httpwww_energistics_orgenergymldatacommonv2TvdBase', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 146, 3), )

    
    TvdBase = property(__TvdBase.value, __TvdBase.set, None, 'True vertical depth at the base of the interval')

    
    # Attribute datum uses Python identifier datum
    __datum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'datum'), 'datum', '__httpwww_energistics_orgenergymldatacommonv2_TvdInterval_datum', _module_typeBindings.String64, required=True)
    __datum._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 152, 2)
    __datum._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 152, 2)
    
    datum = property(__datum.value, __datum.set, None, None)

    _ElementMap.update({
        __TvdTop.name() : __TvdTop,
        __TvdBase.name() : __TvdBase
    })
    _AttributeMap.update({
        __datum.name() : __datum
    })
_module_typeBindings.TvdInterval = TvdInterval
Namespace.addCategoryObject('typeBinding', 'TvdInterval', TvdInterval)


# Complex type {http://www.energistics.org/energyml/data/commonv2}BooleanConstantArray with content type ELEMENT_ONLY
class BooleanConstantArray (AbstractBooleanArray):
    """Represents an array of Boolean values where all values are identical. This an optimization for which an array of explicit Boolean values is not required. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BooleanConstantArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 154, 1)
    _ElementMap = AbstractBooleanArray._ElementMap.copy()
    _AttributeMap = AbstractBooleanArray._AttributeMap.copy()
    # Base type is AbstractBooleanArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_BooleanConstantArray_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 161, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Value inside all the elements of the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_BooleanConstantArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 166, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Size of the array.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Count.name() : __Count
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BooleanConstantArray = BooleanConstantArray
Namespace.addCategoryObject('typeBinding', 'BooleanConstantArray', BooleanConstantArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}BooleanExternalArray with content type ELEMENT_ONLY
class BooleanExternalArray (AbstractBooleanArray):
    """Array of Boolean values provided explicitly by an HDF5 dataset."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BooleanExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 175, 1)
    _ElementMap = AbstractBooleanArray._ElementMap.copy()
    _AttributeMap = AbstractBooleanArray._AttributeMap.copy()
    # Base type is AbstractBooleanArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_energistics_orgenergymldatacommonv2_BooleanExternalArray_httpwww_energistics_orgenergymldatacommonv2Values', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 182, 5), )

    
    Values = property(__Values.value, __Values.set, None, 'Reference to an HDF5 array of values.')

    _ElementMap.update({
        __Values.name() : __Values
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BooleanExternalArray = BooleanExternalArray
Namespace.addCategoryObject('typeBinding', 'BooleanExternalArray', BooleanExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractIntegerArray with content type EMPTY
class AbstractIntegerArray (AbstractNumericArray):
    """Generic representation of an array of integer values. Each derived element provides specialized implementation to allow specific optimization of the representation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractIntegerArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 238, 1)
    _ElementMap = AbstractNumericArray._ElementMap.copy()
    _AttributeMap = AbstractNumericArray._AttributeMap.copy()
    # Base type is AbstractNumericArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractIntegerArray = AbstractIntegerArray
Namespace.addCategoryObject('typeBinding', 'AbstractIntegerArray', AbstractIntegerArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MdInterval with content type ELEMENT_ONLY
class MdInterval (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MdInterval with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MdInterval')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 248, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}MdTop uses Python identifier MdTop
    __MdTop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MdTop'), 'MdTop', '__httpwww_energistics_orgenergymldatacommonv2_MdInterval_httpwww_energistics_orgenergymldatacommonv2MdTop', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 250, 3), )

    
    MdTop = property(__MdTop.value, __MdTop.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MdBase uses Python identifier MdBase
    __MdBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MdBase'), 'MdBase', '__httpwww_energistics_orgenergymldatacommonv2_MdInterval_httpwww_energistics_orgenergymldatacommonv2MdBase', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 251, 3), )

    
    MdBase = property(__MdBase.value, __MdBase.set, None, None)

    
    # Attribute datum uses Python identifier datum
    __datum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'datum'), 'datum', '__httpwww_energistics_orgenergymldatacommonv2_MdInterval_datum', _module_typeBindings.String64, required=True)
    __datum._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 253, 2)
    __datum._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 253, 2)
    
    datum = property(__datum.value, __datum.set, None, None)

    _ElementMap.update({
        __MdTop.name() : __MdTop,
        __MdBase.name() : __MdBase
    })
    _AttributeMap.update({
        __datum.name() : __datum
    })
_module_typeBindings.MdInterval = MdInterval
Namespace.addCategoryObject('typeBinding', 'MdInterval', MdInterval)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GenericMeasure with content type SIMPLE
class GenericMeasure (pyxb.binding.basis.complexTypeDefinition):
    """A generic measure type.
This should not be used except in situations where the underlying class of data is 
captured elsewhere. For example, for a log curve."""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GenericMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 291, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_GenericMeasure_uom', _module_typeBindings.UomEnum, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 299, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 299, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.GenericMeasure = GenericMeasure
Namespace.addCategoryObject('typeBinding', 'GenericMeasure', GenericMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}StringExternalArray with content type ELEMENT_ONLY
class StringExternalArray (AbstractStringArray):
    """Used to store explicit string values, i.e., values that are not double, boolean or integers. The datatype of the values will be identified by means of the HDF5 API."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StringExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 310, 1)
    _ElementMap = AbstractStringArray._ElementMap.copy()
    _AttributeMap = AbstractStringArray._AttributeMap.copy()
    # Base type is AbstractStringArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_energistics_orgenergymldatacommonv2_StringExternalArray_httpwww_energistics_orgenergymldatacommonv2Values', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 317, 5), )

    
    Values = property(__Values.value, __Values.set, None, 'Reference to HDF5 array of integer or double')

    _ElementMap.update({
        __Values.name() : __Values
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StringExternalArray = StringExternalArray
Namespace.addCategoryObject('typeBinding', 'StringExternalArray', StringExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AuthorityQualifiedName with content type SIMPLE
class AuthorityQualifiedName (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AuthorityQualifiedName with content type SIMPLE"""
    _TypeDefinition = String64
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AuthorityQualifiedName')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 339, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is String64
    
    # Attribute authority uses Python identifier authority
    __authority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authority'), 'authority', '__httpwww_energistics_orgenergymldatacommonv2_AuthorityQualifiedName_authority', _module_typeBindings.String64, required=True)
    __authority._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 342, 4)
    __authority._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 342, 4)
    
    authority = property(__authority.value, __authority.set, None, None)

    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httpwww_energistics_orgenergymldatacommonv2_AuthorityQualifiedName_code', _module_typeBindings.String64)
    __code._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 343, 4)
    __code._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 343, 4)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __authority.name() : __authority,
        __code.name() : __code
    })
_module_typeBindings.AuthorityQualifiedName = AuthorityQualifiedName
Namespace.addCategoryObject('typeBinding', 'AuthorityQualifiedName', AuthorityQualifiedName)


# Complex type {http://www.energistics.org/energyml/data/commonv2}StringConstantArray with content type ELEMENT_ONLY
class StringConstantArray (AbstractStringArray):
    """Represents an array of Boolean values where all values are identical. This an optimization for which an array of explicit Boolean values is not required. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StringConstantArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 347, 1)
    _ElementMap = AbstractStringArray._ElementMap.copy()
    _AttributeMap = AbstractStringArray._AttributeMap.copy()
    # Base type is AbstractStringArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_StringConstantArray_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 354, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Value inside all the elements of the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_StringConstantArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 359, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Size of the array.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Count.name() : __Count
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StringConstantArray = StringConstantArray
Namespace.addCategoryObject('typeBinding', 'StringConstantArray', StringConstantArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}BooleanArrayFromIndexArray with content type ELEMENT_ONLY
class BooleanArrayFromIndexArray (AbstractBooleanArray):
    """An array of Boolean values defined by specifying explicitly which indices in the array are either true or false. This class is used to represent very sparse true or false data."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BooleanArrayFromIndexArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 373, 1)
    _ElementMap = AbstractBooleanArray._ElementMap.copy()
    _AttributeMap = AbstractBooleanArray._AttributeMap.copy()
    # Base type is AbstractBooleanArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_BooleanArrayFromIndexArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 380, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Indices uses Python identifier Indices
    __Indices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Indices'), 'Indices', '__httpwww_energistics_orgenergymldatacommonv2_BooleanArrayFromIndexArray_httpwww_energistics_orgenergymldatacommonv2Indices', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 385, 5), )

    
    Indices = property(__Indices.value, __Indices.set, None, 'Array of integer indices.\n\nBUSINESS RULE: Must be non-negative.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}IndexIsTrue uses Python identifier IndexIsTrue
    __IndexIsTrue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IndexIsTrue'), 'IndexIsTrue', '__httpwww_energistics_orgenergymldatacommonv2_BooleanArrayFromIndexArray_httpwww_energistics_orgenergymldatacommonv2IndexIsTrue', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 392, 5), )

    
    IndexIsTrue = property(__IndexIsTrue.value, __IndexIsTrue.set, None, 'Indicates whether the specified elements are true or false.')

    _ElementMap.update({
        __Count.name() : __Count,
        __Indices.name() : __Indices,
        __IndexIsTrue.name() : __IndexIsTrue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BooleanArrayFromIndexArray = BooleanArrayFromIndexArray
Namespace.addCategoryObject('typeBinding', 'BooleanArrayFromIndexArray', BooleanArrayFromIndexArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FloatingPointExternalArray with content type ELEMENT_ONLY
class FloatingPointExternalArray (AbstractFloatingPointArray):
    """An array of double values provided explicitly by an HDF5 dataset.
By convention, the null value is NaN."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FloatingPointExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 63, 1)
    _ElementMap = AbstractFloatingPointArray._ElementMap.copy()
    _AttributeMap = AbstractFloatingPointArray._AttributeMap.copy()
    # Base type is AbstractFloatingPointArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_energistics_orgenergymldatacommonv2_FloatingPointExternalArray_httpwww_energistics_orgenergymldatacommonv2Values', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 71, 5), )

    
    Values = property(__Values.value, __Values.set, None, 'Reference to an HDF5 array of doubles.')

    _ElementMap.update({
        __Values.name() : __Values
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FloatingPointExternalArray = FloatingPointExternalArray
Namespace.addCategoryObject('typeBinding', 'FloatingPointExternalArray', FloatingPointExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerLatticeArray with content type ELEMENT_ONLY
class IntegerLatticeArray (AbstractIntegerArray):
    """Represents an array of integers based on an origin and a multi-dimensional offset. The offset is based on a linearization of a multi-dimensional offset.

If count(i) is the number of elements in the dimension i and offset(i) is the offset in the dimension i, then:
globalOffsetInNDimension = startValue+ ni*offset(n) + n_1i*count(n)*offset(n-1) + .... + 0i*count(n)*count(n-1)*....count(1)*offset(0)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerLatticeArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 80, 1)
    _ElementMap = AbstractIntegerArray._ElementMap.copy()
    _AttributeMap = AbstractIntegerArray._AttributeMap.copy()
    # Base type is AbstractIntegerArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}StartValue uses Python identifier StartValue
    __StartValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartValue'), 'StartValue', '__httpwww_energistics_orgenergymldatacommonv2_IntegerLatticeArray_httpwww_energistics_orgenergymldatacommonv2StartValue', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 90, 5), )

    
    StartValue = property(__StartValue.value, __StartValue.set, None, 'Value representing the global start for the lattice:\ni.e., iStart + jStart*ni + kStart*ni*nj')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Offset uses Python identifier Offset
    __Offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Offset'), 'Offset', '__httpwww_energistics_orgenergymldatacommonv2_IntegerLatticeArray_httpwww_energistics_orgenergymldatacommonv2Offset', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 96, 5), )

    
    Offset = property(__Offset.value, __Offset.set, None, None)

    _ElementMap.update({
        __StartValue.name() : __StartValue,
        __Offset.name() : __Offset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerLatticeArray = IntegerLatticeArray
Namespace.addCategoryObject('typeBinding', 'IntegerLatticeArray', IntegerLatticeArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FloatingPointConstantArray with content type ELEMENT_ONLY
class FloatingPointConstantArray (AbstractFloatingPointArray):
    """Represents an array of double values where all values are identical. This an optimization for which an array of explicit double values is not required."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FloatingPointConstantArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 101, 1)
    _ElementMap = AbstractFloatingPointArray._ElementMap.copy()
    _AttributeMap = AbstractFloatingPointArray._AttributeMap.copy()
    # Base type is AbstractFloatingPointArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_FloatingPointConstantArray_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 108, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Values inside all the elements of the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_FloatingPointConstantArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 113, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Size of the array.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Count.name() : __Count
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FloatingPointConstantArray = FloatingPointConstantArray
Namespace.addCategoryObject('typeBinding', 'FloatingPointConstantArray', FloatingPointConstantArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerConstantArray with content type ELEMENT_ONLY
class IntegerConstantArray (AbstractIntegerArray):
    """Represents an array of integer values where all values are identical. This an optimization for which an array of explicit integer values is not required."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerConstantArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 122, 1)
    _ElementMap = AbstractIntegerArray._ElementMap.copy()
    _AttributeMap = AbstractIntegerArray._AttributeMap.copy()
    # Base type is AbstractIntegerArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_IntegerConstantArray_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 129, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Values inside all the elements of the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_IntegerConstantArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 134, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Size of the array.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Count.name() : __Count
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerConstantArray = IntegerConstantArray
Namespace.addCategoryObject('typeBinding', 'IntegerConstantArray', IntegerConstantArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerArrayFromBooleanMaskArray with content type ELEMENT_ONLY
class IntegerArrayFromBooleanMaskArray (AbstractIntegerArray):
    """One-dimensional array of integer values obtained from the true elements of the Boolean mask."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerArrayFromBooleanMaskArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 212, 1)
    _ElementMap = AbstractIntegerArray._ElementMap.copy()
    _AttributeMap = AbstractIntegerArray._AttributeMap.copy()
    # Base type is AbstractIntegerArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}TotalIndexCount uses Python identifier TotalIndexCount
    __TotalIndexCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TotalIndexCount'), 'TotalIndexCount', '__httpwww_energistics_orgenergymldatacommonv2_IntegerArrayFromBooleanMaskArray_httpwww_energistics_orgenergymldatacommonv2TotalIndexCount', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 219, 5), )

    
    TotalIndexCount = property(__TotalIndexCount.value, __TotalIndexCount.set, None, 'Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Mask uses Python identifier Mask
    __Mask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Mask'), 'Mask', '__httpwww_energistics_orgenergymldatacommonv2_IntegerArrayFromBooleanMaskArray_httpwww_energistics_orgenergymldatacommonv2Mask', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 224, 5), )

    
    Mask = property(__Mask.value, __Mask.set, None, 'Boolean mask. A true element indicates that the index is included on the list of integer values.')

    _ElementMap.update({
        __TotalIndexCount.name() : __TotalIndexCount,
        __Mask.name() : __Mask
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerArrayFromBooleanMaskArray = IntegerArrayFromBooleanMaskArray
Namespace.addCategoryObject('typeBinding', 'IntegerArrayFromBooleanMaskArray', IntegerArrayFromBooleanMaskArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}StringMeasure with content type SIMPLE
class StringMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}StringMeasure with content type SIMPLE"""
    _TypeDefinition = String64
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StringMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 284, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is String64
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_StringMeasure_uom', _module_typeBindings.UnitOfMeasure)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 287, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 287, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.StringMeasure = StringMeasure
Namespace.addCategoryObject('typeBinding', 'StringMeasure', StringMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerExternalArray with content type ELEMENT_ONLY
class IntegerExternalArray (AbstractIntegerArray):
    """Array of integer values provided explicitly by an HDF5 dataset. The null value must be  explicitly provided in the NullValue attribute of this class."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 401, 1)
    _ElementMap = AbstractIntegerArray._ElementMap.copy()
    _AttributeMap = AbstractIntegerArray._AttributeMap.copy()
    # Base type is AbstractIntegerArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}NullValue uses Python identifier NullValue
    __NullValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NullValue'), 'NullValue', '__httpwww_energistics_orgenergymldatacommonv2_IntegerExternalArray_httpwww_energistics_orgenergymldatacommonv2NullValue', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 408, 5), )

    
    NullValue = property(__NullValue.value, __NullValue.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Values uses Python identifier Values
    __Values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Values'), 'Values', '__httpwww_energistics_orgenergymldatacommonv2_IntegerExternalArray_httpwww_energistics_orgenergymldatacommonv2Values', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 409, 5), )

    
    Values = property(__Values.value, __Values.set, None, 'Reference to an HDF5 array of integers or doubles.')

    _ElementMap.update({
        __NullValue.name() : __NullValue,
        __Values.name() : __Values
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerExternalArray = IntegerExternalArray
Namespace.addCategoryObject('typeBinding', 'IntegerExternalArray', IntegerExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FloatingPointLatticeArray with content type ELEMENT_ONLY
class FloatingPointLatticeArray (AbstractFloatingPointArray):
    """Represents an array of doubles based on an origin and a multi-dimensional offset. The offset is based on a linearization of a multi-dimensional offset.

If count(i) is the number of elements in the dimension i and offset(i) is the offset in the dimension i, then:
globalOffsetInNDimension = startValue+ ni*offset(n) + n_1i*count(n)*offset(n-1) + .... + 0i*count(n)*count(n-1)*....count(1)*offset(0)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FloatingPointLatticeArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 418, 1)
    _ElementMap = AbstractFloatingPointArray._ElementMap.copy()
    _AttributeMap = AbstractFloatingPointArray._AttributeMap.copy()
    # Base type is AbstractFloatingPointArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}StartValue uses Python identifier StartValue
    __StartValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartValue'), 'StartValue', '__httpwww_energistics_orgenergymldatacommonv2_FloatingPointLatticeArray_httpwww_energistics_orgenergymldatacommonv2StartValue', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 428, 5), )

    
    StartValue = property(__StartValue.value, __StartValue.set, None, 'Value representing the global start for the lattice.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Offset uses Python identifier Offset
    __Offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Offset'), 'Offset', '__httpwww_energistics_orgenergymldatacommonv2_FloatingPointLatticeArray_httpwww_energistics_orgenergymldatacommonv2Offset', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 433, 5), )

    
    Offset = property(__Offset.value, __Offset.set, None, None)

    _ElementMap.update({
        __StartValue.name() : __StartValue,
        __Offset.name() : __Offset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FloatingPointLatticeArray = FloatingPointLatticeArray
Namespace.addCategoryObject('typeBinding', 'FloatingPointLatticeArray', FloatingPointLatticeArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IntegerRangeArray with content type ELEMENT_ONLY
class IntegerRangeArray (AbstractIntegerArray):
    """Defines an array as a range of integers. The range is defined by an initial value and a count defining the size of the range."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntegerRangeArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 443, 1)
    _ElementMap = AbstractIntegerArray._ElementMap.copy()
    _AttributeMap = AbstractIntegerArray._AttributeMap.copy()
    # Base type is AbstractIntegerArray
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Count'), 'Count', '__httpwww_energistics_orgenergymldatacommonv2_IntegerRangeArray_httpwww_energistics_orgenergymldatacommonv2Count', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 450, 5), )

    
    Count = property(__Count.value, __Count.set, None, 'Size of the array.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__httpwww_energistics_orgenergymldatacommonv2_IntegerRangeArray_httpwww_energistics_orgenergymldatacommonv2Value', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 455, 5), )

    
    Value = property(__Value.value, __Value.set, None, 'Start value for the range.\nEnd value is start+count-1.')

    _ElementMap.update({
        __Count.name() : __Count,
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IntegerRangeArray = IntegerRangeArray
Namespace.addCategoryObject('typeBinding', 'IntegerRangeArray', IntegerRangeArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthMeasure with content type SIMPLE
class VolumePerTimePerPressureLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 35, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerPressureLengthMeasure_uom', _module_typeBindings.VolumePerTimePerPressureLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 38, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 38, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerPressureLengthMeasure = VolumePerTimePerPressureLengthMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureLengthMeasure', VolumePerTimePerPressureLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthMeasure with content type SIMPLE
class MagneticFieldStrengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFieldStrengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 49, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFieldStrengthMeasure_uom', _module_typeBindings.MagneticFieldStrengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 52, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 52, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFieldStrengthMeasure = MagneticFieldStrengthMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticFieldStrengthMeasure', MagneticFieldStrengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockMeasure with content type SIMPLE
class PermeabilityRockMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityRockMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 56, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermeabilityRockMeasure_uom', _module_typeBindings.PermeabilityRockUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 59, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 59, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermeabilityRockMeasure = PermeabilityRockMeasure
Namespace.addCategoryObject('typeBinding', 'PermeabilityRockMeasure', PermeabilityRockMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentMeasure with content type SIMPLE
class DoseEquivalentMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoseEquivalentMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 77, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DoseEquivalentMeasure_uom', _module_typeBindings.DoseEquivalentUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 80, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 80, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DoseEquivalentMeasure = DoseEquivalentMeasure
Namespace.addCategoryObject('typeBinding', 'DoseEquivalentMeasure', DoseEquivalentMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaMeasure with content type SIMPLE
class MassPerTimePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 84, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimePerAreaMeasure_uom', _module_typeBindings.MassPerTimePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 87, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 87, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimePerAreaMeasure = MassPerTimePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerAreaMeasure', MassPerTimePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureMeasure with content type SIMPLE
class VolumePerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 91, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerPressureMeasure_uom', _module_typeBindings.VolumePerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 94, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 94, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerPressureMeasure = VolumePerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerPressureMeasure', VolumePerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureMeasure with content type SIMPLE
class PressurePerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 98, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerPressureMeasure_uom', _module_typeBindings.PressurePerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 101, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 101, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerPressureMeasure = PressurePerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'PressurePerPressureMeasure', PressurePerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerAreaMeasure with content type SIMPLE
class MassPerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 105, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerAreaMeasure_uom', _module_typeBindings.MassPerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 108, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 108, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerAreaMeasure = MassPerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerAreaMeasure', MassPerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeMeasure with content type SIMPLE
class AmountOfSubstancePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerVolumeMeasure_uom', _module_typeBindings.AmountOfSubstancePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 115, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 115, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerVolumeMeasure = AmountOfSubstancePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerVolumeMeasure', AmountOfSubstancePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerTimeMeasure with content type SIMPLE
class TimePerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 119, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerTimeMeasure_uom', _module_typeBindings.TimePerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 122, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 122, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerTimeMeasure = TimePerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'TimePerTimeMeasure', TimePerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeMeasure with content type SIMPLE
class AreaPerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 154, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerVolumeMeasure_uom', _module_typeBindings.AreaPerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 157, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 157, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerVolumeMeasure = AreaPerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerVolumeMeasure', AreaPerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceMeasure with content type SIMPLE
class ElectricResistanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 182, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricResistanceMeasure_uom', _module_typeBindings.ElectricResistanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 185, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 185, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricResistanceMeasure = ElectricResistanceMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricResistanceMeasure', ElectricResistanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeMeasure with content type SIMPLE
class VolumePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 196, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerVolumeMeasure_uom', _module_typeBindings.VolumePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 199, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 199, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerVolumeMeasure = VolumePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerVolumeMeasure', VolumePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaMeasure with content type SIMPLE
class AreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaMeasure_uom', _module_typeBindings.AreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 206, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 206, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaMeasure = AreaMeasure
Namespace.addCategoryObject('typeBinding', 'AreaMeasure', AreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerMassMeasure with content type SIMPLE
class LengthPerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 210, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerMassMeasure_uom', _module_typeBindings.LengthPerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 213, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 213, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerMassMeasure = LengthPerMassMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerMassMeasure', LengthPerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureMeasure with content type SIMPLE
class ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperaturePerThermodynamicTemperatureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 217, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermodynamicTemperaturePerThermodynamicTemperatureMeasure_uom', _module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 220, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 220, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureMeasure = ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperaturePerThermodynamicTemperatureMeasure', ThermodynamicTemperaturePerThermodynamicTemperatureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MobilityMeasure with content type SIMPLE
class MobilityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MobilityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobilityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 238, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MobilityMeasure_uom', _module_typeBindings.MobilityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 241, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 241, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MobilityMeasure = MobilityMeasure
Namespace.addCategoryObject('typeBinding', 'MobilityMeasure', MobilityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredMeasure with content type SIMPLE
class PressureSquaredMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 245, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureSquaredMeasure_uom', _module_typeBindings.PressureSquaredUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 248, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 248, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureSquaredMeasure = PressureSquaredMeasure
Namespace.addCategoryObject('typeBinding', 'PressureSquaredMeasure', PressureSquaredMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthMeasure with content type SIMPLE
class ForceLengthPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceLengthPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 259, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceLengthPerLengthMeasure_uom', _module_typeBindings.ForceLengthPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 262, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 262, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceLengthPerLengthMeasure = ForceLengthPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'ForceLengthPerLengthMeasure', ForceLengthPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaMeasure with content type SIMPLE
class AmountOfSubstancePerTimePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 273, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerTimePerAreaMeasure_uom', _module_typeBindings.AmountOfSubstancePerTimePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 276, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 276, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerTimePerAreaMeasure = AmountOfSubstancePerTimePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimePerAreaMeasure', AmountOfSubstancePerTimePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaMeasure with content type SIMPLE
class VolumePerTimePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 280, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerAreaMeasure_uom', _module_typeBindings.VolumePerTimePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 283, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 283, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerAreaMeasure = VolumePerTimePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerAreaMeasure', VolumePerTimePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthMeasure with content type SIMPLE
class LengthPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 287, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerLengthMeasure_uom', _module_typeBindings.LengthPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 290, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 290, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerLengthMeasure = LengthPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerLengthMeasure', LengthPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalMeasure with content type SIMPLE
class TemperatureIntervalMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalMeasure_uom', _module_typeBindings.TemperatureIntervalUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 297, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 297, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalMeasure = TemperatureIntervalMeasure
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalMeasure', TemperatureIntervalMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthMeasure with content type SIMPLE
class VolumePerTimePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 301, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerLengthMeasure_uom', _module_typeBindings.VolumePerTimePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 304, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 304, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerLengthMeasure = VolumePerTimePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerLengthMeasure', VolumePerTimePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeMeasure with content type SIMPLE
class VolumePerTimePerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 315, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerTimeMeasure_uom', _module_typeBindings.VolumePerTimePerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 318, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 318, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerTimeMeasure = VolumePerTimePerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerTimeMeasure', VolumePerTimePerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthMeasure with content type SIMPLE
class PermeabilityLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 329, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermeabilityLengthMeasure_uom', _module_typeBindings.PermeabilityLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 332, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 332, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermeabilityLengthMeasure = PermeabilityLengthMeasure
Namespace.addCategoryObject('typeBinding', 'PermeabilityLengthMeasure', PermeabilityLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceMeasure with content type SIMPLE
class ThermalInsulanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalInsulanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 336, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalInsulanceMeasure_uom', _module_typeBindings.ThermalInsulanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 339, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 339, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalInsulanceMeasure = ThermalInsulanceMeasure
Namespace.addCategoryObject('typeBinding', 'ThermalInsulanceMeasure', ThermalInsulanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceAreaMeasure with content type SIMPLE
class ForceAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 364, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceAreaMeasure_uom', _module_typeBindings.ForceAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 367, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 367, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceAreaMeasure = ForceAreaMeasure
Namespace.addCategoryObject('typeBinding', 'ForceAreaMeasure', ForceAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyMeasure with content type SIMPLE
class EnergyMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 371, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyMeasure_uom', _module_typeBindings.EnergyUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 374, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 374, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyMeasure = EnergyMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyMeasure', EnergyMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IlluminanceMeasure with content type SIMPLE
class IlluminanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}IlluminanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IlluminanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 378, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_IlluminanceMeasure_uom', _module_typeBindings.IlluminanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 381, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 381, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.IlluminanceMeasure = IlluminanceMeasure
Namespace.addCategoryObject('typeBinding', 'IlluminanceMeasure', IlluminanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceMeasure with content type SIMPLE
class ForceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 420, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceMeasure_uom', _module_typeBindings.ForceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 423, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 423, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceMeasure = ForceMeasure
Namespace.addCategoryObject('typeBinding', 'ForceMeasure', ForceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityMeasure with content type SIMPLE
class RadiantIntensityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadiantIntensityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 434, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_RadiantIntensityMeasure_uom', _module_typeBindings.RadiantIntensityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 437, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 437, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.RadiantIntensityMeasure = RadiantIntensityMeasure
Namespace.addCategoryObject('typeBinding', 'RadiantIntensityMeasure', RadiantIntensityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerMeasure with content type SIMPLE
class PowerPerPowerMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerPowerMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 448, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerPowerMeasure_uom', _module_typeBindings.PowerPerPowerUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 451, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 451, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerPowerMeasure = PowerPerPowerMeasure
Namespace.addCategoryObject('typeBinding', 'PowerPerPowerMeasure', PowerPerPowerMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DimensionlessMeasure with content type SIMPLE
class DimensionlessMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DimensionlessMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionlessMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 469, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DimensionlessMeasure_uom', _module_typeBindings.DimensionlessUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 472, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 472, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DimensionlessMeasure = DimensionlessMeasure
Namespace.addCategoryObject('typeBinding', 'DimensionlessMeasure', DimensionlessMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientMeasure with content type SIMPLE
class HeatTransferCoefficientMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatTransferCoefficientMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 490, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatTransferCoefficientMeasure_uom', _module_typeBindings.HeatTransferCoefficientUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 493, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 493, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatTransferCoefficientMeasure = HeatTransferCoefficientMeasure
Namespace.addCategoryObject('typeBinding', 'HeatTransferCoefficientMeasure', HeatTransferCoefficientMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APINeutronMeasure with content type SIMPLE
class APINeutronMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APINeutronMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APINeutronMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 504, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APINeutronMeasure_uom', _module_typeBindings.APINeutronUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 507, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 507, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APINeutronMeasure = APINeutronMeasure
Namespace.addCategoryObject('typeBinding', 'APINeutronMeasure', APINeutronMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialMeasure with content type SIMPLE
class MagneticVectorPotentialMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticVectorPotentialMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 511, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticVectorPotentialMeasure_uom', _module_typeBindings.MagneticVectorPotentialUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 514, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 514, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticVectorPotentialMeasure = MagneticVectorPotentialMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticVectorPotentialMeasure', MagneticVectorPotentialMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationMeasure with content type SIMPLE
class LinearAccelerationMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearAccelerationMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 546, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LinearAccelerationMeasure_uom', _module_typeBindings.LinearAccelerationUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 549, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 549, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LinearAccelerationMeasure = LinearAccelerationMeasure
Namespace.addCategoryObject('typeBinding', 'LinearAccelerationMeasure', LinearAccelerationMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeMeasure with content type SIMPLE
class VolumePerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 560, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimeMeasure_uom', _module_typeBindings.VolumePerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 563, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 563, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimeMeasure = VolumePerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeMeasure', VolumePerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxMeasure with content type SIMPLE
class MagneticFluxMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 574, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxMeasure_uom', _module_typeBindings.MagneticFluxUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 577, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 577, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxMeasure = MagneticFluxMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticFluxMeasure', MagneticFluxMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionMeasure with content type SIMPLE
class VolumetricThermalExpansionMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricThermalExpansionMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 581, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumetricThermalExpansionMeasure_uom', _module_typeBindings.VolumetricThermalExpansionUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 584, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 584, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumetricThermalExpansionMeasure = VolumetricThermalExpansionMeasure
Namespace.addCategoryObject('typeBinding', 'VolumetricThermalExpansionMeasure', VolumetricThermalExpansionMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateMeasure with content type SIMPLE
class HeatFlowRateMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatFlowRateMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 602, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatFlowRateMeasure_uom', _module_typeBindings.HeatFlowRateUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 605, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 605, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatFlowRateMeasure = HeatFlowRateMeasure
Namespace.addCategoryObject('typeBinding', 'HeatFlowRateMeasure', HeatFlowRateMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureMeasure with content type SIMPLE
class MassPerVolumePerTemperatureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerTemperatureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 623, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerTemperatureMeasure_uom', _module_typeBindings.MassPerVolumePerTemperatureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 626, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 626, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerTemperatureMeasure = MassPerVolumePerTemperatureMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerTemperatureMeasure', MassPerVolumePerTemperatureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimeMeasure with content type SIMPLE
class MassPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 637, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimeMeasure_uom', _module_typeBindings.MassPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 640, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 640, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimeMeasure = MassPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerTimeMeasure', MassPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerMassMeasure with content type SIMPLE
class VolumePerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 651, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerMassMeasure_uom', _module_typeBindings.VolumePerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 654, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 654, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerMassMeasure = VolumePerMassMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerMassMeasure', VolumePerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarVolumeMeasure with content type SIMPLE
class MolarVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 658, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarVolumeMeasure_uom', _module_typeBindings.MolarVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 661, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 661, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarVolumeMeasure = MolarVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'MolarVolumeMeasure', MolarVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceMeasure with content type SIMPLE
class ElectricConductanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 665, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricConductanceMeasure_uom', _module_typeBindings.ElectricConductanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 668, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 668, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricConductanceMeasure = ElectricConductanceMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricConductanceMeasure', ElectricConductanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureMeasure with content type SIMPLE
class ReciprocalPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 672, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalPressureMeasure_uom', _module_typeBindings.ReciprocalPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 675, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 675, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalPressureMeasure = ReciprocalPressureMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalPressureMeasure', ReciprocalPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceMeasure with content type SIMPLE
class AreaPerAmountOfSubstanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAmountOfSubstanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 679, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerAmountOfSubstanceMeasure_uom', _module_typeBindings.AreaPerAmountOfSubstanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 682, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 682, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerAmountOfSubstanceMeasure = AreaPerAmountOfSubstanceMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerAmountOfSubstanceMeasure', AreaPerAmountOfSubstanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthMeasure with content type SIMPLE
class LengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 686, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthMeasure_uom', _module_typeBindings.LengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 689, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 689, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthMeasure = LengthMeasure
Namespace.addCategoryObject('typeBinding', 'LengthMeasure', LengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeMeasure with content type SIMPLE
class MassPerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 693, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumeMeasure_uom', _module_typeBindings.MassPerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 696, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 696, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumeMeasure = MassPerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerVolumeMeasure', MassPerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthMeasure with content type SIMPLE
class TemperatureIntervalPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 714, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerLengthMeasure_uom', _module_typeBindings.TemperatureIntervalPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 717, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 717, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerLengthMeasure = TemperatureIntervalPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerLengthMeasure', TemperatureIntervalPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaMeasure with content type SIMPLE
class AmountOfSubstancePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 728, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerAreaMeasure_uom', _module_typeBindings.AmountOfSubstancePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 731, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 731, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerAreaMeasure = AmountOfSubstancePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAreaMeasure', AmountOfSubstancePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceMeasure with content type SIMPLE
class AmountOfSubstanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 742, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstanceMeasure_uom', _module_typeBindings.AmountOfSubstanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 745, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 745, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstanceMeasure = AmountOfSubstanceMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstanceMeasure', AmountOfSubstanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerLengthMeasure with content type SIMPLE
class TimePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 749, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerLengthMeasure_uom', _module_typeBindings.TimePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 752, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 752, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerLengthMeasure = TimePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'TimePerLengthMeasure', TimePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeMeasure with content type SIMPLE
class ReciprocalMassTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 763, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalMassTimeMeasure_uom', _module_typeBindings.ReciprocalMassTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 766, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 766, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalMassTimeMeasure = ReciprocalMassTimeMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassTimeMeasure', ReciprocalMassTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeMeasure with content type SIMPLE
class ReciprocalVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 791, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalVolumeMeasure_uom', _module_typeBindings.ReciprocalVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 794, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 794, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalVolumeMeasure = ReciprocalVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalVolumeMeasure', ReciprocalVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerForceMeasure with content type SIMPLE
class ForcePerForceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerForceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerForceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 805, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerForceMeasure_uom', _module_typeBindings.ForcePerForceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 808, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 808, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerForceMeasure = ForcePerForceMeasure
Namespace.addCategoryObject('typeBinding', 'ForcePerForceMeasure', ForcePerForceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionMeasure with content type SIMPLE
class LinearThermalExpansionMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearThermalExpansionMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 812, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LinearThermalExpansionMeasure_uom', _module_typeBindings.LinearThermalExpansionUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 815, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 815, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LinearThermalExpansionMeasure = LinearThermalExpansionMeasure
Namespace.addCategoryObject('typeBinding', 'LinearThermalExpansionMeasure', LinearThermalExpansionMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthMeasure with content type SIMPLE
class EnergyPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 819, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerLengthMeasure_uom', _module_typeBindings.EnergyPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 822, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 822, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerLengthMeasure = EnergyPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyPerLengthMeasure', EnergyPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeMeasure with content type SIMPLE
class TemperatureIntervalPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 833, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerTimeMeasure_uom', _module_typeBindings.TemperatureIntervalPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 836, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 836, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerTimeMeasure = TemperatureIntervalPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerTimeMeasure', TemperatureIntervalPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceMeasure with content type SIMPLE
class ThermalConductanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalConductanceMeasure_uom', _module_typeBindings.ThermalConductanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 843, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 843, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalConductanceMeasure = ThermalConductanceMeasure
Namespace.addCategoryObject('typeBinding', 'ThermalConductanceMeasure', ThermalConductanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SolidAngleMeasure with content type SIMPLE
class SolidAngleMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SolidAngleMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolidAngleMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 847, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SolidAngleMeasure_uom', _module_typeBindings.SolidAngleUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 850, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 850, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SolidAngleMeasure = SolidAngleMeasure
Namespace.addCategoryObject('typeBinding', 'SolidAngleMeasure', SolidAngleMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureMeasure with content type SIMPLE
class EnergyLengthPerTimeAreaTemperatureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerTimeAreaTemperatureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 875, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyLengthPerTimeAreaTemperatureMeasure_uom', _module_typeBindings.EnergyLengthPerTimeAreaTemperatureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 878, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 878, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyLengthPerTimeAreaTemperatureMeasure = EnergyLengthPerTimeAreaTemperatureMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerTimeAreaTemperatureMeasure', EnergyLengthPerTimeAreaTemperatureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerMeasure with content type SIMPLE
class PowerMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 882, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerMeasure_uom', _module_typeBindings.PowerUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 885, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 885, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerMeasure = PowerMeasure
Namespace.addCategoryObject('typeBinding', 'PowerMeasure', PowerMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationMeasure with content type SIMPLE
class VolumePerRotationMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerRotationMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 889, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerRotationMeasure_uom', _module_typeBindings.VolumePerRotationUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 892, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 892, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerRotationMeasure = VolumePerRotationMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerRotationMeasure', VolumePerRotationMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureMeasure with content type SIMPLE
class ThermodynamicTemperatureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperatureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 917, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermodynamicTemperatureMeasure_uom', _module_typeBindings.ThermodynamicTemperatureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 920, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 920, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermodynamicTemperatureMeasure = ThermodynamicTemperatureMeasure
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperatureMeasure', ThermodynamicTemperatureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermittivityMeasure with content type SIMPLE
class PermittivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermittivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermittivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 931, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermittivityMeasure_uom', _module_typeBindings.PermittivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 934, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 934, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermittivityMeasure = PermittivityMeasure
Namespace.addCategoryObject('typeBinding', 'PermittivityMeasure', PermittivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeMeasure with content type SIMPLE
class PressureTimePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureTimePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 938, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureTimePerVolumeMeasure_uom', _module_typeBindings.PressureTimePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 941, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 941, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureTimePerVolumeMeasure = PressureTimePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'PressureTimePerVolumeMeasure', PressureTimePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DipoleMomentMeasure with content type SIMPLE
class DipoleMomentMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DipoleMomentMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DipoleMomentMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 945, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DipoleMomentMeasure_uom', _module_typeBindings.DipoleMomentUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 948, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 948, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DipoleMomentMeasure = DipoleMomentMeasure
Namespace.addCategoryObject('typeBinding', 'DipoleMomentMeasure', DipoleMomentMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}RadianceMeasure with content type SIMPLE
class RadianceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}RadianceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadianceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 952, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_RadianceMeasure_uom', _module_typeBindings.RadianceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 955, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 955, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.RadianceMeasure = RadianceMeasure
Namespace.addCategoryObject('typeBinding', 'RadianceMeasure', RadianceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerMassMeasure with content type SIMPLE
class AreaPerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 966, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerMassMeasure_uom', _module_typeBindings.AreaPerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 969, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 969, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerMassMeasure = AreaPerMassMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerMassMeasure', AreaPerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeMeasure with content type SIMPLE
class EnergyPerMassPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 980, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerMassPerTimeMeasure_uom', _module_typeBindings.EnergyPerMassPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 983, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 983, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerMassPerTimeMeasure = EnergyPerMassPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassPerTimeMeasure', EnergyPerMassPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityMeasure with content type SIMPLE
class ElectricCurrentDensityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentDensityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1008, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricCurrentDensityMeasure_uom', _module_typeBindings.ElectricCurrentDensityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1011, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1011, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricCurrentDensityMeasure = ElectricCurrentDensityMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentDensityMeasure', ElectricCurrentDensityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaMeasure with content type SIMPLE
class ElectricChargePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1036, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerAreaMeasure_uom', _module_typeBindings.ElectricChargePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1039, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1039, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerAreaMeasure = ElectricChargePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerAreaMeasure', ElectricChargePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LightExposureMeasure with content type SIMPLE
class LightExposureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LightExposureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LightExposureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1057, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LightExposureMeasure_uom', _module_typeBindings.LightExposureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1060, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1060, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LightExposureMeasure = LightExposureMeasure
Namespace.addCategoryObject('typeBinding', 'LightExposureMeasure', LightExposureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentMeasure with content type SIMPLE
class ElectricCurrentMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1064, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricCurrentMeasure_uom', _module_typeBindings.ElectricCurrentUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1067, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1067, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricCurrentMeasure = ElectricCurrentMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentMeasure', ElectricCurrentMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousFluxMeasure with content type SIMPLE
class LuminousFluxMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousFluxMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousFluxMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1071, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousFluxMeasure_uom', _module_typeBindings.LuminousFluxUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1074, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1074, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousFluxMeasure = LuminousFluxMeasure
Namespace.addCategoryObject('typeBinding', 'LuminousFluxMeasure', LuminousFluxMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatCapacityMeasure with content type SIMPLE
class HeatCapacityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatCapacityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1085, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatCapacityMeasure_uom', _module_typeBindings.HeatCapacityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1088, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1088, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatCapacityMeasure = HeatCapacityMeasure
Namespace.addCategoryObject('typeBinding', 'HeatCapacityMeasure', HeatCapacityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthMeasure with content type SIMPLE
class ElectricResistancePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistancePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1092, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricResistancePerLengthMeasure_uom', _module_typeBindings.ElectricResistancePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1095, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1095, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricResistancePerLengthMeasure = ElectricResistancePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricResistancePerLengthMeasure', ElectricResistancePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseMeasure with content type SIMPLE
class AbsorbedDoseMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorbedDoseMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1099, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AbsorbedDoseMeasure_uom', _module_typeBindings.AbsorbedDoseUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1102, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1102, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AbsorbedDoseMeasure = AbsorbedDoseMeasure
Namespace.addCategoryObject('typeBinding', 'AbsorbedDoseMeasure', AbsorbedDoseMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureMeasure with content type SIMPLE
class TemperatureIntervalPerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1106, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerPressureMeasure_uom', _module_typeBindings.TemperatureIntervalPerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1109, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1109, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerPressureMeasure = TemperatureIntervalPerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerPressureMeasure', TemperatureIntervalPerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalMeasure with content type SIMPLE
class AttenuationPerFrequencyIntervalMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttenuationPerFrequencyIntervalMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1113, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AttenuationPerFrequencyIntervalMeasure_uom', _module_typeBindings.AttenuationPerFrequencyIntervalUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1116, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1116, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AttenuationPerFrequencyIntervalMeasure = AttenuationPerFrequencyIntervalMeasure
Namespace.addCategoryObject('typeBinding', 'AttenuationPerFrequencyIntervalMeasure', AttenuationPerFrequencyIntervalMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceMeasure with content type SIMPLE
class ThermalResistanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalResistanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1120, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalResistanceMeasure_uom', _module_typeBindings.ThermalResistanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1123, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1123, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalResistanceMeasure = ThermalResistanceMeasure
Namespace.addCategoryObject('typeBinding', 'ThermalResistanceMeasure', ThermalResistanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthMeasure with content type SIMPLE
class AnglePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1141, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AnglePerLengthMeasure_uom', _module_typeBindings.AnglePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1144, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1144, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AnglePerLengthMeasure = AnglePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'AnglePerLengthMeasure', AnglePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeMeasure with content type SIMPLE
class LengthPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1155, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerTimeMeasure_uom', _module_typeBindings.LengthPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1158, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1158, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerTimeMeasure = LengthPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerTimeMeasure', LengthPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerLengthMeasure with content type SIMPLE
class MassPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1162, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerLengthMeasure_uom', _module_typeBindings.MassPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1165, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1165, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerLengthMeasure = MassPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerLengthMeasure', MassPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaMeasure with content type SIMPLE
class EnergyPerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1169, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerAreaMeasure_uom', _module_typeBindings.EnergyPerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1172, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1172, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerAreaMeasure = EnergyPerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyPerAreaMeasure', EnergyPerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaMeasure with content type SIMPLE
class AreaPerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1176, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerAreaMeasure_uom', _module_typeBindings.AreaPerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1179, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1179, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerAreaMeasure = AreaPerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerAreaMeasure', AreaPerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReluctanceMeasure with content type SIMPLE
class ReluctanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReluctanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReluctanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1197, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReluctanceMeasure_uom', _module_typeBindings.ReluctanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1200, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1200, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReluctanceMeasure = ReluctanceMeasure
Namespace.addCategoryObject('typeBinding', 'ReluctanceMeasure', ReluctanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerMassMeasure with content type SIMPLE
class MassPerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1211, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerMassMeasure_uom', _module_typeBindings.MassPerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1214, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1214, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerMassMeasure = MassPerMassMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerMassMeasure', MassPerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedMeasure with content type SIMPLE
class DataTransferSpeedMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataTransferSpeedMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1246, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DataTransferSpeedMeasure_uom', _module_typeBindings.DataTransferSpeedUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1249, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1249, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DataTransferSpeedMeasure = DataTransferSpeedMeasure
Namespace.addCategoryObject('typeBinding', 'DataTransferSpeedMeasure', DataTransferSpeedMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentMeasure with content type SIMPLE
class MagneticDipoleMomentMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticDipoleMomentMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1253, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticDipoleMomentMeasure_uom', _module_typeBindings.MagneticDipoleMomentUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1256, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1256, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticDipoleMomentMeasure = MagneticDipoleMomentMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticDipoleMomentMeasure', MagneticDipoleMomentMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyMeasure with content type SIMPLE
class MassPerEnergyMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerEnergyMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1260, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerEnergyMeasure_uom', _module_typeBindings.MassPerEnergyUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1263, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1263, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerEnergyMeasure = MassPerEnergyMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerEnergyMeasure', MassPerEnergyMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityMeasure with content type SIMPLE
class MagneticPermeabilityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticPermeabilityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1267, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticPermeabilityMeasure_uom', _module_typeBindings.MagneticPermeabilityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1270, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1270, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticPermeabilityMeasure = MagneticPermeabilityMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticPermeabilityMeasure', MagneticPermeabilityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APIGravityMeasure with content type SIMPLE
class APIGravityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APIGravityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGravityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APIGravityMeasure_uom', _module_typeBindings.APIGravityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1284, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1284, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APIGravityMeasure = APIGravityMeasure
Namespace.addCategoryObject('typeBinding', 'APIGravityMeasure', APIGravityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthMeasure with content type SIMPLE
class VolumePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1288, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerLengthMeasure_uom', _module_typeBindings.VolumePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1291, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1291, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerLengthMeasure = VolumePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerLengthMeasure', VolumePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeMeasure with content type SIMPLE
class VolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumeMeasure_uom', _module_typeBindings.VolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1298, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1298, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumeMeasure = VolumeMeasure
Namespace.addCategoryObject('typeBinding', 'VolumeMeasure', VolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerCountMeasure with content type SIMPLE
class AreaPerCountMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerCountMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerCountMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1302, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerCountMeasure_uom', _module_typeBindings.AreaPerCountUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1305, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1305, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerCountMeasure = AreaPerCountMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerCountMeasure', AreaPerCountMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceMeasure with content type SIMPLE
class ReciprocalElectricPotentialDifferenceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalElectricPotentialDifferenceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1316, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalElectricPotentialDifferenceMeasure_uom', _module_typeBindings.ReciprocalElectricPotentialDifferenceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1319, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1319, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalElectricPotentialDifferenceMeasure = ReciprocalElectricPotentialDifferenceMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalElectricPotentialDifferenceMeasure', ReciprocalElectricPotentialDifferenceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassMeasure with content type SIMPLE
class ElectricChargePerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1344, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerMassMeasure_uom', _module_typeBindings.ElectricChargePerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1347, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1347, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerMassMeasure = ElectricChargePerMassMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerMassMeasure', ElectricChargePerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APIGammaRayMeasure with content type SIMPLE
class APIGammaRayMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APIGammaRayMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGammaRayMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APIGammaRayMeasure_uom', _module_typeBindings.APIGammaRayUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1375, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1375, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APIGammaRayMeasure = APIGammaRayMeasure
Namespace.addCategoryObject('typeBinding', 'APIGammaRayMeasure', APIGammaRayMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientMeasure with content type SIMPLE
class DiffusionCoefficientMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusionCoefficientMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1400, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DiffusionCoefficientMeasure_uom', _module_typeBindings.DiffusionCoefficientUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1403, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1403, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DiffusionCoefficientMeasure = DiffusionCoefficientMeasure
Namespace.addCategoryObject('typeBinding', 'DiffusionCoefficientMeasure', DiffusionCoefficientMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceMeasure with content type SIMPLE
class ElectricPotentialDifferenceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricPotentialDifferenceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1407, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricPotentialDifferenceMeasure_uom', _module_typeBindings.ElectricPotentialDifferenceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1410, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1410, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricPotentialDifferenceMeasure = ElectricPotentialDifferenceMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricPotentialDifferenceMeasure', ElectricPotentialDifferenceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityMeasure with content type SIMPLE
class IsothermalCompressibilityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IsothermalCompressibilityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1421, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_IsothermalCompressibilityMeasure_uom', _module_typeBindings.IsothermalCompressibilityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1424, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1424, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.IsothermalCompressibilityMeasure = IsothermalCompressibilityMeasure
Namespace.addCategoryObject('typeBinding', 'IsothermalCompressibilityMeasure', IsothermalCompressibilityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthMeasure with content type SIMPLE
class MassPerVolumePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1428, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerLengthMeasure_uom', _module_typeBindings.MassPerVolumePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1431, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1431, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerLengthMeasure = MassPerVolumePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerLengthMeasure', MassPerVolumePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeMeasure with content type SIMPLE
class PressurePerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1449, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerTimeMeasure_uom', _module_typeBindings.PressurePerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1452, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1452, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerTimeMeasure = PressurePerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'PressurePerTimeMeasure', PressurePerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeMeasure with content type SIMPLE
class VolumePerTimePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1456, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerVolumeMeasure_uom', _module_typeBindings.VolumePerTimePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1459, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1459, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerVolumeMeasure = VolumePerTimePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerVolumeMeasure', VolumePerTimePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureMeasure with content type SIMPLE
class VolumePerTimePerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1477, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerPressureMeasure_uom', _module_typeBindings.VolumePerTimePerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1480, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1480, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerPressureMeasure = VolumePerTimePerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureMeasure', VolumePerTimePerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeMeasure with content type SIMPLE
class TimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1484, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimeMeasure_uom', _module_typeBindings.TimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1487, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1487, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimeMeasure = TimeMeasure
Namespace.addCategoryObject('typeBinding', 'TimeMeasure', TimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfForceMeasure with content type SIMPLE
class MomentOfForceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfForceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfForceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1491, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentOfForceMeasure_uom', _module_typeBindings.MomentOfForceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1494, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1494, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentOfForceMeasure = MomentOfForceMeasure
Namespace.addCategoryObject('typeBinding', 'MomentOfForceMeasure', MomentOfForceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminanceMeasure with content type SIMPLE
class LuminanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1505, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminanceMeasure_uom', _module_typeBindings.LuminanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1508, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1508, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminanceMeasure = LuminanceMeasure
Namespace.addCategoryObject('typeBinding', 'LuminanceMeasure', LuminanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeMeasure with content type SIMPLE
class ForcePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1526, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerVolumeMeasure_uom', _module_typeBindings.ForcePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1529, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1529, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerVolumeMeasure = ForcePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'ForcePerVolumeMeasure', ForcePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityMeasure with content type SIMPLE
class MolarHeatCapacityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarHeatCapacityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1533, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarHeatCapacityMeasure_uom', _module_typeBindings.MolarHeatCapacityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1536, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1536, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarHeatCapacityMeasure = MolarHeatCapacityMeasure
Namespace.addCategoryObject('typeBinding', 'MolarHeatCapacityMeasure', MolarHeatCapacityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DigitalStorageMeasure with content type SIMPLE
class DigitalStorageMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DigitalStorageMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalStorageMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1540, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DigitalStorageMeasure_uom', _module_typeBindings.DigitalStorageUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1543, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1543, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DigitalStorageMeasure = DigitalStorageMeasure
Namespace.addCategoryObject('typeBinding', 'DigitalStorageMeasure', DigitalStorageMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargeMeasure with content type SIMPLE
class ElectricChargeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1554, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargeMeasure_uom', _module_typeBindings.ElectricChargeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1557, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1557, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargeMeasure = ElectricChargeMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricChargeMeasure', ElectricChargeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityMeasure with content type SIMPLE
class LuminousIntensityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousIntensityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1561, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousIntensityMeasure_uom', _module_typeBindings.LuminousIntensityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1564, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1564, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousIntensityMeasure = LuminousIntensityMeasure
Namespace.addCategoryObject('typeBinding', 'LuminousIntensityMeasure', LuminousIntensityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarEnergyMeasure with content type SIMPLE
class MolarEnergyMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarEnergyMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarEnergyMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1589, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarEnergyMeasure_uom', _module_typeBindings.MolarEnergyUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1592, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1592, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarEnergyMeasure = MolarEnergyMeasure
Namespace.addCategoryObject('typeBinding', 'MolarEnergyMeasure', MolarEnergyMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityMeasure with content type SIMPLE
class CationExchangeCapacityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CationExchangeCapacityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1603, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_CationExchangeCapacityMeasure_uom', _module_typeBindings.CationExchangeCapacityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1606, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1606, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.CationExchangeCapacityMeasure = CationExchangeCapacityMeasure
Namespace.addCategoryObject('typeBinding', 'CationExchangeCapacityMeasure', CationExchangeCapacityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeMeasure with content type SIMPLE
class LengthPerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1617, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerVolumeMeasure_uom', _module_typeBindings.LengthPerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1620, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1620, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerVolumeMeasure = LengthPerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerVolumeMeasure', LengthPerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaMeasure with content type SIMPLE
class SecondMomentOfAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecondMomentOfAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1624, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SecondMomentOfAreaMeasure_uom', _module_typeBindings.SecondMomentOfAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1627, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1627, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SecondMomentOfAreaMeasure = SecondMomentOfAreaMeasure
Namespace.addCategoryObject('typeBinding', 'SecondMomentOfAreaMeasure', SecondMomentOfAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityMeasure with content type SIMPLE
class MagneticFluxDensityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1645, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxDensityMeasure_uom', _module_typeBindings.MagneticFluxDensityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1648, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1648, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxDensityMeasure = MagneticFluxDensityMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityMeasure', MagneticFluxDensityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaMeasure with content type SIMPLE
class VolumePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1694, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerAreaMeasure_uom', _module_typeBindings.VolumePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1697, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1697, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerAreaMeasure = VolumePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerAreaMeasure', VolumePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightMeasure with content type SIMPLE
class QuantityOfLightMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityOfLightMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1708, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_QuantityOfLightMeasure_uom', _module_typeBindings.QuantityOfLightUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1711, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1711, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.QuantityOfLightMeasure = QuantityOfLightMeasure
Namespace.addCategoryObject('typeBinding', 'QuantityOfLightMeasure', QuantityOfLightMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyMeasure with content type SIMPLE
class LuminousEfficacyMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousEfficacyMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1722, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousEfficacyMeasure_uom', _module_typeBindings.LuminousEfficacyUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1725, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1725, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousEfficacyMeasure = LuminousEfficacyMeasure
Namespace.addCategoryObject('typeBinding', 'LuminousEfficacyMeasure', LuminousEfficacyMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeMeasure with content type SIMPLE
class AreaPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1736, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerTimeMeasure_uom', _module_typeBindings.AreaPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1739, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1739, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerTimeMeasure = AreaPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'AreaPerTimeMeasure', AreaPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateMeasure with content type SIMPLE
class VolumeFlowRatePerVolumeFlowRateMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeFlowRatePerVolumeFlowRateMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1750, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumeFlowRatePerVolumeFlowRateMeasure_uom', _module_typeBindings.VolumeFlowRatePerVolumeFlowRateUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1753, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1753, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumeFlowRatePerVolumeFlowRateMeasure = VolumeFlowRatePerVolumeFlowRateMeasure
Namespace.addCategoryObject('typeBinding', 'VolumeFlowRatePerVolumeFlowRateMeasure', VolumeFlowRatePerVolumeFlowRateMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentumMeasure with content type SIMPLE
class MomentumMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentumMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentumMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1757, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentumMeasure_uom', _module_typeBindings.MomentumUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1760, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1760, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentumMeasure = MomentumMeasure
Namespace.addCategoryObject('typeBinding', 'MomentumMeasure', MomentumMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeMeasure with content type SIMPLE
class PowerPerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1764, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerVolumeMeasure_uom', _module_typeBindings.PowerPerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1767, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1767, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerVolumeMeasure = PowerPerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'PowerPerVolumeMeasure', PowerPerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityMeasure with content type SIMPLE
class ThermalDiffusivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDiffusivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1771, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalDiffusivityMeasure_uom', _module_typeBindings.ThermalDiffusivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1774, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1774, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalDiffusivityMeasure = ThermalDiffusivityMeasure
Namespace.addCategoryObject('typeBinding', 'ThermalDiffusivityMeasure', ThermalDiffusivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightMeasure with content type SIMPLE
class DiffusiveTimeOfFlightMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusiveTimeOfFlightMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1778, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DiffusiveTimeOfFlightMeasure_uom', _module_typeBindings.DiffusiveTimeOfFlightUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1781, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1781, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DiffusiveTimeOfFlightMeasure = DiffusiveTimeOfFlightMeasure
Namespace.addCategoryObject('typeBinding', 'DiffusiveTimeOfFlightMeasure', DiffusiveTimeOfFlightMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthMeasure with content type SIMPLE
class LogarithmicPowerRatioPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1785, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LogarithmicPowerRatioPerLengthMeasure_uom', _module_typeBindings.LogarithmicPowerRatioPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1788, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1788, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LogarithmicPowerRatioPerLengthMeasure = LogarithmicPowerRatioPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioPerLengthMeasure', LogarithmicPowerRatioPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeMeasure with content type SIMPLE
class ReciprocalTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1792, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalTimeMeasure_uom', _module_typeBindings.ReciprocalTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1795, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1795, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalTimeMeasure = ReciprocalTimeMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalTimeMeasure', ReciprocalTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityMeasure with content type SIMPLE
class SpecificHeatCapacityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecificHeatCapacityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1799, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SpecificHeatCapacityMeasure_uom', _module_typeBindings.SpecificHeatCapacityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1802, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1802, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SpecificHeatCapacityMeasure = SpecificHeatCapacityMeasure
Namespace.addCategoryObject('typeBinding', 'SpecificHeatCapacityMeasure', SpecificHeatCapacityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropMeasure with content type SIMPLE
class PotentialDifferencePerPowerDropMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PotentialDifferencePerPowerDropMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1806, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PotentialDifferencePerPowerDropMeasure_uom', _module_typeBindings.PotentialDifferencePerPowerDropUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1809, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1809, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PotentialDifferencePerPowerDropMeasure = PotentialDifferencePerPowerDropMeasure
Namespace.addCategoryObject('typeBinding', 'PotentialDifferencePerPowerDropMeasure', PotentialDifferencePerPowerDropMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaMeasure with content type SIMPLE
class MomentOfInertiaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfInertiaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1813, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentOfInertiaMeasure_uom', _module_typeBindings.MomentOfInertiaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1816, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1816, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentOfInertiaMeasure = MomentOfInertiaMeasure
Namespace.addCategoryObject('typeBinding', 'MomentOfInertiaMeasure', MomentOfInertiaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthMeasure with content type SIMPLE
class MassPerTimePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1834, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimePerLengthMeasure_uom', _module_typeBindings.MassPerTimePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1837, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1837, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimePerLengthMeasure = MassPerTimePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerLengthMeasure', MassPerTimePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolecularWeightMeasure with content type SIMPLE
class MolecularWeightMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolecularWeightMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolecularWeightMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1841, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolecularWeightMeasure_uom', _module_typeBindings.MolecularWeightUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1844, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1844, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolecularWeightMeasure = MolecularWeightMeasure
Namespace.addCategoryObject('typeBinding', 'MolecularWeightMeasure', MolecularWeightMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityMeasure with content type SIMPLE
class ActivityOfRadioactivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActivityOfRadioactivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1848, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ActivityOfRadioactivityMeasure_uom', _module_typeBindings.ActivityOfRadioactivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1851, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1851, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ActivityOfRadioactivityMeasure = ActivityOfRadioactivityMeasure
Namespace.addCategoryObject('typeBinding', 'ActivityOfRadioactivityMeasure', ActivityOfRadioactivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeMeasure with content type SIMPLE
class SignalingEventPerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignalingEventPerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1855, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SignalingEventPerTimeMeasure_uom', _module_typeBindings.SignalingEventPerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1858, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1858, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SignalingEventPerTimeMeasure = SignalingEventPerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'SignalingEventPerTimeMeasure', SignalingEventPerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyMeasure with content type SIMPLE
class FrequencyMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1876, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_FrequencyMeasure_uom', _module_typeBindings.FrequencyUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1879, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1879, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.FrequencyMeasure = FrequencyMeasure
Namespace.addCategoryObject('typeBinding', 'FrequencyMeasure', FrequencyMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalMeasure with content type SIMPLE
class FrequencyIntervalMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyIntervalMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1883, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_FrequencyIntervalMeasure_uom', _module_typeBindings.FrequencyIntervalUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1886, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1886, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.FrequencyIntervalMeasure = FrequencyIntervalMeasure
Namespace.addCategoryObject('typeBinding', 'FrequencyIntervalMeasure', FrequencyIntervalMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}CapacitanceMeasure with content type SIMPLE
class CapacitanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}CapacitanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CapacitanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1890, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_CapacitanceMeasure_uom', _module_typeBindings.CapacitanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1893, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1893, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.CapacitanceMeasure = CapacitanceMeasure
Namespace.addCategoryObject('typeBinding', 'CapacitanceMeasure', CapacitanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityMeasure with content type SIMPLE
class ElectricalResistivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1897, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricalResistivityMeasure_uom', _module_typeBindings.ElectricalResistivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1900, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1900, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricalResistivityMeasure = ElectricalResistivityMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricalResistivityMeasure', ElectricalResistivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassLengthMeasure with content type SIMPLE
class MassLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1904, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassLengthMeasure_uom', _module_typeBindings.MassLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1907, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1907, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassLengthMeasure = MassLengthMeasure
Namespace.addCategoryObject('typeBinding', 'MassLengthMeasure', MassLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaMeasure with content type SIMPLE
class ReciprocalAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1918, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalAreaMeasure_uom', _module_typeBindings.ReciprocalAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1921, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1921, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalAreaMeasure = ReciprocalAreaMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalAreaMeasure', ReciprocalAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityMeasure with content type SIMPLE
class KinematicViscosityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KinematicViscosityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1939, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_KinematicViscosityMeasure_uom', _module_typeBindings.KinematicViscosityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1942, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1942, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.KinematicViscosityMeasure = KinematicViscosityMeasure
Namespace.addCategoryObject('typeBinding', 'KinematicViscosityMeasure', KinematicViscosityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}InductanceMeasure with content type SIMPLE
class InductanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}InductanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InductanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1953, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_InductanceMeasure_uom', _module_typeBindings.InductanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1956, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1956, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.InductanceMeasure = InductanceMeasure
Namespace.addCategoryObject('typeBinding', 'InductanceMeasure', InductanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeMeasure with content type SIMPLE
class TimePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1960, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerVolumeMeasure_uom', _module_typeBindings.TimePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1963, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1963, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerVolumeMeasure = TimePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'TimePerVolumeMeasure', TimePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthMeasure with content type SIMPLE
class ForcePerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1967, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerLengthMeasure_uom', _module_typeBindings.ForcePerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1970, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1970, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerLengthMeasure = ForcePerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'ForcePerLengthMeasure', ForcePerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeMeasure with content type SIMPLE
class AmountOfSubstancePerTimeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1974, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerTimeMeasure_uom', _module_typeBindings.AmountOfSubstancePerTimeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1977, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1977, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerTimeMeasure = AmountOfSubstancePerTimeMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimeMeasure', AmountOfSubstancePerTimeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureMeasure with content type SIMPLE
class LengthPerTemperatureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTemperatureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2002, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerTemperatureMeasure_uom', _module_typeBindings.LengthPerTemperatureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2005, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2005, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerTemperatureMeasure = LengthPerTemperatureMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerTemperatureMeasure', LengthPerTemperatureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthMeasure with content type SIMPLE
class VolumePerTimeLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2037, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimeLengthMeasure_uom', _module_typeBindings.VolumePerTimeLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2040, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2040, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimeLengthMeasure = VolumePerTimeLengthMeasure
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeLengthMeasure', VolumePerTimeLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaMeasure with content type SIMPLE
class PressureSquaredPerForceTimePerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredPerForceTimePerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2044, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureSquaredPerForceTimePerAreaMeasure_uom', _module_typeBindings.PressureSquaredPerForceTimePerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2047, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2047, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureSquaredPerForceTimePerAreaMeasure = PressureSquaredPerForceTimePerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'PressureSquaredPerForceTimePerAreaMeasure', PressureSquaredPerForceTimePerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeMeasure with content type SIMPLE
class AnglePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2051, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AnglePerVolumeMeasure_uom', _module_typeBindings.AnglePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2054, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2054, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AnglePerVolumeMeasure = AnglePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'AnglePerVolumeMeasure', AnglePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureMeasure with content type SIMPLE
class LengthPerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2058, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerPressureMeasure_uom', _module_typeBindings.LengthPerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2061, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2061, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerPressureMeasure = LengthPerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'LengthPerPressureMeasure', LengthPerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityMeasure with content type SIMPLE
class ThermalConductivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2086, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalConductivityMeasure_uom', _module_typeBindings.ThermalConductivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2089, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2089, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalConductivityMeasure = ThermalConductivityMeasure
Namespace.addCategoryObject('typeBinding', 'ThermalConductivityMeasure', ThermalConductivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentMeasure with content type SIMPLE
class ElectromagneticMomentMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectromagneticMomentMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2107, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectromagneticMomentMeasure_uom', _module_typeBindings.ElectromagneticMomentUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2110, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2110, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectromagneticMomentMeasure = ElectromagneticMomentMeasure
Namespace.addCategoryObject('typeBinding', 'ElectromagneticMomentMeasure', ElectromagneticMomentMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeMeasure with content type SIMPLE
class EnergyPerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2121, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerVolumeMeasure_uom', _module_typeBindings.EnergyPerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2124, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2124, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerVolumeMeasure = EnergyPerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyPerVolumeMeasure', EnergyPerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeMeasure with content type SIMPLE
class ElectricChargePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2128, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerVolumeMeasure_uom', _module_typeBindings.ElectricChargePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2131, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2131, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerVolumeMeasure = ElectricChargePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerVolumeMeasure', ElectricChargePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientMeasure with content type SIMPLE
class VolumetricHeatTransferCoefficientMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricHeatTransferCoefficientMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2135, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumetricHeatTransferCoefficientMeasure_uom', _module_typeBindings.VolumetricHeatTransferCoefficientUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2138, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2138, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumetricHeatTransferCoefficientMeasure = VolumetricHeatTransferCoefficientMeasure
Namespace.addCategoryObject('typeBinding', 'VolumetricHeatTransferCoefficientMeasure', VolumetricHeatTransferCoefficientMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeMeasure with content type SIMPLE
class PressurePerVolumeMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerVolumeMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2142, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerVolumeMeasure_uom', _module_typeBindings.PressurePerVolumeUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2145, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2145, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerVolumeMeasure = PressurePerVolumeMeasure
Namespace.addCategoryObject('typeBinding', 'PressurePerVolumeMeasure', PressurePerVolumeMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerMassMeasure with content type SIMPLE
class TimePerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2149, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerMassMeasure_uom', _module_typeBindings.TimePerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2152, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2152, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerMassMeasure = TimePerMassMeasure
Namespace.addCategoryObject('typeBinding', 'TimePerMassMeasure', TimePerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthMeasure with content type SIMPLE
class ReciprocalLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2170, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalLengthMeasure_uom', _module_typeBindings.ReciprocalLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2173, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2173, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalLengthMeasure = ReciprocalLengthMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalLengthMeasure', ReciprocalLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityMeasure with content type SIMPLE
class DynamicViscosityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicViscosityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2205, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DynamicViscosityMeasure_uom', _module_typeBindings.DynamicViscosityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2208, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2208, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DynamicViscosityMeasure = DynamicViscosityMeasure
Namespace.addCategoryObject('typeBinding', 'DynamicViscosityMeasure', DynamicViscosityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassMeasure with content type SIMPLE
class MassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2247, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassMeasure_uom', _module_typeBindings.MassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2250, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2250, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassMeasure = MassMeasure
Namespace.addCategoryObject('typeBinding', 'MassMeasure', MassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerMeasure with content type SIMPLE
class NormalizedPowerMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NormalizedPowerMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2296, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_NormalizedPowerMeasure_uom', _module_typeBindings.NormalizedPowerUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2299, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2299, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.NormalizedPowerMeasure = NormalizedPowerMeasure
Namespace.addCategoryObject('typeBinding', 'NormalizedPowerMeasure', NormalizedPowerMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioMeasure with content type SIMPLE
class LogarithmicPowerRatioMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2317, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LogarithmicPowerRatioMeasure_uom', _module_typeBindings.LogarithmicPowerRatioUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2320, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2320, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LogarithmicPowerRatioMeasure = LogarithmicPowerRatioMeasure
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioMeasure', LogarithmicPowerRatioMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationMeasure with content type SIMPLE
class AngularAccelerationMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularAccelerationMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2324, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AngularAccelerationMeasure_uom', _module_typeBindings.AngularAccelerationUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2327, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2327, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AngularAccelerationMeasure = AngularAccelerationMeasure
Namespace.addCategoryObject('typeBinding', 'AngularAccelerationMeasure', AngularAccelerationMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassMeasure with content type SIMPLE
class ReciprocalMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2331, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalMassMeasure_uom', _module_typeBindings.ReciprocalMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2334, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2334, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalMassMeasure = ReciprocalMassMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassMeasure', ReciprocalMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceMeasure with content type SIMPLE
class ReciprocalForceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalForceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2338, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalForceMeasure_uom', _module_typeBindings.ReciprocalForceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2341, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2341, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalForceMeasure = ReciprocalForceMeasure
Namespace.addCategoryObject('typeBinding', 'ReciprocalForceMeasure', ReciprocalForceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PlaneAngleMeasure with content type SIMPLE
class PlaneAngleMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PlaneAngleMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlaneAngleMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2345, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PlaneAngleMeasure_uom', _module_typeBindings.PlaneAngleUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2348, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2348, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PlaneAngleMeasure = PlaneAngleMeasure
Namespace.addCategoryObject('typeBinding', 'PlaneAngleMeasure', PlaneAngleMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaMeasure with content type SIMPLE
class EnergyLengthPerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2352, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyLengthPerAreaMeasure_uom', _module_typeBindings.EnergyLengthPerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2355, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2355, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyLengthPerAreaMeasure = EnergyLengthPerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerAreaMeasure', EnergyLengthPerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassMeasure with content type SIMPLE
class EnergyPerMassMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2366, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerMassMeasure_uom', _module_typeBindings.EnergyPerMassUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2369, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2369, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerMassMeasure = EnergyPerMassMeasure
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassMeasure', EnergyPerMassMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureMeasure with content type SIMPLE
class MassPerVolumePerPressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerPressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerPressureMeasure_uom', _module_typeBindings.MassPerVolumePerPressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2453, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2453, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerPressureMeasure = MassPerVolumePerPressureMeasure
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerPressureMeasure', MassPerVolumePerPressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AngularVelocityMeasure with content type SIMPLE
class AngularVelocityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AngularVelocityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularVelocityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2464, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AngularVelocityMeasure_uom', _module_typeBindings.AngularVelocityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2467, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2467, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AngularVelocityMeasure = AngularVelocityMeasure
Namespace.addCategoryObject('typeBinding', 'AngularVelocityMeasure', AngularVelocityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityMeasure with content type SIMPLE
class ElectricConductivityMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductivityMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2471, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricConductivityMeasure_uom', _module_typeBindings.ElectricConductivityUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2474, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2474, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricConductivityMeasure = ElectricConductivityMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricConductivityMeasure', ElectricConductivityMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceMeasure with content type SIMPLE
class AmountOfSubstancePerAmountOfSubstanceMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAmountOfSubstanceMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2506, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerAmountOfSubstanceMeasure_uom', _module_typeBindings.AmountOfSubstancePerAmountOfSubstanceUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2509, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2509, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerAmountOfSubstanceMeasure = AmountOfSubstancePerAmountOfSubstanceMeasure
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAmountOfSubstanceMeasure', AmountOfSubstancePerAmountOfSubstanceMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthMeasure with content type SIMPLE
class ElectricFieldStrengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricFieldStrengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2513, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricFieldStrengthMeasure_uom', _module_typeBindings.ElectricFieldStrengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2516, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2516, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricFieldStrengthMeasure = ElectricFieldStrengthMeasure
Namespace.addCategoryObject('typeBinding', 'ElectricFieldStrengthMeasure', ElectricFieldStrengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaMeasure with content type SIMPLE
class PowerPerAreaMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerAreaMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2520, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerAreaMeasure_uom', _module_typeBindings.PowerPerAreaUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2523, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2523, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerAreaMeasure = PowerPerAreaMeasure
Namespace.addCategoryObject('typeBinding', 'PowerPerAreaMeasure', PowerPerAreaMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthMeasure with content type SIMPLE
class MagneticFluxDensityPerLengthMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityPerLengthMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2527, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxDensityPerLengthMeasure_uom', _module_typeBindings.MagneticFluxDensityPerLengthUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2530, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2530, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxDensityPerLengthMeasure = MagneticFluxDensityPerLengthMeasure
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityPerLengthMeasure', MagneticFluxDensityPerLengthMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateMeasure with content type SIMPLE
class VerticalCoordinateMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalCoordinateMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2548, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VerticalCoordinateMeasure_uom', _module_typeBindings.VerticalCoordinateUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2551, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2551, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VerticalCoordinateMeasure = VerticalCoordinateMeasure
Namespace.addCategoryObject('typeBinding', 'VerticalCoordinateMeasure', VerticalCoordinateMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureMeasure with content type SIMPLE
class PressureMeasure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureMeasure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureMeasure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2555, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureMeasure_uom', _module_typeBindings.PressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2558, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2558, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureMeasure = PressureMeasure
Namespace.addCategoryObject('typeBinding', 'PressureMeasure', PressureMeasure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbstractObject with content type ELEMENT_ONLY
class AbstractObject (pyxb.binding.basis.complexTypeDefinition):
    """The parent class for all top-level elements across the Energistics MLs. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractObject')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 80, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Aliases uses Python identifier Aliases
    __Aliases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Aliases'), 'Aliases', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_httpwww_energistics_orgenergymldatacommonv2Aliases', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3), )

    
    Aliases = property(__Aliases.value, __Aliases.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Citation uses Python identifier Citation
    __Citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Citation'), 'Citation', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_httpwww_energistics_orgenergymldatacommonv2Citation', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3), )

    
    Citation = property(__Citation.value, __Citation.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}CustomData uses Python identifier CustomData
    __CustomData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CustomData'), 'CustomData', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_httpwww_energistics_orgenergymldatacommonv2CustomData', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3), )

    
    CustomData = property(__CustomData.value, __CustomData.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue uses Python identifier ExtensionNameValue
    __ExtensionNameValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue'), 'ExtensionNameValue', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_httpwww_energistics_orgenergymldatacommonv2ExtensionNameValue', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3), )

    
    ExtensionNameValue = property(__ExtensionNameValue.value, __ExtensionNameValue.set, None, None)

    
    # Attribute objectVersion uses Python identifier objectVersion
    __objectVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'objectVersion'), 'objectVersion', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_objectVersion', _module_typeBindings.String64)
    __objectVersion._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 90, 2)
    __objectVersion._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 90, 2)
    
    objectVersion = property(__objectVersion.value, __objectVersion.set, None, None)

    
    # Attribute schemaVersion uses Python identifier schemaVersion
    __schemaVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'schemaVersion'), 'schemaVersion', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_schemaVersion', _module_typeBindings.String64, required=True)
    __schemaVersion._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 91, 2)
    __schemaVersion._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 91, 2)
    
    schemaVersion = property(__schemaVersion.value, __schemaVersion.set, None, None)

    
    # Attribute uuid uses Python identifier uuid
    __uuid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uuid'), 'uuid', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_uuid', _module_typeBindings.UuidString, required=True)
    __uuid._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 92, 2)
    __uuid._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 92, 2)
    
    uuid = property(__uuid.value, __uuid.set, None, None)

    
    # Attribute existenceKind uses Python identifier existenceKind
    __existenceKind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'existenceKind'), 'existenceKind', '__httpwww_energistics_orgenergymldatacommonv2_AbstractObject_existenceKind', _module_typeBindings.ExistenceKind)
    __existenceKind._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 93, 2)
    __existenceKind._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 93, 2)
    
    existenceKind = property(__existenceKind.value, __existenceKind.set, None, 'A lifecycle state like actual, required, planned, predicted, etc. This is used to qualify any top-level element (from Epicentre 2.1).')

    _ElementMap.update({
        __Aliases.name() : __Aliases,
        __Citation.name() : __Citation,
        __CustomData.name() : __CustomData,
        __ExtensionNameValue.name() : __ExtensionNameValue
    })
    _AttributeMap.update({
        __objectVersion.name() : __objectVersion,
        __schemaVersion.name() : __schemaVersion,
        __uuid.name() : __uuid,
        __existenceKind.name() : __existenceKind
    })
_module_typeBindings.AbstractObject = AbstractObject
Namespace.addCategoryObject('typeBinding', 'AbstractObject', AbstractObject)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FloatExternalArray with content type ELEMENT_ONLY
class FloatExternalArray (FloatingPointExternalArray):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}FloatExternalArray with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FloatExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 303, 1)
    _ElementMap = FloatingPointExternalArray._ElementMap.copy()
    _AttributeMap = FloatingPointExternalArray._AttributeMap.copy()
    # Base type is FloatingPointExternalArray
    
    # Element Values ({http://www.energistics.org/energyml/data/commonv2}Values) inherited from {http://www.energistics.org/energyml/data/commonv2}FloatingPointExternalArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FloatExternalArray = FloatExternalArray
Namespace.addCategoryObject('typeBinding', 'FloatExternalArray', FloatExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DoubleExternalArray with content type ELEMENT_ONLY
class DoubleExternalArray (FloatingPointExternalArray):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DoubleExternalArray with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoubleExternalArray')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 465, 1)
    _ElementMap = FloatingPointExternalArray._ElementMap.copy()
    _AttributeMap = FloatingPointExternalArray._AttributeMap.copy()
    # Base type is FloatingPointExternalArray
    
    # Element Values ({http://www.energistics.org/energyml/data/commonv2}Values) inherited from {http://www.energistics.org/energyml/data/commonv2}FloatingPointExternalArray
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DoubleExternalArray = DoubleExternalArray
Namespace.addCategoryObject('typeBinding', 'DoubleExternalArray', DoubleExternalArray)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthMeasureExt with content type SIMPLE
class EnergyPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerLengthMeasureExt_uom', _module_typeBindings.EnergyPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 24, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 24, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerLengthMeasureExt = EnergyPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyPerLengthMeasureExt', EnergyPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeMeasureExt with content type SIMPLE
class TimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 28, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimeMeasureExt_uom', _module_typeBindings.TimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 31, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 31, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimeMeasureExt = TimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'TimeMeasureExt', TimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceMeasureExt with content type SIMPLE
class ForceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 42, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceMeasureExt_uom', _module_typeBindings.ForceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 45, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 45, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceMeasureExt = ForceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForceMeasureExt', ForceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeMeasureExt with content type SIMPLE
class PressurePerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 63, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerTimeMeasureExt_uom', _module_typeBindings.PressurePerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 66, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 66, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerTimeMeasureExt = PressurePerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressurePerTimeMeasureExt', PressurePerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APIGravityMeasureExt with content type SIMPLE
class APIGravityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APIGravityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGravityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 70, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APIGravityMeasureExt_uom', _module_typeBindings.APIGravityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 73, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 73, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APIGravityMeasureExt = APIGravityMeasureExt
Namespace.addCategoryObject('typeBinding', 'APIGravityMeasureExt', APIGravityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateMeasureExt with content type SIMPLE
class HeatFlowRateMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatFlowRateMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatFlowRateMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 126, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatFlowRateMeasureExt_uom', _module_typeBindings.HeatFlowRateUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 129, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 129, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatFlowRateMeasureExt = HeatFlowRateMeasureExt
Namespace.addCategoryObject('typeBinding', 'HeatFlowRateMeasureExt', HeatFlowRateMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceMeasureExt with content type SIMPLE
class ReciprocalForceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalForceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalForceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 133, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalForceMeasureExt_uom', _module_typeBindings.ReciprocalForceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 136, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 136, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalForceMeasureExt = ReciprocalForceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalForceMeasureExt', ReciprocalForceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureMeasureExt with content type SIMPLE
class TemperatureIntervalPerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 140, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerPressureMeasureExt_uom', _module_typeBindings.TemperatureIntervalPerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 143, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 143, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerPressureMeasureExt = TemperatureIntervalPerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerPressureMeasureExt', TemperatureIntervalPerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeMeasureExt with content type SIMPLE
class AnglePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 147, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AnglePerVolumeMeasureExt_uom', _module_typeBindings.AnglePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 150, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 150, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AnglePerVolumeMeasureExt = AnglePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'AnglePerVolumeMeasureExt', AnglePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceMeasureExt with content type SIMPLE
class ThermalResistanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalResistanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalResistanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 161, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalResistanceMeasureExt_uom', _module_typeBindings.ThermalResistanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 164, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 164, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalResistanceMeasureExt = ThermalResistanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermalResistanceMeasureExt', ThermalResistanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientMeasureExt with content type SIMPLE
class VolumetricHeatTransferCoefficientMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricHeatTransferCoefficientMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricHeatTransferCoefficientMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 168, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumetricHeatTransferCoefficientMeasureExt_uom', _module_typeBindings.VolumetricHeatTransferCoefficientUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 171, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 171, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumetricHeatTransferCoefficientMeasureExt = VolumetricHeatTransferCoefficientMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumetricHeatTransferCoefficientMeasureExt', VolumetricHeatTransferCoefficientMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseMeasureExt with content type SIMPLE
class AbsorbedDoseMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AbsorbedDoseMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorbedDoseMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 175, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AbsorbedDoseMeasureExt_uom', _module_typeBindings.AbsorbedDoseUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 178, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 178, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AbsorbedDoseMeasureExt = AbsorbedDoseMeasureExt
Namespace.addCategoryObject('typeBinding', 'AbsorbedDoseMeasureExt', AbsorbedDoseMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeMeasureExt with content type SIMPLE
class AreaPerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 189, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerVolumeMeasureExt_uom', _module_typeBindings.AreaPerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 192, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 192, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerVolumeMeasureExt = AreaPerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerVolumeMeasureExt', AreaPerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerMeasureExt with content type SIMPLE
class PowerMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 224, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerMeasureExt_uom', _module_typeBindings.PowerUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 227, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 227, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerMeasureExt = PowerMeasureExt
Namespace.addCategoryObject('typeBinding', 'PowerMeasureExt', PowerMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceMeasureExt with content type SIMPLE
class AmountOfSubstancePerAmountOfSubstanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAmountOfSubstanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAmountOfSubstanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 231, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerAmountOfSubstanceMeasureExt_uom', _module_typeBindings.AmountOfSubstancePerAmountOfSubstanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 234, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 234, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerAmountOfSubstanceMeasureExt = AmountOfSubstancePerAmountOfSubstanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAmountOfSubstanceMeasureExt', AmountOfSubstancePerAmountOfSubstanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeMeasureExt with content type SIMPLE
class VolumePerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 252, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimeMeasureExt_uom', _module_typeBindings.VolumePerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 255, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 255, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimeMeasureExt = VolumePerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeMeasureExt', VolumePerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LightExposureMeasureExt with content type SIMPLE
class LightExposureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LightExposureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LightExposureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 266, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LightExposureMeasureExt_uom', _module_typeBindings.LightExposureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 269, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 269, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LightExposureMeasureExt = LightExposureMeasureExt
Namespace.addCategoryObject('typeBinding', 'LightExposureMeasureExt', LightExposureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthMeasureExt with content type SIMPLE
class LengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 308, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthMeasureExt_uom', _module_typeBindings.LengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 311, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 311, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthMeasureExt = LengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthMeasureExt', LengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceMeasureExt with content type SIMPLE
class AmountOfSubstanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 322, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstanceMeasureExt_uom', _module_typeBindings.AmountOfSubstanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 325, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 325, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstanceMeasureExt = AmountOfSubstanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstanceMeasureExt', AmountOfSubstanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthMeasureExt with content type SIMPLE
class MassPerVolumePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 343, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerLengthMeasureExt_uom', _module_typeBindings.MassPerVolumePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 346, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 346, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerLengthMeasureExt = MassPerVolumePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerLengthMeasureExt', MassPerVolumePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityMeasureExt with content type SIMPLE
class ElectricConductivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 350, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricConductivityMeasureExt_uom', _module_typeBindings.ElectricConductivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 353, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 353, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricConductivityMeasureExt = ElectricConductivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricConductivityMeasureExt', ElectricConductivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalMeasureExt with content type SIMPLE
class TemperatureIntervalMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 357, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalMeasureExt_uom', _module_typeBindings.TemperatureIntervalUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 360, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 360, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalMeasureExt = TemperatureIntervalMeasureExt
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalMeasureExt', TemperatureIntervalMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarVolumeMeasureExt with content type SIMPLE
class MolarVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarVolumeMeasureExt_uom', _module_typeBindings.MolarVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 388, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 388, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarVolumeMeasureExt = MolarVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'MolarVolumeMeasureExt', MolarVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaMeasureExt with content type SIMPLE
class VolumePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 392, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerAreaMeasureExt_uom', _module_typeBindings.VolumePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 395, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 395, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerAreaMeasureExt = VolumePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerAreaMeasureExt', VolumePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthMeasureExt with content type SIMPLE
class ElectricFieldStrengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricFieldStrengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricFieldStrengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 399, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricFieldStrengthMeasureExt_uom', _module_typeBindings.ElectricFieldStrengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 402, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 402, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricFieldStrengthMeasureExt = ElectricFieldStrengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricFieldStrengthMeasureExt', ElectricFieldStrengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeMeasureExt with content type SIMPLE
class TimePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 406, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerVolumeMeasureExt_uom', _module_typeBindings.TimePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 409, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 409, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerVolumeMeasureExt = TimePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'TimePerVolumeMeasureExt', TimePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerLengthMeasureExt with content type SIMPLE
class MassPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 413, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerLengthMeasureExt_uom', _module_typeBindings.MassPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 416, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 416, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerLengthMeasureExt = MassPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerLengthMeasureExt', MassPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PlaneAngleMeasureExt with content type SIMPLE
class PlaneAngleMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PlaneAngleMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlaneAngleMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 427, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PlaneAngleMeasureExt_uom', _module_typeBindings.PlaneAngleUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 430, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 430, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PlaneAngleMeasureExt = PlaneAngleMeasureExt
Namespace.addCategoryObject('typeBinding', 'PlaneAngleMeasureExt', PlaneAngleMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeMeasureExt with content type SIMPLE
class VolumePerTimePerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 441, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerTimeMeasureExt_uom', _module_typeBindings.VolumePerTimePerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 444, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 444, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerTimeMeasureExt = VolumePerTimePerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerTimeMeasureExt', VolumePerTimePerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceMeasureExt with content type SIMPLE
class ElectricPotentialDifferenceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricPotentialDifferenceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricPotentialDifferenceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 455, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricPotentialDifferenceMeasureExt_uom', _module_typeBindings.ElectricPotentialDifferenceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 458, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 458, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricPotentialDifferenceMeasureExt = ElectricPotentialDifferenceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricPotentialDifferenceMeasureExt', ElectricPotentialDifferenceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityMeasureExt with content type SIMPLE
class MolarHeatCapacityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarHeatCapacityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarHeatCapacityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 462, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarHeatCapacityMeasureExt_uom', _module_typeBindings.MolarHeatCapacityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 465, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 465, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarHeatCapacityMeasureExt = MolarHeatCapacityMeasureExt
Namespace.addCategoryObject('typeBinding', 'MolarHeatCapacityMeasureExt', MolarHeatCapacityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DimensionlessMeasureExt with content type SIMPLE
class DimensionlessMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DimensionlessMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DimensionlessMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DimensionlessMeasureExt_uom', _module_typeBindings.DimensionlessUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 479, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 479, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DimensionlessMeasureExt = DimensionlessMeasureExt
Namespace.addCategoryObject('typeBinding', 'DimensionlessMeasureExt', DimensionlessMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceMeasureExt with content type SIMPLE
class ThermalConductanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 483, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalConductanceMeasureExt_uom', _module_typeBindings.ThermalConductanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 486, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 486, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalConductanceMeasureExt = ThermalConductanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermalConductanceMeasureExt', ThermalConductanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionMeasureExt with content type SIMPLE
class VolumetricThermalExpansionMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumetricThermalExpansionMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumetricThermalExpansionMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 497, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumetricThermalExpansionMeasureExt_uom', _module_typeBindings.VolumetricThermalExpansionUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 500, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 500, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumetricThermalExpansionMeasureExt = VolumetricThermalExpansionMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumetricThermalExpansionMeasureExt', VolumetricThermalExpansionMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeMeasureExt with content type SIMPLE
class AreaPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 518, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerTimeMeasureExt_uom', _module_typeBindings.AreaPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 521, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 521, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerTimeMeasureExt = AreaPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerTimeMeasureExt', AreaPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentMeasureExt with content type SIMPLE
class DoseEquivalentMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DoseEquivalentMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DoseEquivalentMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 525, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DoseEquivalentMeasureExt_uom', _module_typeBindings.DoseEquivalentUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 528, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 528, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DoseEquivalentMeasureExt = DoseEquivalentMeasureExt
Namespace.addCategoryObject('typeBinding', 'DoseEquivalentMeasureExt', DoseEquivalentMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}RadianceMeasureExt with content type SIMPLE
class RadianceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}RadianceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadianceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 532, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_RadianceMeasureExt_uom', _module_typeBindings.RadianceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 535, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 535, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.RadianceMeasureExt = RadianceMeasureExt
Namespace.addCategoryObject('typeBinding', 'RadianceMeasureExt', RadianceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaMeasureExt with content type SIMPLE
class EnergyPerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 539, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerAreaMeasureExt_uom', _module_typeBindings.EnergyPerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 542, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 542, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerAreaMeasureExt = EnergyPerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyPerAreaMeasureExt', EnergyPerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaMeasureExt with content type SIMPLE
class MomentOfInertiaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfInertiaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfInertiaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 553, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentOfInertiaMeasureExt_uom', _module_typeBindings.MomentOfInertiaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 556, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 556, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentOfInertiaMeasureExt = MomentOfInertiaMeasureExt
Namespace.addCategoryObject('typeBinding', 'MomentOfInertiaMeasureExt', MomentOfInertiaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassMeasureExt with content type SIMPLE
class ReciprocalMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalMassMeasureExt_uom', _module_typeBindings.ReciprocalMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 570, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 570, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalMassMeasureExt = ReciprocalMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassMeasureExt', ReciprocalMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureMeasureExt with content type SIMPLE
class EnergyLengthPerTimeAreaTemperatureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerTimeAreaTemperatureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerTimeAreaTemperatureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 588, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyLengthPerTimeAreaTemperatureMeasureExt_uom', _module_typeBindings.EnergyLengthPerTimeAreaTemperatureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 591, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 591, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyLengthPerTimeAreaTemperatureMeasureExt = EnergyLengthPerTimeAreaTemperatureMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerTimeAreaTemperatureMeasureExt', EnergyLengthPerTimeAreaTemperatureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthMeasureExt with content type SIMPLE
class AnglePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AnglePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnglePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 595, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AnglePerLengthMeasureExt_uom', _module_typeBindings.AnglePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 598, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 598, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AnglePerLengthMeasureExt = AnglePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'AnglePerLengthMeasureExt', AnglePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargeMeasureExt with content type SIMPLE
class ElectricChargeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 609, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargeMeasureExt_uom', _module_typeBindings.ElectricChargeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 612, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 612, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargeMeasureExt = ElectricChargeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricChargeMeasureExt', ElectricChargeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityMeasureExt with content type SIMPLE
class ElectricalResistivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricalResistivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 616, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricalResistivityMeasureExt_uom', _module_typeBindings.ElectricalResistivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 619, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 619, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricalResistivityMeasureExt = ElectricalResistivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricalResistivityMeasureExt', ElectricalResistivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaMeasureExt with content type SIMPLE
class AreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 630, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaMeasureExt_uom', _module_typeBindings.AreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 633, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 633, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaMeasureExt = AreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaMeasureExt', AreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MobilityMeasureExt with content type SIMPLE
class MobilityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MobilityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobilityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 644, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MobilityMeasureExt_uom', _module_typeBindings.MobilityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 647, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 647, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MobilityMeasureExt = MobilityMeasureExt
Namespace.addCategoryObject('typeBinding', 'MobilityMeasureExt', MobilityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeMeasureExt with content type SIMPLE
class ForcePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 700, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerVolumeMeasureExt_uom', _module_typeBindings.ForcePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 703, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 703, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerVolumeMeasureExt = ForcePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForcePerVolumeMeasureExt', ForcePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeMeasureExt with content type SIMPLE
class AmountOfSubstancePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 707, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerVolumeMeasureExt_uom', _module_typeBindings.AmountOfSubstancePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 710, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 710, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerVolumeMeasureExt = AmountOfSubstancePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerVolumeMeasureExt', AmountOfSubstancePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerMassMeasureExt with content type SIMPLE
class LengthPerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 721, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerMassMeasureExt_uom', _module_typeBindings.LengthPerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 724, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 724, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerMassMeasureExt = LengthPerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerMassMeasureExt', LengthPerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassLengthMeasureExt with content type SIMPLE
class MassLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 735, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassLengthMeasureExt_uom', _module_typeBindings.MassLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 738, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 738, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassLengthMeasureExt = MassLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassLengthMeasureExt', MassLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthMeasureExt with content type SIMPLE
class ForceLengthPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceLengthPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceLengthPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 756, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceLengthPerLengthMeasureExt_uom', _module_typeBindings.ForceLengthPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 759, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 759, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceLengthPerLengthMeasureExt = ForceLengthPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForceLengthPerLengthMeasureExt', ForceLengthPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityMeasureExt with content type SIMPLE
class MagneticFluxDensityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 770, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxDensityMeasureExt_uom', _module_typeBindings.MagneticFluxDensityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 773, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 773, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxDensityMeasureExt = MagneticFluxDensityMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityMeasureExt', MagneticFluxDensityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureMeasureExt with content type SIMPLE
class PressurePerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 777, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerPressureMeasureExt_uom', _module_typeBindings.PressurePerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 780, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 780, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerPressureMeasureExt = PressurePerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressurePerPressureMeasureExt', PressurePerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureMeasureExt with content type SIMPLE
class LengthPerTemperatureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTemperatureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTemperatureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 784, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerTemperatureMeasureExt_uom', _module_typeBindings.LengthPerTemperatureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 787, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 787, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerTemperatureMeasureExt = LengthPerTemperatureMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerTemperatureMeasureExt', LengthPerTemperatureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthMeasureExt with content type SIMPLE
class PermeabilityLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 798, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermeabilityLengthMeasureExt_uom', _module_typeBindings.PermeabilityLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 801, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 801, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermeabilityLengthMeasureExt = PermeabilityLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'PermeabilityLengthMeasureExt', PermeabilityLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityMeasureExt with content type SIMPLE
class DynamicViscosityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DynamicViscosityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicViscosityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 826, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DynamicViscosityMeasureExt_uom', _module_typeBindings.DynamicViscosityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 829, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 829, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DynamicViscosityMeasureExt = DynamicViscosityMeasureExt
Namespace.addCategoryObject('typeBinding', 'DynamicViscosityMeasureExt', DynamicViscosityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyMeasureExt with content type SIMPLE
class FrequencyMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 854, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_FrequencyMeasureExt_uom', _module_typeBindings.FrequencyUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 857, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 857, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.FrequencyMeasureExt = FrequencyMeasureExt
Namespace.addCategoryObject('typeBinding', 'FrequencyMeasureExt', FrequencyMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationMeasureExt with content type SIMPLE
class AngularAccelerationMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AngularAccelerationMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularAccelerationMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 861, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AngularAccelerationMeasureExt_uom', _module_typeBindings.AngularAccelerationUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 864, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 864, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AngularAccelerationMeasureExt = AngularAccelerationMeasureExt
Namespace.addCategoryObject('typeBinding', 'AngularAccelerationMeasureExt', AngularAccelerationMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceMeasureExt with content type SIMPLE
class AreaPerAmountOfSubstanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAmountOfSubstanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAmountOfSubstanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 868, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerAmountOfSubstanceMeasureExt_uom', _module_typeBindings.AreaPerAmountOfSubstanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 871, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 871, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerAmountOfSubstanceMeasureExt = AreaPerAmountOfSubstanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerAmountOfSubstanceMeasureExt', AreaPerAmountOfSubstanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolarEnergyMeasureExt with content type SIMPLE
class MolarEnergyMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolarEnergyMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolarEnergyMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 896, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolarEnergyMeasureExt_uom', _module_typeBindings.MolarEnergyUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 899, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 899, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolarEnergyMeasureExt = MolarEnergyMeasureExt
Namespace.addCategoryObject('typeBinding', 'MolarEnergyMeasureExt', MolarEnergyMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityMeasureExt with content type SIMPLE
class ElectricCurrentDensityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentDensityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentDensityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 903, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricCurrentDensityMeasureExt_uom', _module_typeBindings.ElectricCurrentDensityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 906, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 906, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricCurrentDensityMeasureExt = ElectricCurrentDensityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentDensityMeasureExt', ElectricCurrentDensityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt with content type SIMPLE
class ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 910, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt_uom', _module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 913, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 913, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt = ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt', ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationMeasureExt with content type SIMPLE
class VolumePerRotationMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerRotationMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerRotationMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 924, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerRotationMeasureExt_uom', _module_typeBindings.VolumePerRotationUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 927, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 927, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerRotationMeasureExt = VolumePerRotationMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerRotationMeasureExt', VolumePerRotationMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaMeasureExt with content type SIMPLE
class MassPerTimePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 959, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimePerAreaMeasureExt_uom', _module_typeBindings.MassPerTimePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 962, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 962, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimePerAreaMeasureExt = MassPerTimePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerAreaMeasureExt', MassPerTimePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerMassMeasureExt with content type SIMPLE
class MassPerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 973, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerMassMeasureExt_uom', _module_typeBindings.MassPerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 976, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 976, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerMassMeasureExt = MassPerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerMassMeasureExt', MassPerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityMeasureExt with content type SIMPLE
class KinematicViscosityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}KinematicViscosityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KinematicViscosityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 987, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_KinematicViscosityMeasureExt_uom', _module_typeBindings.KinematicViscosityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 990, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 990, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.KinematicViscosityMeasureExt = KinematicViscosityMeasureExt
Namespace.addCategoryObject('typeBinding', 'KinematicViscosityMeasureExt', KinematicViscosityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaMeasureExt with content type SIMPLE
class VolumePerTimePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 994, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerAreaMeasureExt_uom', _module_typeBindings.VolumePerTimePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 997, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 997, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerAreaMeasureExt = VolumePerTimePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerAreaMeasureExt', VolumePerTimePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}InductanceMeasureExt with content type SIMPLE
class InductanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}InductanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InductanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1001, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_InductanceMeasureExt_uom', _module_typeBindings.InductanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1004, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1004, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.InductanceMeasureExt = InductanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'InductanceMeasureExt', InductanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeMeasureExt with content type SIMPLE
class TemperatureIntervalPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1015, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerTimeMeasureExt_uom', _module_typeBindings.TemperatureIntervalPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1018, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1018, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerTimeMeasureExt = TemperatureIntervalPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerTimeMeasureExt', TemperatureIntervalPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureMeasureExt with content type SIMPLE
class ThermodynamicTemperatureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermodynamicTemperatureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermodynamicTemperatureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1022, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermodynamicTemperatureMeasureExt_uom', _module_typeBindings.ThermodynamicTemperatureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1025, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1025, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermodynamicTemperatureMeasureExt = ThermodynamicTemperatureMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermodynamicTemperatureMeasureExt', ThermodynamicTemperatureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceMeasureExt with content type SIMPLE
class ElectricConductanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricConductanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricConductanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1029, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricConductanceMeasureExt_uom', _module_typeBindings.ElectricConductanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1032, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1032, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricConductanceMeasureExt = ElectricConductanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricConductanceMeasureExt', ElectricConductanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureMeasureExt with content type SIMPLE
class LengthPerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1043, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerPressureMeasureExt_uom', _module_typeBindings.LengthPerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1046, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1046, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerPressureMeasureExt = LengthPerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerPressureMeasureExt', LengthPerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AngularVelocityMeasureExt with content type SIMPLE
class AngularVelocityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AngularVelocityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AngularVelocityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1050, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AngularVelocityMeasureExt_uom', _module_typeBindings.AngularVelocityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1053, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1053, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AngularVelocityMeasureExt = AngularVelocityMeasureExt
Namespace.addCategoryObject('typeBinding', 'AngularVelocityMeasureExt', AngularVelocityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionMeasureExt with content type SIMPLE
class LinearThermalExpansionMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LinearThermalExpansionMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearThermalExpansionMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1078, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LinearThermalExpansionMeasureExt_uom', _module_typeBindings.LinearThermalExpansionUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1081, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1081, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LinearThermalExpansionMeasureExt = LinearThermalExpansionMeasureExt
Namespace.addCategoryObject('typeBinding', 'LinearThermalExpansionMeasureExt', LinearThermalExpansionMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassMeasureExt with content type SIMPLE
class MassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1127, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassMeasureExt_uom', _module_typeBindings.MassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1130, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1130, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassMeasureExt = MassMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassMeasureExt', MassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentMeasureExt with content type SIMPLE
class ElectromagneticMomentMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectromagneticMomentMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectromagneticMomentMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1134, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectromagneticMomentMeasureExt_uom', _module_typeBindings.ElectromagneticMomentUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1137, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1137, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectromagneticMomentMeasureExt = ElectromagneticMomentMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectromagneticMomentMeasureExt', ElectromagneticMomentMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureMeasureExt with content type SIMPLE
class MassPerVolumePerTemperatureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerTemperatureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerTemperatureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1148, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerTemperatureMeasureExt_uom', _module_typeBindings.MassPerVolumePerTemperatureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1151, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1151, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerTemperatureMeasureExt = MassPerVolumePerTemperatureMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerTemperatureMeasureExt', MassPerVolumePerTemperatureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeMeasureExt with content type SIMPLE
class VolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1183, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumeMeasureExt_uom', _module_typeBindings.VolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1186, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1186, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumeMeasureExt = VolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumeMeasureExt', VolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassMeasureExt with content type SIMPLE
class EnergyPerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerMassMeasureExt_uom', _module_typeBindings.EnergyPerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1193, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1193, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerMassMeasureExt = EnergyPerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassMeasureExt', EnergyPerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateMeasureExt with content type SIMPLE
class VerticalCoordinateMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCoordinateMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalCoordinateMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1204, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VerticalCoordinateMeasureExt_uom', _module_typeBindings.VerticalCoordinateUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1207, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1207, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VerticalCoordinateMeasureExt = VerticalCoordinateMeasureExt
Namespace.addCategoryObject('typeBinding', 'VerticalCoordinateMeasureExt', VerticalCoordinateMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaMeasureExt with content type SIMPLE
class AmountOfSubstancePerTimePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1218, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerTimePerAreaMeasureExt_uom', _module_typeBindings.AmountOfSubstancePerTimePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1221, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1221, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerTimePerAreaMeasureExt = AmountOfSubstancePerTimePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimePerAreaMeasureExt', AmountOfSubstancePerTimePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthMeasureExt with content type SIMPLE
class TemperatureIntervalPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TemperatureIntervalPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureIntervalPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1225, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TemperatureIntervalPerLengthMeasureExt_uom', _module_typeBindings.TemperatureIntervalPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1228, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1228, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TemperatureIntervalPerLengthMeasureExt = TemperatureIntervalPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'TemperatureIntervalPerLengthMeasureExt', TemperatureIntervalPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioMeasureExt with content type SIMPLE
class LogarithmicPowerRatioMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1232, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LogarithmicPowerRatioMeasureExt_uom', _module_typeBindings.LogarithmicPowerRatioUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1235, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1235, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LogarithmicPowerRatioMeasureExt = LogarithmicPowerRatioMeasureExt
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioMeasureExt', LogarithmicPowerRatioMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APIGammaRayMeasureExt with content type SIMPLE
class APIGammaRayMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APIGammaRayMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIGammaRayMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1239, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APIGammaRayMeasureExt_uom', _module_typeBindings.APIGammaRayUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1242, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1242, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APIGammaRayMeasureExt = APIGammaRayMeasureExt
Namespace.addCategoryObject('typeBinding', 'APIGammaRayMeasureExt', APIGammaRayMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyMeasureExt with content type SIMPLE
class MassPerEnergyMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerEnergyMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerEnergyMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1274, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerEnergyMeasureExt_uom', _module_typeBindings.MassPerEnergyUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1277, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1277, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerEnergyMeasureExt = MassPerEnergyMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerEnergyMeasureExt', MassPerEnergyMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeMeasureExt with content type SIMPLE
class PressurePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressurePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressurePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1309, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressurePerVolumeMeasureExt_uom', _module_typeBindings.PressurePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1312, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1312, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressurePerVolumeMeasureExt = PressurePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressurePerVolumeMeasureExt', PressurePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureMeasureExt with content type SIMPLE
class MassPerVolumePerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumePerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumePerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1323, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumePerPressureMeasureExt_uom', _module_typeBindings.MassPerVolumePerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1326, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1326, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumePerPressureMeasureExt = MassPerVolumePerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerVolumePerPressureMeasureExt', MassPerVolumePerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthMeasureExt with content type SIMPLE
class LengthPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1330, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerLengthMeasureExt_uom', _module_typeBindings.LengthPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1333, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1333, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerLengthMeasureExt = LengthPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerLengthMeasureExt', LengthPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerLengthMeasureExt with content type SIMPLE
class TimePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1337, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerLengthMeasureExt_uom', _module_typeBindings.TimePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1340, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1340, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerLengthMeasureExt = TimePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'TimePerLengthMeasureExt', TimePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyMeasureExt with content type SIMPLE
class EnergyMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1351, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyMeasureExt_uom', _module_typeBindings.EnergyUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1354, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1354, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyMeasureExt = EnergyMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyMeasureExt', EnergyMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityMeasureExt with content type SIMPLE
class MagneticPermeabilityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticPermeabilityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticPermeabilityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1358, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticPermeabilityMeasureExt_uom', _module_typeBindings.MagneticPermeabilityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1361, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1361, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticPermeabilityMeasureExt = MagneticPermeabilityMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticPermeabilityMeasureExt', MagneticPermeabilityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeMeasureExt with content type SIMPLE
class EnergyPerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1365, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerVolumeMeasureExt_uom', _module_typeBindings.EnergyPerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1368, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1368, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerVolumeMeasureExt = EnergyPerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyPerVolumeMeasureExt', EnergyPerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatCapacityMeasureExt with content type SIMPLE
class HeatCapacityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatCapacityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatCapacityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1379, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatCapacityMeasureExt_uom', _module_typeBindings.HeatCapacityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1382, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1382, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatCapacityMeasureExt = HeatCapacityMeasureExt
Namespace.addCategoryObject('typeBinding', 'HeatCapacityMeasureExt', HeatCapacityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IlluminanceMeasureExt with content type SIMPLE
class IlluminanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}IlluminanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IlluminanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1386, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_IlluminanceMeasureExt_uom', _module_typeBindings.IlluminanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1389, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1389, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.IlluminanceMeasureExt = IlluminanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'IlluminanceMeasureExt', IlluminanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaMeasureExt with content type SIMPLE
class PowerPerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1393, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerAreaMeasureExt_uom', _module_typeBindings.PowerPerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1396, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1396, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerAreaMeasureExt = PowerPerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'PowerPerAreaMeasureExt', PowerPerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeMeasureExt with content type SIMPLE
class AmountOfSubstancePerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1414, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerTimeMeasureExt_uom', _module_typeBindings.AmountOfSubstancePerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1417, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1417, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerTimeMeasureExt = AmountOfSubstancePerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerTimeMeasureExt', AmountOfSubstancePerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForceAreaMeasureExt with content type SIMPLE
class ForceAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForceAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForceAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1435, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForceAreaMeasureExt_uom', _module_typeBindings.ForceAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1438, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1438, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForceAreaMeasureExt = ForceAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForceAreaMeasureExt', ForceAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthMeasureExt with content type SIMPLE
class ReciprocalLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1442, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalLengthMeasureExt_uom', _module_typeBindings.ReciprocalLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1445, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1445, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalLengthMeasureExt = ReciprocalLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalLengthMeasureExt', ReciprocalLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthMeasureExt with content type SIMPLE
class MagneticFluxDensityPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxDensityPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxDensityPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxDensityPerLengthMeasureExt_uom', _module_typeBindings.MagneticFluxDensityPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1466, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1466, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxDensityPerLengthMeasureExt = MagneticFluxDensityPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticFluxDensityPerLengthMeasureExt', MagneticFluxDensityPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthMeasureExt with content type SIMPLE
class VolumePerTimePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1470, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerLengthMeasureExt_uom', _module_typeBindings.VolumePerTimePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1473, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1473, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerLengthMeasureExt = VolumePerTimePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerLengthMeasureExt', VolumePerTimePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureMeasureExt with content type SIMPLE
class VolumePerTimePerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1498, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerPressureMeasureExt_uom', _module_typeBindings.VolumePerTimePerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1501, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1501, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerPressureMeasureExt = VolumePerTimePerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureMeasureExt', VolumePerTimePerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeMeasureExt with content type SIMPLE
class ReciprocalMassTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalMassTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalMassTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1512, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalMassTimeMeasureExt_uom', _module_typeBindings.ReciprocalMassTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1515, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1515, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalMassTimeMeasureExt = ReciprocalMassTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalMassTimeMeasureExt', ReciprocalMassTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousFluxMeasureExt with content type SIMPLE
class LuminousFluxMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousFluxMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousFluxMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1519, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousFluxMeasureExt_uom', _module_typeBindings.LuminousFluxUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1522, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1522, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousFluxMeasureExt = LuminousFluxMeasureExt
Namespace.addCategoryObject('typeBinding', 'LuminousFluxMeasureExt', LuminousFluxMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerMeasureExt with content type SIMPLE
class PowerPerPowerMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerPowerMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerPowerMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1547, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerPowerMeasureExt_uom', _module_typeBindings.PowerPerPowerUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1550, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1550, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerPowerMeasureExt = PowerPerPowerMeasureExt
Namespace.addCategoryObject('typeBinding', 'PowerPerPowerMeasureExt', PowerPerPowerMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateMeasureExt with content type SIMPLE
class VolumeFlowRatePerVolumeFlowRateMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumeFlowRatePerVolumeFlowRateMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumeFlowRatePerVolumeFlowRateMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1568, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumeFlowRatePerVolumeFlowRateMeasureExt_uom', _module_typeBindings.VolumeFlowRatePerVolumeFlowRateUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1571, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1571, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumeFlowRatePerVolumeFlowRateMeasureExt = VolumeFlowRatePerVolumeFlowRateMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumeFlowRatePerVolumeFlowRateMeasureExt', VolumeFlowRatePerVolumeFlowRateMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeMeasureExt with content type SIMPLE
class ReciprocalTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1575, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalTimeMeasureExt_uom', _module_typeBindings.ReciprocalTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1578, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1578, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalTimeMeasureExt = ReciprocalTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalTimeMeasureExt', ReciprocalTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthMeasureExt with content type SIMPLE
class ElectricResistancePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistancePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistancePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1582, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricResistancePerLengthMeasureExt_uom', _module_typeBindings.ElectricResistancePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1585, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1585, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricResistancePerLengthMeasureExt = ElectricResistancePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricResistancePerLengthMeasureExt', ElectricResistancePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalMeasureExt with content type SIMPLE
class FrequencyIntervalMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}FrequencyIntervalMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyIntervalMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1596, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_FrequencyIntervalMeasureExt_uom', _module_typeBindings.FrequencyIntervalUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1599, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1599, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.FrequencyIntervalMeasureExt = FrequencyIntervalMeasureExt
Namespace.addCategoryObject('typeBinding', 'FrequencyIntervalMeasureExt', FrequencyIntervalMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityMeasureExt with content type SIMPLE
class CationExchangeCapacityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}CationExchangeCapacityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CationExchangeCapacityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1610, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_CationExchangeCapacityMeasureExt_uom', _module_typeBindings.CationExchangeCapacityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1613, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1613, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.CationExchangeCapacityMeasureExt = CationExchangeCapacityMeasureExt
Namespace.addCategoryObject('typeBinding', 'CationExchangeCapacityMeasureExt', CationExchangeCapacityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerTimeMeasureExt with content type SIMPLE
class TimePerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1631, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerTimeMeasureExt_uom', _module_typeBindings.TimePerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1634, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1634, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerTimeMeasureExt = TimePerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'TimePerTimeMeasureExt', TimePerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaMeasureExt with content type SIMPLE
class SecondMomentOfAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SecondMomentOfAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecondMomentOfAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1638, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SecondMomentOfAreaMeasureExt_uom', _module_typeBindings.SecondMomentOfAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1641, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1641, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SecondMomentOfAreaMeasureExt = SecondMomentOfAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'SecondMomentOfAreaMeasureExt', SecondMomentOfAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaMeasureExt with content type SIMPLE
class EnergyLengthPerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyLengthPerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyLengthPerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1652, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyLengthPerAreaMeasureExt_uom', _module_typeBindings.EnergyLengthPerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1655, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1655, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyLengthPerAreaMeasureExt = EnergyLengthPerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyLengthPerAreaMeasureExt', EnergyLengthPerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeMeasureExt with content type SIMPLE
class VolumePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1659, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerVolumeMeasureExt_uom', _module_typeBindings.VolumePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1662, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1662, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerVolumeMeasureExt = VolumePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerVolumeMeasureExt', VolumePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DipoleMomentMeasureExt with content type SIMPLE
class DipoleMomentMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DipoleMomentMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DipoleMomentMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1666, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DipoleMomentMeasureExt_uom', _module_typeBindings.DipoleMomentUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1669, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1669, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DipoleMomentMeasureExt = DipoleMomentMeasureExt
Namespace.addCategoryObject('typeBinding', 'DipoleMomentMeasureExt', DipoleMomentMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeMeasureExt with content type SIMPLE
class EnergyPerMassPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}EnergyPerMassPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyPerMassPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1673, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_EnergyPerMassPerTimeMeasureExt_uom', _module_typeBindings.EnergyPerMassPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1676, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1676, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.EnergyPerMassPerTimeMeasureExt = EnergyPerMassPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'EnergyPerMassPerTimeMeasureExt', EnergyPerMassPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientMeasureExt with content type SIMPLE
class HeatTransferCoefficientMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}HeatTransferCoefficientMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatTransferCoefficientMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1680, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_HeatTransferCoefficientMeasureExt_uom', _module_typeBindings.HeatTransferCoefficientUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1683, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1683, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.HeatTransferCoefficientMeasureExt = HeatTransferCoefficientMeasureExt
Namespace.addCategoryObject('typeBinding', 'HeatTransferCoefficientMeasureExt', HeatTransferCoefficientMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerMassMeasureExt with content type SIMPLE
class TimePerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}TimePerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimePerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1687, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_TimePerMassMeasureExt_uom', _module_typeBindings.TimePerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1690, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1690, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.TimePerMassMeasureExt = TimePerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'TimePerMassMeasureExt', TimePerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightMeasureExt with content type SIMPLE
class QuantityOfLightMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}QuantityOfLightMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QuantityOfLightMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1701, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_QuantityOfLightMeasureExt_uom', _module_typeBindings.QuantityOfLightUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1704, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1704, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.QuantityOfLightMeasureExt = QuantityOfLightMeasureExt
Namespace.addCategoryObject('typeBinding', 'QuantityOfLightMeasureExt', QuantityOfLightMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeMeasureExt with content type SIMPLE
class ReciprocalVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1715, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalVolumeMeasureExt_uom', _module_typeBindings.ReciprocalVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1718, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1718, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalVolumeMeasureExt = ReciprocalVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalVolumeMeasureExt', ReciprocalVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureMeasureExt with content type SIMPLE
class PressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1729, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureMeasureExt_uom', _module_typeBindings.PressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1732, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1732, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureMeasureExt = PressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressureMeasureExt', PressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxMeasureExt with content type SIMPLE
class MagneticFluxMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFluxMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFluxMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1743, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFluxMeasureExt_uom', _module_typeBindings.MagneticFluxUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1746, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1746, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFluxMeasureExt = MagneticFluxMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticFluxMeasureExt', MagneticFluxMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthMeasureExt with content type SIMPLE
class LogarithmicPowerRatioPerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LogarithmicPowerRatioPerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LogarithmicPowerRatioPerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1820, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LogarithmicPowerRatioPerLengthMeasureExt_uom', _module_typeBindings.LogarithmicPowerRatioPerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1823, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1823, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LogarithmicPowerRatioPerLengthMeasureExt = LogarithmicPowerRatioPerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'LogarithmicPowerRatioPerLengthMeasureExt', LogarithmicPowerRatioPerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaMeasureExt with content type SIMPLE
class AmountOfSubstancePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AmountOfSubstancePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmountOfSubstancePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1827, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AmountOfSubstancePerAreaMeasureExt_uom', _module_typeBindings.AmountOfSubstancePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1830, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1830, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AmountOfSubstancePerAreaMeasureExt = AmountOfSubstancePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'AmountOfSubstancePerAreaMeasureExt', AmountOfSubstancePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerMassMeasureExt with content type SIMPLE
class AreaPerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1862, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerMassMeasureExt_uom', _module_typeBindings.AreaPerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1865, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1865, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerMassMeasureExt = AreaPerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerMassMeasureExt', AreaPerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerCountMeasureExt with content type SIMPLE
class AreaPerCountMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerCountMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerCountMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1869, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerCountMeasureExt_uom', _module_typeBindings.AreaPerCountUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1872, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1872, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerCountMeasureExt = AreaPerCountMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerCountMeasureExt', AreaPerCountMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeMeasureExt with content type SIMPLE
class LengthPerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1911, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerVolumeMeasureExt_uom', _module_typeBindings.LengthPerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1914, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1914, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerVolumeMeasureExt = LengthPerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerVolumeMeasureExt', LengthPerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthMeasureExt with content type SIMPLE
class MassPerTimePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1925, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimePerLengthMeasureExt_uom', _module_typeBindings.MassPerTimePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1928, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1928, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimePerLengthMeasureExt = MassPerTimePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerTimePerLengthMeasureExt', MassPerTimePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerForceMeasureExt with content type SIMPLE
class ForcePerForceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerForceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerForceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1932, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerForceMeasureExt_uom', _module_typeBindings.ForcePerForceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1935, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1935, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerForceMeasureExt = ForcePerForceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForcePerForceMeasureExt', ForcePerForceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}APINeutronMeasureExt with content type SIMPLE
class APINeutronMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}APINeutronMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APINeutronMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1946, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_APINeutronMeasureExt_uom', _module_typeBindings.APINeutronUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1949, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1949, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.APINeutronMeasureExt = APINeutronMeasureExt
Namespace.addCategoryObject('typeBinding', 'APINeutronMeasureExt', APINeutronMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityMeasureExt with content type SIMPLE
class ThermalDiffusivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalDiffusivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDiffusivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1981, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalDiffusivityMeasureExt_uom', _module_typeBindings.ThermalDiffusivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1984, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1984, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalDiffusivityMeasureExt = ThermalDiffusivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermalDiffusivityMeasureExt', ThermalDiffusivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropMeasureExt with content type SIMPLE
class PotentialDifferencePerPowerDropMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PotentialDifferencePerPowerDropMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PotentialDifferencePerPowerDropMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1988, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PotentialDifferencePerPowerDropMeasureExt_uom', _module_typeBindings.PotentialDifferencePerPowerDropUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1991, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1991, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PotentialDifferencePerPowerDropMeasureExt = PotentialDifferencePerPowerDropMeasureExt
Namespace.addCategoryObject('typeBinding', 'PotentialDifferencePerPowerDropMeasureExt', PotentialDifferencePerPowerDropMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerMeasureExt with content type SIMPLE
class NormalizedPowerMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}NormalizedPowerMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NormalizedPowerMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1995, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_NormalizedPowerMeasureExt_uom', _module_typeBindings.NormalizedPowerUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1998, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 1998, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.NormalizedPowerMeasureExt = NormalizedPowerMeasureExt
Namespace.addCategoryObject('typeBinding', 'NormalizedPowerMeasureExt', NormalizedPowerMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationMeasureExt with content type SIMPLE
class LinearAccelerationMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LinearAccelerationMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearAccelerationMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2009, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LinearAccelerationMeasureExt_uom', _module_typeBindings.LinearAccelerationUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2012, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2012, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LinearAccelerationMeasureExt = LinearAccelerationMeasureExt
Namespace.addCategoryObject('typeBinding', 'LinearAccelerationMeasureExt', LinearAccelerationMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthMeasureExt with content type SIMPLE
class VolumePerTimeLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimeLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimeLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2016, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimeLengthMeasureExt_uom', _module_typeBindings.VolumePerTimeLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2019, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2019, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimeLengthMeasureExt = VolumePerTimeLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimeLengthMeasureExt', VolumePerTimeLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminanceMeasureExt with content type SIMPLE
class LuminanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2023, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminanceMeasureExt_uom', _module_typeBindings.LuminanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2026, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2026, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminanceMeasureExt = LuminanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'LuminanceMeasureExt', LuminanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermittivityMeasureExt with content type SIMPLE
class PermittivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermittivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermittivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2030, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermittivityMeasureExt_uom', _module_typeBindings.PermittivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2033, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2033, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermittivityMeasureExt = PermittivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'PermittivityMeasureExt', PermittivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredMeasureExt with content type SIMPLE
class PressureSquaredMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2065, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureSquaredMeasureExt_uom', _module_typeBindings.PressureSquaredUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2068, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2068, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureSquaredMeasureExt = PressureSquaredMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressureSquaredMeasureExt', PressureSquaredMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockMeasureExt with content type SIMPLE
class PermeabilityRockMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PermeabilityRockMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PermeabilityRockMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2072, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PermeabilityRockMeasureExt_uom', _module_typeBindings.PermeabilityRockUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2075, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2075, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PermeabilityRockMeasureExt = PermeabilityRockMeasureExt
Namespace.addCategoryObject('typeBinding', 'PermeabilityRockMeasureExt', PermeabilityRockMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SolidAngleMeasureExt with content type SIMPLE
class SolidAngleMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SolidAngleMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolidAngleMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2079, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SolidAngleMeasureExt_uom', _module_typeBindings.SolidAngleUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2082, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2082, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SolidAngleMeasureExt = SolidAngleMeasureExt
Namespace.addCategoryObject('typeBinding', 'SolidAngleMeasureExt', SolidAngleMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentMeasureExt with content type SIMPLE
class ElectricCurrentMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricCurrentMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricCurrentMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2093, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricCurrentMeasureExt_uom', _module_typeBindings.ElectricCurrentUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2096, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2096, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricCurrentMeasureExt = ElectricCurrentMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricCurrentMeasureExt', ElectricCurrentMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}CapacitanceMeasureExt with content type SIMPLE
class CapacitanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}CapacitanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CapacitanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2100, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_CapacitanceMeasureExt_uom', _module_typeBindings.CapacitanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2103, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2103, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.CapacitanceMeasureExt = CapacitanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'CapacitanceMeasureExt', CapacitanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceMeasureExt with content type SIMPLE
class ElectricResistanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricResistanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricResistanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2114, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricResistanceMeasureExt_uom', _module_typeBindings.ElectricResistanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2117, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2117, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricResistanceMeasureExt = ElectricResistanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricResistanceMeasureExt', ElectricResistanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassMeasureExt with content type SIMPLE
class ElectricChargePerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2156, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerMassMeasureExt_uom', _module_typeBindings.ElectricChargePerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2159, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2159, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerMassMeasureExt = ElectricChargePerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerMassMeasureExt', ElectricChargePerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityMeasureExt with content type SIMPLE
class SpecificHeatCapacityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SpecificHeatCapacityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecificHeatCapacityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2163, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SpecificHeatCapacityMeasureExt_uom', _module_typeBindings.SpecificHeatCapacityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2166, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2166, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SpecificHeatCapacityMeasureExt = SpecificHeatCapacityMeasureExt
Namespace.addCategoryObject('typeBinding', 'SpecificHeatCapacityMeasureExt', SpecificHeatCapacityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthMeasureExt with content type SIMPLE
class VolumePerTimePerPressureLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerPressureLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerPressureLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerPressureLengthMeasureExt_uom', _module_typeBindings.VolumePerTimePerPressureLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2180, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2180, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerPressureLengthMeasureExt = VolumePerTimePerPressureLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerPressureLengthMeasureExt', VolumePerTimePerPressureLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaMeasureExt with content type SIMPLE
class PressureSquaredPerForceTimePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureSquaredPerForceTimePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSquaredPerForceTimePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2184, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureSquaredPerForceTimePerAreaMeasureExt_uom', _module_typeBindings.PressureSquaredPerForceTimePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2187, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2187, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureSquaredPerForceTimePerAreaMeasureExt = PressureSquaredPerForceTimePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressureSquaredPerForceTimePerAreaMeasureExt', PressureSquaredPerForceTimePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentumMeasureExt with content type SIMPLE
class MomentumMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentumMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentumMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2191, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentumMeasureExt_uom', _module_typeBindings.MomentumUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2194, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2194, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentumMeasureExt = MomentumMeasureExt
Namespace.addCategoryObject('typeBinding', 'MomentumMeasureExt', MomentumMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyMeasureExt with content type SIMPLE
class LuminousEfficacyMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousEfficacyMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousEfficacyMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2198, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousEfficacyMeasureExt_uom', _module_typeBindings.LuminousEfficacyUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2201, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2201, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousEfficacyMeasureExt = LuminousEfficacyMeasureExt
Namespace.addCategoryObject('typeBinding', 'LuminousEfficacyMeasureExt', LuminousEfficacyMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityMeasureExt with content type SIMPLE
class LuminousIntensityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LuminousIntensityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LuminousIntensityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2212, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LuminousIntensityMeasureExt_uom', _module_typeBindings.LuminousIntensityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2215, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2215, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LuminousIntensityMeasureExt = LuminousIntensityMeasureExt
Namespace.addCategoryObject('typeBinding', 'LuminousIntensityMeasureExt', LuminousIntensityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeMeasureExt with content type SIMPLE
class VolumePerTimePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerTimePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerTimePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2219, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerTimePerVolumeMeasureExt_uom', _module_typeBindings.VolumePerTimePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2222, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2222, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerTimePerVolumeMeasureExt = VolumePerTimePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerTimePerVolumeMeasureExt', VolumePerTimePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeMeasureExt with content type SIMPLE
class SignalingEventPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}SignalingEventPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignalingEventPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2226, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_SignalingEventPerTimeMeasureExt_uom', _module_typeBindings.SignalingEventPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2229, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2229, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.SignalingEventPerTimeMeasureExt = SignalingEventPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'SignalingEventPerTimeMeasureExt', SignalingEventPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeMeasureExt with content type SIMPLE
class PressureTimePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PressureTimePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureTimePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2233, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PressureTimePerVolumeMeasureExt_uom', _module_typeBindings.PressureTimePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2236, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2236, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PressureTimePerVolumeMeasureExt = PressureTimePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'PressureTimePerVolumeMeasureExt', PressureTimePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfForceMeasureExt with content type SIMPLE
class MomentOfForceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MomentOfForceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MomentOfForceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2240, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MomentOfForceMeasureExt_uom', _module_typeBindings.MomentOfForceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2243, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2243, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MomentOfForceMeasureExt = MomentOfForceMeasureExt
Namespace.addCategoryObject('typeBinding', 'MomentOfForceMeasureExt', MomentOfForceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceMeasureExt with content type SIMPLE
class ThermalInsulanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalInsulanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalInsulanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2254, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalInsulanceMeasureExt_uom', _module_typeBindings.ThermalInsulanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2257, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2257, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalInsulanceMeasureExt = ThermalInsulanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermalInsulanceMeasureExt', ThermalInsulanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReluctanceMeasureExt with content type SIMPLE
class ReluctanceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReluctanceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReluctanceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2261, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReluctanceMeasureExt_uom', _module_typeBindings.ReluctanceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2264, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2264, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReluctanceMeasureExt = ReluctanceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReluctanceMeasureExt', ReluctanceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightMeasureExt with content type SIMPLE
class DiffusiveTimeOfFlightMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusiveTimeOfFlightMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusiveTimeOfFlightMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DiffusiveTimeOfFlightMeasureExt_uom', _module_typeBindings.DiffusiveTimeOfFlightUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2271, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2271, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DiffusiveTimeOfFlightMeasureExt = DiffusiveTimeOfFlightMeasureExt
Namespace.addCategoryObject('typeBinding', 'DiffusiveTimeOfFlightMeasureExt', DiffusiveTimeOfFlightMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeMeasureExt with content type SIMPLE
class LengthPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}LengthPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2275, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_LengthPerTimeMeasureExt_uom', _module_typeBindings.LengthPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2278, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2278, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.LengthPerTimeMeasureExt = LengthPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'LengthPerTimeMeasureExt', LengthPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialMeasureExt with content type SIMPLE
class MagneticVectorPotentialMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticVectorPotentialMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticVectorPotentialMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2282, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticVectorPotentialMeasureExt_uom', _module_typeBindings.MagneticVectorPotentialUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2285, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2285, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticVectorPotentialMeasureExt = MagneticVectorPotentialMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticVectorPotentialMeasureExt', MagneticVectorPotentialMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthMeasureExt with content type SIMPLE
class MagneticFieldStrengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticFieldStrengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticFieldStrengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2289, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticFieldStrengthMeasureExt_uom', _module_typeBindings.MagneticFieldStrengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2292, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2292, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticFieldStrengthMeasureExt = MagneticFieldStrengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticFieldStrengthMeasureExt', MagneticFieldStrengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureMeasureExt with content type SIMPLE
class VolumePerPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2303, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerPressureMeasureExt_uom', _module_typeBindings.VolumePerPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2306, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2306, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerPressureMeasureExt = VolumePerPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerPressureMeasureExt', VolumePerPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityMeasureExt with content type SIMPLE
class RadiantIntensityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}RadiantIntensityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadiantIntensityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2310, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_RadiantIntensityMeasureExt_uom', _module_typeBindings.RadiantIntensityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2313, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2313, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.RadiantIntensityMeasureExt = RadiantIntensityMeasureExt
Namespace.addCategoryObject('typeBinding', 'RadiantIntensityMeasureExt', RadiantIntensityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentMeasureExt with content type SIMPLE
class MagneticDipoleMomentMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MagneticDipoleMomentMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MagneticDipoleMomentMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MagneticDipoleMomentMeasureExt_uom', _module_typeBindings.MagneticDipoleMomentUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2362, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2362, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MagneticDipoleMomentMeasureExt = MagneticDipoleMomentMeasureExt
Namespace.addCategoryObject('typeBinding', 'MagneticDipoleMomentMeasureExt', MagneticDipoleMomentMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerMassMeasureExt with content type SIMPLE
class VolumePerMassMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerMassMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerMassMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2373, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerMassMeasureExt_uom', _module_typeBindings.VolumePerMassUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2376, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2376, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerMassMeasureExt = VolumePerMassMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerMassMeasureExt', VolumePerMassMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaMeasureExt with content type SIMPLE
class ElectricChargePerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2380, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerAreaMeasureExt_uom', _module_typeBindings.ElectricChargePerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2383, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2383, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerAreaMeasureExt = ElectricChargePerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerAreaMeasureExt', ElectricChargePerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityMeasureExt with content type SIMPLE
class ThermalConductivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ThermalConductivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalConductivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2387, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ThermalConductivityMeasureExt_uom', _module_typeBindings.ThermalConductivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2390, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2390, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ThermalConductivityMeasureExt = ThermalConductivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ThermalConductivityMeasureExt', ThermalConductivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalMeasureExt with content type SIMPLE
class AttenuationPerFrequencyIntervalMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AttenuationPerFrequencyIntervalMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttenuationPerFrequencyIntervalMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2394, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AttenuationPerFrequencyIntervalMeasureExt_uom', _module_typeBindings.AttenuationPerFrequencyIntervalUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2397, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2397, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AttenuationPerFrequencyIntervalMeasureExt = AttenuationPerFrequencyIntervalMeasureExt
Namespace.addCategoryObject('typeBinding', 'AttenuationPerFrequencyIntervalMeasureExt', AttenuationPerFrequencyIntervalMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedMeasureExt with content type SIMPLE
class DataTransferSpeedMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DataTransferSpeedMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataTransferSpeedMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2401, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DataTransferSpeedMeasureExt_uom', _module_typeBindings.DataTransferSpeedUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2404, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2404, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DataTransferSpeedMeasureExt = DataTransferSpeedMeasureExt
Namespace.addCategoryObject('typeBinding', 'DataTransferSpeedMeasureExt', DataTransferSpeedMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeMeasureExt with content type SIMPLE
class PowerPerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}PowerPerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerPerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2408, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_PowerPerVolumeMeasureExt_uom', _module_typeBindings.PowerPerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2411, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2411, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.PowerPerVolumeMeasureExt = PowerPerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'PowerPerVolumeMeasureExt', PowerPerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeMeasureExt with content type SIMPLE
class MassPerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2415, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerVolumeMeasureExt_uom', _module_typeBindings.MassPerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2418, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2418, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerVolumeMeasureExt = MassPerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerVolumeMeasureExt', MassPerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaMeasureExt with content type SIMPLE
class ReciprocalAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2422, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalAreaMeasureExt_uom', _module_typeBindings.ReciprocalAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2425, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2425, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalAreaMeasureExt = ReciprocalAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalAreaMeasureExt', ReciprocalAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureMeasureExt with content type SIMPLE
class ReciprocalPressureMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalPressureMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalPressureMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2429, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalPressureMeasureExt_uom', _module_typeBindings.ReciprocalPressureUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2432, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2432, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalPressureMeasureExt = ReciprocalPressureMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalPressureMeasureExt', ReciprocalPressureMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DigitalStorageMeasureExt with content type SIMPLE
class DigitalStorageMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DigitalStorageMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalStorageMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2436, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DigitalStorageMeasureExt_uom', _module_typeBindings.DigitalStorageUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2439, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2439, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DigitalStorageMeasureExt = DigitalStorageMeasureExt
Namespace.addCategoryObject('typeBinding', 'DigitalStorageMeasureExt', DigitalStorageMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaMeasureExt with content type SIMPLE
class AreaPerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}AreaPerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AreaPerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2443, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_AreaPerAreaMeasureExt_uom', _module_typeBindings.AreaPerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2446, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2446, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.AreaPerAreaMeasureExt = AreaPerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'AreaPerAreaMeasureExt', AreaPerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceMeasureExt with content type SIMPLE
class ReciprocalElectricPotentialDifferenceMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReciprocalElectricPotentialDifferenceMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReciprocalElectricPotentialDifferenceMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2457, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReciprocalElectricPotentialDifferenceMeasureExt_uom', _module_typeBindings.ReciprocalElectricPotentialDifferenceUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2460, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2460, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ReciprocalElectricPotentialDifferenceMeasureExt = ReciprocalElectricPotentialDifferenceMeasureExt
Namespace.addCategoryObject('typeBinding', 'ReciprocalElectricPotentialDifferenceMeasureExt', ReciprocalElectricPotentialDifferenceMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeMeasureExt with content type SIMPLE
class ElectricChargePerVolumeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ElectricChargePerVolumeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricChargePerVolumeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2478, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ElectricChargePerVolumeMeasureExt_uom', _module_typeBindings.ElectricChargePerVolumeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2481, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2481, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ElectricChargePerVolumeMeasureExt = ElectricChargePerVolumeMeasureExt
Namespace.addCategoryObject('typeBinding', 'ElectricChargePerVolumeMeasureExt', ElectricChargePerVolumeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthMeasureExt with content type SIMPLE
class ForcePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ForcePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ForcePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2485, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ForcePerLengthMeasureExt_uom', _module_typeBindings.ForcePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2488, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2488, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ForcePerLengthMeasureExt = ForcePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'ForcePerLengthMeasureExt', ForcePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthMeasureExt with content type SIMPLE
class VolumePerLengthMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VolumePerLengthMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VolumePerLengthMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2492, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VolumePerLengthMeasureExt_uom', _module_typeBindings.VolumePerLengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2495, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2495, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VolumePerLengthMeasureExt = VolumePerLengthMeasureExt
Namespace.addCategoryObject('typeBinding', 'VolumePerLengthMeasureExt', VolumePerLengthMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityMeasureExt with content type SIMPLE
class ActivityOfRadioactivityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ActivityOfRadioactivityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActivityOfRadioactivityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2499, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ActivityOfRadioactivityMeasureExt_uom', _module_typeBindings.ActivityOfRadioactivityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2502, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2502, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ActivityOfRadioactivityMeasureExt = ActivityOfRadioactivityMeasureExt
Namespace.addCategoryObject('typeBinding', 'ActivityOfRadioactivityMeasureExt', ActivityOfRadioactivityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MolecularWeightMeasureExt with content type SIMPLE
class MolecularWeightMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MolecularWeightMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MolecularWeightMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2534, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MolecularWeightMeasureExt_uom', _module_typeBindings.MolecularWeightUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2537, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2537, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MolecularWeightMeasureExt = MolecularWeightMeasureExt
Namespace.addCategoryObject('typeBinding', 'MolecularWeightMeasureExt', MolecularWeightMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientMeasureExt with content type SIMPLE
class DiffusionCoefficientMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}DiffusionCoefficientMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiffusionCoefficientMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2541, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_DiffusionCoefficientMeasureExt_uom', _module_typeBindings.DiffusionCoefficientUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2544, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2544, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.DiffusionCoefficientMeasureExt = DiffusionCoefficientMeasureExt
Namespace.addCategoryObject('typeBinding', 'DiffusionCoefficientMeasureExt', DiffusionCoefficientMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimeMeasureExt with content type SIMPLE
class MassPerTimeMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerTimeMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerTimeMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2562, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerTimeMeasureExt_uom', _module_typeBindings.MassPerTimeUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2565, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2565, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerTimeMeasureExt = MassPerTimeMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerTimeMeasureExt', MassPerTimeMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerAreaMeasureExt with content type SIMPLE
class MassPerAreaMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}MassPerAreaMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MassPerAreaMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2569, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_MassPerAreaMeasureExt_uom', _module_typeBindings.MassPerAreaUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2572, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2572, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.MassPerAreaMeasureExt = MassPerAreaMeasureExt
Namespace.addCategoryObject('typeBinding', 'MassPerAreaMeasureExt', MassPerAreaMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityMeasureExt with content type SIMPLE
class IsothermalCompressibilityMeasureExt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}IsothermalCompressibilityMeasureExt with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IsothermalCompressibilityMeasureExt')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2576, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_IsothermalCompressibilityMeasureExt_uom', _module_typeBindings.IsothermalCompressibilityUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2579, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/MeasureType.xsd', 2579, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.IsothermalCompressibilityMeasureExt = IsothermalCompressibilityMeasureExt
Namespace.addCategoryObject('typeBinding', 'IsothermalCompressibilityMeasureExt', IsothermalCompressibilityMeasureExt)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ReferencePressure with content type SIMPLE
class ReferencePressure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}ReferencePressure with content type SIMPLE"""
    _TypeDefinition = AbstractMeasure
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 124, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is AbstractMeasure
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ReferencePressure_uom', _module_typeBindings.PressureUom, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 127, 12)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 127, 12)
    
    uom = property(__uom.value, __uom.set, None, None)

    
    # Attribute referencePressureKind uses Python identifier referencePressureKind
    __referencePressureKind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'referencePressureKind'), 'referencePressureKind', '__httpwww_energistics_orgenergymldatacommonv2_ReferencePressure_referencePressureKind', _module_typeBindings.ReferencePressureKind)
    __referencePressureKind._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 128, 12)
    __referencePressureKind._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 128, 12)
    
    referencePressureKind = property(__referencePressureKind.value, __referencePressureKind.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uom.name() : __uom,
        __referencePressureKind.name() : __referencePressureKind
    })
_module_typeBindings.ReferencePressure = ReferencePressure
Namespace.addCategoryObject('typeBinding', 'ReferencePressure', ReferencePressure)


# Complex type {http://www.energistics.org/energyml/data/commonv2}Activity with content type ELEMENT_ONLY
class Activity_ (AbstractObject):
    """Instance of a given activity"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Activity')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 12, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}ActivityDescriptor uses Python identifier ActivityDescriptor
    __ActivityDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActivityDescriptor'), 'ActivityDescriptor', '__httpwww_energistics_orgenergymldatacommonv2_Activity__httpwww_energistics_orgenergymldatacommonv2ActivityDescriptor', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 19, 5), )

    
    ActivityDescriptor = property(__ActivityDescriptor.value, __ActivityDescriptor.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Parent uses Python identifier Parent
    __Parent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Parent'), 'Parent', '__httpwww_energistics_orgenergymldatacommonv2_Activity__httpwww_energistics_orgenergymldatacommonv2Parent', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 20, 5), )

    
    Parent = property(__Parent.value, __Parent.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Parameter uses Python identifier Parameter
    __Parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Parameter'), 'Parameter', '__httpwww_energistics_orgenergymldatacommonv2_Activity__httpwww_energistics_orgenergymldatacommonv2Parameter', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 21, 5), )

    
    Parameter = property(__Parameter.value, __Parameter.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __ActivityDescriptor.name() : __ActivityDescriptor,
        __Parent.name() : __Parent,
        __Parameter.name() : __Parameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Activity_ = Activity_
Namespace.addCategoryObject('typeBinding', 'Activity', Activity_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ActivityTemplate with content type ELEMENT_ONLY
class ActivityTemplate_ (AbstractObject):
    """Description of one type of activity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ActivityTemplate')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 27, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Parameter uses Python identifier Parameter
    __Parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Parameter'), 'Parameter', '__httpwww_energistics_orgenergymldatacommonv2_ActivityTemplate__httpwww_energistics_orgenergymldatacommonv2Parameter', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 34, 5), )

    
    Parameter = property(__Parameter.value, __Parameter.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __Parameter.name() : __Parameter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ActivityTemplate_ = ActivityTemplate_
Namespace.addCategoryObject('typeBinding', 'ActivityTemplate', ActivityTemplate_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCrs with content type ELEMENT_ONLY
class VerticalCrs (AbstractObject):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}VerticalCrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 21, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Direction uses Python identifier Direction
    __Direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Direction'), 'Direction', '__httpwww_energistics_orgenergymldatacommonv2_VerticalCrs_httpwww_energistics_orgenergymldatacommonv2Direction', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 25, 5), )

    
    Direction = property(__Direction.value, __Direction.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}AbstractVerticalCrs uses Python identifier AbstractVerticalCrs
    __AbstractVerticalCrs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractVerticalCrs'), 'AbstractVerticalCrs', '__httpwww_energistics_orgenergymldatacommonv2_VerticalCrs_httpwww_energistics_orgenergymldatacommonv2AbstractVerticalCrs', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 26, 5), )

    
    AbstractVerticalCrs = property(__AbstractVerticalCrs.value, __AbstractVerticalCrs.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_VerticalCrs_uom', _module_typeBindings.LengthUomExt, required=True)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 28, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 28, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        __Direction.name() : __Direction,
        __AbstractVerticalCrs.name() : __AbstractVerticalCrs
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.VerticalCrs = VerticalCrs
Namespace.addCategoryObject('typeBinding', 'VerticalCrs', VerticalCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}ProjectedCrs with content type ELEMENT_ONLY
class ProjectedCrs (AbstractObject):
    """This is the Energistics encapsulation of the ProjectedCrs type from GML."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectedCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 47, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AxisOrder uses Python identifier AxisOrder
    __AxisOrder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AxisOrder'), 'AxisOrder', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedCrs_httpwww_energistics_orgenergymldatacommonv2AxisOrder', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 54, 5), )

    
    AxisOrder = property(__AxisOrder.value, __AxisOrder.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}AbstractProjectedCrs uses Python identifier AbstractProjectedCrs
    __AbstractProjectedCrs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractProjectedCrs'), 'AbstractProjectedCrs', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedCrs_httpwww_energistics_orgenergymldatacommonv2AbstractProjectedCrs', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 55, 5), )

    
    AbstractProjectedCrs = property(__AbstractProjectedCrs.value, __AbstractProjectedCrs.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uom'), 'uom', '__httpwww_energistics_orgenergymldatacommonv2_ProjectedCrs_uom', _module_typeBindings.LengthUomExt)
    __uom._DeclarationLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 57, 4)
    __uom._UseLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 57, 4)
    
    uom = property(__uom.value, __uom.set, None, None)

    _ElementMap.update({
        __AxisOrder.name() : __AxisOrder,
        __AbstractProjectedCrs.name() : __AbstractProjectedCrs
    })
    _AttributeMap.update({
        __uom.name() : __uom
    })
_module_typeBindings.ProjectedCrs = ProjectedCrs
Namespace.addCategoryObject('typeBinding', 'ProjectedCrs', ProjectedCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticCrs with content type ELEMENT_ONLY
class GeodeticCrs (AbstractObject):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}GeodeticCrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticCrs')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 253, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}AbstractGeodeticCrs uses Python identifier AbstractGeodeticCrs
    __AbstractGeodeticCrs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeodeticCrs'), 'AbstractGeodeticCrs', '__httpwww_energistics_orgenergymldatacommonv2_GeodeticCrs_httpwww_energistics_orgenergymldatacommonv2AbstractGeodeticCrs', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 257, 5), )

    
    AbstractGeodeticCrs = property(__AbstractGeodeticCrs.value, __AbstractGeodeticCrs.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __AbstractGeodeticCrs.name() : __AbstractGeodeticCrs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticCrs = GeodeticCrs
Namespace.addCategoryObject('typeBinding', 'GeodeticCrs', GeodeticCrs)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PropertyKindDictionary with content type ELEMENT_ONLY
class PropertyKindDictionary_ (AbstractObject):
    """This dictionary defines property kind which is intended to handle the requirements of the upstream oil and gas industry. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PropertyKindDictionary')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 10, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}PropertyKind uses Python identifier PropertyKind
    __PropertyKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropertyKind'), 'PropertyKind', '__httpwww_energistics_orgenergymldatacommonv2_PropertyKindDictionary__httpwww_energistics_orgenergymldatacommonv2PropertyKind', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 17, 5), )

    
    PropertyKind = property(__PropertyKind.value, __PropertyKind.set, None, 'Defines which property kind are contained into a property kind dictionary.')

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __PropertyKind.name() : __PropertyKind
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PropertyKindDictionary_ = PropertyKindDictionary_
Namespace.addCategoryObject('typeBinding', 'PropertyKindDictionary', PropertyKindDictionary_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}TimeSeries with content type ELEMENT_ONLY
class TimeSeries_ (AbstractObject):
    """Stores an ordered list of times, for example, for time-dependent properties, geometries, or representations. It is used in conjunction with the time index to specify times for RESQML."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeSeries')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 90, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Time'), 'Time', '__httpwww_energistics_orgenergymldatacommonv2_TimeSeries__httpwww_energistics_orgenergymldatacommonv2Time', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 97, 5), )

    
    Time = property(__Time.value, __Time.set, None, 'Individual times composing the series. The list ordering is used by the time index.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}TimeSeriesParentage uses Python identifier TimeSeriesParentage
    __TimeSeriesParentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSeriesParentage'), 'TimeSeriesParentage', '__httpwww_energistics_orgenergymldatacommonv2_TimeSeries__httpwww_energistics_orgenergymldatacommonv2TimeSeriesParentage', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 102, 5), )

    
    TimeSeriesParentage = property(__TimeSeriesParentage.value, __TimeSeriesParentage.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __Time.name() : __Time,
        __TimeSeriesParentage.name() : __TimeSeriesParentage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeSeries_ = TimeSeries_
Namespace.addCategoryObject('typeBinding', 'TimeSeries', TimeSeries_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}PropertyKind with content type ELEMENT_ONLY
class PropertyKind_ (AbstractObject):
    """Property kinds carry the semantics of property values. They are used to identify if the values are, for example, representing porosity, length, stress tensor, etc. Energistics provides a list of standard property kind that represent the basis for the commonly used properties in the E&P subsurface workflow."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PropertyKind')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 121, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}IsAbstract uses Python identifier IsAbstract
    __IsAbstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsAbstract'), 'IsAbstract', '__httpwww_energistics_orgenergymldatacommonv2_PropertyKind__httpwww_energistics_orgenergymldatacommonv2IsAbstract', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 128, 5), )

    
    IsAbstract = property(__IsAbstract.value, __IsAbstract.set, None, 'This boolean indicates whether the PropertyKind should be used as a real property or not.\n\nIf the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of "force per length" shouldn\'t be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property "surface tension".')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}DeprecationDate uses Python identifier DeprecationDate
    __DeprecationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeprecationDate'), 'DeprecationDate', '__httpwww_energistics_orgenergymldatacommonv2_PropertyKind__httpwww_energistics_orgenergymldatacommonv2DeprecationDate', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 135, 5), )

    
    DeprecationDate = property(__DeprecationDate.value, __DeprecationDate.set, None, 'Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference. \n\nA null value means the property kind is still valid.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}QuantityClass uses Python identifier QuantityClass
    __QuantityClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'QuantityClass'), 'QuantityClass', '__httpwww_energistics_orgenergymldatacommonv2_PropertyKind__httpwww_energistics_orgenergymldatacommonv2QuantityClass', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 142, 5), )

    
    QuantityClass = property(__QuantityClass.value, __QuantityClass.set, None, 'A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary.\nIf there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Parent uses Python identifier Parent
    __Parent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Parent'), 'Parent', '__httpwww_energistics_orgenergymldatacommonv2_PropertyKind__httpwww_energistics_orgenergymldatacommonv2Parent', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 148, 5), )

    
    Parent = property(__Parent.value, __Parent.set, None, 'Indicates the parent of this property kind.\nBUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.')

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __IsAbstract.name() : __IsAbstract,
        __DeprecationDate.name() : __DeprecationDate,
        __QuantityClass.name() : __QuantityClass,
        __Parent.name() : __Parent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PropertyKind_ = PropertyKind_
Namespace.addCategoryObject('typeBinding', 'PropertyKind', PropertyKind_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}DataAssuranceRecord with content type ELEMENT_ONLY
class DataAssuranceRecord_ (AbstractObject):
    """A little XML document describing whether or not a particular data object conforms with a pre-defined policy which consists of at least one rule."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataAssuranceRecord')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 29, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}PolicyId uses Python identifier PolicyId
    __PolicyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolicyId'), 'PolicyId', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2PolicyId', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 36, 5), )

    
    PolicyId = property(__PolicyId.value, __PolicyId.set, None, 'Identifier of the policy whose conformance is being described.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}PolicyName uses Python identifier PolicyName
    __PolicyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolicyName'), 'PolicyName', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2PolicyName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 41, 5), )

    
    PolicyName = property(__PolicyName.value, __PolicyName.set, None, 'Human-readable name of the policy')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferencedElementName uses Python identifier ReferencedElementName
    __ReferencedElementName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementName'), 'ReferencedElementName', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2ReferencedElementName', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 46, 5), )

    
    ReferencedElementName = property(__ReferencedElementName.value, __ReferencedElementName.set, None, 'If the Policy applies to a single element within the referenced data object this attribute holds its element name.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferencedElementUid uses Python identifier ReferencedElementUid
    __ReferencedElementUid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementUid'), 'ReferencedElementUid', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2ReferencedElementUid', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 51, 5), )

    
    ReferencedElementUid = property(__ReferencedElementUid.value, __ReferencedElementUid.set, None, 'If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.\n\nThe name of the recurring element would be in the ReferencedElementName.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Origin uses Python identifier Origin
    __Origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Origin'), 'Origin', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2Origin', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 58, 5), )

    
    Origin = property(__Origin.value, __Origin.set, None, 'Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Conformance uses Python identifier Conformance
    __Conformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Conformance'), 'Conformance', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2Conformance', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 63, 5), )

    
    Conformance = property(__Conformance.value, __Conformance.set, None, 'Yes/no flag indicating whether this particular data ???? conforms with the policy or not.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2Date', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 68, 5), )

    
    Date = property(__Date.value, __Date.set, None, 'Date the policy was last checked. This is the date for which the Conformance value is valid.')

    
    # Element {http://www.energistics.org/energyml/data/commonv2}Comment uses Python identifier Comment
    __Comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Comment'), 'Comment', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2Comment', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 73, 5), )

    
    Comment = property(__Comment.value, __Comment.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}FailingRules uses Python identifier FailingRules
    __FailingRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FailingRules'), 'FailingRules', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2FailingRules', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 74, 5), )

    
    FailingRules = property(__FailingRules.value, __FailingRules.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}IndexRange uses Python identifier IndexRange
    __IndexRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IndexRange'), 'IndexRange', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2IndexRange', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 75, 5), )

    
    IndexRange = property(__IndexRange.value, __IndexRange.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}ReferencedData uses Python identifier ReferencedData
    __ReferencedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferencedData'), 'ReferencedData', '__httpwww_energistics_orgenergymldatacommonv2_DataAssuranceRecord__httpwww_energistics_orgenergymldatacommonv2ReferencedData', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 76, 5), )

    
    ReferencedData = property(__ReferencedData.value, __ReferencedData.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __PolicyId.name() : __PolicyId,
        __PolicyName.name() : __PolicyName,
        __ReferencedElementName.name() : __ReferencedElementName,
        __ReferencedElementUid.name() : __ReferencedElementUid,
        __Origin.name() : __Origin,
        __Conformance.name() : __Conformance,
        __Date.name() : __Date,
        __Comment.name() : __Comment,
        __FailingRules.name() : __FailingRules,
        __IndexRange.name() : __IndexRange,
        __ReferencedData.name() : __ReferencedData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataAssuranceRecord_ = DataAssuranceRecord_
Namespace.addCategoryObject('typeBinding', 'DataAssuranceRecord', DataAssuranceRecord_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}GraphicalInformationSet with content type ELEMENT_ONLY
class GraphicalInformationSet_ (AbstractObject):
    """Complex type {http://www.energistics.org/energyml/data/commonv2}GraphicalInformationSet with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GraphicalInformationSet')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 14, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}GraphicalInformation uses Python identifier GraphicalInformation
    __GraphicalInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GraphicalInformation'), 'GraphicalInformation', '__httpwww_energistics_orgenergymldatacommonv2_GraphicalInformationSet__httpwww_energistics_orgenergymldatacommonv2GraphicalInformation', True, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 18, 5), )

    
    GraphicalInformation = property(__GraphicalInformation.value, __GraphicalInformation.set, None, None)

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __GraphicalInformation.name() : __GraphicalInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GraphicalInformationSet_ = GraphicalInformationSet_
Namespace.addCategoryObject('typeBinding', 'GraphicalInformationSet', GraphicalInformationSet_)


# Complex type {http://www.energistics.org/energyml/data/commonv2}EpcExternalPartReference with content type ELEMENT_ONLY
class EpcExternalPartReference_ (AbstractObject):
    """It defines a proxy for external part of the EPC package. It must be used at least for external HDF parts.

Each EpcExternalPartReference represents a single operating system file"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EpcExternalPartReference')
    _XSDLocation = pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 26, 1)
    _ElementMap = AbstractObject._ElementMap.copy()
    _AttributeMap = AbstractObject._AttributeMap.copy()
    # Base type is AbstractObject
    
    # Element Aliases ({http://www.energistics.org/energyml/data/commonv2}Aliases) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element Citation ({http://www.energistics.org/energyml/data/commonv2}Citation) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element CustomData ({http://www.energistics.org/energyml/data/commonv2}CustomData) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element ExtensionNameValue ({http://www.energistics.org/energyml/data/commonv2}ExtensionNameValue) inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Element {http://www.energistics.org/energyml/data/commonv2}Filename uses Python identifier Filename
    __Filename = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Filename'), 'Filename', '__httpwww_energistics_orgenergymldatacommonv2_EpcExternalPartReference__httpwww_energistics_orgenergymldatacommonv2Filename', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 35, 5), )

    
    Filename = property(__Filename.value, __Filename.set, None, None)

    
    # Element {http://www.energistics.org/energyml/data/commonv2}MimeType uses Python identifier MimeType
    __MimeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MimeType'), 'MimeType', '__httpwww_energistics_orgenergymldatacommonv2_EpcExternalPartReference__httpwww_energistics_orgenergymldatacommonv2MimeType', False, pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 36, 5), )

    
    MimeType = property(__MimeType.value, __MimeType.set, None, 'IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.\n\nMIME type for HDF proxy is : application/x-hdf5 (by convention). ')

    
    # Attribute objectVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute schemaVersion inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute uuid inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    
    # Attribute existenceKind inherited from {http://www.energistics.org/energyml/data/commonv2}AbstractObject
    _ElementMap.update({
        __Filename.name() : __Filename,
        __MimeType.name() : __MimeType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EpcExternalPartReference_ = EpcExternalPartReference_
Namespace.addCategoryObject('typeBinding', 'EpcExternalPartReference', EpcExternalPartReference_)


AbstractDataObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDataObject'), AbstractObject, documentation='Substitution group for normative data objects.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 70, 1))
Namespace.addCategoryObject('elementBinding', AbstractDataObject.name().localName(), AbstractDataObject)

AbstractContextualObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContextualObject'), AbstractObject, documentation='Substitution group for contextual data objects.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 75, 1))
Namespace.addCategoryObject('elementBinding', AbstractContextualObject.name().localName(), AbstractContextualObject)

Activity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Activity'), Activity_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 11, 1))
Namespace.addCategoryObject('elementBinding', Activity.name().localName(), Activity)

ActivityTemplate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActivityTemplate'), ActivityTemplate_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 26, 1))
Namespace.addCategoryObject('elementBinding', ActivityTemplate.name().localName(), ActivityTemplate)

PropertyKindDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyKindDictionary'), PropertyKindDictionary_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 9, 1))
Namespace.addCategoryObject('elementBinding', PropertyKindDictionary.name().localName(), PropertyKindDictionary)

TimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries'), TimeSeries_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 89, 1))
Namespace.addCategoryObject('elementBinding', TimeSeries.name().localName(), TimeSeries)

PropertyKind = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyKind'), PropertyKind_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 120, 1))
Namespace.addCategoryObject('elementBinding', PropertyKind.name().localName(), PropertyKind)

DataAssuranceRecord = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataAssuranceRecord'), DataAssuranceRecord_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 28, 1))
Namespace.addCategoryObject('elementBinding', DataAssuranceRecord.name().localName(), DataAssuranceRecord)

GraphicalInformationSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GraphicalInformationSet'), GraphicalInformationSet_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 13, 1))
Namespace.addCategoryObject('elementBinding', GraphicalInformationSet.name().localName(), GraphicalInformationSet)

EpcExternalPartReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpcExternalPartReference'), EpcExternalPartReference_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 25, 1))
Namespace.addCategoryObject('elementBinding', EpcExternalPartReference.name().localName(), EpcExternalPartReference)



ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), String64, scope=ExtensionNameValue, documentation='The name of the extension.\nEach standard name should document the expected measure class.\nEach standard name should document the expected maximum size. \nFor numeric values the size should be in terms of xsd types\nsuch as int, long, short, byte, float or double.\nFor strings, the maximum length should be defined in number of characters.\nLocal extensions to the list of standard names are allowed but it is strongly\nrecommended that the names and definitions be approved by the \nrespective SIG Technical Team before use.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 28, 3)))

ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), StringMeasure, scope=ExtensionNameValue, documentation='The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 41, 3)))

ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasureClass'), MeasureClass, scope=ExtensionNameValue, documentation='The kind of the measure. For example, "length".\nThis should be specified if the value requires a unit of measure.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 46, 3)))

ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DTim'), TimeStamp, scope=ExtensionNameValue, documentation='The date-time associated with the value.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 52, 3)))

ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Index'), pyxb.binding.datatypes.int, scope=ExtensionNameValue, documentation='Indexes things with the same name. \nThat is, 1 indicates the first one, 2 indicates the second one, etc.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 57, 3)))

ExtensionNameValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), String2000, scope=ExtensionNameValue, documentation='A textual description of the extension.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 63, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 52, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 63, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 28, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 41, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasureClass')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 46, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DTim')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 52, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 57, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ExtensionNameValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 63, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExtensionNameValue._Automaton = _BuildAutomaton()




def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 105, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 105, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CustomData._Automaton = _BuildAutomaton_()




Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), String2000, scope=Citation, documentation='One line description/name of the object.\n\nThis is the equivalent in ISO 19115 of CI_Citation.title\n\nLegacy DCGroup - title', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 119, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Originator'), String64, scope=Citation, documentation='Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited. \n\nThis is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "originator".\n\nLegacy DCGroup - author', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 128, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Creation'), pyxb.binding.datatypes.dateTime, scope=Citation, documentation='Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.\n\nThis is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation"\n\nFormat:\nYYYY-MM-DDThh:mm:ssZ[+/-]hh:mm\n\nLegacy DCGroup - created', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 137, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Format'), String2000, scope=Citation, documentation='Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.\n\nThe ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.\n\nSIG Implementation Notes\n- Legacy DCGroup from v1.1 - publisher\n- fileExtension is not relevant and will be ignored if present.\n- vendor and applicationName are mandatory.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 149, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Editor'), String64, scope=Citation, documentation='Name (or other human-readable identifier) of the last person who updated the object. \n\nThis is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "editor".\n\nLegacy DCGroup - contributor ', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 161, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LastUpdate'), pyxb.binding.datatypes.dateTime, scope=Citation, documentation='Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.\n\nThis is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate"\n\n\nFormat:\nYYYY-MM-DDThh:mm:ssZ[+/-]hh:mm\n\nLegacy DCGroup - modified ', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 170, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VersionString'), String64, scope=Citation, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 183, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), String2000, scope=Citation, documentation='User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.\n\nThis is the equivalent of the ISO 19115 abstract.CharacterString\n\nLegacy DCGroup - description', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 184, 3)))

Citation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DescriptiveKeywords'), String2000, scope=Citation, documentation='Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.\n\nThis is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords\n\nLegacy DCGroup - subject', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 193, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 161, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 170, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 183, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 184, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 193, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 119, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Originator')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 128, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Creation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 137, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Format')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 149, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Editor')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 161, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LastUpdate')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 170, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VersionString')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 183, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 184, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Citation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DescriptiveKeywords')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 193, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Citation._Automaton = _BuildAutomaton_2()




ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllowedKind'), ParameterKind, scope=ParameterTemplate, documentation='If no allowed type is given, then all kind of datatypes is allowed.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 44, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsInput'), pyxb.binding.datatypes.boolean, scope=ParameterTemplate, documentation='Indicates if the parameter is an input of the activity.\nIf the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 49, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyConstraint'), String2000, scope=ParameterTemplate, documentation='Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 55, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsOutput'), pyxb.binding.datatypes.boolean, scope=ParameterTemplate, documentation='Indicates if the parameter is an output of the activity.\nIf the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 60, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), String2000, scope=ParameterTemplate, documentation='Name of the parameter in the activity. Key to identify parameter.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 66, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataObjectContentType'), String2000, scope=ParameterTemplate, documentation='When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject ', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 71, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaxOccurs'), pyxb.binding.datatypes.long, scope=ParameterTemplate, documentation='Maximum number of parameters of this type allowed in the activity.\nIf the maximum number of parameters is infinite, use -1 value.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 76, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MinOccurs'), pyxb.binding.datatypes.long, scope=ParameterTemplate, documentation='Minimum number of parameter of this type required by the activity.\nIf the minimum number of parameters is infinite, use -1 value.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 82, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Constraint'), String2000, scope=ParameterTemplate, documentation='Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 88, 3)))

ParameterTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DefaultValue'), AbstractActivityParameter, scope=ParameterTemplate, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 93, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 44, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 55, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 71, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 88, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 93, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllowedKind')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 44, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsInput')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyConstraint')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 55, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsOutput')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 60, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 66, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataObjectContentType')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 71, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaxOccurs')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 76, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MinOccurs')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 82, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Constraint')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 88, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ParameterTemplate._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DefaultValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 93, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ParameterTemplate._Automaton = _BuildAutomaton_3()




AbstractActivityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), String2000, scope=AbstractActivityParameter, documentation='Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3)))

AbstractActivityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Index'), pyxb.binding.datatypes.long, scope=AbstractActivityParameter, documentation='When parameter is an array, used to indicate the index in the array', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3)))

AbstractActivityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Selection'), String2000, scope=AbstractActivityParameter, documentation='Textual description about how this parameter was selected.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3)))

AbstractActivityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Key'), AbstractParameterKey, scope=AbstractActivityParameter, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractActivityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractActivityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractActivityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractActivityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractActivityParameter._Automaton = _BuildAutomaton_4()




JaggedArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Elements'), AbstractValueArray, scope=JaggedArray, documentation='1D array of elements containing the aggregation of individual array data.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 272, 3)))

JaggedArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CumulativeLength'), AbstractIntegerArray, scope=JaggedArray, documentation='1D array of cumulative lengths to the end of the current sub-array. Each cumulative length is also equal to the index of the first element of the next sub-array, i.e., the index in the elements array for which the next variable length sub-array begins.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 277, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(JaggedArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Elements')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 272, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(JaggedArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CumulativeLength')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 277, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
JaggedArray._Automaton = _BuildAutomaton_5()




TimeIndex._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Index'), NonNegativeLong, scope=TimeIndex, documentation='The index of the time in the time series.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 31, 3)))

TimeIndex._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries'), DataObjectReference, scope=TimeIndex, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 36, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndex._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 31, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeIndex._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 36, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeIndex._Automaton = _BuildAutomaton_6()




GeologicTime._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgeOffsetAttribute'), pyxb.binding.datatypes.long, scope=GeologicTime, documentation='A Value in Years of the Age Offset between the DateTime Attribute value and the DateTime of a GeologicalEvent Occurrence. This value must be POSITIVE when it represents a Geological Event in The past.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 52, 3)))

GeologicTime._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime'), pyxb.binding.datatypes.dateTime, scope=GeologicTime, documentation='A date, which can be represented according to the W3CDTF format.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 57, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 52, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeologicTime._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgeOffsetAttribute')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 52, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeologicTime._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 57, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeologicTime._Automaton = _BuildAutomaton_7()




TimeIndices._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexCount'), PositiveLong, scope=TimeIndices, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 70, 3)))

TimeIndices._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexStart'), NonNegativeLong, scope=TimeIndices, documentation='The index of the start time in the time series, if not zero.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 71, 3)))

TimeIndices._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimulatorTimeStep'), AbstractIntegerArray, scope=TimeIndices, documentation='Simulation time step for each time index', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 76, 3)))

TimeIndices._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UseInterval'), pyxb.binding.datatypes.boolean, scope=TimeIndices, documentation='When UseInterval is true, the values are associated with each time intervals between two consecutive time entries instead of each individual time entry. As a consequence the dimension of the value array corresponding to the time series is the number of entry in the series minus one.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 81, 3)))

TimeIndices._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries'), DataObjectReference, scope=TimeIndices, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 86, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 71, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 76, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndices._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexCount')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 70, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndices._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndexStart')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 71, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndices._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimulatorTimeStep')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 76, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndices._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UseInterval')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 81, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeIndices._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSeries')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 86, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeIndices._Automaton = _BuildAutomaton_8()




TimeSeriesParentage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HasOverlap'), pyxb.binding.datatypes.boolean, scope=TimeSeriesParentage, documentation='Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 112, 3)))

TimeSeriesParentage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ParentTimeIndex'), TimeIndex, scope=TimeSeriesParentage, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 117, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeriesParentage._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HasOverlap')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 112, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeSeriesParentage._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ParentTimeIndex')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeSeriesParentage._Automaton = _BuildAutomaton_9()




IndexRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IndexMinimum'), String64, scope=IndexRange, documentation="The minimum index for the range over which the referenced data's conformance with the policy is being assessed.", location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 16, 3)))

IndexRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IndexMaximum'), String64, scope=IndexRange, documentation="The maximum index for the range over which the referenced data's conformance with the policy is being assessed.", location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 21, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IndexRange._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IndexMinimum')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 16, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IndexRange._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IndexMaximum')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 21, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IndexRange._Automaton = _BuildAutomaton_10()




FailingRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RuleId'), String64, scope=FailingRule, documentation='Identifier of the atomic rule being checked against the data.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 86, 3)))

FailingRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RuleName'), String2000, scope=FailingRule, documentation='Human-readable name of the atomic rule being checked against the data.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 91, 3)))

FailingRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Severity'), String64, scope=FailingRule, documentation='Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.\n\nThe meaning of this field should be standardized within a company to maximize its utility.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 96, 3)))

FailingRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FailingRuleExtensions'), ExtensionNameValue, scope=FailingRule, documentation='This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.\n\nUses for this might include why the rule failed or by how much.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 103, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 91, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 96, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 103, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FailingRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RuleId')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 86, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FailingRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RuleName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 91, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FailingRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Severity')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 96, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FailingRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FailingRuleExtensions')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 103, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FailingRule._Automaton = _BuildAutomaton_11()




AbstractGraphicalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetObject'), DataObjectReference, scope=AbstractGraphicalInformation, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 10, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractGraphicalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetObject')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 10, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractGraphicalInformation._Automaton = _BuildAutomaton_12()




ExternalDataset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalFileProxy'), ExternalDatasetPart, scope=ExternalDataset, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 22, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExternalDataset._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalFileProxy')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 22, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExternalDataset._Automaton = _BuildAutomaton_13()




ExternalDatasetPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=ExternalDatasetPart, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 49, 3)))

ExternalDatasetPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PathInExternalFile'), String2000, scope=ExternalDatasetPart, documentation="A string which is meaningful to the API which will store and retrieve data from the external file.\n\nFor an HDF file this is the path of the referenced dataset in the external file. The separator between groups and final dataset is a slash '/' in an hdf file.\n\nFor a LAS file this could be the list of mnemonics in the ~A block.\n\nFor a SEG-Y file this could be a list of trace headers.", location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 50, 3)))

ExternalDatasetPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartIndex'), NonNegativeLong, scope=ExternalDatasetPart, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 61, 3)))

ExternalDatasetPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpcExternalPartReference'), DataObjectReference, scope=ExternalDatasetPart, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 62, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExternalDatasetPart._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 49, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExternalDatasetPart._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PathInExternalFile')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 50, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExternalDatasetPart._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartIndex')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 61, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExternalDatasetPart._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EpcExternalPartReference')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 62, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExternalDatasetPart._Automaton = _BuildAutomaton_14()




DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContentType'), String2000, scope=DataObjectReference, documentation='The content type of the referenced element.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 70, 3)))

DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), String2000, scope=DataObjectReference, documentation='The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object. ', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 75, 3)))

DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Uuid'), UuidString, scope=DataObjectReference, documentation='Reference to an object using its global UID.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 80, 3)))

DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UuidAuthority'), String64, scope=DataObjectReference, documentation='The authority that issued and maintains the uuid of the referenced object.\nUsed mainly in alias context.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 85, 3)))

DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Uri'), pyxb.binding.datatypes.anyURI, scope=DataObjectReference, documentation='This is the URI of a referenced object. \n\nDo not use this to store the path and file names of an external object - that is done through the External Dataset machinery.\n\nThis element is intended for use with the Energistics Transfer Protocol.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 91, 3)))

DataObjectReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VersionString'), String64, scope=DataObjectReference, documentation='Indicates the version of the object which is referenced.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 100, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 91, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 100, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContentType')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 70, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 75, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Uuid')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 80, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UuidAuthority')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 85, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Uri')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 91, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataObjectReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VersionString')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 100, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataObjectReference._Automaton = _BuildAutomaton_15()




DensityValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Density'), MassPerVolumeMeasureExt, scope=DensityValue, documentation='The density of the product.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 67, 9)))

DensityValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), AbstractTemperaturePressure, scope=DensityValue, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 75, 9)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DensityValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Density')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 67, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DensityValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 75, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DensityValue._Automaton = _BuildAutomaton_16()




FlowRateValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlowRate'), VolumePerTimeMeasureExt, scope=FlowRateValue, documentation='The flow rate of the product. If the \'status\' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 86, 9)))

FlowRateValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), AbstractTemperaturePressure, scope=FlowRateValue, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 94, 9)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FlowRateValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FlowRate')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 86, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FlowRateValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 94, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FlowRateValue._Automaton = _BuildAutomaton_17()




PressureValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPressureValue'), AbstractPressureValue, scope=PressureValue, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 118, 9)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PressureValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractPressureValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 118, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PressureValue._Automaton = _BuildAutomaton_18()




VolumeValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Volume'), VolumeMeasureExt, scope=VolumeValue, documentation='The volume of the product. If the \'status\' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 201, 9)))

VolumeValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature'), AbstractTemperaturePressure, scope=VolumeValue, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 209, 9)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VolumeValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Volume')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 201, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VolumeValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPressureTemperature')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 209, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VolumeValue._Automaton = _BuildAutomaton_19()




TimeIndexParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex'), TimeIndex, scope=TimeIndexParameter, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 103, 5)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 103, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeIndexParameter._Automaton = _BuildAutomaton_20()




DoubleQuantityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.double, scope=DoubleQuantityParameter, documentation='Double value', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 131, 5)))

DoubleQuantityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Uom'), UnitOfMeasureExt, scope=DoubleQuantityParameter, documentation='Unit of measure associated with the value', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 136, 5)))

DoubleQuantityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CustomUnitDictionary'), DataObjectReference, scope=DoubleQuantityParameter, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 141, 5)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 141, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 131, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Uom')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 136, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DoubleQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomUnitDictionary')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 141, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DoubleQuantityParameter._Automaton = _BuildAutomaton_21()




IntegerQuantityParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.long, scope=IntegerQuantityParameter, documentation='Integer value', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 153, 5)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerQuantityParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 153, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerQuantityParameter._Automaton = _BuildAutomaton_22()




StringParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), String2000, scope=StringParameter, documentation='String value', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 169, 5)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StringParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StringParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StringParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StringParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StringParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 169, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StringParameter._Automaton = _BuildAutomaton_23()




DataObjectParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataObject'), DataObjectReference, scope=DataObjectParameter, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 185, 5)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Index')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Selection')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 223, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataObjectParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Key')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 228, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataObjectParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataObject')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 185, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataObjectParameter._Automaton = _BuildAutomaton_24()




TimeIndexParameterKey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex'), TimeIndex, scope=TimeIndexParameterKey, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 194, 5)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeIndexParameterKey._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndex')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 194, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeIndexParameterKey._Automaton = _BuildAutomaton_25()




ObjectParameterKey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataObject'), DataObjectReference, scope=ObjectParameterKey, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 203, 5)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ObjectParameterKey._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataObject')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 203, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ObjectParameterKey._Automaton = _BuildAutomaton_26()




ProjectedEpsgCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), PositiveLong, scope=ProjectedEpsgCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 16, 5)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedEpsgCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 16, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedEpsgCrs._Automaton = _BuildAutomaton_27()




VerticalUnknownCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), String2000, scope=VerticalUnknownCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 42, 5)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalUnknownCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unknown')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 42, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalUnknownCrs._Automaton = _BuildAutomaton_28()




GeodeticUnknownCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), String2000, scope=GeodeticUnknownCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 68, 5)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticUnknownCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unknown')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 68, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticUnknownCrs._Automaton = _BuildAutomaton_29()




ProjectedWktCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), pyxb.binding.datatypes.string, scope=ProjectedWktCrs, documentation='ISO 19162 compliant well known text of the CRS', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 83, 5)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedWktCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 83, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedWktCrs._Automaton = _BuildAutomaton_30()




VerticalEpsgCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), PositiveLong, scope=VerticalEpsgCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 99, 5)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalEpsgCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 99, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalEpsgCrs._Automaton = _BuildAutomaton_31()




VerticalLocalAuthorityCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), AuthorityQualifiedName, scope=VerticalLocalAuthorityCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 111, 5)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalLocalAuthorityCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 111, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalLocalAuthorityCrs._Automaton = _BuildAutomaton_32()




VerticalGmlCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GmlVerticalCrsDefinition'), _ImportedBinding_bindings_v20__nsgroup.VerticalCRSType, scope=VerticalGmlCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 123, 5)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalGmlCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GmlVerticalCrsDefinition')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 123, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalGmlCrs._Automaton = _BuildAutomaton_33()




GeodeticLocalAuthorityCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), AuthorityQualifiedName, scope=GeodeticLocalAuthorityCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 135, 5)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticLocalAuthorityCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 135, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticLocalAuthorityCrs._Automaton = _BuildAutomaton_34()




ProjectedUnknownCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unknown'), String2000, scope=ProjectedUnknownCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 147, 5)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedUnknownCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unknown')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 147, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedUnknownCrs._Automaton = _BuildAutomaton_35()




GeodeticEpsgCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode'), PositiveLong, scope=GeodeticEpsgCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 159, 5)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticEpsgCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EpsgCode')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 159, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticEpsgCrs._Automaton = _BuildAutomaton_36()




GeodeticGmlCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition'), _ImportedBinding_bindings_v20__nsgroup.GeodeticCRSType, scope=GeodeticGmlCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 171, 5)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticGmlCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 171, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticGmlCrs._Automaton = _BuildAutomaton_37()




ProjectedGmlCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition'), _ImportedBinding_bindings_v20__nsgroup.ProjectedCRSType, scope=ProjectedGmlCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 183, 5)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedGmlCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GmlProjectedCrsDefinition')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 183, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedGmlCrs._Automaton = _BuildAutomaton_38()




ProjectedLocalAuthorityCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName'), AuthorityQualifiedName, scope=ProjectedLocalAuthorityCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 195, 5)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedLocalAuthorityCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalAuthorityCrsName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 195, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedLocalAuthorityCrs._Automaton = _BuildAutomaton_39()




GeodeticWktCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), pyxb.binding.datatypes.string, scope=GeodeticWktCrs, documentation='ISO 19162 compliant well known text of the CRS', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 207, 5)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticWktCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 207, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticWktCrs._Automaton = _BuildAutomaton_40()




VerticalWktCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText'), pyxb.binding.datatypes.string, scope=VerticalWktCrs, documentation='ISO 19162 compliant well known text of the CRS', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 286, 5)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalWktCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WellKnownText')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 286, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalWktCrs._Automaton = _BuildAutomaton_41()




AbsolutePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbsolutePressure'), PressureMeasureExt, scope=AbsolutePressure, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 45, 15)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbsolutePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbsolutePressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 45, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbsolutePressure._Automaton = _BuildAutomaton_42()




GaugePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GaugePressure'), PressureMeasureExt, scope=GaugePressure, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 104, 15)))

GaugePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure'), ReferencePressure, scope=GaugePressure, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 108, 15)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 108, 15))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GaugePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GaugePressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 104, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GaugePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 108, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GaugePressure._Automaton = _BuildAutomaton_43()




ReferenceTemperaturePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceTempPres'), ReferenceConditionExt, scope=ReferenceTemperaturePressure, documentation='Defines the reference temperature and pressure to which the density has been corrected. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the procuctVolume root.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 141, 15)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 140, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReferenceTemperaturePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferenceTempPres')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 141, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReferenceTemperaturePressure._Automaton = _BuildAutomaton_44()




RelativePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelativePressure'), PressureMeasure, scope=RelativePressure, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 157, 15)))

RelativePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure'), ReferencePressure, scope=RelativePressure, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 161, 15)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RelativePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelativePressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 157, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelativePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferencePressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 161, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RelativePressure._Automaton = _BuildAutomaton_45()




TemperaturePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Temperature'), ThermodynamicTemperatureMeasure, scope=TemperaturePressure, documentation='The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 176, 15)))

TemperaturePressure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pressure'), PressureMeasure, scope=TemperaturePressure, documentation='The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 184, 15)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperaturePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Temperature')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 176, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemperaturePressure._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pressure')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ValueTypes.xsd', 184, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TemperaturePressure._Automaton = _BuildAutomaton_46()




ObjectAlias._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Identifier'), String64, scope=ObjectAlias, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 209, 3)))

ObjectAlias._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), String2000, scope=ObjectAlias, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 210, 3)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 210, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ObjectAlias._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Identifier')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 209, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ObjectAlias._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 210, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ObjectAlias._Automaton = _BuildAutomaton_47()




TvdInterval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TvdTop'), LengthMeasure, scope=TvdInterval, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 145, 3)))

TvdInterval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TvdBase'), LengthMeasure, scope=TvdInterval, documentation='True vertical depth at the base of the interval', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 146, 3)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TvdInterval._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TvdTop')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 145, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TvdInterval._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TvdBase')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 146, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TvdInterval._Automaton = _BuildAutomaton_48()




BooleanConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.boolean, scope=BooleanConstantArray, documentation='Value inside all the elements of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 161, 5)))

BooleanConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=BooleanConstantArray, documentation='Size of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 166, 5)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BooleanConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 161, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BooleanConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 166, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BooleanConstantArray._Automaton = _BuildAutomaton_49()




BooleanExternalArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ExternalDataset, scope=BooleanExternalArray, documentation='Reference to an HDF5 array of values.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 182, 5)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BooleanExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 182, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BooleanExternalArray._Automaton = _BuildAutomaton_50()




MdInterval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MdTop'), LengthMeasure, scope=MdInterval, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 250, 3)))

MdInterval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MdBase'), LengthMeasure, scope=MdInterval, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 251, 3)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MdInterval._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MdTop')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 250, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MdInterval._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MdBase')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 251, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MdInterval._Automaton = _BuildAutomaton_51()




StringExternalArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ExternalDataset, scope=StringExternalArray, documentation='Reference to HDF5 array of integer or double', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 317, 5)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StringExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 317, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StringExternalArray._Automaton = _BuildAutomaton_52()




StringConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), String2000, scope=StringConstantArray, documentation='Value inside all the elements of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 354, 5)))

StringConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=StringConstantArray, documentation='Size of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 359, 5)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StringConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 354, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StringConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 359, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StringConstantArray._Automaton = _BuildAutomaton_53()




BooleanArrayFromIndexArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=BooleanArrayFromIndexArray, documentation='Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 380, 5)))

BooleanArrayFromIndexArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Indices'), AbstractIntegerArray, scope=BooleanArrayFromIndexArray, documentation='Array of integer indices.\n\nBUSINESS RULE: Must be non-negative.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 385, 5)))

BooleanArrayFromIndexArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IndexIsTrue'), pyxb.binding.datatypes.boolean, scope=BooleanArrayFromIndexArray, documentation='Indicates whether the specified elements are true or false.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 392, 5)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BooleanArrayFromIndexArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 380, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BooleanArrayFromIndexArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Indices')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 385, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BooleanArrayFromIndexArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IndexIsTrue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 392, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BooleanArrayFromIndexArray._Automaton = _BuildAutomaton_54()




FloatingPointExternalArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ExternalDataset, scope=FloatingPointExternalArray, documentation='Reference to an HDF5 array of doubles.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 71, 5)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FloatingPointExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 71, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FloatingPointExternalArray._Automaton = _BuildAutomaton_55()




IntegerLatticeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartValue'), pyxb.binding.datatypes.long, scope=IntegerLatticeArray, documentation='Value representing the global start for the lattice:\ni.e., iStart + jStart*ni + kStart*ni*nj', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 90, 5)))

IntegerLatticeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Offset'), IntegerConstantArray, scope=IntegerLatticeArray, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 96, 5)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerLatticeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 90, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerLatticeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Offset')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 96, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerLatticeArray._Automaton = _BuildAutomaton_56()




FloatingPointConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.double, scope=FloatingPointConstantArray, documentation='Values inside all the elements of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 108, 5)))

FloatingPointConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=FloatingPointConstantArray, documentation='Size of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 113, 5)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FloatingPointConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 108, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FloatingPointConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 113, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FloatingPointConstantArray._Automaton = _BuildAutomaton_57()




IntegerConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.long, scope=IntegerConstantArray, documentation='Values inside all the elements of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 129, 5)))

IntegerConstantArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=IntegerConstantArray, documentation='Size of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 134, 5)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 129, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerConstantArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 134, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerConstantArray._Automaton = _BuildAutomaton_58()




IntegerArrayFromBooleanMaskArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TotalIndexCount'), PositiveLong, scope=IntegerArrayFromBooleanMaskArray, documentation='Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 219, 5)))

IntegerArrayFromBooleanMaskArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Mask'), AbstractBooleanArray, scope=IntegerArrayFromBooleanMaskArray, documentation='Boolean mask. A true element indicates that the index is included on the list of integer values.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 224, 5)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerArrayFromBooleanMaskArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TotalIndexCount')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 219, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerArrayFromBooleanMaskArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Mask')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 224, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerArrayFromBooleanMaskArray._Automaton = _BuildAutomaton_59()




IntegerExternalArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NullValue'), pyxb.binding.datatypes.long, scope=IntegerExternalArray, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 408, 5)))

IntegerExternalArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Values'), ExternalDataset, scope=IntegerExternalArray, documentation='Reference to an HDF5 array of integers or doubles.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 409, 5)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NullValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 408, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 409, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerExternalArray._Automaton = _BuildAutomaton_60()




FloatingPointLatticeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartValue'), pyxb.binding.datatypes.double, scope=FloatingPointLatticeArray, documentation='Value representing the global start for the lattice.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 428, 5)))

FloatingPointLatticeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Offset'), FloatingPointConstantArray, scope=FloatingPointLatticeArray, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 433, 5)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FloatingPointLatticeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 428, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FloatingPointLatticeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Offset')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 433, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FloatingPointLatticeArray._Automaton = _BuildAutomaton_61()




IntegerRangeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Count'), PositiveLong, scope=IntegerRangeArray, documentation='Size of the array.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 450, 5)))

IntegerRangeArray._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), pyxb.binding.datatypes.long, scope=IntegerRangeArray, documentation='Start value for the range.\nEnd value is start+count-1.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 455, 5)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IntegerRangeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Count')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 450, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IntegerRangeArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 455, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IntegerRangeArray._Automaton = _BuildAutomaton_62()




AbstractObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Aliases'), ObjectAlias, scope=AbstractObject, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3)))

AbstractObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Citation'), Citation, scope=AbstractObject, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3)))

AbstractObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CustomData'), CustomData, scope=AbstractObject, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3)))

AbstractObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue'), ExtensionNameValue, scope=AbstractObject, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObject._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractObject._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObject._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObject._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractObject._Automaton = _BuildAutomaton_63()




def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FloatExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 71, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FloatExternalArray._Automaton = _BuildAutomaton_64()




def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DoubleExternalArray._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Values')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/BaseTypes.xsd', 71, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DoubleExternalArray._Automaton = _BuildAutomaton_65()




Activity_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActivityDescriptor'), DataObjectReference, scope=Activity_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 19, 5)))

Activity_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Parent'), DataObjectReference, scope=Activity_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 20, 5)))

Activity_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Parameter'), AbstractActivityParameter, scope=Activity_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 21, 5)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 20, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActivityDescriptor')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 19, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Parent')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 20, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Activity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Parameter')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 21, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Activity_._Automaton = _BuildAutomaton_66()




ActivityTemplate_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Parameter'), ParameterTemplate, scope=ActivityTemplate_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 34, 5)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ActivityTemplate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ActivityTemplate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ActivityTemplate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ActivityTemplate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ActivityTemplate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Parameter')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Activities.xsd', 34, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ActivityTemplate_._Automaton = _BuildAutomaton_67()




VerticalCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Direction'), VerticalDirection, scope=VerticalCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 25, 5)))

VerticalCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractVerticalCrs'), AbstractVerticalCrs, scope=VerticalCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 26, 5)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Direction')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 25, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractVerticalCrs')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalCrs._Automaton = _BuildAutomaton_68()




ProjectedCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AxisOrder'), AxisOrder2d, scope=ProjectedCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 54, 5)))

ProjectedCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractProjectedCrs'), AbstractProjectedCrs, scope=ProjectedCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 55, 5)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AxisOrder')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 54, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProjectedCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractProjectedCrs')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 55, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProjectedCrs._Automaton = _BuildAutomaton_69()




GeodeticCrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeodeticCrs'), AbstractGeodeticCrs, scope=GeodeticCrs, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 257, 5)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticCrs._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeodeticCrs')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CRS.xsd', 257, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticCrs._Automaton = _BuildAutomaton_70()




PropertyKindDictionary_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropertyKind'), PropertyKind_, scope=PropertyKindDictionary_, documentation='Defines which property kind are contained into a property kind dictionary.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 17, 5)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 17, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKindDictionary_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKindDictionary_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKindDictionary_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKindDictionary_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PropertyKindDictionary_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropertyKind')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 17, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropertyKindDictionary_._Automaton = _BuildAutomaton_71()




TimeSeries_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Time'), GeologicTime, scope=TimeSeries_, documentation='Individual times composing the series. The list ordering is used by the time index.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 97, 5)))

TimeSeries_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSeriesParentage'), TimeSeriesParentage, scope=TimeSeries_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 102, 5)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 102, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Time')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 97, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TimeSeries_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSeriesParentage')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 102, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeSeries_._Automaton = _BuildAutomaton_72()




PropertyKind_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsAbstract'), pyxb.binding.datatypes.boolean, scope=PropertyKind_, documentation='This boolean indicates whether the PropertyKind should be used as a real property or not.\n\nIf the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of "force per length" shouldn\'t be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property "surface tension".', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 128, 5)))

PropertyKind_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeprecationDate'), TimeStamp, scope=PropertyKind_, documentation='Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference. \n\nA null value means the property kind is still valid.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 135, 5)))

PropertyKind_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'QuantityClass'), QuantityClassKindExt, scope=PropertyKind_, documentation='A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary.\nIf there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 142, 5)))

PropertyKind_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Parent'), DataObjectReference, scope=PropertyKind_, documentation='Indicates the parent of this property kind.\nBUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 148, 5)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 135, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 148, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsAbstract')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 128, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeprecationDate')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 135, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'QuantityClass')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 142, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PropertyKind_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Parent')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/CommonTypes.xsd', 148, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropertyKind_._Automaton = _BuildAutomaton_73()




DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolicyId'), String64, scope=DataAssuranceRecord_, documentation='Identifier of the policy whose conformance is being described.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 36, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolicyName'), String2000, scope=DataAssuranceRecord_, documentation='Human-readable name of the policy', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 41, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementName'), String64, scope=DataAssuranceRecord_, documentation='If the Policy applies to a single element within the referenced data object this attribute holds its element name.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 46, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementUid'), String64, scope=DataAssuranceRecord_, documentation='If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.\n\nThe name of the recurring element would be in the ReferencedElementName.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 51, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Origin'), pyxb.binding.datatypes.string, scope=DataAssuranceRecord_, documentation='Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 58, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Conformance'), pyxb.binding.datatypes.boolean, scope=DataAssuranceRecord_, documentation='Yes/no flag indicating whether this particular data ???? conforms with the policy or not.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 63, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), TimeStamp, scope=DataAssuranceRecord_, documentation='Date the policy was last checked. This is the date for which the Conformance value is valid.', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 68, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Comment'), pyxb.binding.datatypes.string, scope=DataAssuranceRecord_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 73, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FailingRules'), FailingRule, scope=DataAssuranceRecord_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 74, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IndexRange'), IndexRange, scope=DataAssuranceRecord_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 75, 5)))

DataAssuranceRecord_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferencedData'), DataObjectReference, scope=DataAssuranceRecord_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 76, 5)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 41, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 46, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 51, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 73, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 74, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 75, 5))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolicyId')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 36, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolicyName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 41, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementName')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 46, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferencedElementUid')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 51, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Origin')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 58, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Conformance')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 63, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 68, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Comment')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 73, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FailingRules')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 74, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IndexRange')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 75, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataAssuranceRecord_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferencedData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/DataAssurance.xsd', 76, 5))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataAssuranceRecord_._Automaton = _BuildAutomaton_74()




GraphicalInformationSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GraphicalInformation'), AbstractGraphicalInformation, scope=GraphicalInformationSet_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 18, 5)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 18, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GraphicalInformationSet_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GraphicalInformationSet_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GraphicalInformationSet_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GraphicalInformationSet_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GraphicalInformationSet_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GraphicalInformation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/GraphicalInformation.xsd', 18, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GraphicalInformationSet_._Automaton = _BuildAutomaton_75()




EpcExternalPartReference_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Filename'), String2000, scope=EpcExternalPartReference_, location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 35, 5)))

EpcExternalPartReference_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MimeType'), String2000, scope=EpcExternalPartReference_, documentation='IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.\n\nMIME type for HDF proxy is : application/x-hdf5 (by convention). ', location=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 36, 5)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 35, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 36, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Aliases')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 85, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Citation')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 86, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomData')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 87, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtensionNameValue')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/Abstract.xsd', 88, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Filename')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 35, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(EpcExternalPartReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MimeType')), pyxb.utils.utility.Location('http://w3.energistics.org/energyML/data/common/v2.1/xsd_schemas/ObjectReference.xsd', 36, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EpcExternalPartReference_._Automaton = _BuildAutomaton_76()


Activity._setSubstitutionGroup(AbstractDataObject)

ActivityTemplate._setSubstitutionGroup(AbstractDataObject)

PropertyKindDictionary._setSubstitutionGroup(AbstractDataObject)

TimeSeries._setSubstitutionGroup(AbstractDataObject)

PropertyKind._setSubstitutionGroup(AbstractDataObject)

DataAssuranceRecord._setSubstitutionGroup(AbstractDataObject)

GraphicalInformationSet._setSubstitutionGroup(AbstractDataObject)

EpcExternalPartReference._setSubstitutionGroup(AbstractDataObject)
