Metadata-Version: 2.1
Name: jupyter_server_synchronizer
Version: 0.0.10
Summary: A Jupyter Server Session Manager that rehydrates and synchronizes Jupyter sessions (e.g. notebook-kernel connections).
Project-URL: Homepage, https://jupyter-server-synchronizer.readthedocs.io
Project-URL: Documentation, https://jupyter-server-synchronizer.readthedocs.io
Project-URL: Funding, https://numfocus.org/donate
Project-URL: Source, https://github.com/jupyter-server/synchronizer
Project-URL: Tracker, https://github.com/jupyter-server/synchronizer/issues
Author-email: Jupyter Development Team <jupyter@googlegroups.com>
License: # Licensing terms
        
        This project is licensed under the terms of the Modified BSD License
        (also known as New or Revised or 3-Clause BSD), as follows:
        
        - Copyright (c) 2022-, Jupyter Development Team
        
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
        
        Redistributions in binary form must reproduce the above copyright notice, this
        list of conditions and the following disclaimer in the documentation and/or
        other materials provided with the distribution.
        
        Neither the name of the Jupyter Development Team nor the names of its
        contributors may be used to endorse or promote products derived from this
        software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        ## About the Jupyter Development Team
        
        The Jupyter Development Team is the set of all contributors to the Jupyter project.
        This includes all of the Jupyter subprojects.
        
        The core team that coordinates development on GitHub can be found here:
        https://github.com/jupyter/.
        
        ## Our Copyright Policy
        
        Jupyter uses a shared copyright model. Each contributor maintains copyright
        over their contributions to Jupyter. But, it is important to note that these
        contributions are typically only changes to the repositories. Thus, the Jupyter
        source code, in its entirety is not the copyright of any single person or
        institution. Instead, it is the collective copyright of the entire Jupyter
        Development Team. If individual contributors want to maintain a record of what
        changes/contributions they have specific copyright on, they should indicate
        their copyright in the commit message of the change, when they commit the
        change to one of the Jupyter repositories.
        
        With this in mind, the following banner should be used in any source code file
        to indicate the copyright and license terms:
        
        ```
        # Copyright (c) Jupyter Development Team.
        # Distributed under the terms of the Modified BSD License.
        ```
License-File: COPYING.md
License-File: LICENSE
Keywords: ipython,jupyter
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: Jupyter
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.8
Requires-Dist: jupyter-server>=1.21.0
Provides-Extra: test
Requires-Dist: pre-commit; extra == 'test'
Requires-Dist: pytest-jupyter[server]>=0.4.1; extra == 'test'
Requires-Dist: pytest-timeout; extra == 'test'
Requires-Dist: pytest>=7.0; extra == 'test'
Description-Content-Type: text/markdown

# Jupyter Server Synchronizer

[![Build Status](https://github.com/jupyter-server/synchronizer/actions/workflows/python-tests.yml/badge.svg?query=branch%3Amain++)](https://github.com/jupyter-server/synchronizer/actions/workflows/python-tests.yml/badge.svg?query=branch%3Amain++)
[![codecov](https://codecov.io/gh/jupyter-server/synchronizer/branch/main/graph/badge.svg?token=9ZWRV75IV5)](https://codecov.io/gh/jupyter-server/synchronizer)

A Jupyter Server Session Manager that persists and rehydrates kernel sessions beyond the lifetime of a server.

This is particularly useful for Jupyter Servers running remote kernels and contents.

## Basic usage

Install and enable the extension:

```
pip install jupyter_server_synchronizer

jupyter server extension enable jupyter_server_synchronizer
```

When you start a Jupyter Server, it synchronize all managers before the Web application is started.

```
jupyter server --ServerApp.session_manager_class=jupyter_server_synchronizer.SynchronizerSessionManager
```

To synchronize periodically, enable the auto-synchronizing feature using the `autosync` config option. For example,

```
jupyter server --ServerApp.session_manager_class=jupyter_server_synchronizer.SynchronizerSessionManager --SynchronizerSessionManager.autosync=True
```

Otherwise, you can trigger the synchronization making a `POST` request to the `/api/sync` endpoint.

## Example

Below is a example of running the synchronizer with Jupyter Server talking to a Jupyter Kernel Gateway as its "remote" kernel service provider.

First, start the Kernel Gateway. You'll need to enable the `list_kernels` method. In the example, we are assuming the Kernel Gateway is _not_ multi-tenant; i.e. there is a single KG for a single Jupyter Server. We'll set the port to `9999` to free up `8888` for our Jupyter Server.

```
jupyter kernelgateway \
    --port 9999 \
    --JupyterWebsocketPersonality.list_kernels=True
```

Second, start the Jupyter Server and point it at the Kernel Gateway. Note that we set a `database_filepath` trait in both the `SessionManager` and `SynchronizerExtension` (these paths don't need to be the same). The Synchronize relies on saving/storing of information about Jupyter kernels and sessions in a persistent database. This information is necessary to rehydrate and synchronize.

We'll enable the "autosync" feature to periodically synchronize the server.

```
jupyter lab \
    --gateway-url=http://127.0.0.1:9999 \
    --ServerApp.session_manager_class=jupyter_server_synchronizer.SynchronizerSessionManager
    --SynchronizerSessionManager.database_filepath=jupyter-database.db \
    --SynchronizerSessionManager.autosync=True \
    --SynchronizerSessionManager.log_level=DEBUG
```

Now, let's kill that server:

```
kill -9 $(echo $(pgrep -lf jupyter-lab) | awk '{print $1;}')
```

And restart it to see if the kernels rehydrate and begin synchronizing again.

```
jupyter lab \
    --gateway-url=http://127.0.0.1:9999 \
    --ServerApp.session_manager_class=jupyter_server_synchronizer.SynchronizerSessionManager
    --SessionManager.database_filepath=jupyter-database.db \
    --SynchronizerSessionManager.autosync=True \
    --SynchronizerSessionManager.log_level=DEBUG
```
