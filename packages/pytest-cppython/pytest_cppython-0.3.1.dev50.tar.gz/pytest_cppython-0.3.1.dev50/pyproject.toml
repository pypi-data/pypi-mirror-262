[project]
description = "A pytest plugin that imports CPPython testing types"
name = "pytest-cppython"
authors = [
    { name = "Synodic Software", email = "contact@synodic.software" },
]
readme = "README.md"
dynamic = []
requires-python = ">=3.12"
dependencies = [
    "cppython-core>=0.4.1.dev13",
    "pytest-synodic>=0.0.0",
    "pydantic>=2.6.3",
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
]
version = "0.3.1.dev50"

[project.license]
text = "MIT"

[project.license-files]
paths = [
    "LICENSE.md",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/Pytest-CPPython"
repository = "https://github.com/Synodic-Software/Pytest-CPPython"

[project.entry-points."cppython.scm"]
mock = "pytest_cppython.mock.scm:MockSCM"

[project.entry-points."cppython.generator"]
mock = "pytest_cppython.mock.generator:MockGenerator"

[project.entry-points."cppython.provider"]
mock = "pytest_cppython.mock.provider:MockProvider"

[project.entry-points.pytest11]
pytest_cppython = "pytest_cppython.plugin"

[tool.pdm.options]
update = [
    "--update-all",
]

[tool.pdm.version]
source = "scm"

[tool.pdm.dev-dependencies]
lint = [
    "black>= 24.1.1",
    "isort>=5.13.2",
    "mypy>=1.9.0 ",
    "pylint>=2.17.5",
]
test = [
    "pytest-cov>=4.1.0",
]

[tool.pdm.scripts.analyze]
shell = "pylint --verbose pytest_cppython tests"

[tool.pdm.scripts.format]
shell = "black --check --verbose ."

[tool.pdm.scripts.lint]
composite = [
    "analyze",
    "format",
    "sort-imports",
    "type-check",
]

[tool.pdm.scripts.sort-imports]
shell = "isort --check-only --diff --verbose ."

[tool.pdm.scripts.test]
shell = "pytest --cov=pytest_cppython --verbose tests"

[tool.pdm.scripts.type-check]
shell = "mypy ."

[tool.pytest.ini_options]
log_cli = true
testpaths = [
    "tests",
]

[tool.black]
line-length = 120
preview = true

[tool.isort]
profile = "black"
skip_gitignore = true

[tool.mypy]
exclude = "__pypackages__"
plugins = [
    "pydantic.mypy",
]
show_error_codes = true
strict = true

[tool.pylint.MAIN]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
    "pylint.extensions.docstyle",
    "pylint.extensions.docparams",
    "pylint.extensions.private_import",
    "pylint.extensions.bad_builtin",
]

[tool.pylint.format]
max-line-length = "120"

[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
default-docstring-type = "google"

[tool.coverage.report]
skip_empty = true

[build-system]
build-backend = "pdm.backend"
requires = [
    "pdm.backend",
]
