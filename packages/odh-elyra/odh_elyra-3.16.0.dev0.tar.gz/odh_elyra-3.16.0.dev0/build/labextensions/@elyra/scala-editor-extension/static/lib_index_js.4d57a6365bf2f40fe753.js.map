{"version":3,"file":"lib_index_js.4d57a6365bf2f40fe753.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;ACnCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,0BAA0B,mBAAO,CAAC,gGAA6B;AAC/D,sBAAsB,mBAAO,CAAC,2CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,8CAA8C,kDAAkD,gBAAgB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf","sources":["webpack://@elyra/scala-editor-extension/./lib/ScalaEditor.js","webpack://@elyra/scala-editor-extension/./lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScalaEditor = void 0;\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst script_editor_1 = require(\"@elyra/script-editor\");\nconst ui_components_1 = require(\"@elyra/ui-components\");\nclass ScalaEditor extends script_editor_1.ScriptEditor {\n    /**\n     * Construct a new Scala Editor widget.\n     */\n    constructor(options) {\n        super(options);\n    }\n    getLanguage() {\n        return 'scala';\n    }\n    getIcon() {\n        return ui_components_1.scalaIcon;\n    }\n}\nexports.ScalaEditor = ScalaEditor;\n//# sourceMappingURL=ScalaEditor.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst script_editor_1 = require(\"@elyra/script-editor\");\nconst ui_components_1 = require(\"@elyra/ui-components\");\nconst application_1 = require(\"@jupyterlab/application\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst filebrowser_1 = require(\"@jupyterlab/filebrowser\");\nconst fileeditor_1 = require(\"@jupyterlab/fileeditor\");\nconst launcher_1 = require(\"@jupyterlab/launcher\");\nconst mainmenu_1 = require(\"@jupyterlab/mainmenu\");\nconst settingregistry_1 = require(\"@jupyterlab/settingregistry\");\nconst ScalaEditor_1 = require(\"./ScalaEditor\");\nconst SCALA_FACTORY = 'Scala Editor';\nconst SCALA = 'scala';\nconst SCALA_EDITOR_NAMESPACE = 'elyra-scala-editor-extension';\nconst commandIDs = {\n    createNewScalaEditor: 'script-editor:create-new-scala-editor',\n    openDocManager: 'docmanager:open',\n    newDocManager: 'docmanager:new-untitled'\n};\n/**\n * Initialization data for the scala-editor-extension extension.\n */\nconst extension = {\n    id: SCALA_EDITOR_NAMESPACE,\n    autoStart: true,\n    requires: [\n        codeeditor_1.IEditorServices,\n        fileeditor_1.IEditorTracker,\n        apputils_1.ICommandPalette,\n        settingregistry_1.ISettingRegistry,\n        filebrowser_1.IFileBrowserFactory\n    ],\n    optional: [application_1.ILayoutRestorer, mainmenu_1.IMainMenu, launcher_1.ILauncher],\n    activate: (app, editorServices, editorTracker, palette, settingRegistry, browserFactory, restorer, menu, launcher) => {\n        console.log('Elyra - scala-editor extension is activated!');\n        const factory = new script_editor_1.ScriptEditorWidgetFactory({\n            editorServices,\n            factoryOptions: {\n                name: SCALA_FACTORY,\n                fileTypes: [SCALA],\n                defaultFor: [SCALA]\n            },\n            instanceCreator: (options) => new ScalaEditor_1.ScalaEditor(options)\n        });\n        app.docRegistry.addFileType({\n            name: SCALA,\n            displayName: 'Scala File',\n            extensions: ['.scala'],\n            pattern: '.*\\\\.scala$',\n            mimeTypes: ['text/x-scala'],\n            icon: ui_components_1.scalaIcon\n        });\n        const { restored } = app;\n        /**\n         * Track ScalaEditor widget on page refresh\n         */\n        const tracker = new apputils_1.WidgetTracker({\n            namespace: SCALA_EDITOR_NAMESPACE\n        });\n        let config = Object.assign({}, codeeditor_1.CodeEditor.defaultConfig);\n        if (restorer) {\n            // Handle state restoration\n            void restorer.restore(tracker, {\n                command: commandIDs.openDocManager,\n                args: widget => ({\n                    path: widget.context.path,\n                    factory: SCALA_FACTORY\n                }),\n                name: widget => widget.context.path\n            });\n        }\n        /**\n         * Update the setting values. Adapted from fileeditor-extension.\n         */\n        const updateSettings = (settings) => {\n            config = Object.assign(Object.assign({}, codeeditor_1.CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n            // Trigger a refresh of the rendered commands\n            app.commands.notifyCommandChanged();\n        };\n        /**\n         * Update the settings of the current tracker instances. Adapted from fileeditor-extension.\n         */\n        const updateTracker = () => {\n            tracker.forEach(widget => {\n                updateWidget(widget);\n            });\n        };\n        /**\n         * Update the settings of a widget. Adapted from fileeditor-extension.\n         */\n        const updateWidget = (widget) => {\n            if (!editorTracker.has(widget)) {\n                editorTracker.add(widget);\n            }\n            const editor = widget.content.editor;\n            Object.keys(config).forEach((keyStr) => {\n                const key = keyStr;\n                editor.setOption(key, config[key]);\n            });\n        };\n        // Fetch the initial state of the settings. Adapted from fileeditor-extension.\n        Promise.all([\n            settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n            restored\n        ])\n            .then(([settings]) => {\n            updateSettings(settings);\n            updateTracker();\n            settings.changed.connect(() => {\n                updateSettings(settings);\n                updateTracker();\n            });\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n            updateTracker();\n        });\n        app.docRegistry.addWidgetFactory(factory);\n        factory.widgetCreated.connect((sender, widget) => {\n            void tracker.add(widget);\n            // Notify the widget tracker if restore data needs to update\n            widget.context.pathChanged.connect(() => {\n                void tracker.save(widget);\n            });\n            updateWidget(widget);\n        });\n        // Handle the settings of new widgets. Adapted from fileeditor-extension.\n        tracker.widgetAdded.connect((sender, widget) => {\n            updateWidget(widget);\n        });\n        /**\n         * Create new scala editor from launcher and file menu\n         */\n        // Add an scala launcher\n        if (launcher) {\n            launcher.add({\n                command: commandIDs.createNewScalaEditor,\n                category: 'Elyra',\n                rank: 4\n            });\n        }\n        if (menu) {\n            // Add new scala editor creation to the file menu\n            menu.fileMenu.newMenu.addGroup([{ command: commandIDs.createNewScalaEditor, args: { isMenu: true } }], 92);\n        }\n        // Function to create a new untitled scala file, given the current working directory\n        const createNew = (cwd) => {\n            return app.commands\n                .execute(commandIDs.newDocManager, {\n                path: cwd,\n                type: 'file',\n                ext: '.scala'\n            })\n                .then(model => {\n                return app.commands.execute(commandIDs.openDocManager, {\n                    path: model.path,\n                    factory: SCALA_FACTORY\n                });\n            });\n        };\n        // Add a command to create new scala editor\n        app.commands.addCommand(commandIDs.createNewScalaEditor, {\n            label: args => (args['isPalette'] ? 'New Scala Editor' : 'Scala Editor'),\n            caption: 'Create a new Scala Editor',\n            icon: args => (args['isPalette'] ? undefined : ui_components_1.scalaIcon),\n            execute: args => {\n                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;\n                return createNew(cwd);\n            }\n        });\n        palette.addItem({\n            command: commandIDs.createNewScalaEditor,\n            args: { isPalette: true },\n            category: 'Elyra'\n        });\n    }\n};\nexports.default = extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}