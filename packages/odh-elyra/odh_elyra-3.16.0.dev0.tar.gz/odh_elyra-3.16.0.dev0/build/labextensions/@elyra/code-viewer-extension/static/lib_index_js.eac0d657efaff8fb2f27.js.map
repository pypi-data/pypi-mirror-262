{"version":3,"file":"lib_index_js.eac0d657efaff8fb2f27.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,iCAAiC;AACvE;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;AC/Ca;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,2BAA2B,mBAAO,CAAC,qDAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mCAAmC;AAC3H;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf","sources":["webpack://@elyra/code-viewer-extension/./lib/CodeViewerWidget.js","webpack://@elyra/code-viewer-extension/./lib/index.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeViewerWidget = void 0;\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst widgets_1 = require(\"@lumino/widgets\");\nclass CodeViewerWidget extends widgets_1.Widget {\n    /**\n     * Construct a new code viewer widget.\n     */\n    constructor(options) {\n        super();\n        this.getContent = () => this.model.value.text;\n        this.getMimeType = () => this.model.mimeType;\n        this.model = options.model;\n        const editorWidget = new codeeditor_1.CodeEditorWrapper({\n            factory: options.factory,\n            model: options.model\n        });\n        this.editor = editorWidget.editor;\n        this.editor.setOption('readOnly', true);\n        const layout = (this.layout = new widgets_1.StackedLayout());\n        layout.addWidget(editorWidget);\n    }\n    static getCodeViewer(options) {\n        const model = new codeeditor_1.CodeEditor.Model({\n            value: options.content,\n            mimeType: options.mimeType\n        });\n        return new CodeViewerWidget({ factory: options.factory, model });\n    }\n}\nexports.CodeViewerWidget = CodeViewerWidget;\n//# sourceMappingURL=CodeViewerWidget.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst application_1 = require(\"@jupyterlab/application\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst ui_components_1 = require(\"@jupyterlab/ui-components\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst CodeViewerWidget_1 = require(\"./CodeViewerWidget\");\nconst ELYRA_CODE_VIEWER_NAMESPACE = 'elyra-code-viewer-extension';\n/**\n * The command IDs used by the code-viewer plugin.\n */\nconst CommandIDs = {\n    openViewer: 'elyra-code-viewer:open'\n};\n/**\n * Initialization data for the code-viewer extension.\n */\nconst extension = {\n    id: ELYRA_CODE_VIEWER_NAMESPACE,\n    autoStart: true,\n    requires: [codeeditor_1.IEditorServices],\n    optional: [application_1.ILayoutRestorer],\n    activate: (app, editorServices, restorer) => {\n        console.log('Elyra - code-viewer extension is activated!');\n        const tracker = new apputils_1.WidgetTracker({\n            namespace: ELYRA_CODE_VIEWER_NAMESPACE\n        });\n        // Handle state restoration\n        if (restorer) {\n            void restorer.restore(tracker, {\n                command: CommandIDs.openViewer,\n                args: widget => ({\n                    content: widget.content.getContent(),\n                    label: widget.content.title.label,\n                    mimeType: widget.content.getMimeType(),\n                    widgetId: widget.content.id\n                }),\n                name: widget => widget.content.id\n            });\n        }\n        const openCodeViewer = (args) => __awaiter(void 0, void 0, void 0, function* () {\n            var _a;\n            const func = editorServices.factoryService.newDocumentEditor;\n            const factory = options => {\n                return func(options);\n            };\n            // Derive mimetype from extension\n            let mimetype = args.mimeType;\n            if (!mimetype && args.extension) {\n                mimetype = editorServices.mimeTypeService.getMimeTypeByFilePath(`temp.${args.extension.replace(/\\\\.$/, '')}`);\n            }\n            const widget = CodeViewerWidget_1.CodeViewerWidget.getCodeViewer({\n                factory,\n                content: args.content,\n                mimeType: mimetype\n            });\n            widget.title.label = args.label || 'Code Viewer';\n            widget.title.caption = widget.title.label;\n            // Get the fileType based on the mimetype to determine the icon\n            const fileType = algorithm_1.toArray(app.docRegistry.fileTypes()).find(fileType => {\n                return mimetype ? fileType.mimeTypes.includes(mimetype) : undefined;\n            });\n            widget.title.icon = (_a = fileType === null || fileType === void 0 ? void 0 : fileType.icon) !== null && _a !== void 0 ? _a : ui_components_1.textEditorIcon;\n            if (args.widgetId) {\n                widget.id = args.widgetId;\n            }\n            const main = new apputils_1.MainAreaWidget({ content: widget });\n            yield tracker.add(main);\n            app.shell.add(main, 'main');\n            return widget;\n        });\n        app.commands.addCommand(CommandIDs.openViewer, {\n            execute: (args) => {\n                return openCodeViewer(args);\n            }\n        });\n    }\n};\nexports.default = extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}