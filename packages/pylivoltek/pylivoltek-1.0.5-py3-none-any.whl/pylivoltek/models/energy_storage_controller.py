# coding: utf-8

"""
    Livoltek API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnergyStorageController(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarm_status': 'object',
        'battery_info': 'object',
        'battery_info_unit': 'object',
        'battery_power': 'object',
        'battery_power_unit': 'object',
        'battery_soc': 'object',
        'battery_type': 'object',
        'battery_voltage': 'object',
        'battery_voltage_unit': 'object',
        'capacity': 'object',
        'capacity_unit': 'object',
        'carbon_reduction': 'object',
        'carbon_reduction_unit': 'object',
        'collector_sn': 'object',
        'currency_symbol': 'object',
        'e_total_to_grid_unit': 'object',
        'eout_daily_unit': 'object',
        'grid_active_power': 'object',
        'grid_active_power_unit': 'object',
        'input_frequency': 'object',
        'input_frequency_unit': 'object',
        'input_voltage': 'object',
        'input_voltage_unit': 'object',
        'intensity': 'object',
        'inverter_sn': 'object',
        'load_power': 'object',
        'load_power_unit': 'object',
        'name': 'object',
        'power_station_id': 'object',
        'power_station_name': 'object',
        'product_type_name': 'object',
        'pv_info': 'object',
        'pv_info_unit': 'object',
        'pv_power': 'object',
        'pv_power_unit': 'object',
        'registration_time': 'object',
        'registration_time_zone': 'object',
        'status': 'object',
        'temperature': 'object',
        'today_power_generation': 'object',
        'today_profit': 'object',
        'total_power_generation': 'object',
        'total_profit': 'object',
        'update_time': 'object',
        'update_time_zone': 'object',
        'work_status': 'object'
    }

    attribute_map = {
        'alarm_status': 'alarmStatus',
        'battery_info': 'batteryInfo',
        'battery_info_unit': 'batteryInfoUnit',
        'battery_power': 'batteryPower',
        'battery_power_unit': 'batteryPowerUnit',
        'battery_soc': 'batterySOC',
        'battery_type': 'batteryType',
        'battery_voltage': 'batteryVoltage',
        'battery_voltage_unit': 'batteryVoltageUnit',
        'capacity': 'capacity',
        'capacity_unit': 'capacityUnit',
        'carbon_reduction': 'carbonReduction',
        'carbon_reduction_unit': 'carbonReductionUnit',
        'collector_sn': 'collectorSn',
        'currency_symbol': 'currencySymbol',
        'e_total_to_grid_unit': 'eTotalToGridUnit',
        'eout_daily_unit': 'eoutDailyUnit',
        'grid_active_power': 'gridActivePower',
        'grid_active_power_unit': 'gridActivePowerUnit',
        'input_frequency': 'inputFrequency',
        'input_frequency_unit': 'inputFrequencyUnit',
        'input_voltage': 'inputVoltage',
        'input_voltage_unit': 'inputVoltageUnit',
        'intensity': 'intensity',
        'inverter_sn': 'inverterSn',
        'load_power': 'loadPower',
        'load_power_unit': 'loadPowerUnit',
        'name': 'name',
        'power_station_id': 'powerStationId',
        'power_station_name': 'powerStationName',
        'product_type_name': 'productTypeName',
        'pv_info': 'pvInfo',
        'pv_info_unit': 'pvInfoUnit',
        'pv_power': 'pvPower',
        'pv_power_unit': 'pvPowerUnit',
        'registration_time': 'registrationTime',
        'registration_time_zone': 'registrationTimeZone',
        'status': 'status',
        'temperature': 'temperature',
        'today_power_generation': 'todayPowerGeneration',
        'today_profit': 'todayProfit',
        'total_power_generation': 'totalPowerGeneration',
        'total_profit': 'totalProfit',
        'update_time': 'updateTime',
        'update_time_zone': 'updateTimeZone',
        'work_status': 'workStatus'
    }

    def __init__(self, alarm_status=None, battery_info=None, battery_info_unit=None, battery_power=None, battery_power_unit=None, battery_soc=None, battery_type=None, battery_voltage=None, battery_voltage_unit=None, capacity=None, capacity_unit=None, carbon_reduction=None, carbon_reduction_unit=None, collector_sn=None, currency_symbol=None, e_total_to_grid_unit=None, eout_daily_unit=None, grid_active_power=None, grid_active_power_unit=None, input_frequency=None, input_frequency_unit=None, input_voltage=None, input_voltage_unit=None, intensity=None, inverter_sn=None, load_power=None, load_power_unit=None, name=None, power_station_id=None, power_station_name=None, product_type_name=None, pv_info=None, pv_info_unit=None, pv_power=None, pv_power_unit=None, registration_time=None, registration_time_zone=None, status=None, temperature=None, today_power_generation=None, today_profit=None, total_power_generation=None, total_profit=None, update_time=None, update_time_zone=None, work_status=None):  # noqa: E501
        """EnergyStorageController - a model defined in Swagger"""  # noqa: E501
        self._alarm_status = None
        self._battery_info = None
        self._battery_info_unit = None
        self._battery_power = None
        self._battery_power_unit = None
        self._battery_soc = None
        self._battery_type = None
        self._battery_voltage = None
        self._battery_voltage_unit = None
        self._capacity = None
        self._capacity_unit = None
        self._carbon_reduction = None
        self._carbon_reduction_unit = None
        self._collector_sn = None
        self._currency_symbol = None
        self._e_total_to_grid_unit = None
        self._eout_daily_unit = None
        self._grid_active_power = None
        self._grid_active_power_unit = None
        self._input_frequency = None
        self._input_frequency_unit = None
        self._input_voltage = None
        self._input_voltage_unit = None
        self._intensity = None
        self._inverter_sn = None
        self._load_power = None
        self._load_power_unit = None
        self._name = None
        self._power_station_id = None
        self._power_station_name = None
        self._product_type_name = None
        self._pv_info = None
        self._pv_info_unit = None
        self._pv_power = None
        self._pv_power_unit = None
        self._registration_time = None
        self._registration_time_zone = None
        self._status = None
        self._temperature = None
        self._today_power_generation = None
        self._today_profit = None
        self._total_power_generation = None
        self._total_profit = None
        self._update_time = None
        self._update_time_zone = None
        self._work_status = None
        self.discriminator = None
        if alarm_status is not None:
            self.alarm_status = alarm_status
        if battery_info is not None:
            self.battery_info = battery_info
        if battery_info_unit is not None:
            self.battery_info_unit = battery_info_unit
        if battery_power is not None:
            self.battery_power = battery_power
        if battery_power_unit is not None:
            self.battery_power_unit = battery_power_unit
        if battery_soc is not None:
            self.battery_soc = battery_soc
        if battery_type is not None:
            self.battery_type = battery_type
        if battery_voltage is not None:
            self.battery_voltage = battery_voltage
        if battery_voltage_unit is not None:
            self.battery_voltage_unit = battery_voltage_unit
        if capacity is not None:
            self.capacity = capacity
        if capacity_unit is not None:
            self.capacity_unit = capacity_unit
        if carbon_reduction is not None:
            self.carbon_reduction = carbon_reduction
        if carbon_reduction_unit is not None:
            self.carbon_reduction_unit = carbon_reduction_unit
        if collector_sn is not None:
            self.collector_sn = collector_sn
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if e_total_to_grid_unit is not None:
            self.e_total_to_grid_unit = e_total_to_grid_unit
        if eout_daily_unit is not None:
            self.eout_daily_unit = eout_daily_unit
        if grid_active_power is not None:
            self.grid_active_power = grid_active_power
        if grid_active_power_unit is not None:
            self.grid_active_power_unit = grid_active_power_unit
        if input_frequency is not None:
            self.input_frequency = input_frequency
        if input_frequency_unit is not None:
            self.input_frequency_unit = input_frequency_unit
        if input_voltage is not None:
            self.input_voltage = input_voltage
        if input_voltage_unit is not None:
            self.input_voltage_unit = input_voltage_unit
        if intensity is not None:
            self.intensity = intensity
        if inverter_sn is not None:
            self.inverter_sn = inverter_sn
        if load_power is not None:
            self.load_power = load_power
        if load_power_unit is not None:
            self.load_power_unit = load_power_unit
        if name is not None:
            self.name = name
        if power_station_id is not None:
            self.power_station_id = power_station_id
        if power_station_name is not None:
            self.power_station_name = power_station_name
        if product_type_name is not None:
            self.product_type_name = product_type_name
        if pv_info is not None:
            self.pv_info = pv_info
        if pv_info_unit is not None:
            self.pv_info_unit = pv_info_unit
        if pv_power is not None:
            self.pv_power = pv_power
        if pv_power_unit is not None:
            self.pv_power_unit = pv_power_unit
        if registration_time is not None:
            self.registration_time = registration_time
        if registration_time_zone is not None:
            self.registration_time_zone = registration_time_zone
        if status is not None:
            self.status = status
        if temperature is not None:
            self.temperature = temperature
        if today_power_generation is not None:
            self.today_power_generation = today_power_generation
        if today_profit is not None:
            self.today_profit = today_profit
        if total_power_generation is not None:
            self.total_power_generation = total_power_generation
        if total_profit is not None:
            self.total_profit = total_profit
        if update_time is not None:
            self.update_time = update_time
        if update_time_zone is not None:
            self.update_time_zone = update_time_zone
        if work_status is not None:
            self.work_status = work_status

    @property
    def alarm_status(self):
        """Gets the alarm_status of this EnergyStorageController.  # noqa: E501


        :return: The alarm_status of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._alarm_status

    @alarm_status.setter
    def alarm_status(self, alarm_status):
        """Sets the alarm_status of this EnergyStorageController.


        :param alarm_status: The alarm_status of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._alarm_status = alarm_status

    @property
    def battery_info(self):
        """Gets the battery_info of this EnergyStorageController.  # noqa: E501


        :return: The battery_info of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_info

    @battery_info.setter
    def battery_info(self, battery_info):
        """Sets the battery_info of this EnergyStorageController.


        :param battery_info: The battery_info of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_info = battery_info

    @property
    def battery_info_unit(self):
        """Gets the battery_info_unit of this EnergyStorageController.  # noqa: E501


        :return: The battery_info_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_info_unit

    @battery_info_unit.setter
    def battery_info_unit(self, battery_info_unit):
        """Sets the battery_info_unit of this EnergyStorageController.


        :param battery_info_unit: The battery_info_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_info_unit = battery_info_unit

    @property
    def battery_power(self):
        """Gets the battery_power of this EnergyStorageController.  # noqa: E501


        :return: The battery_power of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_power

    @battery_power.setter
    def battery_power(self, battery_power):
        """Sets the battery_power of this EnergyStorageController.


        :param battery_power: The battery_power of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_power = battery_power

    @property
    def battery_power_unit(self):
        """Gets the battery_power_unit of this EnergyStorageController.  # noqa: E501


        :return: The battery_power_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_power_unit

    @battery_power_unit.setter
    def battery_power_unit(self, battery_power_unit):
        """Sets the battery_power_unit of this EnergyStorageController.


        :param battery_power_unit: The battery_power_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_power_unit = battery_power_unit

    @property
    def battery_soc(self):
        """Gets the battery_soc of this EnergyStorageController.  # noqa: E501


        :return: The battery_soc of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_soc

    @battery_soc.setter
    def battery_soc(self, battery_soc):
        """Sets the battery_soc of this EnergyStorageController.


        :param battery_soc: The battery_soc of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_soc = battery_soc

    @property
    def battery_type(self):
        """Gets the battery_type of this EnergyStorageController.  # noqa: E501


        :return: The battery_type of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_type

    @battery_type.setter
    def battery_type(self, battery_type):
        """Sets the battery_type of this EnergyStorageController.


        :param battery_type: The battery_type of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_type = battery_type

    @property
    def battery_voltage(self):
        """Gets the battery_voltage of this EnergyStorageController.  # noqa: E501


        :return: The battery_voltage of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_voltage

    @battery_voltage.setter
    def battery_voltage(self, battery_voltage):
        """Sets the battery_voltage of this EnergyStorageController.


        :param battery_voltage: The battery_voltage of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_voltage = battery_voltage

    @property
    def battery_voltage_unit(self):
        """Gets the battery_voltage_unit of this EnergyStorageController.  # noqa: E501


        :return: The battery_voltage_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._battery_voltage_unit

    @battery_voltage_unit.setter
    def battery_voltage_unit(self, battery_voltage_unit):
        """Sets the battery_voltage_unit of this EnergyStorageController.


        :param battery_voltage_unit: The battery_voltage_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._battery_voltage_unit = battery_voltage_unit

    @property
    def capacity(self):
        """Gets the capacity of this EnergyStorageController.  # noqa: E501


        :return: The capacity of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this EnergyStorageController.


        :param capacity: The capacity of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._capacity = capacity

    @property
    def capacity_unit(self):
        """Gets the capacity_unit of this EnergyStorageController.  # noqa: E501


        :return: The capacity_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._capacity_unit

    @capacity_unit.setter
    def capacity_unit(self, capacity_unit):
        """Sets the capacity_unit of this EnergyStorageController.


        :param capacity_unit: The capacity_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._capacity_unit = capacity_unit

    @property
    def carbon_reduction(self):
        """Gets the carbon_reduction of this EnergyStorageController.  # noqa: E501


        :return: The carbon_reduction of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._carbon_reduction

    @carbon_reduction.setter
    def carbon_reduction(self, carbon_reduction):
        """Sets the carbon_reduction of this EnergyStorageController.


        :param carbon_reduction: The carbon_reduction of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._carbon_reduction = carbon_reduction

    @property
    def carbon_reduction_unit(self):
        """Gets the carbon_reduction_unit of this EnergyStorageController.  # noqa: E501


        :return: The carbon_reduction_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._carbon_reduction_unit

    @carbon_reduction_unit.setter
    def carbon_reduction_unit(self, carbon_reduction_unit):
        """Sets the carbon_reduction_unit of this EnergyStorageController.


        :param carbon_reduction_unit: The carbon_reduction_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._carbon_reduction_unit = carbon_reduction_unit

    @property
    def collector_sn(self):
        """Gets the collector_sn of this EnergyStorageController.  # noqa: E501


        :return: The collector_sn of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._collector_sn

    @collector_sn.setter
    def collector_sn(self, collector_sn):
        """Sets the collector_sn of this EnergyStorageController.


        :param collector_sn: The collector_sn of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._collector_sn = collector_sn

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this EnergyStorageController.  # noqa: E501


        :return: The currency_symbol of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this EnergyStorageController.


        :param currency_symbol: The currency_symbol of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._currency_symbol = currency_symbol

    @property
    def e_total_to_grid_unit(self):
        """Gets the e_total_to_grid_unit of this EnergyStorageController.  # noqa: E501


        :return: The e_total_to_grid_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._e_total_to_grid_unit

    @e_total_to_grid_unit.setter
    def e_total_to_grid_unit(self, e_total_to_grid_unit):
        """Sets the e_total_to_grid_unit of this EnergyStorageController.


        :param e_total_to_grid_unit: The e_total_to_grid_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._e_total_to_grid_unit = e_total_to_grid_unit

    @property
    def eout_daily_unit(self):
        """Gets the eout_daily_unit of this EnergyStorageController.  # noqa: E501


        :return: The eout_daily_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._eout_daily_unit

    @eout_daily_unit.setter
    def eout_daily_unit(self, eout_daily_unit):
        """Sets the eout_daily_unit of this EnergyStorageController.


        :param eout_daily_unit: The eout_daily_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._eout_daily_unit = eout_daily_unit

    @property
    def grid_active_power(self):
        """Gets the grid_active_power of this EnergyStorageController.  # noqa: E501


        :return: The grid_active_power of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._grid_active_power

    @grid_active_power.setter
    def grid_active_power(self, grid_active_power):
        """Sets the grid_active_power of this EnergyStorageController.


        :param grid_active_power: The grid_active_power of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._grid_active_power = grid_active_power

    @property
    def grid_active_power_unit(self):
        """Gets the grid_active_power_unit of this EnergyStorageController.  # noqa: E501


        :return: The grid_active_power_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._grid_active_power_unit

    @grid_active_power_unit.setter
    def grid_active_power_unit(self, grid_active_power_unit):
        """Sets the grid_active_power_unit of this EnergyStorageController.


        :param grid_active_power_unit: The grid_active_power_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._grid_active_power_unit = grid_active_power_unit

    @property
    def input_frequency(self):
        """Gets the input_frequency of this EnergyStorageController.  # noqa: E501


        :return: The input_frequency of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._input_frequency

    @input_frequency.setter
    def input_frequency(self, input_frequency):
        """Sets the input_frequency of this EnergyStorageController.


        :param input_frequency: The input_frequency of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._input_frequency = input_frequency

    @property
    def input_frequency_unit(self):
        """Gets the input_frequency_unit of this EnergyStorageController.  # noqa: E501


        :return: The input_frequency_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._input_frequency_unit

    @input_frequency_unit.setter
    def input_frequency_unit(self, input_frequency_unit):
        """Sets the input_frequency_unit of this EnergyStorageController.


        :param input_frequency_unit: The input_frequency_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._input_frequency_unit = input_frequency_unit

    @property
    def input_voltage(self):
        """Gets the input_voltage of this EnergyStorageController.  # noqa: E501


        :return: The input_voltage of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._input_voltage

    @input_voltage.setter
    def input_voltage(self, input_voltage):
        """Sets the input_voltage of this EnergyStorageController.


        :param input_voltage: The input_voltage of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._input_voltage = input_voltage

    @property
    def input_voltage_unit(self):
        """Gets the input_voltage_unit of this EnergyStorageController.  # noqa: E501


        :return: The input_voltage_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._input_voltage_unit

    @input_voltage_unit.setter
    def input_voltage_unit(self, input_voltage_unit):
        """Sets the input_voltage_unit of this EnergyStorageController.


        :param input_voltage_unit: The input_voltage_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._input_voltage_unit = input_voltage_unit

    @property
    def intensity(self):
        """Gets the intensity of this EnergyStorageController.  # noqa: E501


        :return: The intensity of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this EnergyStorageController.


        :param intensity: The intensity of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._intensity = intensity

    @property
    def inverter_sn(self):
        """Gets the inverter_sn of this EnergyStorageController.  # noqa: E501


        :return: The inverter_sn of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._inverter_sn

    @inverter_sn.setter
    def inverter_sn(self, inverter_sn):
        """Sets the inverter_sn of this EnergyStorageController.


        :param inverter_sn: The inverter_sn of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._inverter_sn = inverter_sn

    @property
    def load_power(self):
        """Gets the load_power of this EnergyStorageController.  # noqa: E501


        :return: The load_power of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._load_power

    @load_power.setter
    def load_power(self, load_power):
        """Sets the load_power of this EnergyStorageController.


        :param load_power: The load_power of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._load_power = load_power

    @property
    def load_power_unit(self):
        """Gets the load_power_unit of this EnergyStorageController.  # noqa: E501


        :return: The load_power_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._load_power_unit

    @load_power_unit.setter
    def load_power_unit(self, load_power_unit):
        """Sets the load_power_unit of this EnergyStorageController.


        :param load_power_unit: The load_power_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._load_power_unit = load_power_unit

    @property
    def name(self):
        """Gets the name of this EnergyStorageController.  # noqa: E501


        :return: The name of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnergyStorageController.


        :param name: The name of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def power_station_id(self):
        """Gets the power_station_id of this EnergyStorageController.  # noqa: E501


        :return: The power_station_id of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._power_station_id

    @power_station_id.setter
    def power_station_id(self, power_station_id):
        """Sets the power_station_id of this EnergyStorageController.


        :param power_station_id: The power_station_id of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._power_station_id = power_station_id

    @property
    def power_station_name(self):
        """Gets the power_station_name of this EnergyStorageController.  # noqa: E501


        :return: The power_station_name of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._power_station_name

    @power_station_name.setter
    def power_station_name(self, power_station_name):
        """Sets the power_station_name of this EnergyStorageController.


        :param power_station_name: The power_station_name of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._power_station_name = power_station_name

    @property
    def product_type_name(self):
        """Gets the product_type_name of this EnergyStorageController.  # noqa: E501


        :return: The product_type_name of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._product_type_name

    @product_type_name.setter
    def product_type_name(self, product_type_name):
        """Sets the product_type_name of this EnergyStorageController.


        :param product_type_name: The product_type_name of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._product_type_name = product_type_name

    @property
    def pv_info(self):
        """Gets the pv_info of this EnergyStorageController.  # noqa: E501


        :return: The pv_info of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._pv_info

    @pv_info.setter
    def pv_info(self, pv_info):
        """Sets the pv_info of this EnergyStorageController.


        :param pv_info: The pv_info of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._pv_info = pv_info

    @property
    def pv_info_unit(self):
        """Gets the pv_info_unit of this EnergyStorageController.  # noqa: E501


        :return: The pv_info_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._pv_info_unit

    @pv_info_unit.setter
    def pv_info_unit(self, pv_info_unit):
        """Sets the pv_info_unit of this EnergyStorageController.


        :param pv_info_unit: The pv_info_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._pv_info_unit = pv_info_unit

    @property
    def pv_power(self):
        """Gets the pv_power of this EnergyStorageController.  # noqa: E501


        :return: The pv_power of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._pv_power

    @pv_power.setter
    def pv_power(self, pv_power):
        """Sets the pv_power of this EnergyStorageController.


        :param pv_power: The pv_power of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._pv_power = pv_power

    @property
    def pv_power_unit(self):
        """Gets the pv_power_unit of this EnergyStorageController.  # noqa: E501


        :return: The pv_power_unit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._pv_power_unit

    @pv_power_unit.setter
    def pv_power_unit(self, pv_power_unit):
        """Sets the pv_power_unit of this EnergyStorageController.


        :param pv_power_unit: The pv_power_unit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._pv_power_unit = pv_power_unit

    @property
    def registration_time(self):
        """Gets the registration_time of this EnergyStorageController.  # noqa: E501


        :return: The registration_time of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this EnergyStorageController.


        :param registration_time: The registration_time of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._registration_time = registration_time

    @property
    def registration_time_zone(self):
        """Gets the registration_time_zone of this EnergyStorageController.  # noqa: E501


        :return: The registration_time_zone of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._registration_time_zone

    @registration_time_zone.setter
    def registration_time_zone(self, registration_time_zone):
        """Sets the registration_time_zone of this EnergyStorageController.


        :param registration_time_zone: The registration_time_zone of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._registration_time_zone = registration_time_zone

    @property
    def status(self):
        """Gets the status of this EnergyStorageController.  # noqa: E501


        :return: The status of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnergyStorageController.


        :param status: The status of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def temperature(self):
        """Gets the temperature of this EnergyStorageController.  # noqa: E501


        :return: The temperature of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this EnergyStorageController.


        :param temperature: The temperature of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._temperature = temperature

    @property
    def today_power_generation(self):
        """Gets the today_power_generation of this EnergyStorageController.  # noqa: E501


        :return: The today_power_generation of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._today_power_generation

    @today_power_generation.setter
    def today_power_generation(self, today_power_generation):
        """Sets the today_power_generation of this EnergyStorageController.


        :param today_power_generation: The today_power_generation of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._today_power_generation = today_power_generation

    @property
    def today_profit(self):
        """Gets the today_profit of this EnergyStorageController.  # noqa: E501


        :return: The today_profit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._today_profit

    @today_profit.setter
    def today_profit(self, today_profit):
        """Sets the today_profit of this EnergyStorageController.


        :param today_profit: The today_profit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._today_profit = today_profit

    @property
    def total_power_generation(self):
        """Gets the total_power_generation of this EnergyStorageController.  # noqa: E501


        :return: The total_power_generation of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._total_power_generation

    @total_power_generation.setter
    def total_power_generation(self, total_power_generation):
        """Sets the total_power_generation of this EnergyStorageController.


        :param total_power_generation: The total_power_generation of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._total_power_generation = total_power_generation

    @property
    def total_profit(self):
        """Gets the total_profit of this EnergyStorageController.  # noqa: E501


        :return: The total_profit of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._total_profit

    @total_profit.setter
    def total_profit(self, total_profit):
        """Sets the total_profit of this EnergyStorageController.


        :param total_profit: The total_profit of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._total_profit = total_profit

    @property
    def update_time(self):
        """Gets the update_time of this EnergyStorageController.  # noqa: E501


        :return: The update_time of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this EnergyStorageController.


        :param update_time: The update_time of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._update_time = update_time

    @property
    def update_time_zone(self):
        """Gets the update_time_zone of this EnergyStorageController.  # noqa: E501


        :return: The update_time_zone of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._update_time_zone

    @update_time_zone.setter
    def update_time_zone(self, update_time_zone):
        """Sets the update_time_zone of this EnergyStorageController.


        :param update_time_zone: The update_time_zone of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._update_time_zone = update_time_zone

    @property
    def work_status(self):
        """Gets the work_status of this EnergyStorageController.  # noqa: E501


        :return: The work_status of this EnergyStorageController.  # noqa: E501
        :rtype: object
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this EnergyStorageController.


        :param work_status: The work_status of this EnergyStorageController.  # noqa: E501
        :type: object
        """

        self._work_status = work_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnergyStorageController, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnergyStorageController):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
