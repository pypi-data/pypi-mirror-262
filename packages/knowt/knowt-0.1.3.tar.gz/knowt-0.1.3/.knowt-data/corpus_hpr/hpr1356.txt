## hpr1356 :: So, you've just installed Arch Linux, now what? Arch Lessons from a Newbie, Ep. 01

 Manually installing packages from the AUR
Since completing my conversion from Cinnarch to Antergos, (https://antergos.com/antergos-2013-05-12-were-back/, the published tutorial didn't work for me the first time, but the new Antergos forums were most helpful (https://forum.antergos.com/viewtopic.php?f=28&t=944&p=2892#p2892), a few utilities I installed under Cinnarch seem to be unavailable, notably, 'yaourt' Yet An Other User Repository, the package manager for the AUR (Arch User Repositories).[The AUR are unofficial, "use at your own risk" repositories, roughly analogous to using a ppa in Ubuntu.] I tried 'sudo pacman -S yaourt' and learned it wasn't found it the repositories (I should note that when I removed the old Cinnarch repos from /etc/pacman.conf, I must have missed including the new Antergos repos somehow). I have since completed the transition.
Anyway, some experienced Arch users like Peter64 and Artv61 had asked me why I was using yaourt anyway instead of installing packages manually, which they considered to be more secure. I decided to take the opportunity to learn how to install packages manually, and to my surprise, it was not nearly as complex as I had feared. I had promised a series of podcasts along the theme, "So, you've just installed Arch Linux, now what?" This may seem like I've jumped ahead a couple steps, but I wanted to bring it to you while it was fresh in my mind.
Your first step may be to ensure you really have to resort to the Arch User Repositories to install the app you are looking for. I'd found Doc Viewer allowed me to access PDFs in Arch, but I really preferred Okular that I'd used in other distros. When 'sudo pacman -S okular' failed to find the package, I assumed it was only available from the AUR. However, a Google search on [ arch install okular ] revealed the package I needed was kdegraphics-okular, which I installed from the standard Arch repos.
Once you've determined the package you need exists in the AUR and not in the standard repos, you need to locate the appropriate package build, your Google search will probably take care of that. The URL should be in the form http:aur.archlinux.org/packages/<package-name>. For the sake of example, lets go to https:aur.archlinux.org/packages/google-chrome/. Chromium is already in standard Arch repos, but if you want Chrome, you will have to find it in the AUR. Find the link labeled "Download the tarball", it will be a file ending ing .tar.gz Before downloading a file, the Arch Wiki instructions for manually installing packages from the AUR https://wiki.archlinux.org/index.php/Arch_User_Repository recommend creating a designated folder to put them in, they suggest creating a "builds" folder in your home directory.
If you have a multi-core machine, you may be able to take advantage of a slight compiler performance increase by making adjustments to your /etc/makepkg.conf . Look for "CFLAGS=", it should have a first parameter that looks like -march=x86_64 or -march=i686 . Which ever it is, change it to -march=native and eliminate the second parameter that reads -mtune=generic . This will cause gcc to autdetect your processor type. Edit the next line, which begins with "CXXFLAGS", to read CXXFLAGS="${CFLAGS}", the just causes the CXXFLAGS setting to echo CFLAGS. Details are located in https://wiki.archlinux.org/index.php/Makepkg.conf.
Before installing your first AUR package, you will have to install base-devel, [ pacman -S base-devel , {as root, so become root or use sudo}]. Look for that .tar.gz file you downloaded, still using Chrome as an example, it's google-chrome.tar.gz . Unravel the tarball with "tar -xvzf google-chrome.tar.gz". Now, in your ~/builds folder you should have a new directory named "google-chrome". Drop down into the new folder. Since user repos are not as trusted as the standard ones, it might be a good idea to open PKGBUILD and look for malicious Bash instructions. Do the same with the .install file. Build the new package with "make -s". The "-s" switch lets the compiler resolve any unmet dependencies by prompting you for the your sudo password.
You will have a new tarball in the format of <application name>-<application version number>-<package revision number>-<architecture>.pkg.tar.xz , in our google-chrome example, the file name was google-chrome-27.0.1453.110-1-x86_64.pkg.tar.xz . We install it with pacman's upgrade function "pacman -U google-chrome-27.0.1453.110-1-x86_64.pkg.tar.xz". This command will install the new package and create an RPM.
Before running Arch, I did not realize spell checking was centrally configured in Linux, I always assumed each application had it's own spell checker. After installing Arch, I noticed auto-correct wasn't working anywhere. At length, I looked for a solution. I found Libre Office and most browsers rely on hunspell for spell checking functions. To get it working, you just need to install hunspell and the hunspell library appropriate for you language, i.e. "pacman -S hunspell hunspell-en"
StraightTalk/Tracphone, a quick review.
Before leaving for Philadelphia last spring, I decided I needed a cheap smartphone on a prepaid plan. The only one with reliable service in my area is StraightTalk, or Tracphone, sold in Walmart. For $35 a month, they advertise unlimited data, talk, and text. The one drawback, any form of tethering, wired or wireless, violates StraightTalk's TOS (frankly I missed that condition before buying the phone). Hmm, would Chromecast count? Anyway, for some people, no tethering would be an immediate deal breaker. Frankly, I can see the advantages to tethering, but the one scenario I'm most interested in is isolating an infected system from a customer's network, and still be able to access anti malware resources. The budget phone I bought only supports 3G, and I'm not in the habit of streaming media to it, much less sharing it to another device.
That doesn't mean I don't use the bandwidth. I put a 16 gig SD card in my phone, and started using it as an additional pipeline to download Linux iso's. Anything I download, I can transfer to my network with ES File Explorer. I downloaded several Gigs in the first month to test the meaning of Unlimited. Towards the end of the month, and after I bought prepaid card for the next month, I had an off and on again data connection, I thought the provider was punishing me for being a hog, it turns out the phone was glitchy, and turning it off and back on again always re-establishes the data connection. Therefore, I am happy to report that StraightTalk actually seems to mean what they say when they advertise "Unlimited". Unfortunately, many of my direct downloads fail md5sum check. Direct downloads on 3G come down as fast as 75-100 MBps, but torrents seem to top out at 45MBps, the same as my home connection.
