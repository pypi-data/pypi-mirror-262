syntax = "proto3";

// To build this proto with bazel, the proto and bazel rule must be in the same
// package, which means that the proto file must have a package declaration
// matching the Bazel workspace's folder structure.
package resemble.v1alpha1;

// Import a skeleton message representation of Kubernetes `V1ObjectMeta`. Note
// this message is missing a lot of fields compared to the native Kubernetes
// object and is only intended for serialization.
import "resemble/v1alpha1/kubernetes_helpers.proto";

message ApplicationDeployment {
  // Message detailing the current state of the `ApplicationDeployment`.
  message Status {
    // Message detailing the "failed" state.
    message Failed {
      // Metadata object of the current config pod, if any.
      V1ObjectMeta config_pod = 1;
    }

    // Message detailing the "configuring" state.
    message Configuring {
      // Metadata object of the current config pod, if any.
      V1ObjectMeta config_pod = 1;
    }

    // Message detailing the "configured" state.
    message Configured {}

    // The state of the `ApplicationDeployment` is provided through a `oneof`
    // field. State specific information is provided through the state specific
    // messages.
    oneof state_oneof {
      Failed failed = 1;
      // When a `ApplicationDeployment` is created or updated, the controller
      // will attempt to create or update a `ApplicationConfig` based on the
      // `ApplicationDeployment`. Until this has either succeeded or failed the
      // state of the `ApplicationDeployment` is `configuring`.
      Configuring configuring = 2;
      // When the `ApplicationConfig` object has been successfully created or
      // updated, the `ApplicationDeployment` object is `configured`.
      Configured configured = 3;
    }

    // Status message providing additional information.
    string reason = 4;

    // Metadata object of the corresponding `ApplicationConfig` object, if any.
    // The `ApplicationConfig` object pointed to is the one corresponding to the
    // one last successfully "configured". i.e., if we transition back to
    // "configuring" (and optionally to "failed") we are still pointing to the
    // last successfully created or updated `ApplicationConfig`.
    V1ObjectMeta application_config = 5;
  }

  // Status of the `ApplicationDeployment` reported by the resemble controller.
  Status status = 1;

  message Spec {
    // Name of the user image being deployed; e.g. registry.k8s.io/myserver:1.4.
    string container_image_name = 1;

    // The ID of the space that the application is in.
    string space_id = 2;
  }
  Spec spec = 2;
}
