"""
This file is generated by `openverse_api_client`, do not edit it directly.
"""

from datetime import datetime, timedelta, UTC
from typing import Any, cast, Self, Literal
import httpx


from openverse_api_client import endpoints


EXPIRY_THRESHOLD = 30


class AsyncOpenverseClient:
    api_token: endpoints.POST_v1_auth_tokens_token.response | None = None 
    token_expiry: datetime | None = None
    credentials: endpoints.POST_v1_auth_tokens_token.params | None = None

    base_url: str = "https://api.openverse.engineering/"

    client: httpx.AsyncClient
    _is_shared_client: bool

    def __init__(
        self,
        base_url: str | None = None,
        client_id: str | None = None,
        client_secret: str | None = None,
        httpx_client: httpx.AsyncClient | None = None,
    ):
        self.base_url = base_url if base_url else self.base_url
        if self.base_url[-1] != "/":
            self.base_url += "/"
        
        if client_id or client_secret:
            assert client_id and client_secret, "`client_id` and `client_secret` are both required when either is defined"
            
            self.credentials = endpoints.POST_v1_auth_tokens_token.params(
                grant_type="client_credentials",
                client_id=client_id,
                client_secret=client_secret,
            )
        
        if httpx_client is None:
            self.client = httpx.AsyncClient()
            self._is_shared_client = False
        else:
            self.client = httpx_client
            self._is_shared_client = True
    
    async def __aenter__(self) -> Self:
        return self

    async def __aexit__(self, exc_type=None, exc_value=None, traceback=None) -> None:
        await self.client.__aexit__(exc_type, exc_value, traceback)

    async def close(self):
        await self.client.aclose()

    async def _base_request(
        self,
        method: str,
        path: str,
        params: dict,
        headers: httpx.Headers,
    ) -> httpx.Response:
        return await self.client.request(
            method=method,
            url=f"{self.base_url}{path}",
            params=params,
            headers=headers,
        )
    
    async def _request(
        self,
        method: str,
        path: str,
        params: dict,
        headers: httpx.Headers,
    ) -> httpx.Response:
        return await self._base_request(
            method=method,
            path=path,
            params=params,
            headers=headers.update(await self._get_auth_headers())
        )

    async def _get_auth_headers(self) -> dict:
        if self.credentials is None:
            return {}
        
        if self.api_token is None or self.token_expiry < datetime.now():
            endpoint = endpoints.POST_v1_auth_tokens_token
            token_response = await self._base_request(
                method=endpoint.method,
                path=endpoint.endpoint,
                params=self.credentials,
            )

            await token_response.aread()
            self.api_token = cast(endpoint.response, token_response.json())
            self.token_expiry = datetime.now(UTC) + timedelta(seconds=self.api_token["expires_in"] - EXPIRY_THRESHOLD)
        
        return {"Authorization": f"Bearer {self.api_token['access_token']}"}
    
    
    async def POST_v1_auth_register(
        self,
        name: str,
        description: str,
        email: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.POST_v1_auth_register.response:
        params = {
            "name": name,
            "description": description,
            "email": email,
        }

        path = "v1/auth_tokens/register/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.POST_v1_auth_register.response, content)
    
    async def POST_v1_auth_token(
        self,
        client_id: str,
        client_secret: str,
        grant_type: Literal['client_credentials'] = 'client_credentials',
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.POST_v1_auth_token.response:
        params = {
            "client_id": client_id,
            "client_secret": client_secret,
            "grant_type": grant_type,
        }

        path = "v1/auth_tokens/token/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/x-www-form-urlencoded")

        response = await self._request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.POST_v1_auth_token.response, content)
    
    async def GET_v1_rate_limit(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_rate_limit.response:
        params = {
        }

        path = "v1/rate_limit/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_rate_limit.response, content)
    
    async def GET_v1_images_stats(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images_stats.response:
        params = {
        }

        path = "v1/images/stats/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.content
        return cast(endpoints.GET_v1_images_stats.response, content)
    
    async def GET_v1_audio_stats(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio_stats.response:
        params = {
        }

        path = "v1/audio/stats/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.content
        return cast(endpoints.GET_v1_audio_stats.response, content)
    
    @overload
    async def GET_v1_images(
        self,
        category: str | list[str],
        aspect_ratio: str | list[str],
        size: list,
        page: int,
        page_size: int,
        source: str | list[str],
        excluded_source: str | list[str],
        license: str | list[str],
        license_type: str | list[str],
        tags: str | list[str],
        filter_dead: bool,
        extension: str | list[str],
        include_sensitive_results: bool,
        q: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images.response:
        ...
    @overload
    async def GET_v1_images(
        self,
        category: str | list[str],
        aspect_ratio: str | list[str],
        size: list,
        page: int,
        page_size: int,
        source: str | list[str],
        excluded_source: str | list[str],
        license: str | list[str],
        license_type: str | list[str],
        tags: str | list[str],
        filter_dead: bool,
        extension: str | list[str],
        include_sensitive_results: bool,
        creator: str,
        title: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images.response:
        ...
    async def GET_v1_images(self, **kwargs):
        params = kwargs

        path = "v1/images/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_images.response, content)
    
    @overload
    async def GET_v1_audio(
        self,
        category: str | list[str],
        length: str | list[str],
        peaks: bool,
        page: int,
        page_size: int,
        source: str | list[str],
        excluded_source: str | list[str],
        license: str | list[str],
        license_type: str | list[str],
        tags: str | list[str],
        filter_dead: bool,
        extension: str | list[str],
        include_sensitive_results: bool,
        q: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio.response:
        ...
    @overload
    async def GET_v1_audio(
        self,
        category: str | list[str],
        length: str | list[str],
        peaks: bool,
        page: int,
        page_size: int,
        source: str | list[str],
        excluded_source: str | list[str],
        license: str | list[str],
        license_type: str | list[str],
        tags: str | list[str],
        filter_dead: bool,
        extension: str | list[str],
        include_sensitive_results: bool,
        creator: str,
        title: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio.response:
        ...
    async def GET_v1_audio(self, **kwargs):
        params = kwargs

        path = "v1/audio/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_audio.response, content)
    
    async def GET_v1_images_related(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images_related.response:
        params = {
            "identifier": identifier,
        }

        path = "v1/images/:identifier/related"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_images_related.response, content)
    
    async def GET_v1_audio_related(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio_related.response:
        params = {
            "identifier": identifier,
        }

        path = "v1/audio/:identifier/related"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_audio_related.response, content)
    
    async def GET_v1_images_thumbnail(
        self,
        identifier: Required,
        full_size: bool,
        compressed: bool,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images_thumbnail.response:
        params = {
            "identifier": identifier,
            "full_size": full_size,
            "compressed": compressed,
        }

        path = "v1/images/:identifier/thumb/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.content
        return cast(endpoints.GET_v1_images_thumbnail.response, content)
    
    async def GET_v1_audio_thumbnail(
        self,
        identifier: Required,
        full_size: bool,
        compressed: bool,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio_thumbnail.response:
        params = {
            "identifier": identifier,
            "full_size": full_size,
            "compressed": compressed,
        }

        path = "v1/audio/:identifier/thumb/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.content
        return cast(endpoints.GET_v1_audio_thumbnail.response, content)
    
    async def GET_v1_audio_waveform(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_audio_waveform.response:
        params = {
            "identifier": identifier,
        }

        path = "v1/audio/:identifier/waveform/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_audio_waveform.response, content)
    
    async def GET_v1_images_oembed(
        self,
        url: str,
        headers: dict | httpx.Headers | None = None
    ) -> endpoints.GET_v1_images_oembed.response:
        params = {
            "url": url,
        }

        path = "v1/images/oembed"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = await self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        await response.aread()
        content = response.json()
        return cast(endpoints.GET_v1_images_oembed.response, content)
    