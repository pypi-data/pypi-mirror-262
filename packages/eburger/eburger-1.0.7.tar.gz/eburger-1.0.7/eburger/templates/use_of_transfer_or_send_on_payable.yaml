version: 1.0.5
author: "@forefy"
name: "Use of transfer or send on a payable address"
severity: "Medium"
precision: "Medium"
description: "In Solidity, .transfer and .send both implement a risky gas limitation that reverts the transaction if the recipient's operations require more gas than the stipend of 2300 gas."
impact: "Unexpected failed transactions and contract behavior."
action-items:
    - "Replace .transfer or .send with .call for transfers to payable addresses."
    - "Implement necessary checks and error handling to ensure the safety of the new .call usage."
references:
    - "https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html#new-recommendations"
reports:
    - "https://github.com/code-423n4/2024-01-curves/blob/main/bot-report.md#m-02"
    - "https://github.com/code-423n4/2022-04-backd-findings/issues/52"
vulnerable_contracts:
    - "../vulnerable_contracts/use_of_transfer_or_send_on_payable.sol"
python: |
    results = []
    function_call_nodes = get_nodes_by_types(ast_data, "FunctionCall")
    for function_call_node in function_call_nodes:
        function_call_expr_node = function_call_node.get("expression", {})
        member_name = function_call_expr_node.get("memberName")
        if member_name in ["transfer", "send"]:
            if function_call_expr_node.get("nodeType") != "MemberAccess":
                continue            

            # Ensure the call is on a payable address
            if function_call_expr_node.get("expression", {}).get("typeDescriptions", {}).get("typeString") == "address payable":
                results.append(function_call_node)