version: 1.0.5
author: "@forefy"
name: "Modifier Without Proper Enforcement"
severity: "High"
precision: "Low"
description: "Using the provided modifier onlyOwner for function access control without a proper enforcement mechanism like require or revert is a dire mistake because it fails to restrict access as intended. The modifier merely evaluates a condition (msg.sender == owner) without any action taken based on the result."
impact: "Users may execute functions that are supposed to be restricted, potentially leading to unauthorized actions, such as withdrawing funds or altering critical contract settings."
action-items:
    - "Change the modifier so that it will enforce the ownership check using a require/revert statement."
references:
    - "https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html#new-recommendations"
reports:
    - "https://github.com/code-423n4/2024-01-curves/blob/main/bot-report.md#m-02"
    - "https://github.com/code-423n4/2022-04-backd-findings/issues/52"
vulnerable_contracts:
    - "../vulnerable_contracts/modifier_without_proper_enforcement.sol"
python: |
    results = []
    modifier_nodes = get_nodes_by_types(ast_data, "ModifierDefinition")
    for mod_node in modifier_nodes:
        body_nodes = mod_node.get("body", {}).get("statements", [])
        for statement in body_nodes:
            if statement.get("nodeType") != "ExpressionStatement":
                continue
            expression = statement.get("expression", {})
            if expression.get("nodeType") != "BinaryOperation":
                continue
            if expression.get("operator") != "==":
                continue
            enforcement_found = False
            for inner_statement in body_nodes:
                node_type = inner_statement.get("nodeType")
                if node_type not in ["ExpressionStatement", "IfStatement"]:
                    continue
                inner_expr = inner_statement.get("expression", {})
                if inner_expr.get("nodeType") not in ["FunctionCall"]:
                    continue
                
                inner_inner_expr = inner_expression.get("expression", {})
                function_call_name = inner_inner_expr.get("name")
                if function_call_name in ["require", "revert"]:
                    enforcement_found = True
                    break
                            
            if not enforcement_found:
                results.append(mod_node)