!pip install opencv-contrib-python


import cv2
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene.png"
image = cv2.imread(image_path)
if image is not None:
    print("type(image): \t", type(image), "\n")
    print("image.shape: \t", image.shape, "\n")
    print("Image width: \t", image.shape[0], "\n")
    print("Image height: \t", image.shape[1], "\n")
    print("Image channels: \t", image.shape[2], "\n")
    print("Now displaying the image \n\n")
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    plt.imshow(image_rgb)
    plt.axis('off')  
    plt.show()
else:
    print("Error: Image not found or could not be loaded.")


import cv2
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene.png"
image = cv2.imread(image_path)
if image is not None:
    print("Original resolution: \t", image.shape, "\n")
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off') 
    plt.show()
    image_resized = cv2.resize(image, (400, 400))
    print("\n Resized resolution: \t", image_resized.shape, "\n")
    plt.imshow(cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB))
    plt.axis('off') 
    plt.show()
else:
    print("Error: Image not found or could not be loaded.")


import cv2
import matplotlib.pyplot as plt
image_resized = cv2.resize(image, (400, 400))
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
image_hsv = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2HSV)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.axis('off')
plt.title('RGB Color Space')
plt.subplot(1, 2, 2)
plt.imshow(image_hsv)
plt.axis('off')
plt.title('HSV Color Space')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
image_normalized = image_rgb / 255.0
C = 1 - image_normalized[:, :, 0]  
M = 1 - image_normalized[:, :, 1]  
Y = 1 - image_normalized[:, :, 2]  
K = np.min([C, M, Y], axis=0)  
image_cmyk = np.dstack((C, M, Y, K))
image_cmyk = (image_cmyk * 255).astype(np.uint8)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.axis('off')
plt.title('RGB Color Space')
plt.subplot(1, 2, 2)
plt.imshow(image_cmyk)
plt.axis('off')
plt.title('CMYK Color Space')
plt.show()



import cv2
import matplotlib.pyplot as plt
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
image_gray = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.axis('off')
plt.title('RGB Color Space')
plt.subplot(1, 2, 2)
plt.imshow(image_gray, cmap='gray')
plt.axis('off')
plt.title('Grayscale Color Space')
plt.show()
print("Number of channels: \t", image_gray.shape)


import cv2
import matplotlib.pyplot as plt
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
plt.figure(figsize=(8, 8))
plt.imshow(image_rgb)
plt.axis('off')
plt.text(30, 30, 'Good Morning', color='red', fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
plt.show()


import cv2
import matplotlib.pyplot as plt
import numpy as np
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
border_size1 = 5
border_size2 = 10
border_color = (0, 0, 255)  
image_with_border = cv2.copyMakeBorder(image_rgb, border_size1, border_size1, border_size2, border_size2, cv2.BORDER_CONSTANT, value=border_color)
plt.imshow(image_with_border)
plt.axis('off')
plt.show()


import os
import cv2
import matplotlib.pyplot as plt
import numpy as np
folder_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset"
image_data_list = []
file_list = os.listdir(folder_path)
print("The files listed in the folder are: \n\n", file_list, "\n")
for filename in file_list:
    if filename.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif')):
        image_path = os.path.join(folder_path, filename)
        image = cv2.imread(image_path)
        if image is not None:
            image_resized = cv2.resize(image, (640, 480))  
            image_data_list.append(image_resized)
print("Number of images read: \t", len(image_data_list), "\n")
image_data_array = np.array(image_data_list)
print("Shape of the image data array:", image_data_array.shape)
for i in range(image_data_array.shape[0]):
    image_to_plot = image_data_array[i]
    print("Showing image: ", (i+1), "\n")
    plt.imshow(cv2.cvtColor(image_to_plot, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()
    print("\n\n")


import cv2
import matplotlib.pyplot as plt
image_gray = cv2.cvtColor(image_resized, cv2.COLOR_BGR2GRAY)
image_contrast_enhanced = cv2.equalizeHist(image_gray)
plt.imshow(image_gray, cmap='gray')
plt.axis('off')
plt.title('Original Grayscale Image')
plt.show()
plt.imshow(image_contrast_enhanced, cmap='gray')
plt.axis('off')
plt.title('Contrast Enhanced Image')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
print("Original Image: \n")
plt.imshow(image_rgb)
plt.axis('off')
plt.show()
print("\n\n")
gamma_values = [0.25, 0.5, 1.0, 1.5, 2.0]
for gamma in gamma_values:
    print("Brightness adjusted using gamma =", gamma, "\n")
    image_gamma_corrected = np.power(image_rgb / 255.0, gamma) * 255.0
    image_gamma_corrected = np.uint8(image_gamma_corrected)  # converting the modified intensity values to nearest integer.
    plt.imshow(image_gamma_corrected)
    plt.axis('off')
    plt.show()
    print("\n\n")


import cv2
import matplotlib.pyplot as plt
image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
print("Original Image: \n")
plt.imshow(image_rgb)
plt.axis('off')
plt.show()
print("\n\n")
kernel_size = (5, 5)
std_values = [0.0, 1.0, 5.0, 100.0]
for std_value in std_values:
    print("Gaussian Blurred Image with standard deviation:", std_value)
    image_gaussian_blur = cv2.GaussianBlur(image_rgb, kernel_size, std_value)
    plt.imshow(image_gaussian_blur)
    plt.axis('off')
    plt.show()
    print("\n\n")


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\Image Shaperning.png"
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  
plt.imshow(image)
plt.title('Original Image')
plt.axis('off')
plt.show()
kernel = np.array([[0, -1, 0],
                   [-1, 5, -1],
                   [0, -1, 0]], dtype=np.float32)
image_sharp = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
plt.imshow(image_sharp)
plt.title('Sharpened Image')
plt.axis('off')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene2.jpg"
img = cv2.imread(image_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  
plt.imshow(img_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()
kernel_25 = np.ones((25,25), np.float32) / 625.0
output_kernel = cv2.filter2D(img, -1, kernel_25)
plt.imshow(output_kernel)
plt.title('Kernel Blurred Image')
plt.axis('off')
plt.show()
output_blur = cv2.blur(img, (25,25))
output_box = cv2.boxFilter(img, -1, (5,5))
plt.imshow(output_blur)
plt.title('Box Filtered Image')
plt.axis('off')
plt.show()
plt.imshow(output_box)
plt.title('Box Filtered Image')
plt.axis('off')
plt.show()
output_gaus = cv2.GaussianBlur(img, (5,5), 0)
plt.imshow(output_gaus)
plt.title('Gaussian Blurred Image')
plt.axis('off')
plt.show()
output_med = cv2.medianBlur(img, 5)
plt.imshow(output_med)
plt.title('Median Blurred Image')
plt.axis('off')
plt.show()
output_bil = cv2.bilateralFilter(img, 5, 6, 6)
plt.imshow(output_bil)
plt.title('Bilateral Filtered Image')
plt.axis('off')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene2.jpg"
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  
angle = 45
height, width = image_rgb.shape[:2]
center = (width/2, height/2)
rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
rotated_image = cv2.warpAffine(image_rgb, rotation_matrix, (width, height))
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()
plt.imshow(rotated_image)
plt.title('Rotated Image')
plt.axis('off')
plt.show()
print("Original image shape:", image_rgb.shape)
print("Rotated image shape:", rotated_image.shape)


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path =r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene2.jpg"
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  
dx = 50  
dy = 50  
height, width = image_rgb.shape[:2]
translation_matrix = np.float32([[1, 0, dx], [0, 1, dy]])
image_translated = cv2.warpAffine(image_rgb, translation_matrix, (width, height))
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()
plt.imshow(image_translated)
plt.title('Translated Image')
plt.axis('off')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene2.jpg"
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_flipped = cv2.flip(image_rgb, -1)
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()
plt.imshow(image_flipped)
plt.title('Flipped Image')
plt.axis('off')
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\scene2.jpg"
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  
new_width = 400
new_height = 200
image_scaled = cv2.resize(image_rgb, (new_width, new_height))
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()
plt.imshow(image_scaled)
plt.title('Scaled Image')
plt.axis('off')
plt.show()


#morphological operations
import cv2
import matplotlib.pyplot as plt
image_path = r"C:\Users\Shreya\Downloads\Module 1 - Dataset-20240220T113830Z-001\Module 1 - Dataset\Module 1 - Dataset\Landscape-BW.jpg"
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb)
plt.axis('off')  
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
kernel = np.ones((5,5), np.uint8)
image_erode = cv2.erode(image, kernel)
plt.imshow(image_erode)
plt.axis('off')  
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
kernel2 = np.ones((3, 3), np.uint8)
image_erode2 = cv2.erode(image, kernel2)
plt.imshow(image_erode2)
plt.axis('off')  
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
kernel3 = np.ones((2,2), np.uint8)
image_dilation = cv2.dilate(image, kernel3, iterations=1)
plt.imshow(image_dilation)
plt.axis('off') 
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
image_border2 = cv2.copyMakeBorder(image, 250, 250, 250, 250, cv2.BORDER_REFLECT)
plt.imshow(image_border2)
plt.axis('off')  
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
kernel_size = 5
kernel = np.ones((kernel_size, kernel_size), dtype=np.uint8)
image_opening = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)
plt.imshow(image_opening)
plt.axis('off')  
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt
kernel_size = 5
kernel = np.ones((kernel_size, kernel_size), dtype=np.uint8)
image_close = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)
plt.imshow(image_close)
plt.axis('off')  
plt.show()
