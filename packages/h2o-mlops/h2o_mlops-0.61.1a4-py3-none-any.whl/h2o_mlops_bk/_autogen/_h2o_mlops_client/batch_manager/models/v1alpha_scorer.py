# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaScorer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_artifact': 'str',
        'artifact_processor': 'str',
        'artifact_processor_attributes': 'dict(str, str)',
        'runtime': 'str',
        'runtime_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'storage_artifact': 'storageArtifact',
        'artifact_processor': 'artifactProcessor',
        'artifact_processor_attributes': 'artifactProcessorAttributes',
        'runtime': 'runtime',
        'runtime_attributes': 'runtimeAttributes'
    }

    def __init__(self, storage_artifact=None, artifact_processor=None, artifact_processor_attributes=None, runtime=None, runtime_attributes=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaScorer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._storage_artifact = None
        self._artifact_processor = None
        self._artifact_processor_attributes = None
        self._runtime = None
        self._runtime_attributes = None
        self.discriminator = None

        if storage_artifact is not None:
            self.storage_artifact = storage_artifact
        if artifact_processor is not None:
            self.artifact_processor = artifact_processor
        if artifact_processor_attributes is not None:
            self.artifact_processor_attributes = artifact_processor_attributes
        if runtime is not None:
            self.runtime = runtime
        if runtime_attributes is not None:
            self.runtime_attributes = runtime_attributes

    @property
    def storage_artifact(self):
        """Gets the storage_artifact of this V1alphaScorer.  # noqa: E501

        Name of the artifact in the MLOps storage in the standardized form. e.g.: projects/<uuid>/registeredModels/<uuid>/artifacts/<uuid>.  # noqa: E501

        :return: The storage_artifact of this V1alphaScorer.  # noqa: E501
        :rtype: str
        """
        return self._storage_artifact

    @storage_artifact.setter
    def storage_artifact(self, storage_artifact):
        """Sets the storage_artifact of this V1alphaScorer.

        Name of the artifact in the MLOps storage in the standardized form. e.g.: projects/<uuid>/registeredModels/<uuid>/artifacts/<uuid>.  # noqa: E501

        :param storage_artifact: The storage_artifact of this V1alphaScorer.  # noqa: E501
        :type storage_artifact: str
        """

        self._storage_artifact = storage_artifact

    @property
    def artifact_processor(self):
        """Gets the artifact_processor of this V1alphaScorer.  # noqa: E501

        Name of the artifact processor that should be used.  # noqa: E501

        :return: The artifact_processor of this V1alphaScorer.  # noqa: E501
        :rtype: str
        """
        return self._artifact_processor

    @artifact_processor.setter
    def artifact_processor(self, artifact_processor):
        """Sets the artifact_processor of this V1alphaScorer.

        Name of the artifact processor that should be used.  # noqa: E501

        :param artifact_processor: The artifact_processor of this V1alphaScorer.  # noqa: E501
        :type artifact_processor: str
        """

        self._artifact_processor = artifact_processor

    @property
    def artifact_processor_attributes(self):
        """Gets the artifact_processor_attributes of this V1alphaScorer.  # noqa: E501

        Optional attributes for the artifact processor.  # noqa: E501

        :return: The artifact_processor_attributes of this V1alphaScorer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._artifact_processor_attributes

    @artifact_processor_attributes.setter
    def artifact_processor_attributes(self, artifact_processor_attributes):
        """Sets the artifact_processor_attributes of this V1alphaScorer.

        Optional attributes for the artifact processor.  # noqa: E501

        :param artifact_processor_attributes: The artifact_processor_attributes of this V1alphaScorer.  # noqa: E501
        :type artifact_processor_attributes: dict(str, str)
        """

        self._artifact_processor_attributes = artifact_processor_attributes

    @property
    def runtime(self):
        """Gets the runtime of this V1alphaScorer.  # noqa: E501

        Optional. Name of the runtime that should be used.  # noqa: E501

        :return: The runtime of this V1alphaScorer.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this V1alphaScorer.

        Optional. Name of the runtime that should be used.  # noqa: E501

        :param runtime: The runtime of this V1alphaScorer.  # noqa: E501
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def runtime_attributes(self):
        """Gets the runtime_attributes of this V1alphaScorer.  # noqa: E501

        Optional attributes for the runtime.  # noqa: E501

        :return: The runtime_attributes of this V1alphaScorer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._runtime_attributes

    @runtime_attributes.setter
    def runtime_attributes(self, runtime_attributes):
        """Sets the runtime_attributes of this V1alphaScorer.

        Optional attributes for the runtime.  # noqa: E501

        :param runtime_attributes: The runtime_attributes of this V1alphaScorer.  # noqa: E501
        :type runtime_attributes: dict(str, str)
        """

        self._runtime_attributes = runtime_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaScorer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaScorer):
            return True

        return self.to_dict() != other.to_dict()
