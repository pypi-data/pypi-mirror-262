# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaScorerRuntime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'supported_model_artifact_type': 'str',
        'scorer_runtime_type': 'str',
        'attributes': 'list[V1alphaScorerRuntimeAttribute]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'supported_model_artifact_type': 'supportedModelArtifactType',
        'scorer_runtime_type': 'scorerRuntimeType',
        'attributes': 'attributes'
    }

    def __init__(self, name=None, display_name=None, description=None, supported_model_artifact_type=None, scorer_runtime_type=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaScorerRuntime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._description = None
        self._supported_model_artifact_type = None
        self._scorer_runtime_type = None
        self._attributes = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if supported_model_artifact_type is not None:
            self.supported_model_artifact_type = supported_model_artifact_type
        if scorer_runtime_type is not None:
            self.scorer_runtime_type = scorer_runtime_type
        if attributes is not None:
            self.attributes = attributes

    @property
    def name(self):
        """Gets the name of this V1alphaScorerRuntime.  # noqa: E501


        :return: The name of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alphaScorerRuntime.


        :param name: The name of this V1alphaScorerRuntime.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V1alphaScorerRuntime.  # noqa: E501

        Human readable name of the runtime that can be displayed on the front-emd.  # noqa: E501

        :return: The display_name of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1alphaScorerRuntime.

        Human readable name of the runtime that can be displayed on the front-emd.  # noqa: E501

        :param display_name: The display_name of this V1alphaScorerRuntime.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this V1alphaScorerRuntime.  # noqa: E501

        Further description of the runtime.  # noqa: E501

        :return: The description of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1alphaScorerRuntime.

        Further description of the runtime.  # noqa: E501

        :param description: The description of this V1alphaScorerRuntime.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def supported_model_artifact_type(self):
        """Gets the supported_model_artifact_type of this V1alphaScorerRuntime.  # noqa: E501

        Name of the model artifact type that the runtime can serve.  # noqa: E501

        :return: The supported_model_artifact_type of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: str
        """
        return self._supported_model_artifact_type

    @supported_model_artifact_type.setter
    def supported_model_artifact_type(self, supported_model_artifact_type):
        """Sets the supported_model_artifact_type of this V1alphaScorerRuntime.

        Name of the model artifact type that the runtime can serve.  # noqa: E501

        :param supported_model_artifact_type: The supported_model_artifact_type of this V1alphaScorerRuntime.  # noqa: E501
        :type supported_model_artifact_type: str
        """

        self._supported_model_artifact_type = supported_model_artifact_type

    @property
    def scorer_runtime_type(self):
        """Gets the scorer_runtime_type of this V1alphaScorerRuntime.  # noqa: E501


        :return: The scorer_runtime_type of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: str
        """
        return self._scorer_runtime_type

    @scorer_runtime_type.setter
    def scorer_runtime_type(self, scorer_runtime_type):
        """Sets the scorer_runtime_type of this V1alphaScorerRuntime.


        :param scorer_runtime_type: The scorer_runtime_type of this V1alphaScorerRuntime.  # noqa: E501
        :type scorer_runtime_type: str
        """

        self._scorer_runtime_type = scorer_runtime_type

    @property
    def attributes(self):
        """Gets the attributes of this V1alphaScorerRuntime.  # noqa: E501


        :return: The attributes of this V1alphaScorerRuntime.  # noqa: E501
        :rtype: list[V1alphaScorerRuntimeAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this V1alphaScorerRuntime.


        :param attributes: The attributes of this V1alphaScorerRuntime.  # noqa: E501
        :type attributes: list[V1alphaScorerRuntimeAttribute]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaScorerRuntime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaScorerRuntime):
            return True

        return self.to_dict() != other.to_dict()
