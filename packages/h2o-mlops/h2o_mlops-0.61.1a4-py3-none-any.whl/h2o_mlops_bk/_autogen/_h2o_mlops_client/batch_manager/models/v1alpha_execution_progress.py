# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaExecutionProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_items_count': 'str',
        'processed_items_count': 'str',
        'estimated_duration': 'str',
        'message': 'str'
    }

    attribute_map = {
        'total_items_count': 'totalItemsCount',
        'processed_items_count': 'processedItemsCount',
        'estimated_duration': 'estimatedDuration',
        'message': 'message'
    }

    def __init__(self, total_items_count=None, processed_items_count=None, estimated_duration=None, message=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaExecutionProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_items_count = None
        self._processed_items_count = None
        self._estimated_duration = None
        self._message = None
        self.discriminator = None

        if total_items_count is not None:
            self.total_items_count = total_items_count
        if processed_items_count is not None:
            self.processed_items_count = processed_items_count
        if estimated_duration is not None:
            self.estimated_duration = estimated_duration
        if message is not None:
            self.message = message

    @property
    def total_items_count(self):
        """Gets the total_items_count of this V1alphaExecutionProgress.  # noqa: E501

        All of the items that need to be processed.  # noqa: E501

        :return: The total_items_count of this V1alphaExecutionProgress.  # noqa: E501
        :rtype: str
        """
        return self._total_items_count

    @total_items_count.setter
    def total_items_count(self, total_items_count):
        """Sets the total_items_count of this V1alphaExecutionProgress.

        All of the items that need to be processed.  # noqa: E501

        :param total_items_count: The total_items_count of this V1alphaExecutionProgress.  # noqa: E501
        :type total_items_count: str
        """

        self._total_items_count = total_items_count

    @property
    def processed_items_count(self):
        """Gets the processed_items_count of this V1alphaExecutionProgress.  # noqa: E501

        Already processed items.  # noqa: E501

        :return: The processed_items_count of this V1alphaExecutionProgress.  # noqa: E501
        :rtype: str
        """
        return self._processed_items_count

    @processed_items_count.setter
    def processed_items_count(self, processed_items_count):
        """Sets the processed_items_count of this V1alphaExecutionProgress.

        Already processed items.  # noqa: E501

        :param processed_items_count: The processed_items_count of this V1alphaExecutionProgress.  # noqa: E501
        :type processed_items_count: str
        """

        self._processed_items_count = processed_items_count

    @property
    def estimated_duration(self):
        """Gets the estimated_duration of this V1alphaExecutionProgress.  # noqa: E501

        Estimated duration of execution.  # noqa: E501

        :return: The estimated_duration of this V1alphaExecutionProgress.  # noqa: E501
        :rtype: str
        """
        return self._estimated_duration

    @estimated_duration.setter
    def estimated_duration(self, estimated_duration):
        """Sets the estimated_duration of this V1alphaExecutionProgress.

        Estimated duration of execution.  # noqa: E501

        :param estimated_duration: The estimated_duration of this V1alphaExecutionProgress.  # noqa: E501
        :type estimated_duration: str
        """

        self._estimated_duration = estimated_duration

    @property
    def message(self):
        """Gets the message of this V1alphaExecutionProgress.  # noqa: E501

        Message of the progress.  # noqa: E501

        :return: The message of this V1alphaExecutionProgress.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V1alphaExecutionProgress.

        Message of the progress.  # noqa: E501

        :param message: The message of this V1alphaExecutionProgress.  # noqa: E501
        :type message: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaExecutionProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaExecutionProgress):
            return True

        return self.to_dict() != other.to_dict()
