# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaSink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'store': 'V1alphaSinkStoreSpec',
        'credentials': 'V1alphaCredentialsSpec',
        'uri': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'store': 'store',
        'credentials': 'credentials',
        'uri': 'uri'
    }

    def __init__(self, name=None, display_name=None, store=None, credentials=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaSink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._store = None
        self._credentials = None
        self._uri = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if store is not None:
            self.store = store
        if credentials is not None:
            self.credentials = credentials
        if uri is not None:
            self.uri = uri

    @property
    def name(self):
        """Gets the name of this V1alphaSink.  # noqa: E501

        Output only. Unique name of the Sink.   e.g.: projects/<uuid>/sinks/<uuid>  # noqa: E501

        :return: The name of this V1alphaSink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alphaSink.

        Output only. Unique name of the Sink.   e.g.: projects/<uuid>/sinks/<uuid>  # noqa: E501

        :param name: The name of this V1alphaSink.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V1alphaSink.  # noqa: E501


        :return: The display_name of this V1alphaSink.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1alphaSink.


        :param display_name: The display_name of this V1alphaSink.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def store(self):
        """Gets the store of this V1alphaSink.  # noqa: E501


        :return: The store of this V1alphaSink.  # noqa: E501
        :rtype: V1alphaSinkStoreSpec
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this V1alphaSink.


        :param store: The store of this V1alphaSink.  # noqa: E501
        :type store: V1alphaSinkStoreSpec
        """

        self._store = store

    @property
    def credentials(self):
        """Gets the credentials of this V1alphaSink.  # noqa: E501


        :return: The credentials of this V1alphaSink.  # noqa: E501
        :rtype: V1alphaCredentialsSpec
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this V1alphaSink.


        :param credentials: The credentials of this V1alphaSink.  # noqa: E501
        :type credentials: V1alphaCredentialsSpec
        """

        self._credentials = credentials

    @property
    def uri(self):
        """Gets the uri of this V1alphaSink.  # noqa: E501

        URI (or path) of the particular source in the store that will source data. This can be table name for the databases, object key or prefix of blob stores, path of the file system, … SinkConnector defines the format and behavior.  # noqa: E501

        :return: The uri of this V1alphaSink.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V1alphaSink.

        URI (or path) of the particular source in the store that will source data. This can be table name for the databases, object key or prefix of blob stores, path of the file system, … SinkConnector defines the format and behavior.  # noqa: E501

        :param uri: The uri of this V1alphaSink.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaSink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaSink):
            return True

        return self.to_dict() != other.to_dict()
