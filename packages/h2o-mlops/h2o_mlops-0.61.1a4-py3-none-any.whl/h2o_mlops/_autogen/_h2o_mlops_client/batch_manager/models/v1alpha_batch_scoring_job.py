# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaBatchScoringJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'source': 'V1alphaSourceSpec',
        'scoring': 'list[V1alphaScoring]',
        'pipeline': 'str',
        'pipeline_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'scoring': 'scoring',
        'pipeline': 'pipeline',
        'pipeline_attributes': 'pipelineAttributes'
    }

    def __init__(self, name=None, source=None, scoring=None, pipeline=None, pipeline_attributes=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaBatchScoringJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._source = None
        self._scoring = None
        self._pipeline = None
        self._pipeline_attributes = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if scoring is not None:
            self.scoring = scoring
        if pipeline is not None:
            self.pipeline = pipeline
        if pipeline_attributes is not None:
            self.pipeline_attributes = pipeline_attributes

    @property
    def name(self):
        """Gets the name of this V1alphaBatchScoringJob.  # noqa: E501


        :return: The name of this V1alphaBatchScoringJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alphaBatchScoringJob.


        :param name: The name of this V1alphaBatchScoringJob.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this V1alphaBatchScoringJob.  # noqa: E501


        :return: The source of this V1alphaBatchScoringJob.  # noqa: E501
        :rtype: V1alphaSourceSpec
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1alphaBatchScoringJob.


        :param source: The source of this V1alphaBatchScoringJob.  # noqa: E501
        :type source: V1alphaSourceSpec
        """

        self._source = source

    @property
    def scoring(self):
        """Gets the scoring of this V1alphaBatchScoringJob.  # noqa: E501

        Definition of scoring. Data from one source can be scored using multiple scorers. Each of the scorers has it's own sink.  # noqa: E501

        :return: The scoring of this V1alphaBatchScoringJob.  # noqa: E501
        :rtype: list[V1alphaScoring]
        """
        return self._scoring

    @scoring.setter
    def scoring(self, scoring):
        """Sets the scoring of this V1alphaBatchScoringJob.

        Definition of scoring. Data from one source can be scored using multiple scorers. Each of the scorers has it's own sink.  # noqa: E501

        :param scoring: The scoring of this V1alphaBatchScoringJob.  # noqa: E501
        :type scoring: list[V1alphaScoring]
        """

        self._scoring = scoring

    @property
    def pipeline(self):
        """Gets the pipeline of this V1alphaBatchScoringJob.  # noqa: E501

        Name of the Pipeline for performing the batch scoring.  # noqa: E501

        :return: The pipeline of this V1alphaBatchScoringJob.  # noqa: E501
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this V1alphaBatchScoringJob.

        Name of the Pipeline for performing the batch scoring.  # noqa: E501

        :param pipeline: The pipeline of this V1alphaBatchScoringJob.  # noqa: E501
        :type pipeline: str
        """

        self._pipeline = pipeline

    @property
    def pipeline_attributes(self):
        """Gets the pipeline_attributes of this V1alphaBatchScoringJob.  # noqa: E501

        Optional attributes for the runtime.  # noqa: E501

        :return: The pipeline_attributes of this V1alphaBatchScoringJob.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._pipeline_attributes

    @pipeline_attributes.setter
    def pipeline_attributes(self, pipeline_attributes):
        """Sets the pipeline_attributes of this V1alphaBatchScoringJob.

        Optional attributes for the runtime.  # noqa: E501

        :param pipeline_attributes: The pipeline_attributes of this V1alphaBatchScoringJob.  # noqa: E501
        :type pipeline_attributes: dict(str, str)
        """

        self._pipeline_attributes = pipeline_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaBatchScoringJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaBatchScoringJob):
            return True

        return self.to_dict() != other.to_dict()
