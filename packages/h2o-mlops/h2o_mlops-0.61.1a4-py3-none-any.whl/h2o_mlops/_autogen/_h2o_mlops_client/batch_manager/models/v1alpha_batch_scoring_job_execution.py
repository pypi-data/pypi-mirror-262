# coding: utf-8

"""
    api/ai/h2o/mlops/batchscoring/job/v1alpha/artifact_processor.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch_manager.configuration import Configuration


class V1alphaBatchScoringJobExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'created_by': 'str',
        'create_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'progress': 'V1alphaExecutionProgress'
    }

    attribute_map = {
        'name': 'name',
        'created_by': 'createdBy',
        'create_time': 'createTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'progress': 'progress'
    }

    def __init__(self, name=None, created_by=None, create_time=None, start_time=None, end_time=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """V1alphaBatchScoringJobExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._created_by = None
        self._create_time = None
        self._start_time = None
        self._end_time = None
        self._progress = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if created_by is not None:
            self.created_by = created_by
        if create_time is not None:
            self.create_time = create_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if progress is not None:
            self.progress = progress

    @property
    def name(self):
        """Gets the name of this V1alphaBatchScoringJobExecution.  # noqa: E501


        :return: The name of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alphaBatchScoringJobExecution.


        :param name: The name of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def created_by(self):
        """Gets the created_by of this V1alphaBatchScoringJobExecution.  # noqa: E501

        Name of the entity initializing the execution. Can be user or service for on-demand execution or schedule for scheduled executions.  # noqa: E501

        :return: The created_by of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this V1alphaBatchScoringJobExecution.

        Name of the entity initializing the execution. Can be user or service for on-demand execution or schedule for scheduled executions.  # noqa: E501

        :param created_by: The created_by of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def create_time(self):
        """Gets the create_time of this V1alphaBatchScoringJobExecution.  # noqa: E501


        :return: The create_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1alphaBatchScoringJobExecution.


        :param create_time: The create_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """Gets the start_time of this V1alphaBatchScoringJobExecution.  # noqa: E501


        :return: The start_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1alphaBatchScoringJobExecution.


        :param start_time: The start_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this V1alphaBatchScoringJobExecution.  # noqa: E501


        :return: The end_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1alphaBatchScoringJobExecution.


        :param end_time: The end_time of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def progress(self):
        """Gets the progress of this V1alphaBatchScoringJobExecution.  # noqa: E501


        :return: The progress of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :rtype: V1alphaExecutionProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this V1alphaBatchScoringJobExecution.


        :param progress: The progress of this V1alphaBatchScoringJobExecution.  # noqa: E501
        :type progress: V1alphaExecutionProgress
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alphaBatchScoringJobExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alphaBatchScoringJobExecution):
            return True

        return self.to_dict() != other.to_dict()
