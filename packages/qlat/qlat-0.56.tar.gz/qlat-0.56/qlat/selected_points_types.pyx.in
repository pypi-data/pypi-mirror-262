# cython: binding=True, embedsignature=True, c_string_type=unicode, c_string_encoding=utf8

{{py:
type_name_list = [
    'ColorMatrix',
    'WilsonMatrix',
    'NonRelWilsonMatrix',
    'IsospinMatrix',
    'SpinMatrix',
    'WilsonVector',
    'ComplexD',
    'ComplexF',
    'RealD',
    'RealF',
    'Long',
    'Int',
    'Int64t',
    'Int32t',
    'Int8t',
    'Char',
    ]
}}

from qlat_utils.all cimport *
from . cimport everything as cc
from cpython cimport Py_buffer
from cpython.buffer cimport PyBUF_FORMAT
from .geometry cimport *
from .field_selection cimport *
from .field_types cimport *
from .selected_field_types cimport *

import qlat_utils as q
import numpy as np

from .field_type_dict import selected_points_type_dict

### -------------------------------------------------------------------

{{for name in type_name_list}}

cdef void set_field_sp_sp_{{name}}(SelectedPoints{{name}} self, SelectedPoints{{name}} other):
    # two psel must be the same object
    cc.set_selected_points(self.xx, other.xx, self.psel.xx, other.psel.xx)

cdef void set_field_sp_sf_{{name}}(SelectedPoints{{name}} self, SelectedField{{name}} other):
    # only assign available points
    cc.set_selected_points(self.xx, other.xx, self.psel.xx, other.fsel.xx)

cdef void set_field_sp_f_{{name}}(SelectedPoints{{name}} self, Field{{name}} other):
    cc.set_selected_points(self.xx, other.xx, self.psel.xx)

cdef class SelectedPoints{{name}}(SelectedPointsBase):

    ctype = ElemType{{name}}

    def __cinit__(self):
        self.cdata = <cc.Long>&(self.xx)
        self.view_count = 0

    def __init__(self, PointsSelection psel, int multiplicity=0):
        self.psel = psel
        if multiplicity > 0 and self.psel is not None:
            if self.view_count > 0:
                raise ValueError("can't re-init while being viewed")
            self.xx.init(self.psel.xx, multiplicity)

    def __getbuffer__(self, Py_buffer *buffer, int flags):
        cdef int ndim = 2 + ElemType{{name}}.ndim()
        cdef Buffer buf = Buffer(self, ndim)
        buf.format = ElemType{{name}}.format()
        buf.itemsize = ElemType{{name}}.itemsize()
        buf.buf = <char*>(self.xx.points.data())
        buf.set_dim_size(0, self.xx.n_points)
        buf.set_dim_size(1, self.xx.multiplicity)
        cdef cc.std_vector[Py_ssize_t] vec = ElemType{{name}}.shape()
        cdef int dim_size = vec.size()
        cdef int dim
        for dim in range(dim_size):
            buf.set_dim_size(2 + dim, vec[dim])
        buf.update_strides_from_shape()
        buf.set_buffer(buffer, flags)
        self.view_count += 1

    def release_buffer(self, Buffer buf):
        assert buf.obj is self
        self.view_count -= 1

    def __imatmul__(self, other):
        """
        won't change self.psel
        """
        if isinstance(other, SelectedPoints{{name}}):
            # two psel must be the same object
            set_field_sp_sp_{{name}}(self, other)
        elif isinstance(other, SelectedField{{name}}):
            # only assign available points
            set_field_sp_sf_{{name}}(self, other)
        elif isinstance(other, Field{{name}}):
            set_field_sp_f_{{name}}(self, other)
        else:
            raise Exception(f"SelectedPoints{{name}} @= type mismatch {type(self)} {type(other)}")
        return self

    @q.timer
    def copy(self, cc.bool is_copying_data=True):
        f = type(self)(self.psel)
        if is_copying_data:
            f @= self
        return f

    @q.timer
    def set_zero(self):
        cc.set_zero(self.xx)

    def swap(self, SelectedPoints{{name}} f1):
        assert f1.psel is self.psel
        cc.qswap(f1.xx, self.xx)

    def save(self, const cc.std_string& path):
        cc.save_selected_points(self.xx, path)

    def load(self, const cc.std_string& path):
        cc.load_selected_points(self.xx, path)

    def save_str(self):
        return self.to_lat_data().save_str()

    def load_str(self, cc.std_string& content):
        cdef LatData ld = LatData()
        ld.load_str(content)
        self.from_lat_data(ld)

    def to_lat_data(self):
        ld = LatData()
        cc.assign_direct(ld.xx, cc.lat_data_from_selected_points(self.xx))
        return ld

    def from_lat_data(self, LatData ld not None):
        cc.selected_points_from_lat_data(self.xx, ld.xx)

    def n_points(self):
        return self.xx.n_points

    def multiplicity(self):
        return self.xx.multiplicity

    def __iadd__(self, SelectedPoints{{name}} f):
        cc.iadd_direct(self.xx, f.xx)
        return self

    def __isub__(self, SelectedPoints{{name}} f):
        cc.isub_direct(self.xx, f.xx)
        return self

    def __imul__(self, f):
        cdef double fd
        cdef cc.PyComplexD fc
        if isinstance(f, float):
            fd = f
            cc.imul_direct(self.xx, fd)
        elif isinstance(f, complex):
            fc = f
            cc.imul_direct(self.xx, cc.ccpy_d(fc))
        else:
            raise Exception(f"SelectedPoints.__imul__(self, f={f})")
        return self

    def qnorm(self):
        return cc.qnorm(self.xx)

    def qnorm_field(self):
        cdef SelectedPointsRealD f_n = SelectedPointsRealD(self.psel)
        cc.qnorm_field(f_n.xx, self.xx)
        return f_n

selected_points_type_dict[ElemType{{name}}] = SelectedPoints{{name}}

{{endfor}}

### -------------------------------------------------------------------
