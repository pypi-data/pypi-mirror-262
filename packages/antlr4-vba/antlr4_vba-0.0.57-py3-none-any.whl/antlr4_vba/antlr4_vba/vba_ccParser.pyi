from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class vba_ccParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_startRule: int
    RULE_proceduralModuleHeader: int
    RULE_classFileHeader: int
    RULE_logicalLine: int
    RULE_conditionalModuleBody: int
    RULE_ccBlock: int
    RULE_ccConst: int
    RULE_ccVarLhs: int
    RULE_ccIfBlock: int
    RULE_ccIf: int
    RULE_ccElseifBlock: int
    RULE_ccElseif: int
    RULE_ccElseBlock: int
    RULE_ccElse: int
    RULE_ccEndif: int
    RULE_name: int
    RULE_untypedName: int
    RULE_typedName: int
    RULE_typeSuffix: int
    RULE_ccExpression: int
    RULE_literalExpression: int
    RULE_ccFunc: int
    RULE_reservedKeywords: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    T__2: int
    T__3: int
    T__4: int
    T__5: int
    T__6: int
    T__7: int
    T__8: int
    T__9: int
    T__10: int
    T__11: int
    T__12: int
    T__13: int
    T__14: int
    T__15: int
    T__16: int
    T__17: int
    T__18: int
    T__19: int
    T__20: int
    T__21: int
    T__22: int
    T__23: int
    T__24: int
    T__25: int
    T__26: int
    T__27: int
    T__28: int
    T__29: int
    T__30: int
    T__31: int
    T__32: int
    T__33: int
    T__34: int
    T__35: int
    T__36: int
    T__37: int
    T__38: int
    T__39: int
    T__40: int
    T__41: int
    CONST: int
    IF: int
    ELSEIF: int
    ELSE: int
    ENDIF: int
    EMPTY: int
    LIKE: int
    NOTHING: int
    NULL_: int
    THEN: int
    WIN16: int
    WIN32: int
    WIN64: int
    VBA6: int
    VBA7: int
    MAC: int
    EQ: int
    GEQ: int
    GT: int
    LEQ: int
    LT: int
    NEQ: int
    BOOLEANLITERAL: int
    MISC: int
    NEWLINE: int
    SINGLEQUOTE: int
    STRINGLITERAL: int
    OCTLITERAL: int
    HEXLITERAL: int
    INTEGERLITERAL: int
    FLOATLITERAL: int
    DATELITERAL: int
    IDENTIFIER: int
    FOREIGN_NAME: int
    COMMENT: int
    WS: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class StartRuleContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def conditionalModuleBody(self): ...
        def EOF(self): ...
        def proceduralModuleHeader(self): ...
        def classFileHeader(self): ...
        def NEWLINE(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    state: int
    def startRule(self): ...
    class ProceduralModuleHeaderContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def STRINGLITERAL(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def proceduralModuleHeader(self): ...
    class ClassFileHeaderContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FLOATLITERAL(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def classFileHeader(self): ...
    class LogicalLineContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NEWLINE(self, i: int = None): ...
        def WS(self): ...
        def CONST(self): ...
        def IF(self): ...
        def ELSEIF(self): ...
        def ELSE(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def logicalLine(self): ...
    class ConditionalModuleBodyContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ccBlock(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def conditionalModuleBody(self): ...
    class CcBlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ccConst(self, i: int = None): ...
        def ccIfBlock(self, i: int = None): ...
        def logicalLine(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccBlock(self): ...
    class CcConstContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NEWLINE(self): ...
        def CONST(self): ...
        def ccVarLhs(self): ...
        def EQ(self): ...
        def ccExpression(self): ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccConst(self): ...
    class CcVarLhsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def name(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccVarLhs(self): ...
    class CcIfBlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ccIf(self): ...
        def ccEndif(self): ...
        def ccBlock(self): ...
        def ccElseifBlock(self, i: int = None): ...
        def ccElseBlock(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccIfBlock(self): ...
    class CcIfContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IF(self): ...
        def ccExpression(self): ...
        def THEN(self): ...
        def NEWLINE(self, i: int = None): ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccIf(self): ...
    class CcElseifBlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ccElseif(self): ...
        def ccBlock(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccElseifBlock(self): ...
    class CcElseifContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ELSEIF(self): ...
        def ccExpression(self): ...
        def THEN(self): ...
        def NEWLINE(self, i: int = None): ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccElseif(self): ...
    class CcElseBlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ccElse(self): ...
        def ccBlock(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccElseBlock(self): ...
    class CcElseContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ELSE(self): ...
        def NEWLINE(self, i: int = None): ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccElse(self): ...
    class CcEndifContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ENDIF(self): ...
        def NEWLINE(self, i: int = None): ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccEndif(self): ...
    class NameContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def untypedName(self): ...
        def typedName(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def name(self): ...
    class UntypedNameContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IDENTIFIER(self): ...
        def FOREIGN_NAME(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def untypedName(self): ...
    class TypedNameContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IDENTIFIER(self): ...
        def typeSuffix(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typedName(self): ...
    class TypeSuffixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typeSuffix(self): ...
    class CcExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class ParenthesizedExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class LiteralExpressContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def literalExpression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class UnaryMinusExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class RelationExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self, i: int = None): ...
        def EQ(self): ...
        def NEQ(self): ...
        def GT(self): ...
        def GEQ(self): ...
        def LEQ(self): ...
        def LT(self): ...
        def LIKE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class IndexExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccFunc(self): ...
        def ccExpression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class NotOperatorExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class ConcatExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class ArithmeticExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class BooleanExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ccExpression(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class IdentifierExpressionContext(CcExpressionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def reservedKeywords(self): ...
        def IDENTIFIER(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccExpression(self, _p: int = 0): ...
    class LiteralExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BOOLEANLITERAL(self): ...
        def FLOATLITERAL(self): ...
        def INTEGERLITERAL(self): ...
        def STRINGLITERAL(self): ...
        def DATELITERAL(self): ...
        def EMPTY(self): ...
        def NULL_(self): ...
        def NOTHING(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def literalExpression(self): ...
    class CcFuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ccFunc(self): ...
    class ReservedKeywordsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WIN16(self): ...
        def WIN32(self): ...
        def WIN64(self): ...
        def VBA6(self): ...
        def VBA7(self): ...
        def MAC(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def reservedKeywords(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def ccExpression_sempred(self, localctx: CcExpressionContext, predIndex: int): ...
