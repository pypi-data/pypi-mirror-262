from antlr4 import *
from vbaParser import vbaParser as vbaParser

class vbaParserListener(ParseTreeListener):
    def enterStartRule(self, ctx: vbaParser.StartRuleContext): ...
    def exitStartRule(self, ctx: vbaParser.StartRuleContext): ...
    def enterModule(self, ctx: vbaParser.ModuleContext): ...
    def exitModule(self, ctx: vbaParser.ModuleContext): ...
    def enterClassFileHeader(self, ctx: vbaParser.ClassFileHeaderContext): ...
    def exitClassFileHeader(self, ctx: vbaParser.ClassFileHeaderContext): ...
    def enterClassVersionIdentification(self, ctx: vbaParser.ClassVersionIdentificationContext): ...
    def exitClassVersionIdentification(self, ctx: vbaParser.ClassVersionIdentificationContext): ...
    def enterClassBeginBlock(self, ctx: vbaParser.ClassBeginBlockContext): ...
    def exitClassBeginBlock(self, ctx: vbaParser.ClassBeginBlockContext): ...
    def enterBeginBlockConfigElement(self, ctx: vbaParser.BeginBlockConfigElementContext): ...
    def exitBeginBlockConfigElement(self, ctx: vbaParser.BeginBlockConfigElementContext): ...
    def enterFormFileHeader(self, ctx: vbaParser.FormFileHeaderContext): ...
    def exitFormFileHeader(self, ctx: vbaParser.FormFileHeaderContext): ...
    def enterFormVersionIdentification(self, ctx: vbaParser.FormVersionIdentificationContext): ...
    def exitFormVersionIdentification(self, ctx: vbaParser.FormVersionIdentificationContext): ...
    def enterFormObjectAssign(self, ctx: vbaParser.FormObjectAssignContext): ...
    def exitFormObjectAssign(self, ctx: vbaParser.FormObjectAssignContext): ...
    def enterFormBeginBlock(self, ctx: vbaParser.FormBeginBlockContext): ...
    def exitFormBeginBlock(self, ctx: vbaParser.FormBeginBlockContext): ...
    def enterBeginPropertyBlock(self, ctx: vbaParser.BeginPropertyBlockContext): ...
    def exitBeginPropertyBlock(self, ctx: vbaParser.BeginPropertyBlockContext): ...
    def enterProceduralModule(self, ctx: vbaParser.ProceduralModuleContext): ...
    def exitProceduralModule(self, ctx: vbaParser.ProceduralModuleContext): ...
    def enterClassModule(self, ctx: vbaParser.ClassModuleContext): ...
    def exitClassModule(self, ctx: vbaParser.ClassModuleContext): ...
    def enterProceduralModuleHeader(self, ctx: vbaParser.ProceduralModuleHeaderContext): ...
    def exitProceduralModuleHeader(self, ctx: vbaParser.ProceduralModuleHeaderContext): ...
    def enterClassModuleHeader(self, ctx: vbaParser.ClassModuleHeaderContext): ...
    def exitClassModuleHeader(self, ctx: vbaParser.ClassModuleHeaderContext): ...
    def enterClassAttr(self, ctx: vbaParser.ClassAttrContext): ...
    def exitClassAttr(self, ctx: vbaParser.ClassAttrContext): ...
    def enterProceduralModuleBody(self, ctx: vbaParser.ProceduralModuleBodyContext): ...
    def exitProceduralModuleBody(self, ctx: vbaParser.ProceduralModuleBodyContext): ...
    def enterClassModuleBody(self, ctx: vbaParser.ClassModuleBodyContext): ...
    def exitClassModuleBody(self, ctx: vbaParser.ClassModuleBodyContext): ...
    def enterUnrestrictedName(self, ctx: vbaParser.UnrestrictedNameContext): ...
    def exitUnrestrictedName(self, ctx: vbaParser.UnrestrictedNameContext): ...
    def enterName(self, ctx: vbaParser.NameContext): ...
    def exitName(self, ctx: vbaParser.NameContext): ...
    def enterUntypedName(self, ctx: vbaParser.UntypedNameContext): ...
    def exitUntypedName(self, ctx: vbaParser.UntypedNameContext): ...
    def enterProceduralModuleDeclarationSection(self, ctx: vbaParser.ProceduralModuleDeclarationSectionContext): ...
    def exitProceduralModuleDeclarationSection(self, ctx: vbaParser.ProceduralModuleDeclarationSectionContext): ...
    def enterClassModuleDeclarationSection(self, ctx: vbaParser.ClassModuleDeclarationSectionContext): ...
    def exitClassModuleDeclarationSection(self, ctx: vbaParser.ClassModuleDeclarationSectionContext): ...
    def enterProceduralModuleDirectiveElement(self, ctx: vbaParser.ProceduralModuleDirectiveElementContext): ...
    def exitProceduralModuleDirectiveElement(self, ctx: vbaParser.ProceduralModuleDirectiveElementContext): ...
    def enterProceduralModuleDeclarationElement(self, ctx: vbaParser.ProceduralModuleDeclarationElementContext): ...
    def exitProceduralModuleDeclarationElement(self, ctx: vbaParser.ProceduralModuleDeclarationElementContext): ...
    def enterClassModuleDirectiveElement(self, ctx: vbaParser.ClassModuleDirectiveElementContext): ...
    def exitClassModuleDirectiveElement(self, ctx: vbaParser.ClassModuleDirectiveElementContext): ...
    def enterClassModuleDeclarationElement(self, ctx: vbaParser.ClassModuleDeclarationElementContext): ...
    def exitClassModuleDeclarationElement(self, ctx: vbaParser.ClassModuleDeclarationElementContext): ...
    def enterCommonOptionDirective(self, ctx: vbaParser.CommonOptionDirectiveContext): ...
    def exitCommonOptionDirective(self, ctx: vbaParser.CommonOptionDirectiveContext): ...
    def enterOptionCompareDirective(self, ctx: vbaParser.OptionCompareDirectiveContext): ...
    def exitOptionCompareDirective(self, ctx: vbaParser.OptionCompareDirectiveContext): ...
    def enterOptionBaseDirective(self, ctx: vbaParser.OptionBaseDirectiveContext): ...
    def exitOptionBaseDirective(self, ctx: vbaParser.OptionBaseDirectiveContext): ...
    def enterOptionExplicitDirective(self, ctx: vbaParser.OptionExplicitDirectiveContext): ...
    def exitOptionExplicitDirective(self, ctx: vbaParser.OptionExplicitDirectiveContext): ...
    def enterOptionPrivateDirective(self, ctx: vbaParser.OptionPrivateDirectiveContext): ...
    def exitOptionPrivateDirective(self, ctx: vbaParser.OptionPrivateDirectiveContext): ...
    def enterDefDirective(self, ctx: vbaParser.DefDirectiveContext): ...
    def exitDefDirective(self, ctx: vbaParser.DefDirectiveContext): ...
    def enterLetterSpec(self, ctx: vbaParser.LetterSpecContext): ...
    def exitLetterSpec(self, ctx: vbaParser.LetterSpecContext): ...
    def enterSingleLetter(self, ctx: vbaParser.SingleLetterContext): ...
    def exitSingleLetter(self, ctx: vbaParser.SingleLetterContext): ...
    def enterUniversalLetterRange(self, ctx: vbaParser.UniversalLetterRangeContext): ...
    def exitUniversalLetterRange(self, ctx: vbaParser.UniversalLetterRangeContext): ...
    def enterUpperCaseA(self, ctx: vbaParser.UpperCaseAContext): ...
    def exitUpperCaseA(self, ctx: vbaParser.UpperCaseAContext): ...
    def enterUpperCaseZ(self, ctx: vbaParser.UpperCaseZContext): ...
    def exitUpperCaseZ(self, ctx: vbaParser.UpperCaseZContext): ...
    def enterLetterRange(self, ctx: vbaParser.LetterRangeContext): ...
    def exitLetterRange(self, ctx: vbaParser.LetterRangeContext): ...
    def enterFirstLetter(self, ctx: vbaParser.FirstLetterContext): ...
    def exitFirstLetter(self, ctx: vbaParser.FirstLetterContext): ...
    def enterLastLetter(self, ctx: vbaParser.LastLetterContext): ...
    def exitLastLetter(self, ctx: vbaParser.LastLetterContext): ...
    def enterDefType(self, ctx: vbaParser.DefTypeContext): ...
    def exitDefType(self, ctx: vbaParser.DefTypeContext): ...
    def enterCommonModuleDeclarationElement(self, ctx: vbaParser.CommonModuleDeclarationElementContext): ...
    def exitCommonModuleDeclarationElement(self, ctx: vbaParser.CommonModuleDeclarationElementContext): ...
    def enterModuleVariableDeclaration(self, ctx: vbaParser.ModuleVariableDeclarationContext): ...
    def exitModuleVariableDeclaration(self, ctx: vbaParser.ModuleVariableDeclarationContext): ...
    def enterVariableHelpAttribute(self, ctx: vbaParser.VariableHelpAttributeContext): ...
    def exitVariableHelpAttribute(self, ctx: vbaParser.VariableHelpAttributeContext): ...
    def enterGlobalVariableDeclaration(self, ctx: vbaParser.GlobalVariableDeclarationContext): ...
    def exitGlobalVariableDeclaration(self, ctx: vbaParser.GlobalVariableDeclarationContext): ...
    def enterPublicVariableDecalation(self, ctx: vbaParser.PublicVariableDecalationContext): ...
    def exitPublicVariableDecalation(self, ctx: vbaParser.PublicVariableDecalationContext): ...
    def enterPrivateVariableDeclaration(self, ctx: vbaParser.PrivateVariableDeclarationContext): ...
    def exitPrivateVariableDeclaration(self, ctx: vbaParser.PrivateVariableDeclarationContext): ...
    def enterModuleVariableDeclarationList(self, ctx: vbaParser.ModuleVariableDeclarationListContext): ...
    def exitModuleVariableDeclarationList(self, ctx: vbaParser.ModuleVariableDeclarationListContext): ...
    def enterVariableDeclarationList(self, ctx: vbaParser.VariableDeclarationListContext): ...
    def exitVariableDeclarationList(self, ctx: vbaParser.VariableDeclarationListContext): ...
    def enterVariableDcl(self, ctx: vbaParser.VariableDclContext): ...
    def exitVariableDcl(self, ctx: vbaParser.VariableDclContext): ...
    def enterTypedVariableDcl(self, ctx: vbaParser.TypedVariableDclContext): ...
    def exitTypedVariableDcl(self, ctx: vbaParser.TypedVariableDclContext): ...
    def enterUntypedVariableDcl(self, ctx: vbaParser.UntypedVariableDclContext): ...
    def exitUntypedVariableDcl(self, ctx: vbaParser.UntypedVariableDclContext): ...
    def enterArrayClause(self, ctx: vbaParser.ArrayClauseContext): ...
    def exitArrayClause(self, ctx: vbaParser.ArrayClauseContext): ...
    def enterAsClause(self, ctx: vbaParser.AsClauseContext): ...
    def exitAsClause(self, ctx: vbaParser.AsClauseContext): ...
    def enterWitheventsVariableDcl(self, ctx: vbaParser.WitheventsVariableDclContext): ...
    def exitWitheventsVariableDcl(self, ctx: vbaParser.WitheventsVariableDclContext): ...
    def enterClassTypeName(self, ctx: vbaParser.ClassTypeNameContext): ...
    def exitClassTypeName(self, ctx: vbaParser.ClassTypeNameContext): ...
    def enterArrayDim(self, ctx: vbaParser.ArrayDimContext): ...
    def exitArrayDim(self, ctx: vbaParser.ArrayDimContext): ...
    def enterBoundsList(self, ctx: vbaParser.BoundsListContext): ...
    def exitBoundsList(self, ctx: vbaParser.BoundsListContext): ...
    def enterDimSpec(self, ctx: vbaParser.DimSpecContext): ...
    def exitDimSpec(self, ctx: vbaParser.DimSpecContext): ...
    def enterLowerBound(self, ctx: vbaParser.LowerBoundContext): ...
    def exitLowerBound(self, ctx: vbaParser.LowerBoundContext): ...
    def enterUpperBound(self, ctx: vbaParser.UpperBoundContext): ...
    def exitUpperBound(self, ctx: vbaParser.UpperBoundContext): ...
    def enterAsAutoObject(self, ctx: vbaParser.AsAutoObjectContext): ...
    def exitAsAutoObject(self, ctx: vbaParser.AsAutoObjectContext): ...
    def enterAsType(self, ctx: vbaParser.AsTypeContext): ...
    def exitAsType(self, ctx: vbaParser.AsTypeContext): ...
    def enterTypeSpec(self, ctx: vbaParser.TypeSpecContext): ...
    def exitTypeSpec(self, ctx: vbaParser.TypeSpecContext): ...
    def enterFixedLengthStringSpec(self, ctx: vbaParser.FixedLengthStringSpecContext): ...
    def exitFixedLengthStringSpec(self, ctx: vbaParser.FixedLengthStringSpecContext): ...
    def enterStringLength(self, ctx: vbaParser.StringLengthContext): ...
    def exitStringLength(self, ctx: vbaParser.StringLengthContext): ...
    def enterConstantName(self, ctx: vbaParser.ConstantNameContext): ...
    def exitConstantName(self, ctx: vbaParser.ConstantNameContext): ...
    def enterPublicConstDeclaration(self, ctx: vbaParser.PublicConstDeclarationContext): ...
    def exitPublicConstDeclaration(self, ctx: vbaParser.PublicConstDeclarationContext): ...
    def enterPrivateConstDeclaration(self, ctx: vbaParser.PrivateConstDeclarationContext): ...
    def exitPrivateConstDeclaration(self, ctx: vbaParser.PrivateConstDeclarationContext): ...
    def enterModuleConstDeclaration(self, ctx: vbaParser.ModuleConstDeclarationContext): ...
    def exitModuleConstDeclaration(self, ctx: vbaParser.ModuleConstDeclarationContext): ...
    def enterConstDeclaration(self, ctx: vbaParser.ConstDeclarationContext): ...
    def exitConstDeclaration(self, ctx: vbaParser.ConstDeclarationContext): ...
    def enterConstItemList(self, ctx: vbaParser.ConstItemListContext): ...
    def exitConstItemList(self, ctx: vbaParser.ConstItemListContext): ...
    def enterConstItem(self, ctx: vbaParser.ConstItemContext): ...
    def exitConstItem(self, ctx: vbaParser.ConstItemContext): ...
    def enterTypedNameConstItem(self, ctx: vbaParser.TypedNameConstItemContext): ...
    def exitTypedNameConstItem(self, ctx: vbaParser.TypedNameConstItemContext): ...
    def enterUntypedNameConstItem(self, ctx: vbaParser.UntypedNameConstItemContext): ...
    def exitUntypedNameConstItem(self, ctx: vbaParser.UntypedNameConstItemContext): ...
    def enterConstAsClause(self, ctx: vbaParser.ConstAsClauseContext): ...
    def exitConstAsClause(self, ctx: vbaParser.ConstAsClauseContext): ...
    def enterPublicTypeDeclaration(self, ctx: vbaParser.PublicTypeDeclarationContext): ...
    def exitPublicTypeDeclaration(self, ctx: vbaParser.PublicTypeDeclarationContext): ...
    def enterPrivateTypeDeclaration(self, ctx: vbaParser.PrivateTypeDeclarationContext): ...
    def exitPrivateTypeDeclaration(self, ctx: vbaParser.PrivateTypeDeclarationContext): ...
    def enterUdtDeclaration(self, ctx: vbaParser.UdtDeclarationContext): ...
    def exitUdtDeclaration(self, ctx: vbaParser.UdtDeclarationContext): ...
    def enterUdtMemberList(self, ctx: vbaParser.UdtMemberListContext): ...
    def exitUdtMemberList(self, ctx: vbaParser.UdtMemberListContext): ...
    def enterUdtElement(self, ctx: vbaParser.UdtElementContext): ...
    def exitUdtElement(self, ctx: vbaParser.UdtElementContext): ...
    def enterUdtMember(self, ctx: vbaParser.UdtMemberContext): ...
    def exitUdtMember(self, ctx: vbaParser.UdtMemberContext): ...
    def enterUntypedNameMemberDcl(self, ctx: vbaParser.UntypedNameMemberDclContext): ...
    def exitUntypedNameMemberDcl(self, ctx: vbaParser.UntypedNameMemberDclContext): ...
    def enterReservedNameMemberDcl(self, ctx: vbaParser.ReservedNameMemberDclContext): ...
    def exitReservedNameMemberDcl(self, ctx: vbaParser.ReservedNameMemberDclContext): ...
    def enterOptionalArrayClause(self, ctx: vbaParser.OptionalArrayClauseContext): ...
    def exitOptionalArrayClause(self, ctx: vbaParser.OptionalArrayClauseContext): ...
    def enterReservedMemberName(self, ctx: vbaParser.ReservedMemberNameContext): ...
    def exitReservedMemberName(self, ctx: vbaParser.ReservedMemberNameContext): ...
    def enterGlobalEnumDeclaration(self, ctx: vbaParser.GlobalEnumDeclarationContext): ...
    def exitGlobalEnumDeclaration(self, ctx: vbaParser.GlobalEnumDeclarationContext): ...
    def enterPublicEnumDeclaration(self, ctx: vbaParser.PublicEnumDeclarationContext): ...
    def exitPublicEnumDeclaration(self, ctx: vbaParser.PublicEnumDeclarationContext): ...
    def enterPrivateEnumDeclaration(self, ctx: vbaParser.PrivateEnumDeclarationContext): ...
    def exitPrivateEnumDeclaration(self, ctx: vbaParser.PrivateEnumDeclarationContext): ...
    def enterEnumDeclaration(self, ctx: vbaParser.EnumDeclarationContext): ...
    def exitEnumDeclaration(self, ctx: vbaParser.EnumDeclarationContext): ...
    def enterEnumMemberList(self, ctx: vbaParser.EnumMemberListContext): ...
    def exitEnumMemberList(self, ctx: vbaParser.EnumMemberListContext): ...
    def enterEnumElement(self, ctx: vbaParser.EnumElementContext): ...
    def exitEnumElement(self, ctx: vbaParser.EnumElementContext): ...
    def enterEnumMember(self, ctx: vbaParser.EnumMemberContext): ...
    def exitEnumMember(self, ctx: vbaParser.EnumMemberContext): ...
    def enterPublicExternalProcedureDeclaration(self, ctx: vbaParser.PublicExternalProcedureDeclarationContext): ...
    def exitPublicExternalProcedureDeclaration(self, ctx: vbaParser.PublicExternalProcedureDeclarationContext): ...
    def enterPrivateExternalProcedureDeclaration(self, ctx: vbaParser.PrivateExternalProcedureDeclarationContext): ...
    def exitPrivateExternalProcedureDeclaration(self, ctx: vbaParser.PrivateExternalProcedureDeclarationContext): ...
    def enterExternalProcDcl(self, ctx: vbaParser.ExternalProcDclContext): ...
    def exitExternalProcDcl(self, ctx: vbaParser.ExternalProcDclContext): ...
    def enterExternalSub(self, ctx: vbaParser.ExternalSubContext): ...
    def exitExternalSub(self, ctx: vbaParser.ExternalSubContext): ...
    def enterExternalFunction(self, ctx: vbaParser.ExternalFunctionContext): ...
    def exitExternalFunction(self, ctx: vbaParser.ExternalFunctionContext): ...
    def enterLibInfo(self, ctx: vbaParser.LibInfoContext): ...
    def exitLibInfo(self, ctx: vbaParser.LibInfoContext): ...
    def enterLibClause(self, ctx: vbaParser.LibClauseContext): ...
    def exitLibClause(self, ctx: vbaParser.LibClauseContext): ...
    def enterAliasClause(self, ctx: vbaParser.AliasClauseContext): ...
    def exitAliasClause(self, ctx: vbaParser.AliasClauseContext): ...
    def enterImplementsDirective(self, ctx: vbaParser.ImplementsDirectiveContext): ...
    def exitImplementsDirective(self, ctx: vbaParser.ImplementsDirectiveContext): ...
    def enterEventDeclaration(self, ctx: vbaParser.EventDeclarationContext): ...
    def exitEventDeclaration(self, ctx: vbaParser.EventDeclarationContext): ...
    def enterEventParameterList(self, ctx: vbaParser.EventParameterListContext): ...
    def exitEventParameterList(self, ctx: vbaParser.EventParameterListContext): ...
    def enterProceduralModuleCode(self, ctx: vbaParser.ProceduralModuleCodeContext): ...
    def exitProceduralModuleCode(self, ctx: vbaParser.ProceduralModuleCodeContext): ...
    def enterClassModuleCode(self, ctx: vbaParser.ClassModuleCodeContext): ...
    def exitClassModuleCode(self, ctx: vbaParser.ClassModuleCodeContext): ...
    def enterProceduralModuleCodeElement(self, ctx: vbaParser.ProceduralModuleCodeElementContext): ...
    def exitProceduralModuleCodeElement(self, ctx: vbaParser.ProceduralModuleCodeElementContext): ...
    def enterClassModuleCodeElement(self, ctx: vbaParser.ClassModuleCodeElementContext): ...
    def exitClassModuleCodeElement(self, ctx: vbaParser.ClassModuleCodeElementContext): ...
    def enterCommonModuleCodeElement(self, ctx: vbaParser.CommonModuleCodeElementContext): ...
    def exitCommonModuleCodeElement(self, ctx: vbaParser.CommonModuleCodeElementContext): ...
    def enterProcedureDeclaration(self, ctx: vbaParser.ProcedureDeclarationContext): ...
    def exitProcedureDeclaration(self, ctx: vbaParser.ProcedureDeclarationContext): ...
    def enterSubroutineDeclaration(self, ctx: vbaParser.SubroutineDeclarationContext): ...
    def exitSubroutineDeclaration(self, ctx: vbaParser.SubroutineDeclarationContext): ...
    def enterFunctionDeclaration(self, ctx: vbaParser.FunctionDeclarationContext): ...
    def exitFunctionDeclaration(self, ctx: vbaParser.FunctionDeclarationContext): ...
    def enterPropertyGetDeclaration(self, ctx: vbaParser.PropertyGetDeclarationContext): ...
    def exitPropertyGetDeclaration(self, ctx: vbaParser.PropertyGetDeclarationContext): ...
    def enterPropertyLhsDeclaration(self, ctx: vbaParser.PropertyLhsDeclarationContext): ...
    def exitPropertyLhsDeclaration(self, ctx: vbaParser.PropertyLhsDeclarationContext): ...
    def enterEndLabel(self, ctx: vbaParser.EndLabelContext): ...
    def exitEndLabel(self, ctx: vbaParser.EndLabelContext): ...
    def enterProcedureTail(self, ctx: vbaParser.ProcedureTailContext): ...
    def exitProcedureTail(self, ctx: vbaParser.ProcedureTailContext): ...
    def enterProcedureScope(self, ctx: vbaParser.ProcedureScopeContext): ...
    def exitProcedureScope(self, ctx: vbaParser.ProcedureScopeContext): ...
    def enterInitialStatic(self, ctx: vbaParser.InitialStaticContext): ...
    def exitInitialStatic(self, ctx: vbaParser.InitialStaticContext): ...
    def enterTrailingStatic(self, ctx: vbaParser.TrailingStaticContext): ...
    def exitTrailingStatic(self, ctx: vbaParser.TrailingStaticContext): ...
    def enterSubroutineName(self, ctx: vbaParser.SubroutineNameContext): ...
    def exitSubroutineName(self, ctx: vbaParser.SubroutineNameContext): ...
    def enterFunctionName(self, ctx: vbaParser.FunctionNameContext): ...
    def exitFunctionName(self, ctx: vbaParser.FunctionNameContext): ...
    def enterPrefixedName(self, ctx: vbaParser.PrefixedNameContext): ...
    def exitPrefixedName(self, ctx: vbaParser.PrefixedNameContext): ...
    def enterFunctionType(self, ctx: vbaParser.FunctionTypeContext): ...
    def exitFunctionType(self, ctx: vbaParser.FunctionTypeContext): ...
    def enterArrayDesignator(self, ctx: vbaParser.ArrayDesignatorContext): ...
    def exitArrayDesignator(self, ctx: vbaParser.ArrayDesignatorContext): ...
    def enterProcedureParameters(self, ctx: vbaParser.ProcedureParametersContext): ...
    def exitProcedureParameters(self, ctx: vbaParser.ProcedureParametersContext): ...
    def enterPropertyParameters(self, ctx: vbaParser.PropertyParametersContext): ...
    def exitPropertyParameters(self, ctx: vbaParser.PropertyParametersContext): ...
    def enterParameterList(self, ctx: vbaParser.ParameterListContext): ...
    def exitParameterList(self, ctx: vbaParser.ParameterListContext): ...
    def enterPositionalParameters(self, ctx: vbaParser.PositionalParametersContext): ...
    def exitPositionalParameters(self, ctx: vbaParser.PositionalParametersContext): ...
    def enterOptionalParameters(self, ctx: vbaParser.OptionalParametersContext): ...
    def exitOptionalParameters(self, ctx: vbaParser.OptionalParametersContext): ...
    def enterValueParam(self, ctx: vbaParser.ValueParamContext): ...
    def exitValueParam(self, ctx: vbaParser.ValueParamContext): ...
    def enterPositionalParam(self, ctx: vbaParser.PositionalParamContext): ...
    def exitPositionalParam(self, ctx: vbaParser.PositionalParamContext): ...
    def enterOptionalParam(self, ctx: vbaParser.OptionalParamContext): ...
    def exitOptionalParam(self, ctx: vbaParser.OptionalParamContext): ...
    def enterParamArray(self, ctx: vbaParser.ParamArrayContext): ...
    def exitParamArray(self, ctx: vbaParser.ParamArrayContext): ...
    def enterParamDcl(self, ctx: vbaParser.ParamDclContext): ...
    def exitParamDcl(self, ctx: vbaParser.ParamDclContext): ...
    def enterUntypedNameParamDcl(self, ctx: vbaParser.UntypedNameParamDclContext): ...
    def exitUntypedNameParamDcl(self, ctx: vbaParser.UntypedNameParamDclContext): ...
    def enterTypedNameParamDcl(self, ctx: vbaParser.TypedNameParamDclContext): ...
    def exitTypedNameParamDcl(self, ctx: vbaParser.TypedNameParamDclContext): ...
    def enterOptionalPrefix(self, ctx: vbaParser.OptionalPrefixContext): ...
    def exitOptionalPrefix(self, ctx: vbaParser.OptionalPrefixContext): ...
    def enterParameterMechanism(self, ctx: vbaParser.ParameterMechanismContext): ...
    def exitParameterMechanism(self, ctx: vbaParser.ParameterMechanismContext): ...
    def enterParameterType(self, ctx: vbaParser.ParameterTypeContext): ...
    def exitParameterType(self, ctx: vbaParser.ParameterTypeContext): ...
    def enterDefaultValue(self, ctx: vbaParser.DefaultValueContext): ...
    def exitDefaultValue(self, ctx: vbaParser.DefaultValueContext): ...
    def enterEventHandlerName(self, ctx: vbaParser.EventHandlerNameContext): ...
    def exitEventHandlerName(self, ctx: vbaParser.EventHandlerNameContext): ...
    def enterImplementedName(self, ctx: vbaParser.ImplementedNameContext): ...
    def exitImplementedName(self, ctx: vbaParser.ImplementedNameContext): ...
    def enterLifecycleHandlerName(self, ctx: vbaParser.LifecycleHandlerNameContext): ...
    def exitLifecycleHandlerName(self, ctx: vbaParser.LifecycleHandlerNameContext): ...
    def enterProcedureBody(self, ctx: vbaParser.ProcedureBodyContext): ...
    def exitProcedureBody(self, ctx: vbaParser.ProcedureBodyContext): ...
    def enterStatementBlock(self, ctx: vbaParser.StatementBlockContext): ...
    def exitStatementBlock(self, ctx: vbaParser.StatementBlockContext): ...
    def enterBlockStatement(self, ctx: vbaParser.BlockStatementContext): ...
    def exitBlockStatement(self, ctx: vbaParser.BlockStatementContext): ...
    def enterStatement(self, ctx: vbaParser.StatementContext): ...
    def exitStatement(self, ctx: vbaParser.StatementContext): ...
    def enterStatementLabelDefinition(self, ctx: vbaParser.StatementLabelDefinitionContext): ...
    def exitStatementLabelDefinition(self, ctx: vbaParser.StatementLabelDefinitionContext): ...
    def enterStatementLabel(self, ctx: vbaParser.StatementLabelContext): ...
    def exitStatementLabel(self, ctx: vbaParser.StatementLabelContext): ...
    def enterStatementLabelList(self, ctx: vbaParser.StatementLabelListContext): ...
    def exitStatementLabelList(self, ctx: vbaParser.StatementLabelListContext): ...
    def enterIdentifierStatementLabel(self, ctx: vbaParser.IdentifierStatementLabelContext): ...
    def exitIdentifierStatementLabel(self, ctx: vbaParser.IdentifierStatementLabelContext): ...
    def enterLineNumberLabel(self, ctx: vbaParser.LineNumberLabelContext): ...
    def exitLineNumberLabel(self, ctx: vbaParser.LineNumberLabelContext): ...
    def enterRemStatement(self, ctx: vbaParser.RemStatementContext): ...
    def exitRemStatement(self, ctx: vbaParser.RemStatementContext): ...
    def enterControlStatement(self, ctx: vbaParser.ControlStatementContext): ...
    def exitControlStatement(self, ctx: vbaParser.ControlStatementContext): ...
    def enterControlStatementExceptMultilineIf(self, ctx: vbaParser.ControlStatementExceptMultilineIfContext): ...
    def exitControlStatementExceptMultilineIf(self, ctx: vbaParser.ControlStatementExceptMultilineIfContext): ...
    def enterCallStatement(self, ctx: vbaParser.CallStatementContext): ...
    def exitCallStatement(self, ctx: vbaParser.CallStatementContext): ...
    def enterWhileStatement(self, ctx: vbaParser.WhileStatementContext): ...
    def exitWhileStatement(self, ctx: vbaParser.WhileStatementContext): ...
    def enterForStatement(self, ctx: vbaParser.ForStatementContext): ...
    def exitForStatement(self, ctx: vbaParser.ForStatementContext): ...
    def enterSimpleForStatement(self, ctx: vbaParser.SimpleForStatementContext): ...
    def exitSimpleForStatement(self, ctx: vbaParser.SimpleForStatementContext): ...
    def enterExplicitForStatement(self, ctx: vbaParser.ExplicitForStatementContext): ...
    def exitExplicitForStatement(self, ctx: vbaParser.ExplicitForStatementContext): ...
    def enterNestedForStatement(self, ctx: vbaParser.NestedForStatementContext): ...
    def exitNestedForStatement(self, ctx: vbaParser.NestedForStatementContext): ...
    def enterForClause(self, ctx: vbaParser.ForClauseContext): ...
    def exitForClause(self, ctx: vbaParser.ForClauseContext): ...
    def enterStartValue(self, ctx: vbaParser.StartValueContext): ...
    def exitStartValue(self, ctx: vbaParser.StartValueContext): ...
    def enterEndValue(self, ctx: vbaParser.EndValueContext): ...
    def exitEndValue(self, ctx: vbaParser.EndValueContext): ...
    def enterStepClause(self, ctx: vbaParser.StepClauseContext): ...
    def exitStepClause(self, ctx: vbaParser.StepClauseContext): ...
    def enterStepIncrement(self, ctx: vbaParser.StepIncrementContext): ...
    def exitStepIncrement(self, ctx: vbaParser.StepIncrementContext): ...
    def enterForEachStatement(self, ctx: vbaParser.ForEachStatementContext): ...
    def exitForEachStatement(self, ctx: vbaParser.ForEachStatementContext): ...
    def enterSimpleForEachStatement(self, ctx: vbaParser.SimpleForEachStatementContext): ...
    def exitSimpleForEachStatement(self, ctx: vbaParser.SimpleForEachStatementContext): ...
    def enterExplicitForEachStatement(self, ctx: vbaParser.ExplicitForEachStatementContext): ...
    def exitExplicitForEachStatement(self, ctx: vbaParser.ExplicitForEachStatementContext): ...
    def enterForEachClause(self, ctx: vbaParser.ForEachClauseContext): ...
    def exitForEachClause(self, ctx: vbaParser.ForEachClauseContext): ...
    def enterCollection(self, ctx: vbaParser.CollectionContext): ...
    def exitCollection(self, ctx: vbaParser.CollectionContext): ...
    def enterExitForStatement(self, ctx: vbaParser.ExitForStatementContext): ...
    def exitExitForStatement(self, ctx: vbaParser.ExitForStatementContext): ...
    def enterDoStatement(self, ctx: vbaParser.DoStatementContext): ...
    def exitDoStatement(self, ctx: vbaParser.DoStatementContext): ...
    def enterConditionClause(self, ctx: vbaParser.ConditionClauseContext): ...
    def exitConditionClause(self, ctx: vbaParser.ConditionClauseContext): ...
    def enterWhileClause(self, ctx: vbaParser.WhileClauseContext): ...
    def exitWhileClause(self, ctx: vbaParser.WhileClauseContext): ...
    def enterUntilClause(self, ctx: vbaParser.UntilClauseContext): ...
    def exitUntilClause(self, ctx: vbaParser.UntilClauseContext): ...
    def enterExitDoStatement(self, ctx: vbaParser.ExitDoStatementContext): ...
    def exitExitDoStatement(self, ctx: vbaParser.ExitDoStatementContext): ...
    def enterIfStatement(self, ctx: vbaParser.IfStatementContext): ...
    def exitIfStatement(self, ctx: vbaParser.IfStatementContext): ...
    def enterElseIfBlock(self, ctx: vbaParser.ElseIfBlockContext): ...
    def exitElseIfBlock(self, ctx: vbaParser.ElseIfBlockContext): ...
    def enterElseBlock(self, ctx: vbaParser.ElseBlockContext): ...
    def exitElseBlock(self, ctx: vbaParser.ElseBlockContext): ...
    def enterSingleLineIfStatement(self, ctx: vbaParser.SingleLineIfStatementContext): ...
    def exitSingleLineIfStatement(self, ctx: vbaParser.SingleLineIfStatementContext): ...
    def enterIfWithNonEmptyThen(self, ctx: vbaParser.IfWithNonEmptyThenContext): ...
    def exitIfWithNonEmptyThen(self, ctx: vbaParser.IfWithNonEmptyThenContext): ...
    def enterIfWithEmptyThen(self, ctx: vbaParser.IfWithEmptyThenContext): ...
    def exitIfWithEmptyThen(self, ctx: vbaParser.IfWithEmptyThenContext): ...
    def enterSingleLineElseClause(self, ctx: vbaParser.SingleLineElseClauseContext): ...
    def exitSingleLineElseClause(self, ctx: vbaParser.SingleLineElseClauseContext): ...
    def enterListOrLabel(self, ctx: vbaParser.ListOrLabelContext): ...
    def exitListOrLabel(self, ctx: vbaParser.ListOrLabelContext): ...
    def enterSameLineStatement(self, ctx: vbaParser.SameLineStatementContext): ...
    def exitSameLineStatement(self, ctx: vbaParser.SameLineStatementContext): ...
    def enterSelectCaseStatement(self, ctx: vbaParser.SelectCaseStatementContext): ...
    def exitSelectCaseStatement(self, ctx: vbaParser.SelectCaseStatementContext): ...
    def enterCaseClause(self, ctx: vbaParser.CaseClauseContext): ...
    def exitCaseClause(self, ctx: vbaParser.CaseClauseContext): ...
    def enterCaseElseClause(self, ctx: vbaParser.CaseElseClauseContext): ...
    def exitCaseElseClause(self, ctx: vbaParser.CaseElseClauseContext): ...
    def enterRangeClause(self, ctx: vbaParser.RangeClauseContext): ...
    def exitRangeClause(self, ctx: vbaParser.RangeClauseContext): ...
    def enterSelectExpression(self, ctx: vbaParser.SelectExpressionContext): ...
    def exitSelectExpression(self, ctx: vbaParser.SelectExpressionContext): ...
    def enterComparisonOperator(self, ctx: vbaParser.ComparisonOperatorContext): ...
    def exitComparisonOperator(self, ctx: vbaParser.ComparisonOperatorContext): ...
    def enterStopStatement(self, ctx: vbaParser.StopStatementContext): ...
    def exitStopStatement(self, ctx: vbaParser.StopStatementContext): ...
    def enterGotoStatement(self, ctx: vbaParser.GotoStatementContext): ...
    def exitGotoStatement(self, ctx: vbaParser.GotoStatementContext): ...
    def enterOnGotoStatement(self, ctx: vbaParser.OnGotoStatementContext): ...
    def exitOnGotoStatement(self, ctx: vbaParser.OnGotoStatementContext): ...
    def enterGosubStatement(self, ctx: vbaParser.GosubStatementContext): ...
    def exitGosubStatement(self, ctx: vbaParser.GosubStatementContext): ...
    def enterReturnStatement(self, ctx: vbaParser.ReturnStatementContext): ...
    def exitReturnStatement(self, ctx: vbaParser.ReturnStatementContext): ...
    def enterOnGosubStatement(self, ctx: vbaParser.OnGosubStatementContext): ...
    def exitOnGosubStatement(self, ctx: vbaParser.OnGosubStatementContext): ...
    def enterExitSubStatement(self, ctx: vbaParser.ExitSubStatementContext): ...
    def exitExitSubStatement(self, ctx: vbaParser.ExitSubStatementContext): ...
    def enterExitFunctionStatement(self, ctx: vbaParser.ExitFunctionStatementContext): ...
    def exitExitFunctionStatement(self, ctx: vbaParser.ExitFunctionStatementContext): ...
    def enterExitPropertyStatement(self, ctx: vbaParser.ExitPropertyStatementContext): ...
    def exitExitPropertyStatement(self, ctx: vbaParser.ExitPropertyStatementContext): ...
    def enterRaiseeventStatement(self, ctx: vbaParser.RaiseeventStatementContext): ...
    def exitRaiseeventStatement(self, ctx: vbaParser.RaiseeventStatementContext): ...
    def enterEventArgumentList(self, ctx: vbaParser.EventArgumentListContext): ...
    def exitEventArgumentList(self, ctx: vbaParser.EventArgumentListContext): ...
    def enterEventArgument(self, ctx: vbaParser.EventArgumentContext): ...
    def exitEventArgument(self, ctx: vbaParser.EventArgumentContext): ...
    def enterWithStatement(self, ctx: vbaParser.WithStatementContext): ...
    def exitWithStatement(self, ctx: vbaParser.WithStatementContext): ...
    def enterEndStatement(self, ctx: vbaParser.EndStatementContext): ...
    def exitEndStatement(self, ctx: vbaParser.EndStatementContext): ...
    def enterDataManipulationStatement(self, ctx: vbaParser.DataManipulationStatementContext): ...
    def exitDataManipulationStatement(self, ctx: vbaParser.DataManipulationStatementContext): ...
    def enterLocalVariableDeclaration(self, ctx: vbaParser.LocalVariableDeclarationContext): ...
    def exitLocalVariableDeclaration(self, ctx: vbaParser.LocalVariableDeclarationContext): ...
    def enterStaticVariableDeclaration(self, ctx: vbaParser.StaticVariableDeclarationContext): ...
    def exitStaticVariableDeclaration(self, ctx: vbaParser.StaticVariableDeclarationContext): ...
    def enterLocalConstDeclaration(self, ctx: vbaParser.LocalConstDeclarationContext): ...
    def exitLocalConstDeclaration(self, ctx: vbaParser.LocalConstDeclarationContext): ...
    def enterRedimStatement(self, ctx: vbaParser.RedimStatementContext): ...
    def exitRedimStatement(self, ctx: vbaParser.RedimStatementContext): ...
    def enterRedimDeclarationList(self, ctx: vbaParser.RedimDeclarationListContext): ...
    def exitRedimDeclarationList(self, ctx: vbaParser.RedimDeclarationListContext): ...
    def enterRedimVariableDcl(self, ctx: vbaParser.RedimVariableDclContext): ...
    def exitRedimVariableDcl(self, ctx: vbaParser.RedimVariableDclContext): ...
    def enterRedimTypedVariableDcl(self, ctx: vbaParser.RedimTypedVariableDclContext): ...
    def exitRedimTypedVariableDcl(self, ctx: vbaParser.RedimTypedVariableDclContext): ...
    def enterRedimUntypedDcl(self, ctx: vbaParser.RedimUntypedDclContext): ...
    def exitRedimUntypedDcl(self, ctx: vbaParser.RedimUntypedDclContext): ...
    def enterWithExpressionDcl(self, ctx: vbaParser.WithExpressionDclContext): ...
    def exitWithExpressionDcl(self, ctx: vbaParser.WithExpressionDclContext): ...
    def enterMemberAccessExpressionDcl(self, ctx: vbaParser.MemberAccessExpressionDclContext): ...
    def exitMemberAccessExpressionDcl(self, ctx: vbaParser.MemberAccessExpressionDclContext): ...
    def enterDynamicArrayDim(self, ctx: vbaParser.DynamicArrayDimContext): ...
    def exitDynamicArrayDim(self, ctx: vbaParser.DynamicArrayDimContext): ...
    def enterDynamicBoundsList(self, ctx: vbaParser.DynamicBoundsListContext): ...
    def exitDynamicBoundsList(self, ctx: vbaParser.DynamicBoundsListContext): ...
    def enterDynamicDimSpec(self, ctx: vbaParser.DynamicDimSpecContext): ...
    def exitDynamicDimSpec(self, ctx: vbaParser.DynamicDimSpecContext): ...
    def enterDynamicLowerBound(self, ctx: vbaParser.DynamicLowerBoundContext): ...
    def exitDynamicLowerBound(self, ctx: vbaParser.DynamicLowerBoundContext): ...
    def enterDynamicUpperBound(self, ctx: vbaParser.DynamicUpperBoundContext): ...
    def exitDynamicUpperBound(self, ctx: vbaParser.DynamicUpperBoundContext): ...
    def enterDynamicArrayClause(self, ctx: vbaParser.DynamicArrayClauseContext): ...
    def exitDynamicArrayClause(self, ctx: vbaParser.DynamicArrayClauseContext): ...
    def enterEraseStatement(self, ctx: vbaParser.EraseStatementContext): ...
    def exitEraseStatement(self, ctx: vbaParser.EraseStatementContext): ...
    def enterEraseList(self, ctx: vbaParser.EraseListContext): ...
    def exitEraseList(self, ctx: vbaParser.EraseListContext): ...
    def enterEraseElement(self, ctx: vbaParser.EraseElementContext): ...
    def exitEraseElement(self, ctx: vbaParser.EraseElementContext): ...
    def enterMidStatement(self, ctx: vbaParser.MidStatementContext): ...
    def exitMidStatement(self, ctx: vbaParser.MidStatementContext): ...
    def enterModeSpecifier(self, ctx: vbaParser.ModeSpecifierContext): ...
    def exitModeSpecifier(self, ctx: vbaParser.ModeSpecifierContext): ...
    def enterStringArgument(self, ctx: vbaParser.StringArgumentContext): ...
    def exitStringArgument(self, ctx: vbaParser.StringArgumentContext): ...
    def enterStartMid(self, ctx: vbaParser.StartMidContext): ...
    def exitStartMid(self, ctx: vbaParser.StartMidContext): ...
    def enterLength(self, ctx: vbaParser.LengthContext): ...
    def exitLength(self, ctx: vbaParser.LengthContext): ...
    def enterLsetStatement(self, ctx: vbaParser.LsetStatementContext): ...
    def exitLsetStatement(self, ctx: vbaParser.LsetStatementContext): ...
    def enterRsetStatement(self, ctx: vbaParser.RsetStatementContext): ...
    def exitRsetStatement(self, ctx: vbaParser.RsetStatementContext): ...
    def enterLetStatement(self, ctx: vbaParser.LetStatementContext): ...
    def exitLetStatement(self, ctx: vbaParser.LetStatementContext): ...
    def enterSetStatement(self, ctx: vbaParser.SetStatementContext): ...
    def exitSetStatement(self, ctx: vbaParser.SetStatementContext): ...
    def enterErrorHandlingStatement(self, ctx: vbaParser.ErrorHandlingStatementContext): ...
    def exitErrorHandlingStatement(self, ctx: vbaParser.ErrorHandlingStatementContext): ...
    def enterOnErrorStatement(self, ctx: vbaParser.OnErrorStatementContext): ...
    def exitOnErrorStatement(self, ctx: vbaParser.OnErrorStatementContext): ...
    def enterErrorBehavior(self, ctx: vbaParser.ErrorBehaviorContext): ...
    def exitErrorBehavior(self, ctx: vbaParser.ErrorBehaviorContext): ...
    def enterResumeStatement(self, ctx: vbaParser.ResumeStatementContext): ...
    def exitResumeStatement(self, ctx: vbaParser.ResumeStatementContext): ...
    def enterErrorStatement(self, ctx: vbaParser.ErrorStatementContext): ...
    def exitErrorStatement(self, ctx: vbaParser.ErrorStatementContext): ...
    def enterErrorNumber(self, ctx: vbaParser.ErrorNumberContext): ...
    def exitErrorNumber(self, ctx: vbaParser.ErrorNumberContext): ...
    def enterFileStatement(self, ctx: vbaParser.FileStatementContext): ...
    def exitFileStatement(self, ctx: vbaParser.FileStatementContext): ...
    def enterOpenStatement(self, ctx: vbaParser.OpenStatementContext): ...
    def exitOpenStatement(self, ctx: vbaParser.OpenStatementContext): ...
    def enterPathName(self, ctx: vbaParser.PathNameContext): ...
    def exitPathName(self, ctx: vbaParser.PathNameContext): ...
    def enterModeClause(self, ctx: vbaParser.ModeClauseContext): ...
    def exitModeClause(self, ctx: vbaParser.ModeClauseContext): ...
    def enterModeOpt(self, ctx: vbaParser.ModeOptContext): ...
    def exitModeOpt(self, ctx: vbaParser.ModeOptContext): ...
    def enterAccessClause(self, ctx: vbaParser.AccessClauseContext): ...
    def exitAccessClause(self, ctx: vbaParser.AccessClauseContext): ...
    def enterAccess(self, ctx: vbaParser.AccessContext): ...
    def exitAccess(self, ctx: vbaParser.AccessContext): ...
    def enterLock(self, ctx: vbaParser.LockContext): ...
    def exitLock(self, ctx: vbaParser.LockContext): ...
    def enterLenClause(self, ctx: vbaParser.LenClauseContext): ...
    def exitLenClause(self, ctx: vbaParser.LenClauseContext): ...
    def enterRecLength(self, ctx: vbaParser.RecLengthContext): ...
    def exitRecLength(self, ctx: vbaParser.RecLengthContext): ...
    def enterFileNumber(self, ctx: vbaParser.FileNumberContext): ...
    def exitFileNumber(self, ctx: vbaParser.FileNumberContext): ...
    def enterMarkedFileNumber(self, ctx: vbaParser.MarkedFileNumberContext): ...
    def exitMarkedFileNumber(self, ctx: vbaParser.MarkedFileNumberContext): ...
    def enterUnmarkedFileNumber(self, ctx: vbaParser.UnmarkedFileNumberContext): ...
    def exitUnmarkedFileNumber(self, ctx: vbaParser.UnmarkedFileNumberContext): ...
    def enterCloseStatement(self, ctx: vbaParser.CloseStatementContext): ...
    def exitCloseStatement(self, ctx: vbaParser.CloseStatementContext): ...
    def enterFileNumberList(self, ctx: vbaParser.FileNumberListContext): ...
    def exitFileNumberList(self, ctx: vbaParser.FileNumberListContext): ...
    def enterSeekStatement(self, ctx: vbaParser.SeekStatementContext): ...
    def exitSeekStatement(self, ctx: vbaParser.SeekStatementContext): ...
    def enterPosition(self, ctx: vbaParser.PositionContext): ...
    def exitPosition(self, ctx: vbaParser.PositionContext): ...
    def enterLockStatement(self, ctx: vbaParser.LockStatementContext): ...
    def exitLockStatement(self, ctx: vbaParser.LockStatementContext): ...
    def enterRecordRange(self, ctx: vbaParser.RecordRangeContext): ...
    def exitRecordRange(self, ctx: vbaParser.RecordRangeContext): ...
    def enterStartRecordNumber(self, ctx: vbaParser.StartRecordNumberContext): ...
    def exitStartRecordNumber(self, ctx: vbaParser.StartRecordNumberContext): ...
    def enterEndRecordNumber(self, ctx: vbaParser.EndRecordNumberContext): ...
    def exitEndRecordNumber(self, ctx: vbaParser.EndRecordNumberContext): ...
    def enterUnlockStatement(self, ctx: vbaParser.UnlockStatementContext): ...
    def exitUnlockStatement(self, ctx: vbaParser.UnlockStatementContext): ...
    def enterLineInputStatement(self, ctx: vbaParser.LineInputStatementContext): ...
    def exitLineInputStatement(self, ctx: vbaParser.LineInputStatementContext): ...
    def enterVariableName(self, ctx: vbaParser.VariableNameContext): ...
    def exitVariableName(self, ctx: vbaParser.VariableNameContext): ...
    def enterWidthStatement(self, ctx: vbaParser.WidthStatementContext): ...
    def exitWidthStatement(self, ctx: vbaParser.WidthStatementContext): ...
    def enterLineWidth(self, ctx: vbaParser.LineWidthContext): ...
    def exitLineWidth(self, ctx: vbaParser.LineWidthContext): ...
    def enterPrintStatement(self, ctx: vbaParser.PrintStatementContext): ...
    def exitPrintStatement(self, ctx: vbaParser.PrintStatementContext): ...
    def enterOutputList(self, ctx: vbaParser.OutputListContext): ...
    def exitOutputList(self, ctx: vbaParser.OutputListContext): ...
    def enterOutputItem(self, ctx: vbaParser.OutputItemContext): ...
    def exitOutputItem(self, ctx: vbaParser.OutputItemContext): ...
    def enterOutputClause(self, ctx: vbaParser.OutputClauseContext): ...
    def exitOutputClause(self, ctx: vbaParser.OutputClauseContext): ...
    def enterCharPosition(self, ctx: vbaParser.CharPositionContext): ...
    def exitCharPosition(self, ctx: vbaParser.CharPositionContext): ...
    def enterOutputExpression(self, ctx: vbaParser.OutputExpressionContext): ...
    def exitOutputExpression(self, ctx: vbaParser.OutputExpressionContext): ...
    def enterSpcClause(self, ctx: vbaParser.SpcClauseContext): ...
    def exitSpcClause(self, ctx: vbaParser.SpcClauseContext): ...
    def enterSpcNumber(self, ctx: vbaParser.SpcNumberContext): ...
    def exitSpcNumber(self, ctx: vbaParser.SpcNumberContext): ...
    def enterTabClause(self, ctx: vbaParser.TabClauseContext): ...
    def exitTabClause(self, ctx: vbaParser.TabClauseContext): ...
    def enterTabNumber(self, ctx: vbaParser.TabNumberContext): ...
    def exitTabNumber(self, ctx: vbaParser.TabNumberContext): ...
    def enterWriteStatement(self, ctx: vbaParser.WriteStatementContext): ...
    def exitWriteStatement(self, ctx: vbaParser.WriteStatementContext): ...
    def enterInputStatement(self, ctx: vbaParser.InputStatementContext): ...
    def exitInputStatement(self, ctx: vbaParser.InputStatementContext): ...
    def enterInputList(self, ctx: vbaParser.InputListContext): ...
    def exitInputList(self, ctx: vbaParser.InputListContext): ...
    def enterInputVariable(self, ctx: vbaParser.InputVariableContext): ...
    def exitInputVariable(self, ctx: vbaParser.InputVariableContext): ...
    def enterPutStatement(self, ctx: vbaParser.PutStatementContext): ...
    def exitPutStatement(self, ctx: vbaParser.PutStatementContext): ...
    def enterRecordNumber(self, ctx: vbaParser.RecordNumberContext): ...
    def exitRecordNumber(self, ctx: vbaParser.RecordNumberContext): ...
    def enterData(self, ctx: vbaParser.DataContext): ...
    def exitData(self, ctx: vbaParser.DataContext): ...
    def enterGetStatement(self, ctx: vbaParser.GetStatementContext): ...
    def exitGetStatement(self, ctx: vbaParser.GetStatementContext): ...
    def enterVariable(self, ctx: vbaParser.VariableContext): ...
    def exitVariable(self, ctx: vbaParser.VariableContext): ...
    def enterAttributeStatement(self, ctx: vbaParser.AttributeStatementContext): ...
    def exitAttributeStatement(self, ctx: vbaParser.AttributeStatementContext): ...
    def enterAttributeDescName(self, ctx: vbaParser.AttributeDescNameContext): ...
    def exitAttributeDescName(self, ctx: vbaParser.AttributeDescNameContext): ...
    def enterAttributeUsrName(self, ctx: vbaParser.AttributeUsrNameContext): ...
    def exitAttributeUsrName(self, ctx: vbaParser.AttributeUsrNameContext): ...
    def enterDebugStatement(self, ctx: vbaParser.DebugStatementContext): ...
    def exitDebugStatement(self, ctx: vbaParser.DebugStatementContext): ...
    def enterDebugArgs(self, ctx: vbaParser.DebugArgsContext): ...
    def exitDebugArgs(self, ctx: vbaParser.DebugArgsContext): ...
    def enterDebugSep(self, ctx: vbaParser.DebugSepContext): ...
    def exitDebugSep(self, ctx: vbaParser.DebugSepContext): ...
    def enterExpression(self, ctx: vbaParser.ExpressionContext): ...
    def exitExpression(self, ctx: vbaParser.ExpressionContext): ...
    def enterLExpression(self, ctx: vbaParser.LExpressionContext): ...
    def exitLExpression(self, ctx: vbaParser.LExpressionContext): ...
    def enterLiteralExpression(self, ctx: vbaParser.LiteralExpressionContext): ...
    def exitLiteralExpression(self, ctx: vbaParser.LiteralExpressionContext): ...
    def enterParenthesizedExpression(self, ctx: vbaParser.ParenthesizedExpressionContext): ...
    def exitParenthesizedExpression(self, ctx: vbaParser.ParenthesizedExpressionContext): ...
    def enterTypeofIsExpression(self, ctx: vbaParser.TypeofIsExpressionContext): ...
    def exitTypeofIsExpression(self, ctx: vbaParser.TypeofIsExpressionContext): ...
    def enterNewExpress(self, ctx: vbaParser.NewExpressContext): ...
    def exitNewExpress(self, ctx: vbaParser.NewExpressContext): ...
    def enterNotOperatorExpression(self, ctx: vbaParser.NotOperatorExpressionContext): ...
    def exitNotOperatorExpression(self, ctx: vbaParser.NotOperatorExpressionContext): ...
    def enterUnaryMinusExpression(self, ctx: vbaParser.UnaryMinusExpressionContext): ...
    def exitUnaryMinusExpression(self, ctx: vbaParser.UnaryMinusExpressionContext): ...
    def enterSimpleNameExpression(self, ctx: vbaParser.SimpleNameExpressionContext): ...
    def exitSimpleNameExpression(self, ctx: vbaParser.SimpleNameExpressionContext): ...
    def enterInstanceExpression(self, ctx: vbaParser.InstanceExpressionContext): ...
    def exitInstanceExpression(self, ctx: vbaParser.InstanceExpressionContext): ...
    def enterMemberAccessExpression(self, ctx: vbaParser.MemberAccessExpressionContext): ...
    def exitMemberAccessExpression(self, ctx: vbaParser.MemberAccessExpressionContext): ...
    def enterIndexExpression(self, ctx: vbaParser.IndexExpressionContext): ...
    def exitIndexExpression(self, ctx: vbaParser.IndexExpressionContext): ...
    def enterArgumentList(self, ctx: vbaParser.ArgumentListContext): ...
    def exitArgumentList(self, ctx: vbaParser.ArgumentListContext): ...
    def enterPositionalOrNamedArgumentList(self, ctx: vbaParser.PositionalOrNamedArgumentListContext): ...
    def exitPositionalOrNamedArgumentList(self, ctx: vbaParser.PositionalOrNamedArgumentListContext): ...
    def enterPositionalArgument(self, ctx: vbaParser.PositionalArgumentContext): ...
    def exitPositionalArgument(self, ctx: vbaParser.PositionalArgumentContext): ...
    def enterRequiredPositionalArgument(self, ctx: vbaParser.RequiredPositionalArgumentContext): ...
    def exitRequiredPositionalArgument(self, ctx: vbaParser.RequiredPositionalArgumentContext): ...
    def enterNamedArgumentList(self, ctx: vbaParser.NamedArgumentListContext): ...
    def exitNamedArgumentList(self, ctx: vbaParser.NamedArgumentListContext): ...
    def enterNamedArgument(self, ctx: vbaParser.NamedArgumentContext): ...
    def exitNamedArgument(self, ctx: vbaParser.NamedArgumentContext): ...
    def enterArgumentExpression(self, ctx: vbaParser.ArgumentExpressionContext): ...
    def exitArgumentExpression(self, ctx: vbaParser.ArgumentExpressionContext): ...
    def enterDictionaryAccessExpression(self, ctx: vbaParser.DictionaryAccessExpressionContext): ...
    def exitDictionaryAccessExpression(self, ctx: vbaParser.DictionaryAccessExpressionContext): ...
    def enterWithExpression(self, ctx: vbaParser.WithExpressionContext): ...
    def exitWithExpression(self, ctx: vbaParser.WithExpressionContext): ...
    def enterWithMemberAccessExpression(self, ctx: vbaParser.WithMemberAccessExpressionContext): ...
    def exitWithMemberAccessExpression(self, ctx: vbaParser.WithMemberAccessExpressionContext): ...
    def enterWithDictionaryAccessExpression(self, ctx: vbaParser.WithDictionaryAccessExpressionContext): ...
    def exitWithDictionaryAccessExpression(self, ctx: vbaParser.WithDictionaryAccessExpressionContext): ...
    def enterConstantExpression(self, ctx: vbaParser.ConstantExpressionContext): ...
    def exitConstantExpression(self, ctx: vbaParser.ConstantExpressionContext): ...
    def enterCcExpression(self, ctx: vbaParser.CcExpressionContext): ...
    def exitCcExpression(self, ctx: vbaParser.CcExpressionContext): ...
    def enterBooleanExpression(self, ctx: vbaParser.BooleanExpressionContext): ...
    def exitBooleanExpression(self, ctx: vbaParser.BooleanExpressionContext): ...
    def enterIntegerExpression(self, ctx: vbaParser.IntegerExpressionContext): ...
    def exitIntegerExpression(self, ctx: vbaParser.IntegerExpressionContext): ...
    def enterVariableExpression(self, ctx: vbaParser.VariableExpressionContext): ...
    def exitVariableExpression(self, ctx: vbaParser.VariableExpressionContext): ...
    def enterBoundVariableExpression(self, ctx: vbaParser.BoundVariableExpressionContext): ...
    def exitBoundVariableExpression(self, ctx: vbaParser.BoundVariableExpressionContext): ...
    def enterTypeExpression(self, ctx: vbaParser.TypeExpressionContext): ...
    def exitTypeExpression(self, ctx: vbaParser.TypeExpressionContext): ...
    def enterDefinedTypeExpression(self, ctx: vbaParser.DefinedTypeExpressionContext): ...
    def exitDefinedTypeExpression(self, ctx: vbaParser.DefinedTypeExpressionContext): ...
    def enterAddressofExpression(self, ctx: vbaParser.AddressofExpressionContext): ...
    def exitAddressofExpression(self, ctx: vbaParser.AddressofExpressionContext): ...
    def enterProcedurePointerExpression(self, ctx: vbaParser.ProcedurePointerExpressionContext): ...
    def exitProcedurePointerExpression(self, ctx: vbaParser.ProcedurePointerExpressionContext): ...
    def enterWsc(self, ctx: vbaParser.WscContext): ...
    def exitWsc(self, ctx: vbaParser.WscContext): ...
    def enterEndOfLine(self, ctx: vbaParser.EndOfLineContext): ...
    def exitEndOfLine(self, ctx: vbaParser.EndOfLineContext): ...
    def enterEndOfLineNoWs(self, ctx: vbaParser.EndOfLineNoWsContext): ...
    def exitEndOfLineNoWs(self, ctx: vbaParser.EndOfLineNoWsContext): ...
    def enterEndOfStatement(self, ctx: vbaParser.EndOfStatementContext): ...
    def exitEndOfStatement(self, ctx: vbaParser.EndOfStatementContext): ...
    def enterEndOfStatementNoWs(self, ctx: vbaParser.EndOfStatementNoWsContext): ...
    def exitEndOfStatementNoWs(self, ctx: vbaParser.EndOfStatementNoWsContext): ...
    def enterCommentBody(self, ctx: vbaParser.CommentBodyContext): ...
    def exitCommentBody(self, ctx: vbaParser.CommentBodyContext): ...
    def enterReservedIdentifier(self, ctx: vbaParser.ReservedIdentifierContext): ...
    def exitReservedIdentifier(self, ctx: vbaParser.ReservedIdentifierContext): ...
    def enterAmbiguousIdentifier(self, ctx: vbaParser.AmbiguousIdentifierContext): ...
    def exitAmbiguousIdentifier(self, ctx: vbaParser.AmbiguousIdentifierContext): ...
    def enterStatementKeyword(self, ctx: vbaParser.StatementKeywordContext): ...
    def exitStatementKeyword(self, ctx: vbaParser.StatementKeywordContext): ...
    def enterRemKeyword(self, ctx: vbaParser.RemKeywordContext): ...
    def exitRemKeyword(self, ctx: vbaParser.RemKeywordContext): ...
    def enterMarkerKeyword(self, ctx: vbaParser.MarkerKeywordContext): ...
    def exitMarkerKeyword(self, ctx: vbaParser.MarkerKeywordContext): ...
    def enterOperatorIdentifier(self, ctx: vbaParser.OperatorIdentifierContext): ...
    def exitOperatorIdentifier(self, ctx: vbaParser.OperatorIdentifierContext): ...
    def enterReservedName(self, ctx: vbaParser.ReservedNameContext): ...
    def exitReservedName(self, ctx: vbaParser.ReservedNameContext): ...
    def enterSpecialForm(self, ctx: vbaParser.SpecialFormContext): ...
    def exitSpecialForm(self, ctx: vbaParser.SpecialFormContext): ...
    def enterReservedTypeIdentifier(self, ctx: vbaParser.ReservedTypeIdentifierContext): ...
    def exitReservedTypeIdentifier(self, ctx: vbaParser.ReservedTypeIdentifierContext): ...
    def enterReservedTypeIdentifierB(self, ctx: vbaParser.ReservedTypeIdentifierBContext): ...
    def exitReservedTypeIdentifierB(self, ctx: vbaParser.ReservedTypeIdentifierBContext): ...
    def enterTypeableReservedName(self, ctx: vbaParser.TypeableReservedNameContext): ...
    def exitTypeableReservedName(self, ctx: vbaParser.TypeableReservedNameContext): ...
    def enterLiteralIdentifier(self, ctx: vbaParser.LiteralIdentifierContext): ...
    def exitLiteralIdentifier(self, ctx: vbaParser.LiteralIdentifierContext): ...
    def enterBooleanLiteralIdentifier(self, ctx: vbaParser.BooleanLiteralIdentifierContext): ...
    def exitBooleanLiteralIdentifier(self, ctx: vbaParser.BooleanLiteralIdentifierContext): ...
    def enterObjectLiteralIdentifier(self, ctx: vbaParser.ObjectLiteralIdentifierContext): ...
    def exitObjectLiteralIdentifier(self, ctx: vbaParser.ObjectLiteralIdentifierContext): ...
    def enterVariantLiteralIdentifier(self, ctx: vbaParser.VariantLiteralIdentifierContext): ...
    def exitVariantLiteralIdentifier(self, ctx: vbaParser.VariantLiteralIdentifierContext): ...
    def enterReservedForImplementationUse(self, ctx: vbaParser.ReservedForImplementationUseContext): ...
    def exitReservedForImplementationUse(self, ctx: vbaParser.ReservedForImplementationUseContext): ...
    def enterFutureReserved(self, ctx: vbaParser.FutureReservedContext): ...
    def exitFutureReserved(self, ctx: vbaParser.FutureReservedContext): ...
    def enterBuiltinType(self, ctx: vbaParser.BuiltinTypeContext): ...
    def exitBuiltinType(self, ctx: vbaParser.BuiltinTypeContext): ...
    def enterTypedName(self, ctx: vbaParser.TypedNameContext): ...
    def exitTypedName(self, ctx: vbaParser.TypedNameContext): ...
    def enterTypeSuffix(self, ctx: vbaParser.TypeSuffixContext): ...
    def exitTypeSuffix(self, ctx: vbaParser.TypeSuffixContext): ...
    def enterAmbiguousKeyword(self, ctx: vbaParser.AmbiguousKeywordContext): ...
    def exitAmbiguousKeyword(self, ctx: vbaParser.AmbiguousKeywordContext): ...
