from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class vba_likeParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_program: int
    RULE_likePatternElement: int
    RULE_likePatternChar: int
    RULE_wildcard: int
    RULE_likePatternCharlist: int
    RULE_charList: int
    RULE_charListElement: int
    RULE_charlistChar: int
    RULE_charRange: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    T__2: int
    T__3: int
    CHAR: int
    WILD_CHAR: int
    WILD_SEQ: int
    WILD_DIGIT: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class ProgramContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def EOF(self): ...
        def likePatternElement(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    state: int
    def program(self): ...
    class LikePatternElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def likePatternChar(self): ...
        def likePatternCharlist(self): ...
        def wildcard(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def likePatternElement(self): ...
    class LikePatternCharContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CHAR(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def likePatternChar(self): ...
    class WildcardContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WILD_CHAR(self): ...
        def WILD_SEQ(self): ...
        def WILD_DIGIT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def wildcard(self): ...
    class LikePatternCharlistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def charList(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def likePatternCharlist(self): ...
    class CharListContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def charListElement(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def charList(self): ...
    class CharListElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def charlistChar(self): ...
        def charRange(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def charListElement(self): ...
    class CharlistCharContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CHAR(self): ...
        def WILD_SEQ(self): ...
        def WILD_DIGIT(self): ...
        def WILD_CHAR(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def charlistChar(self): ...
    class CharRangeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def charlistChar(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def charRange(self): ...
