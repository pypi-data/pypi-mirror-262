# Generated from vbaParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,282,4076,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,1,0,1,0,1,0,1,1,
        5,1,705,8,1,10,1,12,1,708,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,717,
        8,1,1,1,5,1,720,8,1,10,1,12,1,723,9,1,1,1,3,1,726,8,1,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,4,4,738,8,4,11,4,12,4,739,1,4,1,4,
        4,4,744,8,4,11,4,12,4,745,1,4,4,4,749,8,4,11,4,12,4,750,1,4,1,4,
        1,5,4,5,756,8,5,11,5,12,5,757,1,5,1,5,3,5,762,8,5,1,5,3,5,765,8,
        5,1,5,1,5,3,5,769,8,5,1,5,1,5,3,5,773,8,5,1,5,3,5,776,8,5,1,5,1,
        5,3,5,780,8,5,1,5,1,5,3,5,784,8,5,1,6,1,6,5,6,788,8,6,10,6,12,6,
        791,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,4,8,800,8,8,11,8,12,8,801,1,
        8,1,8,3,8,806,8,8,1,8,1,8,3,8,810,8,8,1,8,1,8,1,8,3,8,815,8,8,1,
        8,3,8,818,8,8,1,9,4,9,821,8,9,11,9,12,9,822,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,3,9,832,8,9,1,9,1,9,1,9,4,9,837,8,9,11,9,12,9,838,1,9,4,
        9,842,8,9,11,9,12,9,843,1,9,1,9,1,10,4,10,849,8,10,11,10,12,10,850,
        1,10,1,10,1,10,1,10,1,10,1,10,3,10,859,8,10,3,10,861,8,10,1,10,4,
        10,864,8,10,11,10,12,10,865,1,10,4,10,869,8,10,11,10,12,10,870,1,
        10,1,10,1,11,1,11,5,11,877,8,11,10,11,12,11,880,9,11,1,11,1,11,1,
        12,1,12,5,12,886,8,12,10,12,12,12,889,9,12,1,12,1,12,1,13,5,13,894,
        8,13,10,13,12,13,897,9,13,1,13,1,13,3,13,901,8,13,1,13,1,13,3,13,
        905,8,13,1,13,1,13,3,13,909,8,13,1,13,1,13,1,14,4,14,914,8,14,11,
        14,12,14,915,1,14,1,14,4,14,920,8,14,11,14,12,14,921,1,14,3,14,925,
        8,14,1,15,1,15,3,15,929,8,15,1,15,1,15,3,15,933,8,15,1,15,1,15,3,
        15,937,8,15,1,15,1,15,1,15,3,15,942,8,15,1,15,1,15,3,15,946,8,15,
        1,15,1,15,3,15,950,8,15,1,15,1,15,1,15,3,15,955,8,15,1,15,1,15,3,
        15,959,8,15,1,15,1,15,3,15,963,8,15,1,15,1,15,1,15,3,15,968,8,15,
        1,15,1,15,3,15,972,8,15,1,15,1,15,3,15,976,8,15,1,15,1,15,1,15,3,
        15,981,8,15,1,15,1,15,3,15,985,8,15,1,15,1,15,3,15,989,8,15,1,15,
        1,15,1,15,3,15,994,8,15,1,15,1,15,3,15,998,8,15,1,15,1,15,3,15,1002,
        8,15,1,15,3,15,1005,8,15,1,16,3,16,1008,8,16,1,16,5,16,1011,8,16,
        10,16,12,16,1014,9,16,1,16,1,16,1,17,3,17,1019,8,17,1,17,1,17,1,
        18,1,18,3,18,1025,8,18,1,19,1,19,1,19,3,19,1030,8,19,1,20,1,20,3,
        20,1034,8,20,1,21,4,21,1037,8,21,11,21,12,21,1038,1,21,1,21,4,21,
        1043,8,21,11,21,12,21,1044,1,21,4,21,1048,8,21,11,21,12,21,1049,
        1,21,1,21,5,21,1054,8,21,10,21,12,21,1057,9,21,1,21,4,21,1060,8,
        21,11,21,12,21,1061,1,21,1,21,1,21,1,21,1,21,5,21,1069,8,21,10,21,
        12,21,1072,9,21,3,21,1074,8,21,1,22,1,22,4,22,1078,8,22,11,22,12,
        22,1079,4,22,1082,8,22,11,22,12,22,1083,1,22,1,22,4,22,1088,8,22,
        11,22,12,22,1089,5,22,1092,8,22,10,22,12,22,1095,9,22,1,22,1,22,
        1,22,1,22,4,22,1101,8,22,11,22,12,22,1102,5,22,1105,8,22,10,22,12,
        22,1108,9,22,3,22,1110,8,22,1,23,1,23,1,23,3,23,1115,8,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,3,24,1124,8,24,1,25,1,25,1,25,3,25,1129,
        8,25,1,26,1,26,1,26,1,26,3,26,1135,8,26,1,27,1,27,1,27,1,27,3,27,
        1141,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,5,32,1172,8,32,10,32,12,32,1175,9,32,1,
        33,1,33,1,33,3,33,1180,8,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1213,8,
        42,1,43,1,43,1,43,3,43,1218,8,43,1,44,1,44,1,44,1,44,1,44,1,44,3,
        44,1226,8,44,1,44,1,44,3,44,1230,8,44,1,44,3,44,1233,8,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,1244,8,46,1,46,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,3,47,1254,8,47,1,47,1,47,1,48,1,48,3,
        48,1260,8,48,1,48,3,48,1263,8,48,1,48,1,48,3,48,1267,8,48,1,48,1,
        48,3,48,1271,8,48,5,48,1273,8,48,10,48,12,48,1276,9,48,1,49,1,49,
        3,49,1280,8,49,1,49,1,49,3,49,1284,8,49,1,49,5,49,1287,8,49,10,49,
        12,49,1290,9,49,1,50,1,50,3,50,1294,8,50,1,51,1,51,3,51,1298,8,51,
        1,51,3,51,1301,8,51,1,52,1,52,3,52,1305,8,52,1,52,1,52,3,52,1309,
        8,52,1,53,1,53,1,53,1,53,3,53,1315,8,53,1,54,1,54,3,54,1319,8,54,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,1327,8,55,1,55,1,55,1,56,1,56,
        1,57,1,57,3,57,1335,8,57,1,57,3,57,1338,8,57,1,57,3,57,1341,8,57,
        1,57,1,57,1,58,1,58,3,58,1347,8,58,1,58,1,58,3,58,1351,8,58,1,58,
        5,58,1354,8,58,10,58,12,58,1357,9,58,1,59,3,59,1360,8,59,1,59,3,
        59,1363,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,62,1,
        62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,3,64,1386,8,
        64,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,3,66,1396,8,66,1,67,1,
        67,1,68,1,68,1,68,1,68,1,69,1,69,3,69,1406,8,69,1,69,1,69,1,70,1,
        70,1,71,1,71,1,71,1,71,1,72,1,72,3,72,1418,8,72,1,72,1,72,3,72,1422,
        8,72,1,72,5,72,1425,8,72,10,72,12,72,1428,9,72,1,73,1,73,3,73,1432,
        8,73,1,74,1,74,3,74,1436,8,74,1,74,1,74,3,74,1440,8,74,1,74,1,74,
        1,75,1,75,1,75,1,75,3,75,1448,8,75,1,75,3,75,1451,8,75,1,75,1,75,
        3,75,1455,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,3,77,1465,
        8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,4,79,1477,
        8,79,11,79,12,79,1478,1,79,1,79,4,79,1483,8,79,11,79,12,79,1484,
        1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,1495,8,80,10,80,12,
        80,1498,9,80,1,81,1,81,3,81,1502,8,81,1,82,1,82,3,82,1506,8,82,1,
        83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,3,85,1516,8,85,1,85,1,85,1,
        85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1529,8,86,1,87,1,
        87,1,87,1,87,1,88,1,88,3,88,1537,8,88,1,88,1,88,1,89,1,89,1,89,1,
        89,1,90,1,90,1,90,1,90,4,90,1549,8,90,11,90,12,90,1550,1,90,1,90,
        4,90,1555,8,90,11,90,12,90,1556,1,90,1,90,1,90,1,90,1,91,1,91,1,
        91,1,91,5,91,1567,8,91,10,91,12,91,1570,9,91,1,92,1,92,3,92,1574,
        8,92,1,93,1,93,3,93,1578,8,93,1,93,1,93,3,93,1582,8,93,1,93,3,93,
        1585,8,93,1,94,1,94,3,94,1589,8,94,1,94,1,94,1,95,1,95,1,95,1,95,
        1,96,1,96,1,96,1,96,3,96,1601,8,96,1,96,1,96,3,96,1605,8,96,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1615,8,97,1,98,1,98,1,98,
        1,98,1,98,1,98,1,98,1,98,3,98,1625,8,98,1,98,1,98,1,98,3,98,1630,
        8,98,1,99,1,99,1,99,1,99,3,99,1636,8,99,1,100,1,100,1,100,1,100,
        1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,3,103,1651,
        8,103,1,103,1,103,1,103,1,103,1,103,3,103,1658,8,103,1,104,1,104,
        3,104,1662,8,104,1,104,3,104,1665,8,104,1,104,3,104,1668,8,104,1,
        104,1,104,1,105,1,105,5,105,1674,8,105,10,105,12,105,1677,9,105,
        5,105,1679,8,105,10,105,12,105,1682,9,105,1,106,1,106,5,106,1686,
        8,106,10,106,12,106,1689,9,106,5,106,1691,8,106,10,106,12,106,1694,
        9,106,1,107,1,107,1,108,1,108,3,108,1700,8,108,1,109,1,109,1,109,
        3,109,1705,8,109,1,110,1,110,1,110,1,110,3,110,1711,8,110,1,111,
        1,111,1,111,3,111,1716,8,111,1,111,1,111,1,111,3,111,1721,8,111,
        1,111,1,111,1,111,1,111,3,111,1727,8,111,1,111,3,111,1730,8,111,
        1,111,1,111,1,111,1,111,3,111,1736,8,111,1,111,3,111,1739,8,111,
        1,111,3,111,1742,8,111,1,111,1,111,3,111,1746,8,111,1,111,3,111,
        1749,8,111,1,111,3,111,1752,8,111,1,111,4,111,1755,8,111,11,111,
        12,111,1756,1,111,1,111,1,111,1,111,3,111,1763,8,111,1,112,1,112,
        1,112,3,112,1768,8,112,1,112,1,112,1,112,3,112,1773,8,112,1,112,
        1,112,1,112,1,112,3,112,1779,8,112,1,112,3,112,1782,8,112,1,112,
        3,112,1785,8,112,1,112,3,112,1788,8,112,1,112,1,112,1,112,1,112,
        3,112,1794,8,112,1,112,3,112,1797,8,112,1,112,3,112,1800,8,112,1,
        112,3,112,1803,8,112,1,112,3,112,1806,8,112,1,112,1,112,3,112,1810,
        8,112,1,112,3,112,1813,8,112,1,112,3,112,1816,8,112,1,112,4,112,
        1819,8,112,11,112,12,112,1820,1,112,1,112,1,112,1,112,3,112,1827,
        8,112,1,113,1,113,1,113,3,113,1832,8,113,1,113,1,113,1,113,3,113,
        1837,8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1845,8,113,
        1,113,3,113,1848,8,113,1,113,3,113,1851,8,113,1,113,3,113,1854,8,
        113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1862,8,113,1,113,3,
        113,1865,8,113,1,113,3,113,1868,8,113,1,113,3,113,1871,8,113,1,113,
        1,113,3,113,1875,8,113,1,113,3,113,1878,8,113,1,113,3,113,1881,8,
        113,1,113,4,113,1884,8,113,11,113,12,113,1885,1,113,1,113,1,113,
        1,113,3,113,1892,8,113,1,114,1,114,1,114,3,114,1897,8,114,1,114,
        1,114,1,114,3,114,1902,8,114,1,114,1,114,1,114,1,114,1,114,1,114,
        3,114,1910,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,3,114,1921,8,114,1,114,1,114,3,114,1925,8,114,1,114,3,114,
        1928,8,114,1,114,3,114,1931,8,114,1,114,4,114,1934,8,114,11,114,
        12,114,1935,1,114,1,114,1,114,1,114,3,114,1942,8,114,1,115,5,115,
        1945,8,115,10,115,12,115,1948,9,115,1,115,1,115,1,115,1,116,3,116,
        1954,8,116,1,116,1,116,3,116,1958,8,116,1,116,1,116,3,116,1962,8,
        116,1,116,1,116,3,116,1966,8,116,1,116,3,116,1969,8,116,1,117,1,
        117,1,118,1,118,1,119,1,119,1,120,1,120,3,120,1979,8,120,1,121,1,
        121,1,121,3,121,1984,8,121,1,122,1,122,1,122,3,122,1989,8,122,1,
        123,1,123,1,123,1,123,3,123,1995,8,123,1,123,3,123,1998,8,123,1,
        124,1,124,3,124,2002,8,124,1,124,1,124,1,125,1,125,3,125,2008,8,
        125,1,125,3,125,2011,8,125,1,125,3,125,2014,8,125,1,125,1,125,1,
        126,1,126,3,126,2020,8,126,1,126,1,126,3,126,2024,8,126,1,126,1,
        126,3,126,2028,8,126,3,126,2030,8,126,1,126,1,126,3,126,2034,8,126,
        1,126,1,126,1,127,1,127,3,127,2040,8,127,1,127,1,127,3,127,2044,
        8,127,1,127,1,127,1,127,1,127,3,127,2050,8,127,1,127,1,127,3,127,
        2054,8,127,1,127,3,127,2057,8,127,1,127,1,127,3,127,2061,8,127,1,
        128,1,128,3,128,2065,8,128,1,128,1,128,3,128,2069,8,128,1,128,5,
        128,2072,8,128,10,128,12,128,2075,9,128,1,129,1,129,3,129,2079,8,
        129,1,129,1,129,3,129,2083,8,129,1,129,5,129,2086,8,129,10,129,12,
        129,2089,9,129,1,130,1,130,1,131,1,131,1,131,3,131,2096,8,131,1,
        131,1,131,1,132,1,132,1,132,1,132,3,132,2104,8,132,1,132,3,132,2107,
        8,132,1,133,1,133,1,133,1,133,1,133,3,133,2114,8,133,1,133,1,133,
        1,133,1,133,1,133,1,133,1,133,1,133,3,133,2124,8,133,3,133,2126,
        8,133,1,134,1,134,3,134,2130,8,134,1,135,1,135,3,135,2134,8,135,
        1,136,1,136,3,136,2138,8,136,1,137,1,137,1,137,1,137,3,137,2144,
        8,137,1,137,1,137,1,137,1,137,3,137,2150,8,137,1,138,1,138,1,139,
        3,139,2155,8,139,1,139,1,139,1,139,1,139,1,139,3,139,2162,8,139,
        1,140,1,140,3,140,2166,8,140,1,140,1,140,1,141,1,141,1,142,1,142,
        1,143,1,143,1,144,1,144,1,145,4,145,2179,8,145,11,145,12,145,2180,
        1,146,5,146,2184,8,146,10,146,12,146,2187,9,146,1,146,1,146,1,146,
        1,146,4,146,2193,8,146,11,146,12,146,2194,1,146,1,146,1,146,1,146,
        5,146,2201,8,146,10,146,12,146,2204,9,146,1,146,1,146,1,146,3,146,
        2209,8,146,1,147,1,147,4,147,2213,8,147,11,147,12,147,2214,1,147,
        1,147,1,147,4,147,2220,8,147,11,147,12,147,2221,1,147,1,147,1,147,
        4,147,2227,8,147,11,147,12,147,2228,1,147,1,147,3,147,2233,8,147,
        1,148,1,148,1,148,1,148,1,148,3,148,2240,8,148,3,148,2242,8,148,
        1,149,1,149,3,149,2246,8,149,1,150,1,150,3,150,2250,8,150,1,150,
        1,150,3,150,2254,8,150,1,150,3,150,2257,8,150,1,151,1,151,1,152,
        1,152,1,153,1,153,1,154,5,154,2266,8,154,10,154,12,154,2269,9,154,
        1,154,4,154,2272,8,154,11,154,12,154,2273,1,154,1,154,1,154,4,154,
        2279,8,154,11,154,12,154,2280,1,154,1,154,3,154,2285,8,154,1,155,
        1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2308,
        8,155,1,156,1,156,1,156,1,156,1,156,1,156,3,156,2316,8,156,1,156,
        1,156,1,156,3,156,2321,8,156,1,156,1,156,1,156,3,156,2326,8,156,
        3,156,2328,8,156,1,157,1,157,1,157,1,157,3,157,2334,8,157,1,157,
        4,157,2337,8,157,11,157,12,157,2338,1,157,1,157,1,158,1,158,3,158,
        2345,8,158,1,159,1,159,3,159,2349,8,159,1,159,4,159,2352,8,159,11,
        159,12,159,2353,1,159,1,159,1,160,1,160,3,160,2360,8,160,1,160,4,
        160,2363,8,160,11,160,12,160,2364,1,160,1,160,1,160,3,160,2370,8,
        160,1,160,1,160,3,160,2374,8,160,1,160,1,160,1,160,1,161,1,161,3,
        161,2381,8,161,1,162,1,162,1,162,1,162,3,162,2387,8,162,1,162,1,
        162,3,162,2391,8,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,
        162,3,162,2401,8,162,1,163,1,163,1,164,1,164,1,165,1,165,1,165,1,
        165,1,166,1,166,1,167,1,167,3,167,2415,8,167,1,168,1,168,3,168,2419,
        8,168,1,168,4,168,2422,8,168,11,168,12,168,2423,1,168,1,168,1,169,
        1,169,3,169,2430,8,169,1,169,1,169,1,169,1,169,3,169,2436,8,169,
        1,169,1,169,3,169,2440,8,169,1,169,1,169,1,169,1,170,1,170,1,170,
        1,170,3,170,2449,8,170,1,170,1,170,3,170,2453,8,170,1,170,1,170,
        3,170,2457,8,170,1,170,1,170,1,171,1,171,1,172,1,172,1,172,1,172,
        1,173,1,173,3,173,2469,8,173,1,173,3,173,2472,8,173,1,173,3,173,
        2475,8,173,1,173,4,173,2478,8,173,11,173,12,173,2479,1,173,1,173,
        3,173,2484,8,173,1,173,3,173,2487,8,173,1,174,1,174,3,174,2491,8,
        174,1,175,1,175,3,175,2495,8,175,1,175,1,175,1,176,1,176,3,176,2501,
        8,176,1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,3,178,2511,
        8,178,1,178,1,178,3,178,2515,8,178,1,178,1,178,3,178,2519,8,178,
        1,178,5,178,2522,8,178,10,178,12,178,2525,9,178,1,178,3,178,2528,
        8,178,1,178,4,178,2531,8,178,11,178,12,178,2532,1,178,1,178,1,178,
        1,178,1,178,3,178,2540,8,178,1,179,5,179,2543,8,179,10,179,12,179,
        2546,9,179,1,179,1,179,1,179,3,179,2551,8,179,1,179,1,179,3,179,
        2555,8,179,1,179,1,179,3,179,2559,8,179,1,179,3,179,2562,8,179,1,
        179,5,179,2565,8,179,10,179,12,179,2568,9,179,1,179,1,179,3,179,
        2572,8,179,1,179,1,179,3,179,2576,8,179,1,179,1,179,3,179,2580,8,
        179,3,179,2582,8,179,1,180,4,180,2585,8,180,11,180,12,180,2586,1,
        180,1,180,3,180,2591,8,180,1,180,3,180,2594,8,180,1,180,3,180,2597,
        8,180,1,181,1,181,3,181,2601,8,181,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,3,182,2613,8,182,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,184,1,184,3,184,2625,8,184,1,184,
        3,184,2628,8,184,1,185,1,185,1,185,3,185,2633,8,185,1,185,3,185,
        2636,8,185,5,185,2638,8,185,10,185,12,185,2641,9,185,1,185,3,185,
        2644,8,185,1,185,1,185,1,185,3,185,2649,8,185,1,185,3,185,2652,8,
        185,5,185,2654,8,185,10,185,12,185,2657,9,185,3,185,2659,8,185,1,
        186,1,186,1,186,1,186,3,186,2665,8,186,1,187,1,187,1,187,1,187,1,
        187,1,187,5,187,2673,8,187,10,187,12,187,2676,9,187,1,187,3,187,
        2679,8,187,1,187,4,187,2682,8,187,11,187,12,187,2683,1,187,1,187,
        1,187,1,187,1,188,4,188,2691,8,188,11,188,12,188,2692,1,188,1,188,
        3,188,2697,8,188,1,188,1,188,3,188,2701,8,188,1,188,1,188,3,188,
        2705,8,188,1,188,5,188,2708,8,188,10,188,12,188,2711,9,188,1,188,
        3,188,2714,8,188,1,189,4,189,2717,8,189,11,189,12,189,2718,1,189,
        1,189,1,189,1,189,3,189,2725,8,189,1,190,1,190,1,190,3,190,2730,
        8,190,1,190,1,190,3,190,2734,8,190,1,190,1,190,1,190,3,190,2739,
        8,190,1,190,1,190,1,190,3,190,2744,8,190,1,190,1,190,3,190,2748,
        8,190,1,191,1,191,1,192,1,192,1,193,1,193,1,194,1,194,1,194,1,194,
        1,194,3,194,2761,8,194,1,194,1,194,1,194,1,195,1,195,3,195,2768,
        8,195,1,195,1,195,1,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,
        3,196,2780,8,196,1,196,1,196,1,196,1,197,1,197,1,198,1,198,3,198,
        2789,8,198,1,198,1,198,3,198,2793,8,198,1,198,1,198,1,198,1,198,
        1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,201,1,201,1,201,
        1,201,1,202,1,202,3,202,2813,8,202,1,202,1,202,3,202,2817,8,202,
        1,202,1,202,3,202,2821,8,202,1,202,1,202,3,202,2825,8,202,1,202,
        1,202,3,202,2829,8,202,1,203,1,203,3,203,2833,8,203,1,203,1,203,
        3,203,2837,8,203,1,203,5,203,2840,8,203,10,203,12,203,2843,9,203,
        3,203,2845,8,203,1,204,1,204,1,205,1,205,3,205,2851,8,205,1,205,
        1,205,3,205,2855,8,205,1,205,4,205,2858,8,205,11,205,12,205,2859,
        1,205,1,205,1,205,1,205,1,206,1,206,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,3,207,2878,8,207,1,208,1,208,3,208,
        2882,8,208,1,208,3,208,2885,8,208,1,208,3,208,2888,8,208,1,208,1,
        208,1,209,1,209,1,209,1,209,1,210,1,210,1,211,1,211,1,211,1,211,
        3,211,2902,8,211,1,211,3,211,2905,8,211,1,211,1,211,1,212,1,212,
        3,212,2911,8,212,1,212,1,212,3,212,2915,8,212,1,212,5,212,2918,8,
        212,10,212,12,212,2921,9,212,1,213,1,213,1,213,1,213,3,213,2927,
        8,213,1,214,1,214,3,214,2931,8,214,1,214,1,214,1,215,1,215,3,215,
        2937,8,215,1,215,1,215,1,216,1,216,3,216,2943,8,216,1,216,1,216,
        1,217,1,217,3,217,2949,8,217,1,217,1,217,1,218,1,218,3,218,2955,
        8,218,1,218,1,218,3,218,2959,8,218,1,218,1,218,1,219,1,219,3,219,
        2965,8,219,1,219,1,219,3,219,2969,8,219,1,219,5,219,2972,8,219,10,
        219,12,219,2975,9,219,1,220,1,220,1,220,3,220,2980,8,220,1,220,1,
        220,1,221,1,221,3,221,2986,8,221,1,221,1,221,1,222,1,222,1,223,1,
        223,3,223,2994,8,223,1,223,3,223,2997,8,223,1,224,1,224,3,224,3001,
        8,224,1,224,1,224,1,225,1,225,3,225,3007,8,225,1,225,1,225,3,225,
        3011,8,225,1,225,5,225,3014,8,225,10,225,12,225,3017,9,225,1,226,
        1,226,1,227,1,227,3,227,3023,8,227,1,227,1,227,3,227,3027,8,227,
        1,227,1,227,3,227,3031,8,227,1,227,1,227,3,227,3035,8,227,1,227,
        1,227,3,227,3039,8,227,1,227,1,227,3,227,3043,8,227,1,227,3,227,
        3046,8,227,1,227,1,227,3,227,3050,8,227,1,227,1,227,3,227,3054,8,
        227,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,1,231,1,231,
        1,232,1,232,3,232,3068,8,232,1,232,1,232,3,232,3072,8,232,1,232,
        1,232,3,232,3076,8,232,1,232,1,232,1,233,1,233,3,233,3082,8,233,
        1,233,1,233,3,233,3086,8,233,1,233,1,233,3,233,3090,8,233,1,233,
        1,233,1,234,1,234,3,234,3096,8,234,1,234,1,234,3,234,3100,8,234,
        1,234,1,234,3,234,3104,8,234,1,234,1,234,1,235,1,235,1,235,1,235,
        3,235,3112,8,235,1,235,1,235,3,235,3116,8,235,1,235,1,235,1,236,
        1,236,1,236,3,236,3123,8,236,1,237,1,237,1,237,1,237,3,237,3129,
        8,237,1,237,1,237,1,238,1,238,1,238,1,238,1,238,1,238,3,238,3139,
        8,238,1,238,3,238,3142,8,238,1,239,1,239,3,239,3146,8,239,1,239,
        1,239,3,239,3150,8,239,1,240,1,240,1,240,1,240,1,241,1,241,1,242,
        1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
        3,242,3170,8,242,1,243,1,243,3,243,3174,8,243,1,243,1,243,3,243,
        3178,8,243,1,243,3,243,3181,8,243,1,243,1,243,3,243,3185,8,243,1,
        243,3,243,3188,8,243,1,243,3,243,3191,8,243,1,243,3,243,3194,8,243,
        1,243,1,243,3,243,3198,8,243,1,243,1,243,3,243,3202,8,243,1,243,
        3,243,3205,8,243,1,244,1,244,1,245,1,245,1,245,1,245,1,246,1,246,
        1,247,1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,248,1,248,3,248,
        3225,8,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,1,249,1,249,1,249,1,249,3,249,3242,8,249,1,250,1,250,
        1,250,1,250,1,250,1,250,1,251,1,251,1,252,1,252,3,252,3254,8,252,
        1,253,1,253,1,253,1,254,1,254,1,255,1,255,1,255,3,255,3264,8,255,
        1,255,3,255,3267,8,255,3,255,3269,8,255,1,256,1,256,3,256,3273,8,
        256,1,256,1,256,3,256,3277,8,256,1,256,5,256,3280,8,256,10,256,12,
        256,3283,9,256,1,257,1,257,1,257,1,257,3,257,3289,8,257,1,257,1,
        257,3,257,3293,8,257,1,257,1,257,1,258,1,258,1,259,1,259,1,259,1,
        259,3,259,3303,8,259,1,259,1,259,3,259,3307,8,259,1,259,1,259,1,
        260,1,260,3,260,3313,8,260,1,260,1,260,1,260,1,260,1,260,3,260,3320,
        8,260,1,261,1,261,1,262,1,262,1,263,1,263,1,263,1,263,3,263,3330,
        8,263,1,263,1,263,3,263,3334,8,263,1,263,3,263,3337,8,263,1,264,
        1,264,1,264,1,264,1,264,1,264,3,264,3345,8,264,1,264,1,264,3,264,
        3349,8,264,1,264,1,264,1,265,1,265,1,266,1,266,1,266,1,266,3,266,
        3359,8,266,1,266,1,266,3,266,3363,8,266,1,266,1,266,1,267,1,267,
        1,268,1,268,1,268,1,268,3,268,3373,8,268,1,268,1,268,3,268,3377,
        8,268,1,268,3,268,3380,8,268,1,269,4,269,3383,8,269,11,269,12,269,
        3384,1,270,1,270,3,270,3389,8,270,1,270,3,270,3392,8,270,1,271,1,
        271,1,271,3,271,3397,8,271,1,272,1,272,1,273,1,273,1,274,1,274,1,
        274,1,274,3,274,3407,8,274,1,274,1,274,3,274,3411,8,274,1,274,1,
        274,1,275,1,275,1,276,1,276,1,276,1,276,3,276,3421,8,276,1,276,1,
        276,3,276,3425,8,276,1,276,1,276,1,277,1,277,1,278,1,278,1,278,1,
        278,3,278,3435,8,278,1,278,1,278,3,278,3439,8,278,1,278,3,278,3442,
        8,278,1,279,1,279,1,279,1,279,3,279,3448,8,279,1,279,1,279,3,279,
        3452,8,279,1,279,1,279,1,280,1,280,3,280,3458,8,280,1,280,1,280,
        3,280,3462,8,280,1,280,5,280,3465,8,280,10,280,12,280,3468,9,280,
        1,281,1,281,1,282,1,282,1,282,1,282,3,282,3476,8,282,1,282,1,282,
        3,282,3480,8,282,1,282,3,282,3483,8,282,1,282,3,282,3486,8,282,1,
        282,1,282,3,282,3490,8,282,1,282,1,282,1,283,1,283,1,284,1,284,1,
        285,1,285,1,285,1,285,3,285,3502,8,285,1,285,1,285,3,285,3506,8,
        285,1,285,3,285,3509,8,285,1,285,3,285,3512,8,285,1,285,1,285,3,
        285,3516,8,285,1,285,1,285,1,286,1,286,1,287,1,287,1,287,1,287,1,
        287,1,287,3,287,3528,8,287,1,287,1,287,3,287,3532,8,287,1,287,1,
        287,1,287,1,287,1,287,1,287,1,287,1,287,3,287,3542,8,287,1,287,1,
        287,3,287,3546,8,287,1,287,3,287,3549,8,287,1,287,1,287,1,287,1,
        287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
        3,287,3565,8,287,1,288,1,288,1,289,1,289,1,290,1,290,1,290,1,290,
        1,290,1,290,1,290,1,290,3,290,3579,8,290,1,290,1,290,3,290,3583,
        8,290,1,290,1,290,3,290,3587,8,290,1,290,1,290,1,290,3,290,3592,
        8,290,1,290,1,290,3,290,3596,8,290,1,290,1,290,1,290,3,290,3601,
        8,290,1,290,1,290,3,290,3605,8,290,1,290,1,290,1,290,3,290,3610,
        8,290,1,290,1,290,3,290,3614,8,290,1,290,1,290,1,290,3,290,3619,
        8,290,1,290,1,290,3,290,3623,8,290,1,290,1,290,1,290,3,290,3628,
        8,290,1,290,1,290,3,290,3632,8,290,1,290,1,290,1,290,3,290,3637,
        8,290,1,290,1,290,3,290,3641,8,290,1,290,5,290,3644,8,290,10,290,
        12,290,3647,9,290,1,291,1,291,1,291,1,291,3,291,3653,8,291,1,291,
        1,291,1,291,3,291,3658,8,291,1,291,1,291,1,291,3,291,3663,8,291,
        1,291,1,291,3,291,3667,8,291,1,291,1,291,3,291,3671,8,291,1,291,
        1,291,1,291,3,291,3676,8,291,1,291,1,291,3,291,3680,8,291,1,291,
        1,291,3,291,3684,8,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        3,291,3693,8,291,1,291,1,291,3,291,3697,8,291,1,291,1,291,1,291,
        1,291,3,291,3703,8,291,1,291,1,291,3,291,3707,8,291,1,291,1,291,
        3,291,3711,8,291,1,291,1,291,3,291,3715,8,291,1,291,5,291,3718,8,
        291,10,291,12,291,3721,9,291,1,292,1,292,1,292,1,292,1,292,1,292,
        3,292,3729,8,292,3,292,3731,8,292,1,293,1,293,3,293,3735,8,293,1,
        293,1,293,3,293,3739,8,293,1,293,1,293,1,294,1,294,3,294,3745,8,
        294,1,294,1,294,3,294,3749,8,294,1,294,1,294,3,294,3753,8,294,1,
        294,1,294,1,295,1,295,3,295,3759,8,295,1,295,1,295,1,296,1,296,3,
        296,3765,8,296,1,296,1,296,1,297,1,297,3,297,3771,8,297,1,297,1,
        297,1,298,1,298,1,298,3,298,3778,8,298,1,299,1,299,1,300,1,300,1,
        300,3,300,3785,8,300,1,300,1,300,1,300,1,300,3,300,3791,8,300,1,
        300,1,300,3,300,3795,8,300,1,300,1,300,3,300,3799,8,300,1,300,1,
        300,3,300,3803,8,300,1,301,1,301,3,301,3807,8,301,1,301,1,301,3,
        301,3811,8,301,1,301,1,301,3,301,3815,8,301,1,301,1,301,1,302,3,
        302,3820,8,302,1,303,1,303,3,303,3824,8,303,1,303,1,303,3,303,3828,
        8,303,5,303,3830,8,303,10,303,12,303,3833,9,303,1,303,1,303,1,303,
        3,303,3838,8,303,1,303,1,303,3,303,3842,8,303,5,303,3844,8,303,10,
        303,12,303,3847,9,303,1,303,3,303,3850,8,303,1,304,3,304,3853,8,
        304,1,305,1,305,1,306,1,306,3,306,3859,8,306,1,306,1,306,3,306,3863,
        8,306,1,306,5,306,3866,8,306,10,306,12,306,3869,9,306,1,307,1,307,
        3,307,3873,8,307,1,307,1,307,3,307,3877,8,307,1,307,1,307,1,308,
        1,308,3,308,3883,8,308,1,308,1,308,3,308,3887,8,308,1,309,1,309,
        1,309,1,309,1,309,1,309,3,309,3895,8,309,1,309,1,309,3,309,3899,
        8,309,1,309,1,309,1,309,1,309,1,309,3,309,3906,8,309,1,309,1,309,
        3,309,3910,8,309,1,309,1,309,3,309,3914,8,309,1,309,1,309,3,309,
        3918,8,309,1,309,1,309,3,309,3922,8,309,1,310,1,310,3,310,3926,8,
        310,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,1,314,1,314,
        1,315,1,315,1,316,1,316,1,317,1,317,1,318,1,318,1,319,1,319,3,319,
        3948,8,319,1,320,1,320,3,320,3952,8,320,1,321,1,321,1,321,1,321,
        1,322,1,322,3,322,3960,8,322,1,323,4,323,3963,8,323,11,323,12,323,
        3964,1,324,3,324,3968,8,324,1,324,1,324,1,324,3,324,3973,8,324,1,
        324,3,324,3976,8,324,1,325,3,325,3979,8,325,1,325,1,325,1,325,3,
        325,3984,8,325,1,326,1,326,3,326,3988,8,326,1,326,1,326,3,326,3992,
        8,326,4,326,3994,8,326,11,326,12,326,3995,1,327,1,327,3,327,4000,
        8,327,1,327,4,327,4003,8,327,11,327,12,327,4004,1,328,1,328,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4019,
        8,329,1,330,1,330,3,330,4023,8,330,1,331,1,331,1,332,1,332,1,333,
        1,333,1,334,1,334,1,335,1,335,1,336,1,336,1,337,1,337,1,338,1,338,
        1,339,1,339,1,340,1,340,1,340,3,340,4046,8,340,1,341,1,341,1,342,
        1,342,1,343,1,343,1,344,1,344,1,345,1,345,1,346,1,346,1,346,1,346,
        3,346,4062,8,346,1,347,1,347,1,347,1,347,1,347,1,347,3,347,4070,
        8,347,1,348,1,348,1,349,1,349,1,349,0,2,580,582,350,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
        516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
        548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
        580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,
        612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
        644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
        676,678,680,682,684,686,688,690,692,694,696,698,0,33,2,0,14,14,179,
        179,2,0,54,58,60,67,2,0,68,68,148,148,2,0,93,93,152,152,2,0,111,
        111,166,166,4,0,89,89,93,93,148,148,152,152,1,0,17,18,1,0,35,36,
        5,0,133,133,245,245,247,248,250,250,252,252,1,0,126,129,5,0,8,8,
        14,14,101,101,144,144,154,154,2,0,242,242,263,263,4,0,192,192,201,
        201,207,207,209,209,2,0,206,206,211,211,2,0,243,243,255,255,2,0,
        253,253,259,259,7,0,104,104,113,113,245,245,247,248,250,250,252,
        252,256,256,5,0,5,5,81,81,98,98,143,143,221,221,2,0,272,272,279,
        279,34,0,21,22,40,40,42,42,52,52,54,58,60,69,74,75,77,78,80,80,82,
        82,84,85,89,93,95,97,99,99,101,101,111,111,116,116,123,124,132,132,
        139,141,147,148,152,153,155,155,157,157,160,162,164,166,172,172,
        174,174,177,177,183,183,186,186,215,216,218,218,220,220,15,0,6,6,
        10,10,17,18,22,22,73,74,100,100,133,133,142,142,145,146,168,168,
        171,171,178,178,180,181,187,187,219,220,11,0,3,3,5,5,81,81,98,98,
        104,104,113,113,130,130,133,134,143,143,184,184,221,221,16,0,1,1,
        23,28,32,32,37,39,43,46,49,49,51,51,70,70,88,88,103,103,109,110,
        125,125,150,150,163,163,167,167,175,175,6,0,9,9,33,33,101,102,108,
        108,163,163,185,185,12,0,15,15,19,19,47,47,49,49,71,71,105,105,117,
        117,119,119,121,121,169,169,175,175,212,212,12,0,16,16,20,20,48,
        48,50,50,72,72,106,106,118,118,120,120,122,122,170,170,176,176,213,
        213,2,0,49,49,175,175,2,0,87,87,182,182,2,0,76,76,136,136,3,0,7,
        7,115,115,188,211,3,0,29,29,53,53,59,59,6,0,239,240,244,244,246,
        246,249,249,257,257,261,261,26,0,2,2,4,4,8,8,11,14,30,31,34,36,41,
        41,79,79,83,83,94,94,107,107,112,112,114,114,126,129,131,131,137,
        137,144,144,149,149,154,154,156,156,159,159,173,173,179,179,214,
        214,217,217,222,238,4455,0,700,1,0,0,0,2,706,1,0,0,0,4,727,1,0,0,
        0,6,730,1,0,0,0,8,737,1,0,0,0,10,783,1,0,0,0,12,785,1,0,0,0,14,794,
        1,0,0,0,16,799,1,0,0,0,18,820,1,0,0,0,20,848,1,0,0,0,22,874,1,0,
        0,0,24,883,1,0,0,0,26,895,1,0,0,0,28,919,1,0,0,0,30,1004,1,0,0,0,
        32,1007,1,0,0,0,34,1018,1,0,0,0,36,1024,1,0,0,0,38,1029,1,0,0,0,
        40,1033,1,0,0,0,42,1073,1,0,0,0,44,1109,1,0,0,0,46,1114,1,0,0,0,
        48,1123,1,0,0,0,50,1128,1,0,0,0,52,1134,1,0,0,0,54,1140,1,0,0,0,
        56,1142,1,0,0,0,58,1148,1,0,0,0,60,1154,1,0,0,0,62,1158,1,0,0,0,
        64,1164,1,0,0,0,66,1179,1,0,0,0,68,1181,1,0,0,0,70,1183,1,0,0,0,
        72,1189,1,0,0,0,74,1191,1,0,0,0,76,1193,1,0,0,0,78,1199,1,0,0,0,
        80,1201,1,0,0,0,82,1203,1,0,0,0,84,1212,1,0,0,0,86,1217,1,0,0,0,
        88,1219,1,0,0,0,90,1236,1,0,0,0,92,1240,1,0,0,0,94,1248,1,0,0,0,
        96,1259,1,0,0,0,98,1277,1,0,0,0,100,1293,1,0,0,0,102,1295,1,0,0,
        0,104,1302,1,0,0,0,106,1310,1,0,0,0,108,1318,1,0,0,0,110,1320,1,
        0,0,0,112,1330,1,0,0,0,114,1332,1,0,0,0,116,1344,1,0,0,0,118,1359,
        1,0,0,0,120,1366,1,0,0,0,122,1371,1,0,0,0,124,1373,1,0,0,0,126,1379,
        1,0,0,0,128,1385,1,0,0,0,130,1387,1,0,0,0,132,1395,1,0,0,0,134,1397,
        1,0,0,0,136,1399,1,0,0,0,138,1405,1,0,0,0,140,1409,1,0,0,0,142,1411,
        1,0,0,0,144,1415,1,0,0,0,146,1431,1,0,0,0,148,1433,1,0,0,0,150,1443,
        1,0,0,0,152,1458,1,0,0,0,154,1464,1,0,0,0,156,1468,1,0,0,0,158,1472,
        1,0,0,0,160,1490,1,0,0,0,162,1501,1,0,0,0,164,1505,1,0,0,0,166,1507,
        1,0,0,0,168,1510,1,0,0,0,170,1515,1,0,0,0,172,1528,1,0,0,0,174,1530,
        1,0,0,0,176,1536,1,0,0,0,178,1540,1,0,0,0,180,1544,1,0,0,0,182,1562,
        1,0,0,0,184,1573,1,0,0,0,186,1575,1,0,0,0,188,1588,1,0,0,0,190,1592,
        1,0,0,0,192,1596,1,0,0,0,194,1606,1,0,0,0,196,1616,1,0,0,0,198,1631,
        1,0,0,0,200,1637,1,0,0,0,202,1641,1,0,0,0,204,1645,1,0,0,0,206,1650,
        1,0,0,0,208,1659,1,0,0,0,210,1680,1,0,0,0,212,1692,1,0,0,0,214,1695,
        1,0,0,0,216,1699,1,0,0,0,218,1704,1,0,0,0,220,1710,1,0,0,0,222,1715,
        1,0,0,0,224,1767,1,0,0,0,226,1831,1,0,0,0,228,1896,1,0,0,0,230,1946,
        1,0,0,0,232,1968,1,0,0,0,234,1970,1,0,0,0,236,1972,1,0,0,0,238,1974,
        1,0,0,0,240,1978,1,0,0,0,242,1983,1,0,0,0,244,1988,1,0,0,0,246,1990,
        1,0,0,0,248,1999,1,0,0,0,250,2005,1,0,0,0,252,2017,1,0,0,0,254,2060,
        1,0,0,0,256,2062,1,0,0,0,258,2076,1,0,0,0,260,2090,1,0,0,0,262,2095,
        1,0,0,0,264,2099,1,0,0,0,266,2108,1,0,0,0,268,2129,1,0,0,0,270,2131,
        1,0,0,0,272,2135,1,0,0,0,274,2149,1,0,0,0,276,2151,1,0,0,0,278,2154,
        1,0,0,0,280,2163,1,0,0,0,282,2169,1,0,0,0,284,2171,1,0,0,0,286,2173,
        1,0,0,0,288,2175,1,0,0,0,290,2178,1,0,0,0,292,2208,1,0,0,0,294,2232,
        1,0,0,0,296,2241,1,0,0,0,298,2245,1,0,0,0,300,2247,1,0,0,0,302,2258,
        1,0,0,0,304,2260,1,0,0,0,306,2262,1,0,0,0,308,2284,1,0,0,0,310,2307,
        1,0,0,0,312,2327,1,0,0,0,314,2329,1,0,0,0,316,2344,1,0,0,0,318,2346,
        1,0,0,0,320,2357,1,0,0,0,322,2380,1,0,0,0,324,2382,1,0,0,0,326,2402,
        1,0,0,0,328,2404,1,0,0,0,330,2406,1,0,0,0,332,2410,1,0,0,0,334,2414,
        1,0,0,0,336,2416,1,0,0,0,338,2427,1,0,0,0,340,2444,1,0,0,0,342,2460,
        1,0,0,0,344,2462,1,0,0,0,346,2466,1,0,0,0,348,2490,1,0,0,0,350,2492,
        1,0,0,0,352,2498,1,0,0,0,354,2504,1,0,0,0,356,2508,1,0,0,0,358,2581,
        1,0,0,0,360,2584,1,0,0,0,362,2600,1,0,0,0,364,2602,1,0,0,0,366,2614,
        1,0,0,0,368,2622,1,0,0,0,370,2658,1,0,0,0,372,2664,1,0,0,0,374,2666,
        1,0,0,0,376,2690,1,0,0,0,378,2716,1,0,0,0,380,2747,1,0,0,0,382,2749,
        1,0,0,0,384,2751,1,0,0,0,386,2753,1,0,0,0,388,2760,1,0,0,0,390,2765,
        1,0,0,0,392,2779,1,0,0,0,394,2784,1,0,0,0,396,2786,1,0,0,0,398,2798,
        1,0,0,0,400,2802,1,0,0,0,402,2806,1,0,0,0,404,2810,1,0,0,0,406,2844,
        1,0,0,0,408,2846,1,0,0,0,410,2848,1,0,0,0,412,2865,1,0,0,0,414,2877,
        1,0,0,0,416,2879,1,0,0,0,418,2891,1,0,0,0,420,2895,1,0,0,0,422,2897,
        1,0,0,0,424,2908,1,0,0,0,426,2926,1,0,0,0,428,2928,1,0,0,0,430,2934,
        1,0,0,0,432,2940,1,0,0,0,434,2946,1,0,0,0,436,2952,1,0,0,0,438,2962,
        1,0,0,0,440,2979,1,0,0,0,442,2983,1,0,0,0,444,2989,1,0,0,0,446,2991,
        1,0,0,0,448,2998,1,0,0,0,450,3004,1,0,0,0,452,3018,1,0,0,0,454,3020,
        1,0,0,0,456,3057,1,0,0,0,458,3059,1,0,0,0,460,3061,1,0,0,0,462,3063,
        1,0,0,0,464,3065,1,0,0,0,466,3079,1,0,0,0,468,3095,1,0,0,0,470,3107,
        1,0,0,0,472,3122,1,0,0,0,474,3124,1,0,0,0,476,3141,1,0,0,0,478,3143,
        1,0,0,0,480,3151,1,0,0,0,482,3155,1,0,0,0,484,3169,1,0,0,0,486,3171,
        1,0,0,0,488,3206,1,0,0,0,490,3208,1,0,0,0,492,3212,1,0,0,0,494,3214,
        1,0,0,0,496,3224,1,0,0,0,498,3241,1,0,0,0,500,3243,1,0,0,0,502,3249,
        1,0,0,0,504,3253,1,0,0,0,506,3255,1,0,0,0,508,3258,1,0,0,0,510,3268,
        1,0,0,0,512,3270,1,0,0,0,514,3284,1,0,0,0,516,3296,1,0,0,0,518,3298,
        1,0,0,0,520,3319,1,0,0,0,522,3321,1,0,0,0,524,3323,1,0,0,0,526,3325,
        1,0,0,0,528,3338,1,0,0,0,530,3352,1,0,0,0,532,3354,1,0,0,0,534,3366,
        1,0,0,0,536,3368,1,0,0,0,538,3382,1,0,0,0,540,3391,1,0,0,0,542,3396,
        1,0,0,0,544,3398,1,0,0,0,546,3400,1,0,0,0,548,3402,1,0,0,0,550,3414,
        1,0,0,0,552,3416,1,0,0,0,554,3428,1,0,0,0,556,3430,1,0,0,0,558,3443,
        1,0,0,0,560,3455,1,0,0,0,562,3469,1,0,0,0,564,3471,1,0,0,0,566,3493,
        1,0,0,0,568,3495,1,0,0,0,570,3497,1,0,0,0,572,3519,1,0,0,0,574,3564,
        1,0,0,0,576,3566,1,0,0,0,578,3568,1,0,0,0,580,3578,1,0,0,0,582,3652,
        1,0,0,0,584,3730,1,0,0,0,586,3732,1,0,0,0,588,3742,1,0,0,0,590,3756,
        1,0,0,0,592,3762,1,0,0,0,594,3768,1,0,0,0,596,3777,1,0,0,0,598,3779,
        1,0,0,0,600,3802,1,0,0,0,602,3804,1,0,0,0,604,3819,1,0,0,0,606,3849,
        1,0,0,0,608,3852,1,0,0,0,610,3854,1,0,0,0,612,3856,1,0,0,0,614,3870,
        1,0,0,0,616,3886,1,0,0,0,618,3921,1,0,0,0,620,3925,1,0,0,0,622,3927,
        1,0,0,0,624,3930,1,0,0,0,626,3933,1,0,0,0,628,3935,1,0,0,0,630,3937,
        1,0,0,0,632,3939,1,0,0,0,634,3941,1,0,0,0,636,3943,1,0,0,0,638,3947,
        1,0,0,0,640,3951,1,0,0,0,642,3953,1,0,0,0,644,3959,1,0,0,0,646,3962,
        1,0,0,0,648,3967,1,0,0,0,650,3978,1,0,0,0,652,3993,1,0,0,0,654,4002,
        1,0,0,0,656,4006,1,0,0,0,658,4018,1,0,0,0,660,4022,1,0,0,0,662,4024,
        1,0,0,0,664,4026,1,0,0,0,666,4028,1,0,0,0,668,4030,1,0,0,0,670,4032,
        1,0,0,0,672,4034,1,0,0,0,674,4036,1,0,0,0,676,4038,1,0,0,0,678,4040,
        1,0,0,0,680,4045,1,0,0,0,682,4047,1,0,0,0,684,4049,1,0,0,0,686,4051,
        1,0,0,0,688,4053,1,0,0,0,690,4055,1,0,0,0,692,4061,1,0,0,0,694,4069,
        1,0,0,0,696,4071,1,0,0,0,698,4073,1,0,0,0,700,701,3,2,1,0,701,702,
        5,0,0,1,702,1,1,0,0,0,703,705,3,650,325,0,704,703,1,0,0,0,705,708,
        1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,716,1,0,0,0,708,706,
        1,0,0,0,709,717,3,22,11,0,710,711,3,4,2,0,711,712,3,24,12,0,712,
        717,1,0,0,0,713,714,3,12,6,0,714,715,3,24,12,0,715,717,1,0,0,0,716,
        709,1,0,0,0,716,710,1,0,0,0,716,713,1,0,0,0,717,721,1,0,0,0,718,
        720,3,648,324,0,719,718,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,
        721,722,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,724,726,5,279,0,
        0,725,724,1,0,0,0,725,726,1,0,0,0,726,3,1,0,0,0,727,728,3,6,3,0,
        728,729,3,8,4,0,729,5,1,0,0,0,730,731,5,214,0,0,731,732,5,279,0,
        0,732,733,5,269,0,0,733,734,5,279,0,0,734,735,5,34,0,0,735,7,1,0,
        0,0,736,738,3,648,324,0,737,736,1,0,0,0,738,739,1,0,0,0,739,737,
        1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,5,12,0,0,742,744,
        3,10,5,0,743,742,1,0,0,0,744,745,1,0,0,0,745,743,1,0,0,0,745,746,
        1,0,0,0,746,748,1,0,0,0,747,749,3,648,324,0,748,747,1,0,0,0,749,
        750,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,
        753,5,78,0,0,753,9,1,0,0,0,754,756,3,648,324,0,755,754,1,0,0,0,756,
        757,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,761,1,0,0,0,759,
        760,5,137,0,0,760,762,5,258,0,0,761,759,1,0,0,0,761,762,1,0,0,0,
        762,764,1,0,0,0,763,765,5,278,0,0,764,763,1,0,0,0,764,765,1,0,0,
        0,765,766,1,0,0,0,766,768,3,660,330,0,767,769,5,279,0,0,768,767,
        1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,772,5,245,0,0,771,773,
        5,279,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,779,1,0,0,0,774,776,
        5,253,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,780,
        3,584,292,0,778,780,5,271,0,0,779,775,1,0,0,0,779,778,1,0,0,0,780,
        784,1,0,0,0,781,784,3,18,9,0,782,784,3,20,10,0,783,755,1,0,0,0,783,
        781,1,0,0,0,783,782,1,0,0,0,784,11,1,0,0,0,785,789,3,14,7,0,786,
        788,3,16,8,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,
        790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,793,3,18,9,0,793,
        13,1,0,0,0,794,795,5,214,0,0,795,796,5,279,0,0,796,797,5,269,0,0,
        797,15,1,0,0,0,798,800,3,648,324,0,799,798,1,0,0,0,800,801,1,0,0,
        0,801,799,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,805,5,137,
        0,0,804,806,5,279,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,
        0,0,0,807,809,5,245,0,0,808,810,5,279,0,0,809,808,1,0,0,0,809,810,
        1,0,0,0,810,811,1,0,0,0,811,817,5,267,0,0,812,814,5,263,0,0,813,
        815,5,279,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,816,1,0,0,0,816,
        818,5,267,0,0,817,812,1,0,0,0,817,818,1,0,0,0,818,17,1,0,0,0,819,
        821,3,648,324,0,820,819,1,0,0,0,821,822,1,0,0,0,822,820,1,0,0,0,
        822,823,1,0,0,0,823,824,1,0,0,0,824,825,5,12,0,0,825,831,5,279,0,
        0,826,832,5,266,0,0,827,828,3,660,330,0,828,829,5,258,0,0,829,830,
        3,660,330,0,830,832,1,0,0,0,831,826,1,0,0,0,831,827,1,0,0,0,832,
        833,1,0,0,0,833,834,5,279,0,0,834,836,3,660,330,0,835,837,3,10,5,
        0,836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,
        0,839,841,1,0,0,0,840,842,3,648,324,0,841,840,1,0,0,0,842,843,1,
        0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,846,5,
        78,0,0,846,19,1,0,0,0,847,849,3,648,324,0,848,847,1,0,0,0,849,850,
        1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,
        5,13,0,0,853,854,5,279,0,0,854,860,3,660,330,0,855,856,5,279,0,0,
        856,858,5,266,0,0,857,859,5,279,0,0,858,857,1,0,0,0,858,859,1,0,
        0,0,859,861,1,0,0,0,860,855,1,0,0,0,860,861,1,0,0,0,861,863,1,0,
        0,0,862,864,3,10,5,0,863,862,1,0,0,0,864,865,1,0,0,0,865,863,1,0,
        0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,869,3,648,324,0,868,867,
        1,0,0,0,869,870,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,872,
        1,0,0,0,872,873,5,79,0,0,873,21,1,0,0,0,874,878,3,26,13,0,875,877,
        3,650,325,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,
        879,1,0,0,0,879,881,1,0,0,0,880,878,1,0,0,0,881,882,3,32,16,0,882,
        23,1,0,0,0,883,887,3,28,14,0,884,886,3,648,324,0,885,884,1,0,0,0,
        886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,
        889,887,1,0,0,0,890,891,3,34,17,0,891,25,1,0,0,0,892,894,3,648,324,
        0,893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,
        0,896,898,1,0,0,0,897,895,1,0,0,0,898,900,5,7,0,0,899,901,5,279,
        0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,904,5,202,
        0,0,903,905,5,279,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,
        0,0,0,906,908,5,245,0,0,907,909,5,279,0,0,908,907,1,0,0,0,908,909,
        1,0,0,0,909,910,1,0,0,0,910,911,5,267,0,0,911,27,1,0,0,0,912,914,
        3,648,324,0,913,912,1,0,0,0,914,915,1,0,0,0,915,913,1,0,0,0,915,
        916,1,0,0,0,916,917,1,0,0,0,917,918,3,30,15,0,918,920,1,0,0,0,919,
        913,1,0,0,0,920,921,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,
        924,1,0,0,0,923,925,5,279,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,
        29,1,0,0,0,926,928,5,7,0,0,927,929,5,279,0,0,928,927,1,0,0,0,928,
        929,1,0,0,0,929,930,1,0,0,0,930,932,5,202,0,0,931,933,5,279,0,0,
        932,931,1,0,0,0,932,933,1,0,0,0,933,934,1,0,0,0,934,936,5,245,0,
        0,935,937,5,279,0,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,0,
        0,0,938,1005,5,267,0,0,939,941,5,7,0,0,940,942,5,279,0,0,941,940,
        1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,945,5,195,0,0,944,946,
        5,279,0,0,945,944,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,949,
        5,245,0,0,948,950,5,279,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,
        951,1,0,0,0,951,1005,3,682,341,0,952,954,5,7,0,0,953,955,5,279,0,
        0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,958,5,190,
        0,0,957,959,5,279,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,
        0,0,0,960,962,5,245,0,0,961,963,5,279,0,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,964,1,0,0,0,964,1005,3,682,341,0,965,967,5,7,0,0,966,
        968,5,279,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
        971,5,203,0,0,970,972,5,279,0,0,971,970,1,0,0,0,971,972,1,0,0,0,
        972,973,1,0,0,0,973,975,5,245,0,0,974,976,5,279,0,0,975,974,1,0,
        0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,1005,3,682,341,0,978,980,
        5,7,0,0,979,981,5,279,0,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,
        1,0,0,0,982,984,5,193,0,0,983,985,5,279,0,0,984,983,1,0,0,0,984,
        985,1,0,0,0,985,986,1,0,0,0,986,988,5,245,0,0,987,989,5,279,0,0,
        988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,1005,3,682,341,
        0,991,993,5,7,0,0,992,994,5,279,0,0,993,992,1,0,0,0,993,994,1,0,
        0,0,994,995,1,0,0,0,995,997,5,191,0,0,996,998,5,279,0,0,997,996,
        1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,5,245,0,0,1000,
        1002,5,279,0,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,
        0,0,1003,1005,3,682,341,0,1004,926,1,0,0,0,1004,939,1,0,0,0,1004,
        952,1,0,0,0,1004,965,1,0,0,0,1004,978,1,0,0,0,1004,991,1,0,0,0,1005,
        31,1,0,0,0,1006,1008,3,42,21,0,1007,1006,1,0,0,0,1007,1008,1,0,0,
        0,1008,1012,1,0,0,0,1009,1011,3,648,324,0,1010,1009,1,0,0,0,1011,
        1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,
        0,1014,1012,1,0,0,0,1015,1016,3,210,105,0,1016,33,1,0,0,0,1017,1019,
        3,44,22,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,
        1020,1021,3,212,106,0,1021,35,1,0,0,0,1022,1025,3,658,329,0,1023,
        1025,3,38,19,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,37,1,0,0,
        0,1026,1030,3,40,20,0,1027,1030,3,694,347,0,1028,1030,3,506,253,
        0,1029,1026,1,0,0,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,39,
        1,0,0,0,1031,1034,3,660,330,0,1032,1034,5,282,0,0,1033,1031,1,0,
        0,0,1033,1032,1,0,0,0,1034,41,1,0,0,0,1035,1037,3,648,324,0,1036,
        1035,1,0,0,0,1037,1038,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,
        0,1039,1040,1,0,0,0,1040,1041,3,48,24,0,1041,1043,1,0,0,0,1042,1036,
        1,0,0,0,1043,1044,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,
        1074,1,0,0,0,1046,1048,3,648,324,0,1047,1046,1,0,0,0,1048,1049,1,
        0,0,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,
        1052,3,46,23,0,1052,1054,1,0,0,0,1053,1047,1,0,0,0,1054,1057,1,0,
        0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1059,1,0,0,0,1057,1055,
        1,0,0,0,1058,1060,3,648,324,0,1059,1058,1,0,0,0,1060,1061,1,0,0,
        0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,
        3,64,32,0,1064,1070,1,0,0,0,1065,1066,3,48,24,0,1066,1067,3,650,
        325,0,1067,1069,1,0,0,0,1068,1065,1,0,0,0,1069,1072,1,0,0,0,1070,
        1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,
        0,1073,1042,1,0,0,0,1073,1055,1,0,0,0,1074,43,1,0,0,0,1075,1077,
        3,52,26,0,1076,1078,3,648,324,0,1077,1076,1,0,0,0,1078,1079,1,0,
        0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1082,1,0,0,0,1081,1075,
        1,0,0,0,1082,1083,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,
        1110,1,0,0,0,1085,1087,3,50,25,0,1086,1088,3,648,324,0,1087,1086,
        1,0,0,0,1088,1089,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        1092,1,0,0,0,1091,1085,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,
        0,1093,1094,1,0,0,0,1094,1096,1,0,0,0,1095,1093,1,0,0,0,1096,1097,
        3,64,32,0,1097,1106,1,0,0,0,1098,1100,3,52,26,0,1099,1101,3,648,
        324,0,1100,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1100,1,0,0,0,1102,
        1103,1,0,0,0,1103,1105,1,0,0,0,1104,1098,1,0,0,0,1105,1108,1,0,0,
        0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1110,1,0,0,0,1108,1106,
        1,0,0,0,1109,1081,1,0,0,0,1109,1093,1,0,0,0,1110,45,1,0,0,0,1111,
        1115,3,54,27,0,1112,1115,3,62,31,0,1113,1115,3,64,32,0,1114,1111,
        1,0,0,0,1114,1112,1,0,0,0,1114,1113,1,0,0,0,1115,47,1,0,0,0,1116,
        1124,3,84,42,0,1117,1124,3,90,45,0,1118,1124,3,136,68,0,1119,1124,
        3,188,94,0,1120,1124,3,174,87,0,1121,1124,3,54,27,0,1122,1124,3,
        62,31,0,1123,1116,1,0,0,0,1123,1117,1,0,0,0,1123,1118,1,0,0,0,1123,
        1119,1,0,0,0,1123,1120,1,0,0,0,1123,1121,1,0,0,0,1123,1122,1,0,0,
        0,1124,49,1,0,0,0,1125,1129,3,54,27,0,1126,1129,3,64,32,0,1127,1129,
        3,204,102,0,1128,1125,1,0,0,0,1128,1126,1,0,0,0,1128,1127,1,0,0,
        0,1129,51,1,0,0,0,1130,1135,3,84,42,0,1131,1135,3,206,103,0,1132,
        1135,3,54,27,0,1133,1135,3,204,102,0,1134,1130,1,0,0,0,1134,1131,
        1,0,0,0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,53,1,0,0,0,1136,
        1141,3,56,28,0,1137,1141,3,58,29,0,1138,1141,3,60,30,0,1139,1141,
        3,306,153,0,1140,1136,1,0,0,0,1140,1137,1,0,0,0,1140,1138,1,0,0,
        0,1140,1139,1,0,0,0,1141,55,1,0,0,0,1142,1143,5,141,0,0,1143,1144,
        3,646,323,0,1144,1145,5,41,0,0,1145,1146,3,646,323,0,1146,1147,7,
        0,0,0,1147,57,1,0,0,0,1148,1149,5,141,0,0,1149,1150,3,646,323,0,
        1150,1151,5,11,0,0,1151,1152,3,646,323,0,1152,1153,5,268,0,0,1153,
        59,1,0,0,0,1154,1155,5,141,0,0,1155,1156,3,646,323,0,1156,1157,5,
        86,0,0,1157,61,1,0,0,0,1158,1159,5,141,0,0,1159,1160,3,646,323,0,
        1160,1161,5,148,0,0,1161,1162,3,646,323,0,1162,1163,5,131,0,0,1163,
        63,1,0,0,0,1164,1165,3,82,41,0,1165,1166,5,279,0,0,1166,1173,3,66,
        33,0,1167,1168,5,279,0,0,1168,1169,5,242,0,0,1169,1170,5,279,0,0,
        1170,1172,3,66,33,0,1171,1167,1,0,0,0,1172,1175,1,0,0,0,1173,1171,
        1,0,0,0,1173,1174,1,0,0,0,1174,65,1,0,0,0,1175,1173,1,0,0,0,1176,
        1180,3,68,34,0,1177,1180,3,70,35,0,1178,1180,3,76,38,0,1179,1176,
        1,0,0,0,1179,1177,1,0,0,0,1179,1178,1,0,0,0,1180,67,1,0,0,0,1181,
        1182,3,660,330,0,1182,69,1,0,0,0,1183,1184,3,72,36,0,1184,1185,5,
        279,0,0,1185,1186,5,253,0,0,1186,1187,5,279,0,0,1187,1188,3,74,37,
        0,1188,71,1,0,0,0,1189,1190,3,660,330,0,1190,73,1,0,0,0,1191,1192,
        3,660,330,0,1192,75,1,0,0,0,1193,1194,3,78,39,0,1194,1195,5,279,
        0,0,1195,1196,5,253,0,0,1196,1197,5,279,0,0,1197,1198,3,80,40,0,
        1198,77,1,0,0,0,1199,1200,3,660,330,0,1200,79,1,0,0,0,1201,1202,
        3,660,330,0,1202,81,1,0,0,0,1203,1204,7,1,0,0,1204,83,1,0,0,0,1205,
        1213,3,86,43,0,1206,1213,3,138,69,0,1207,1213,3,156,78,0,1208,1213,
        3,154,77,0,1209,1213,3,178,89,0,1210,1213,3,176,88,0,1211,1213,3,
        190,95,0,1212,1205,1,0,0,0,1212,1206,1,0,0,0,1212,1207,1,0,0,0,1212,
        1208,1,0,0,0,1212,1209,1,0,0,0,1212,1210,1,0,0,0,1212,1211,1,0,0,
        0,1213,85,1,0,0,0,1214,1218,3,92,46,0,1215,1218,3,94,47,0,1216,1218,
        3,88,44,0,1217,1214,1,0,0,0,1217,1215,1,0,0,0,1217,1216,1,0,0,0,
        1218,87,1,0,0,0,1219,1220,5,7,0,0,1220,1221,5,279,0,0,1221,1222,
        3,660,330,0,1222,1223,5,258,0,0,1223,1225,5,208,0,0,1224,1226,5,
        279,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,
        1229,5,245,0,0,1228,1230,5,279,0,0,1229,1228,1,0,0,0,1229,1230,1,
        0,0,0,1230,1232,1,0,0,0,1231,1233,5,253,0,0,1232,1231,1,0,0,0,1232,
        1233,1,0,0,0,1233,1234,1,0,0,0,1234,1235,5,268,0,0,1235,89,1,0,0,
        0,1236,1237,5,93,0,0,1237,1238,5,279,0,0,1238,1239,3,98,49,0,1239,
        91,1,0,0,0,1240,1243,5,152,0,0,1241,1242,5,279,0,0,1242,1244,5,168,
        0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,1246,
        5,279,0,0,1246,1247,3,96,48,0,1247,93,1,0,0,0,1248,1249,7,2,0,0,
        1249,1250,3,646,323,0,1250,1253,1,0,0,0,1251,1252,5,168,0,0,1252,
        1254,3,646,323,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,
        0,0,0,1255,1256,3,96,48,0,1256,95,1,0,0,0,1257,1260,3,110,55,0,1258,
        1260,3,100,50,0,1259,1257,1,0,0,0,1259,1258,1,0,0,0,1260,1274,1,
        0,0,0,1261,1263,3,646,323,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,
        1263,1264,1,0,0,0,1264,1266,5,242,0,0,1265,1267,3,646,323,0,1266,
        1265,1,0,0,0,1266,1267,1,0,0,0,1267,1270,1,0,0,0,1268,1271,3,110,
        55,0,1269,1271,3,100,50,0,1270,1268,1,0,0,0,1270,1269,1,0,0,0,1271,
        1273,1,0,0,0,1272,1262,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,
        0,1274,1275,1,0,0,0,1275,97,1,0,0,0,1276,1274,1,0,0,0,1277,1288,
        3,100,50,0,1278,1280,3,646,323,0,1279,1278,1,0,0,0,1279,1280,1,0,
        0,0,1280,1281,1,0,0,0,1281,1283,5,242,0,0,1282,1284,3,646,323,0,
        1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1287,
        3,100,50,0,1286,1279,1,0,0,0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,
        1288,1289,1,0,0,0,1289,99,1,0,0,0,1290,1288,1,0,0,0,1291,1294,3,
        102,51,0,1292,1294,3,104,52,0,1293,1291,1,0,0,0,1293,1292,1,0,0,
        0,1294,101,1,0,0,0,1295,1297,3,694,347,0,1296,1298,3,646,323,0,1297,
        1296,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,0,0,0,1299,1301,3,114,
        57,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,103,1,0,0,0,1302,1304,
        3,660,330,0,1303,1305,3,646,323,0,1304,1303,1,0,0,0,1304,1305,1,
        0,0,0,1305,1308,1,0,0,0,1306,1309,3,106,53,0,1307,1309,3,108,54,
        0,1308,1306,1,0,0,0,1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,105,
        1,0,0,0,1310,1314,3,114,57,0,1311,1312,3,646,323,0,1312,1313,3,108,
        54,0,1313,1315,1,0,0,0,1314,1311,1,0,0,0,1314,1315,1,0,0,0,1315,
        107,1,0,0,0,1316,1319,3,124,62,0,1317,1319,3,126,63,0,1318,1316,
        1,0,0,0,1318,1317,1,0,0,0,1319,109,1,0,0,0,1320,1321,5,219,0,0,1321,
        1322,3,646,323,0,1322,1323,3,660,330,0,1323,1324,3,646,323,0,1324,
        1326,5,10,0,0,1325,1327,3,646,323,0,1326,1325,1,0,0,0,1326,1327,
        1,0,0,0,1327,1328,1,0,0,0,1328,1329,3,112,56,0,1329,111,1,0,0,0,
        1330,1331,3,640,320,0,1331,113,1,0,0,0,1332,1334,5,251,0,0,1333,
        1335,3,646,323,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,
        0,0,0,1336,1338,3,116,58,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,
        1340,1,0,0,0,1339,1341,3,646,323,0,1340,1339,1,0,0,0,1340,1341,1,
        0,0,0,1341,1342,1,0,0,0,1342,1343,5,262,0,0,1343,115,1,0,0,0,1344,
        1355,3,118,59,0,1345,1347,3,646,323,0,1346,1345,1,0,0,0,1346,1347,
        1,0,0,0,1347,1348,1,0,0,0,1348,1350,5,242,0,0,1349,1351,3,646,323,
        0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1354,
        3,118,59,0,1353,1346,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,0,
        1355,1356,1,0,0,0,1356,117,1,0,0,0,1357,1355,1,0,0,0,1358,1360,3,
        120,60,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,
        1363,3,646,323,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,
        0,0,0,1364,1365,3,122,61,0,1365,119,1,0,0,0,1366,1367,3,626,313,
        0,1367,1368,3,646,323,0,1368,1369,5,181,0,0,1369,1370,3,646,323,
        0,1370,121,1,0,0,0,1371,1372,3,626,313,0,1372,123,1,0,0,0,1373,1374,
        5,10,0,0,1374,1375,5,279,0,0,1375,1376,5,133,0,0,1376,1377,5,279,
        0,0,1377,1378,3,112,56,0,1378,125,1,0,0,0,1379,1380,5,10,0,0,1380,
        1381,5,279,0,0,1381,1382,3,128,64,0,1382,127,1,0,0,0,1383,1386,3,
        130,65,0,1384,1386,3,638,319,0,1385,1383,1,0,0,0,1385,1384,1,0,0,
        0,1386,129,1,0,0,0,1387,1388,5,175,0,0,1388,1389,5,279,0,0,1389,
        1390,5,255,0,0,1390,1391,5,279,0,0,1391,1392,3,132,66,0,1392,131,
        1,0,0,0,1393,1396,5,268,0,0,1394,1396,3,134,67,0,1395,1393,1,0,0,
        0,1395,1394,1,0,0,0,1396,133,1,0,0,0,1397,1398,3,596,298,0,1398,
        135,1,0,0,0,1399,1400,7,3,0,0,1400,1401,3,646,323,0,1401,1402,3,
        140,70,0,1402,137,1,0,0,0,1403,1404,5,148,0,0,1404,1406,3,646,323,
        0,1405,1403,1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,
        3,140,70,0,1408,139,1,0,0,0,1409,1410,3,142,71,0,1410,141,1,0,0,
        0,1411,1412,5,42,0,0,1412,1413,3,646,323,0,1413,1414,3,144,72,0,
        1414,143,1,0,0,0,1415,1426,3,146,73,0,1416,1418,3,646,323,0,1417,
        1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1421,5,242,
        0,0,1420,1422,3,646,323,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,
        1423,1,0,0,0,1423,1425,3,146,73,0,1424,1417,1,0,0,0,1425,1428,1,
        0,0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,145,1,0,0,0,1428,
        1426,1,0,0,0,1429,1432,3,148,74,0,1430,1432,3,150,75,0,1431,1429,
        1,0,0,0,1431,1430,1,0,0,0,1432,147,1,0,0,0,1433,1435,3,694,347,0,
        1434,1436,3,646,323,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,
        1,0,0,0,1437,1439,5,245,0,0,1438,1440,3,646,323,0,1439,1438,1,0,
        0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,1442,3,626,313,0,1442,
        149,1,0,0,0,1443,1447,3,660,330,0,1444,1445,3,646,323,0,1445,1446,
        3,152,76,0,1446,1448,1,0,0,0,1447,1444,1,0,0,0,1447,1448,1,0,0,0,
        1448,1450,1,0,0,0,1449,1451,3,646,323,0,1450,1449,1,0,0,0,1450,1451,
        1,0,0,0,1451,1452,1,0,0,0,1452,1454,5,245,0,0,1453,1455,3,646,323,
        0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1457,
        3,626,313,0,1457,151,1,0,0,0,1458,1459,5,10,0,0,1459,1460,3,646,
        323,0,1460,1461,3,692,346,0,1461,153,1,0,0,0,1462,1463,7,3,0,0,1463,
        1465,3,646,323,0,1464,1462,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,
        0,0,0,1466,1467,3,158,79,0,1467,155,1,0,0,0,1468,1469,5,148,0,0,
        1469,1470,3,646,323,0,1470,1471,3,158,79,0,1471,157,1,0,0,0,1472,
        1473,5,183,0,0,1473,1474,3,646,323,0,1474,1476,3,40,20,0,1475,1477,
        3,652,326,0,1476,1475,1,0,0,0,1477,1478,1,0,0,0,1478,1476,1,0,0,
        0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1482,3,160,80,0,1481,
        1483,3,652,326,0,1482,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1482,1,
        0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,1487,5,78,0,0,1487,
        1488,3,646,323,0,1488,1489,5,183,0,0,1489,159,1,0,0,0,1490,1496,
        3,162,81,0,1491,1492,3,652,326,0,1492,1493,3,162,81,0,1493,1495,
        1,0,0,0,1494,1491,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,
        1497,1,0,0,0,1497,161,1,0,0,0,1498,1496,1,0,0,0,1499,1502,3,306,
        153,0,1500,1502,3,164,82,0,1501,1499,1,0,0,0,1501,1500,1,0,0,0,1502,
        163,1,0,0,0,1503,1506,3,168,84,0,1504,1506,3,166,83,0,1505,1503,
        1,0,0,0,1505,1504,1,0,0,0,1506,165,1,0,0,0,1507,1508,3,660,330,0,
        1508,1509,3,170,85,0,1509,167,1,0,0,0,1510,1511,3,172,86,0,1511,
        1512,3,646,323,0,1512,1513,3,108,54,0,1513,169,1,0,0,0,1514,1516,
        3,114,57,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,
        1517,1518,3,646,323,0,1518,1519,3,108,54,0,1519,171,1,0,0,0,1520,
        1529,3,662,331,0,1521,1529,3,666,333,0,1522,1529,3,668,334,0,1523,
        1529,3,672,336,0,1524,1529,3,670,335,0,1525,1529,3,680,340,0,1526,
        1529,3,688,344,0,1527,1529,3,690,345,0,1528,1520,1,0,0,0,1528,1521,
        1,0,0,0,1528,1522,1,0,0,0,1528,1523,1,0,0,0,1528,1524,1,0,0,0,1528,
        1525,1,0,0,0,1528,1526,1,0,0,0,1528,1527,1,0,0,0,1529,173,1,0,0,
        0,1530,1531,5,93,0,0,1531,1532,3,646,323,0,1532,1533,3,180,90,0,
        1533,175,1,0,0,0,1534,1535,5,152,0,0,1535,1537,3,646,323,0,1536,
        1534,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1539,3,180,
        90,0,1539,177,1,0,0,0,1540,1541,5,148,0,0,1541,1542,3,646,323,0,
        1542,1543,3,180,90,0,1543,179,1,0,0,0,1544,1545,5,80,0,0,1545,1546,
        3,646,323,0,1546,1548,3,40,20,0,1547,1549,3,652,326,0,1548,1547,
        1,0,0,0,1549,1550,1,0,0,0,1550,1548,1,0,0,0,1550,1551,1,0,0,0,1551,
        1552,1,0,0,0,1552,1554,3,182,91,0,1553,1555,3,652,326,0,1554,1553,
        1,0,0,0,1555,1556,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,
        1558,1,0,0,0,1558,1559,5,78,0,0,1559,1560,3,646,323,0,1560,1561,
        5,80,0,0,1561,181,1,0,0,0,1562,1568,3,184,92,0,1563,1564,3,652,326,
        0,1564,1565,3,184,92,0,1565,1567,1,0,0,0,1566,1563,1,0,0,0,1567,
        1570,1,0,0,0,1568,1566,1,0,0,0,1568,1569,1,0,0,0,1569,183,1,0,0,
        0,1570,1568,1,0,0,0,1571,1574,3,306,153,0,1572,1574,3,186,93,0,1573,
        1571,1,0,0,0,1573,1572,1,0,0,0,1574,185,1,0,0,0,1575,1584,3,40,20,
        0,1576,1578,3,646,323,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,
        1579,1,0,0,0,1579,1581,5,245,0,0,1580,1582,3,646,323,0,1581,1580,
        1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1585,3,626,313,
        0,1584,1577,1,0,0,0,1584,1585,1,0,0,0,1585,187,1,0,0,0,1586,1587,
        5,152,0,0,1587,1589,3,646,323,0,1588,1586,1,0,0,0,1588,1589,1,0,
        0,0,1589,1590,1,0,0,0,1590,1591,3,192,96,0,1591,189,1,0,0,0,1592,
        1593,5,148,0,0,1593,1594,3,646,323,0,1594,1595,3,192,96,0,1595,191,
        1,0,0,0,1596,1597,5,52,0,0,1597,1600,3,646,323,0,1598,1599,5,151,
        0,0,1599,1601,3,646,323,0,1600,1598,1,0,0,0,1600,1601,1,0,0,0,1601,
        1604,1,0,0,0,1602,1605,3,194,97,0,1603,1605,3,196,98,0,1604,1602,
        1,0,0,0,1604,1603,1,0,0,0,1605,193,1,0,0,0,1606,1607,5,177,0,0,1607,
        1608,3,646,323,0,1608,1609,3,240,120,0,1609,1610,3,646,323,0,1610,
        1614,3,198,99,0,1611,1612,3,646,323,0,1612,1613,3,250,125,0,1613,
        1615,1,0,0,0,1614,1611,1,0,0,0,1614,1615,1,0,0,0,1615,195,1,0,0,
        0,1616,1617,5,91,0,0,1617,1618,3,646,323,0,1618,1619,3,242,121,0,
        1619,1620,3,646,323,0,1620,1624,3,198,99,0,1621,1622,3,646,323,0,
        1622,1623,3,250,125,0,1623,1625,1,0,0,0,1624,1621,1,0,0,0,1624,1625,
        1,0,0,0,1625,1629,1,0,0,0,1626,1627,3,646,323,0,1627,1628,3,246,
        123,0,1628,1630,1,0,0,0,1629,1626,1,0,0,0,1629,1630,1,0,0,0,1630,
        197,1,0,0,0,1631,1635,3,200,100,0,1632,1633,3,646,323,0,1633,1634,
        3,202,101,0,1634,1636,1,0,0,0,1635,1632,1,0,0,0,1635,1636,1,0,0,
        0,1636,199,1,0,0,0,1637,1638,5,112,0,0,1638,1639,3,646,323,0,1639,
        1640,5,267,0,0,1640,201,1,0,0,0,1641,1642,5,4,0,0,1642,1643,3,646,
        323,0,1643,1644,5,267,0,0,1644,203,1,0,0,0,1645,1646,5,99,0,0,1646,
        1647,5,279,0,0,1647,1648,3,112,56,0,1648,205,1,0,0,0,1649,1651,5,
        152,0,0,1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,
        1653,3,646,323,0,1653,1654,5,84,0,0,1654,1655,3,646,323,0,1655,1657,
        3,660,330,0,1656,1658,3,208,104,0,1657,1656,1,0,0,0,1657,1658,1,
        0,0,0,1658,207,1,0,0,0,1659,1661,5,251,0,0,1660,1662,3,646,323,0,
        1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1664,1,0,0,0,1663,1665,
        3,256,128,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,
        0,1666,1668,3,646,323,0,1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,
        1669,1,0,0,0,1669,1670,5,262,0,0,1670,209,1,0,0,0,1671,1675,3,214,
        107,0,1672,1674,3,648,324,0,1673,1672,1,0,0,0,1674,1677,1,0,0,0,
        1675,1673,1,0,0,0,1675,1676,1,0,0,0,1676,1679,1,0,0,0,1677,1675,
        1,0,0,0,1678,1671,1,0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1680,
        1681,1,0,0,0,1681,211,1,0,0,0,1682,1680,1,0,0,0,1683,1687,3,216,
        108,0,1684,1686,3,648,324,0,1685,1684,1,0,0,0,1686,1689,1,0,0,0,
        1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,1691,1,0,0,0,1689,1687,
        1,0,0,0,1690,1683,1,0,0,0,1691,1694,1,0,0,0,1692,1690,1,0,0,0,1692,
        1693,1,0,0,0,1693,213,1,0,0,0,1694,1692,1,0,0,0,1695,1696,3,218,
        109,0,1696,215,1,0,0,0,1697,1700,3,218,109,0,1698,1700,3,204,102,
        0,1699,1697,1,0,0,0,1699,1698,1,0,0,0,1700,217,1,0,0,0,1701,1705,
        3,306,153,0,1702,1705,3,220,110,0,1703,1705,3,574,287,0,1704,1701,
        1,0,0,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,219,1,0,0,0,1706,
        1711,3,222,111,0,1707,1711,3,224,112,0,1708,1711,3,226,113,0,1709,
        1711,3,228,114,0,1710,1706,1,0,0,0,1710,1707,1,0,0,0,1710,1708,1,
        0,0,0,1710,1709,1,0,0,0,1711,221,1,0,0,0,1712,1713,3,234,117,0,1713,
        1714,3,646,323,0,1714,1716,1,0,0,0,1715,1712,1,0,0,0,1715,1716,1,
        0,0,0,1716,1745,1,0,0,0,1717,1718,3,236,118,0,1718,1719,3,646,323,
        0,1719,1721,1,0,0,0,1720,1717,1,0,0,0,1720,1721,1,0,0,0,1721,1722,
        1,0,0,0,1722,1723,5,177,0,0,1723,1724,3,646,323,0,1724,1726,3,240,
        120,0,1725,1727,3,646,323,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,
        1727,1729,1,0,0,0,1728,1730,3,250,125,0,1729,1728,1,0,0,0,1729,1730,
        1,0,0,0,1730,1746,1,0,0,0,1731,1732,5,177,0,0,1732,1733,3,646,323,
        0,1733,1738,3,240,120,0,1734,1736,3,646,323,0,1735,1734,1,0,0,0,
        1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1739,3,250,125,0,1738,1735,
        1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,0,0,1740,1742,3,646,323,
        0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1744,
        3,238,119,0,1744,1746,1,0,0,0,1745,1720,1,0,0,0,1745,1731,1,0,0,
        0,1746,1748,1,0,0,0,1747,1749,3,288,144,0,1748,1747,1,0,0,0,1748,
        1749,1,0,0,0,1749,1751,1,0,0,0,1750,1752,3,230,115,0,1751,1750,1,
        0,0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1755,3,652,326,0,
        1754,1753,1,0,0,0,1755,1756,1,0,0,0,1756,1754,1,0,0,0,1756,1757,
        1,0,0,0,1757,1758,1,0,0,0,1758,1759,5,78,0,0,1759,1760,3,646,323,
        0,1760,1762,5,177,0,0,1761,1763,3,232,116,0,1762,1761,1,0,0,0,1762,
        1763,1,0,0,0,1763,223,1,0,0,0,1764,1765,3,234,117,0,1765,1766,3,
        646,323,0,1766,1768,1,0,0,0,1767,1764,1,0,0,0,1767,1768,1,0,0,0,
        1768,1809,1,0,0,0,1769,1770,3,236,118,0,1770,1771,3,646,323,0,1771,
        1773,1,0,0,0,1772,1769,1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,0,
        0,1774,1775,5,91,0,0,1775,1776,3,646,323,0,1776,1781,3,242,121,0,
        1777,1779,3,646,323,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,
        1,0,0,0,1780,1782,3,250,125,0,1781,1778,1,0,0,0,1781,1782,1,0,0,
        0,1782,1787,1,0,0,0,1783,1785,3,646,323,0,1784,1783,1,0,0,0,1784,
        1785,1,0,0,0,1785,1786,1,0,0,0,1786,1788,3,246,123,0,1787,1784,1,
        0,0,0,1787,1788,1,0,0,0,1788,1810,1,0,0,0,1789,1790,5,91,0,0,1790,
        1791,3,646,323,0,1791,1796,3,242,121,0,1792,1794,3,646,323,0,1793,
        1792,1,0,0,0,1793,1794,1,0,0,0,1794,1795,1,0,0,0,1795,1797,3,250,
        125,0,1796,1793,1,0,0,0,1796,1797,1,0,0,0,1797,1802,1,0,0,0,1798,
        1800,3,646,323,0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,
        0,0,0,1801,1803,3,246,123,0,1802,1799,1,0,0,0,1802,1803,1,0,0,0,
        1803,1805,1,0,0,0,1804,1806,3,646,323,0,1805,1804,1,0,0,0,1805,1806,
        1,0,0,0,1806,1807,1,0,0,0,1807,1808,3,238,119,0,1808,1810,1,0,0,
        0,1809,1772,1,0,0,0,1809,1789,1,0,0,0,1810,1812,1,0,0,0,1811,1813,
        3,288,144,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1815,1,0,0,
        0,1814,1816,3,230,115,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,
        1818,1,0,0,0,1817,1819,3,652,326,0,1818,1817,1,0,0,0,1819,1820,1,
        0,0,0,1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,1822,1,0,0,0,1822,
        1823,5,78,0,0,1823,1824,3,646,323,0,1824,1826,5,91,0,0,1825,1827,
        3,232,116,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,225,1,0,0,0,
        1828,1829,3,234,117,0,1829,1830,3,646,323,0,1830,1832,1,0,0,0,1831,
        1828,1,0,0,0,1831,1832,1,0,0,0,1832,1874,1,0,0,0,1833,1834,3,236,
        118,0,1834,1835,3,646,323,0,1835,1837,1,0,0,0,1836,1833,1,0,0,0,
        1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,5,149,0,0,1839,1840,
        3,646,323,0,1840,1841,5,92,0,0,1841,1842,3,646,323,0,1842,1847,3,
        242,121,0,1843,1845,3,646,323,0,1844,1843,1,0,0,0,1844,1845,1,0,
        0,0,1845,1846,1,0,0,0,1846,1848,3,250,125,0,1847,1844,1,0,0,0,1847,
        1848,1,0,0,0,1848,1853,1,0,0,0,1849,1851,3,646,323,0,1850,1849,1,
        0,0,0,1850,1851,1,0,0,0,1851,1852,1,0,0,0,1852,1854,3,246,123,0,
        1853,1850,1,0,0,0,1853,1854,1,0,0,0,1854,1875,1,0,0,0,1855,1856,
        5,149,0,0,1856,1857,3,646,323,0,1857,1858,5,92,0,0,1858,1859,3,646,
        323,0,1859,1861,3,242,121,0,1860,1862,3,250,125,0,1861,1860,1,0,
        0,0,1861,1862,1,0,0,0,1862,1867,1,0,0,0,1863,1865,3,646,323,0,1864,
        1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1868,3,246,
        123,0,1867,1864,1,0,0,0,1867,1868,1,0,0,0,1868,1870,1,0,0,0,1869,
        1871,3,646,323,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1872,1,
        0,0,0,1872,1873,3,238,119,0,1873,1875,1,0,0,0,1874,1836,1,0,0,0,
        1874,1855,1,0,0,0,1875,1877,1,0,0,0,1876,1878,3,288,144,0,1877,1876,
        1,0,0,0,1877,1878,1,0,0,0,1878,1880,1,0,0,0,1879,1881,3,230,115,
        0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1884,
        3,652,326,0,1883,1882,1,0,0,0,1884,1885,1,0,0,0,1885,1883,1,0,0,
        0,1885,1886,1,0,0,0,1886,1887,1,0,0,0,1887,1888,5,78,0,0,1888,1889,
        3,646,323,0,1889,1891,5,149,0,0,1890,1892,3,232,116,0,1891,1890,
        1,0,0,0,1891,1892,1,0,0,0,1892,227,1,0,0,0,1893,1894,3,234,117,0,
        1894,1895,3,646,323,0,1895,1897,1,0,0,0,1896,1893,1,0,0,0,1896,1897,
        1,0,0,0,1897,1924,1,0,0,0,1898,1899,3,236,118,0,1899,1900,3,646,
        323,0,1900,1902,1,0,0,0,1901,1898,1,0,0,0,1901,1902,1,0,0,0,1902,
        1903,1,0,0,0,1903,1904,5,149,0,0,1904,1905,3,646,323,0,1905,1906,
        7,4,0,0,1906,1907,3,646,323,0,1907,1909,3,240,120,0,1908,1910,3,
        646,323,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,
        1911,1912,3,252,126,0,1912,1925,1,0,0,0,1913,1914,5,149,0,0,1914,
        1915,3,646,323,0,1915,1916,7,4,0,0,1916,1917,3,646,323,0,1917,1918,
        3,240,120,0,1918,1920,3,252,126,0,1919,1921,3,646,323,0,1920,1919,
        1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,3,238,119,
        0,1923,1925,1,0,0,0,1924,1901,1,0,0,0,1924,1913,1,0,0,0,1925,1927,
        1,0,0,0,1926,1928,3,288,144,0,1927,1926,1,0,0,0,1927,1928,1,0,0,
        0,1928,1930,1,0,0,0,1929,1931,3,230,115,0,1930,1929,1,0,0,0,1930,
        1931,1,0,0,0,1931,1933,1,0,0,0,1932,1934,3,652,326,0,1933,1932,1,
        0,0,0,1934,1935,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,
        1937,1,0,0,0,1937,1938,5,78,0,0,1938,1939,3,646,323,0,1939,1941,
        5,149,0,0,1940,1942,3,232,116,0,1941,1940,1,0,0,0,1941,1942,1,0,
        0,0,1942,229,1,0,0,0,1943,1945,3,652,326,0,1944,1943,1,0,0,0,1945,
        1948,1,0,0,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,1949,1,0,0,
        0,1948,1946,1,0,0,0,1949,1950,3,650,325,0,1950,1951,3,296,148,0,
        1951,231,1,0,0,0,1952,1954,3,646,323,0,1953,1952,1,0,0,0,1953,1954,
        1,0,0,0,1954,1955,1,0,0,0,1955,1969,5,273,0,0,1956,1958,3,646,323,
        0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1969,
        3,656,328,0,1960,1962,5,279,0,0,1961,1960,1,0,0,0,1961,1962,1,0,
        0,0,1962,1963,1,0,0,0,1963,1965,5,277,0,0,1964,1966,5,279,0,0,1965,
        1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,1969,3,306,
        153,0,1968,1953,1,0,0,0,1968,1957,1,0,0,0,1968,1961,1,0,0,0,1969,
        233,1,0,0,0,1970,1971,7,5,0,0,1971,235,1,0,0,0,1972,1973,5,172,0,
        0,1973,237,1,0,0,0,1974,1975,5,172,0,0,1975,239,1,0,0,0,1976,1979,
        3,660,330,0,1977,1979,3,244,122,0,1978,1976,1,0,0,0,1978,1977,1,
        0,0,0,1979,241,1,0,0,0,1980,1984,3,694,347,0,1981,1984,3,660,330,
        0,1982,1984,3,244,122,0,1983,1980,1,0,0,0,1983,1981,1,0,0,0,1983,
        1982,1,0,0,0,1984,243,1,0,0,0,1985,1989,3,282,141,0,1986,1989,3,
        284,142,0,1987,1989,3,286,143,0,1988,1985,1,0,0,0,1988,1986,1,0,
        0,0,1988,1987,1,0,0,0,1989,245,1,0,0,0,1990,1991,5,10,0,0,1991,1992,
        3,646,323,0,1992,1994,3,638,319,0,1993,1995,3,646,323,0,1994,1993,
        1,0,0,0,1994,1995,1,0,0,0,1995,1997,1,0,0,0,1996,1998,3,248,124,
        0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,247,1,0,0,0,1999,2001,
        5,251,0,0,2000,2002,3,646,323,0,2001,2000,1,0,0,0,2001,2002,1,0,
        0,0,2002,2003,1,0,0,0,2003,2004,5,262,0,0,2004,249,1,0,0,0,2005,
        2007,5,251,0,0,2006,2008,3,646,323,0,2007,2006,1,0,0,0,2007,2008,
        1,0,0,0,2008,2010,1,0,0,0,2009,2011,3,254,127,0,2010,2009,1,0,0,
        0,2010,2011,1,0,0,0,2011,2013,1,0,0,0,2012,2014,3,646,323,0,2013,
        2012,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,2016,5,262,
        0,0,2016,251,1,0,0,0,2017,2019,5,251,0,0,2018,2020,3,646,323,0,2019,
        2018,1,0,0,0,2019,2020,1,0,0,0,2020,2029,1,0,0,0,2021,2023,3,254,
        127,0,2022,2024,3,646,323,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,
        2024,2025,1,0,0,0,2025,2027,5,242,0,0,2026,2028,3,646,323,0,2027,
        2026,1,0,0,0,2027,2028,1,0,0,0,2028,2030,1,0,0,0,2029,2021,1,0,0,
        0,2029,2030,1,0,0,0,2030,2031,1,0,0,0,2031,2033,3,260,130,0,2032,
        2034,3,646,323,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,
        0,0,0,2035,2036,5,262,0,0,2036,253,1,0,0,0,2037,2039,3,256,128,0,
        2038,2040,3,646,323,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,2041,
        1,0,0,0,2041,2043,5,242,0,0,2042,2044,3,646,323,0,2043,2042,1,0,
        0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,3,258,129,0,2046,
        2061,1,0,0,0,2047,2056,3,256,128,0,2048,2050,3,646,323,0,2049,2048,
        1,0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2053,5,242,0,0,
        2052,2054,3,646,323,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,
        1,0,0,0,2055,2057,3,266,133,0,2056,2049,1,0,0,0,2056,2057,1,0,0,
        0,2057,2061,1,0,0,0,2058,2061,3,258,129,0,2059,2061,3,266,133,0,
        2060,2037,1,0,0,0,2060,2047,1,0,0,0,2060,2058,1,0,0,0,2060,2059,
        1,0,0,0,2061,255,1,0,0,0,2062,2073,3,262,131,0,2063,2065,3,646,323,
        0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2068,
        5,242,0,0,2067,2069,3,646,323,0,2068,2067,1,0,0,0,2068,2069,1,0,
        0,0,2069,2070,1,0,0,0,2070,2072,3,262,131,0,2071,2064,1,0,0,0,2072,
        2075,1,0,0,0,2073,2071,1,0,0,0,2073,2074,1,0,0,0,2074,257,1,0,0,
        0,2075,2073,1,0,0,0,2076,2087,3,264,132,0,2077,2079,3,646,323,0,
        2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,
        5,242,0,0,2081,2083,3,646,323,0,2082,2081,1,0,0,0,2082,2083,1,0,
        0,0,2083,2084,1,0,0,0,2084,2086,3,264,132,0,2085,2078,1,0,0,0,2086,
        2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,259,1,0,0,
        0,2089,2087,1,0,0,0,2090,2091,3,262,131,0,2091,261,1,0,0,0,2092,
        2093,3,276,138,0,2093,2094,3,646,323,0,2094,2096,1,0,0,0,2095,2092,
        1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,2098,3,268,134,
        0,2098,263,1,0,0,0,2099,2100,3,274,137,0,2100,2101,3,646,323,0,2101,
        2103,3,268,134,0,2102,2104,3,646,323,0,2103,2102,1,0,0,0,2103,2104,
        1,0,0,0,2104,2106,1,0,0,0,2105,2107,3,280,140,0,2106,2105,1,0,0,
        0,2106,2107,1,0,0,0,2107,265,1,0,0,0,2108,2109,5,145,0,0,2109,2110,
        3,646,323,0,2110,2111,3,660,330,0,2111,2113,5,251,0,0,2112,2114,
        3,646,323,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,
        0,2115,2125,5,262,0,0,2116,2117,3,646,323,0,2117,2118,5,10,0,0,2118,
        2123,3,646,323,0,2119,2124,5,212,0,0,2120,2121,5,264,0,0,2121,2122,
        5,212,0,0,2122,2124,5,265,0,0,2123,2119,1,0,0,0,2123,2120,1,0,0,
        0,2124,2126,1,0,0,0,2125,2116,1,0,0,0,2125,2126,1,0,0,0,2126,267,
        1,0,0,0,2127,2130,3,270,135,0,2128,2130,3,272,136,0,2129,2127,1,
        0,0,0,2129,2128,1,0,0,0,2130,269,1,0,0,0,2131,2133,3,660,330,0,2132,
        2134,3,278,139,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,271,1,
        0,0,0,2135,2137,3,694,347,0,2136,2138,3,248,124,0,2137,2136,1,0,
        0,0,2137,2138,1,0,0,0,2138,273,1,0,0,0,2139,2143,5,142,0,0,2140,
        2141,3,646,323,0,2141,2142,3,276,138,0,2142,2144,1,0,0,0,2143,2140,
        1,0,0,0,2143,2144,1,0,0,0,2144,2150,1,0,0,0,2145,2146,3,276,138,
        0,2146,2147,3,646,323,0,2147,2148,5,142,0,0,2148,2150,1,0,0,0,2149,
        2139,1,0,0,0,2149,2145,1,0,0,0,2150,275,1,0,0,0,2151,2152,7,6,0,
        0,2152,277,1,0,0,0,2153,2155,3,248,124,0,2154,2153,1,0,0,0,2154,
        2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,3,646,323,0,2157,2158,5,
        10,0,0,2158,2161,3,646,323,0,2159,2162,3,638,319,0,2160,2162,5,6,
        0,0,2161,2159,1,0,0,0,2161,2160,1,0,0,0,2162,279,1,0,0,0,2163,2165,
        5,245,0,0,2164,2166,3,646,323,0,2165,2164,1,0,0,0,2165,2166,1,0,
        0,0,2166,2167,1,0,0,0,2167,2168,3,626,313,0,2168,281,1,0,0,0,2169,
        2170,3,660,330,0,2170,283,1,0,0,0,2171,2172,3,660,330,0,2172,285,
        1,0,0,0,2173,2174,7,7,0,0,2174,287,1,0,0,0,2175,2176,3,290,145,0,
        2176,289,1,0,0,0,2177,2179,3,292,146,0,2178,2177,1,0,0,0,2179,2180,
        1,0,0,0,2180,2178,1,0,0,0,2180,2181,1,0,0,0,2181,291,1,0,0,0,2182,
        2184,3,652,326,0,2183,2182,1,0,0,0,2184,2187,1,0,0,0,2185,2183,1,
        0,0,0,2185,2186,1,0,0,0,2186,2188,1,0,0,0,2187,2185,1,0,0,0,2188,
        2189,3,650,325,0,2189,2190,3,296,148,0,2190,2209,1,0,0,0,2191,2193,
        3,652,326,0,2192,2191,1,0,0,0,2193,2194,1,0,0,0,2194,2192,1,0,0,
        0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2197,3,306,153,0,2197,
        2209,1,0,0,0,2198,2209,3,294,147,0,2199,2201,3,652,326,0,2200,2199,
        1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,
        2205,1,0,0,0,2204,2202,1,0,0,0,2205,2206,3,650,325,0,2206,2207,3,
        574,287,0,2207,2209,1,0,0,0,2208,2185,1,0,0,0,2208,2192,1,0,0,0,
        2208,2198,1,0,0,0,2208,2202,1,0,0,0,2209,293,1,0,0,0,2210,2233,3,
        308,154,0,2211,2213,3,652,326,0,2212,2211,1,0,0,0,2213,2214,1,0,
        0,0,2214,2212,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,0,0,2216,2217,
        3,414,207,0,2217,2233,1,0,0,0,2218,2220,3,652,326,0,2219,2218,1,
        0,0,0,2220,2221,1,0,0,0,2221,2219,1,0,0,0,2221,2222,1,0,0,0,2222,
        2223,1,0,0,0,2223,2224,3,472,236,0,2224,2233,1,0,0,0,2225,2227,3,
        652,326,0,2226,2225,1,0,0,0,2227,2228,1,0,0,0,2228,2226,1,0,0,0,
        2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2231,3,484,242,0,2231,2233,
        1,0,0,0,2232,2210,1,0,0,0,2232,2212,1,0,0,0,2232,2219,1,0,0,0,2232,
        2226,1,0,0,0,2233,295,1,0,0,0,2234,2235,3,302,151,0,2235,2236,5,
        277,0,0,2236,2242,1,0,0,0,2237,2239,3,304,152,0,2238,2240,5,277,
        0,0,2239,2238,1,0,0,0,2239,2240,1,0,0,0,2240,2242,1,0,0,0,2241,2234,
        1,0,0,0,2241,2237,1,0,0,0,2242,297,1,0,0,0,2243,2246,3,302,151,0,
        2244,2246,3,304,152,0,2245,2243,1,0,0,0,2245,2244,1,0,0,0,2246,299,
        1,0,0,0,2247,2256,3,298,149,0,2248,2250,3,646,323,0,2249,2248,1,
        0,0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,0,2251,2253,5,242,0,0,2252,
        2254,3,646,323,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2255,1,
        0,0,0,2255,2257,3,298,149,0,2256,2249,1,0,0,0,2256,2257,1,0,0,0,
        2257,301,1,0,0,0,2258,2259,3,660,330,0,2259,303,1,0,0,0,2260,2261,
        5,268,0,0,2261,305,1,0,0,0,2262,2263,5,274,0,0,2263,307,1,0,0,0,
        2264,2266,3,652,326,0,2265,2264,1,0,0,0,2266,2269,1,0,0,0,2267,2265,
        1,0,0,0,2267,2268,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2270,
        2272,3,648,324,0,2271,2270,1,0,0,0,2272,2273,1,0,0,0,2273,2271,1,
        0,0,0,2273,2274,1,0,0,0,2274,2275,1,0,0,0,2275,2276,3,356,178,0,
        2276,2285,1,0,0,0,2277,2279,3,652,326,0,2278,2277,1,0,0,0,2279,2280,
        1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,2282,1,0,0,0,2282,
        2283,3,310,155,0,2283,2285,1,0,0,0,2284,2267,1,0,0,0,2284,2278,1,
        0,0,0,2285,309,1,0,0,0,2286,2308,3,312,156,0,2287,2308,3,314,157,
        0,2288,2308,3,316,158,0,2289,2308,3,344,172,0,2290,2308,3,346,173,
        0,2291,2308,3,354,177,0,2292,2308,3,362,181,0,2293,2308,3,374,187,
        0,2294,2308,3,386,193,0,2295,2308,3,388,194,0,2296,2308,3,390,195,
        0,2297,2308,3,392,196,0,2298,2308,3,394,197,0,2299,2308,3,396,198,
        0,2300,2308,3,334,167,0,2301,2308,3,398,199,0,2302,2308,3,400,200,
        0,2303,2308,3,402,201,0,2304,2308,3,404,202,0,2305,2308,3,410,205,
        0,2306,2308,3,412,206,0,2307,2286,1,0,0,0,2307,2287,1,0,0,0,2307,
        2288,1,0,0,0,2307,2289,1,0,0,0,2307,2290,1,0,0,0,2307,2291,1,0,0,
        0,2307,2292,1,0,0,0,2307,2293,1,0,0,0,2307,2294,1,0,0,0,2307,2295,
        1,0,0,0,2307,2296,1,0,0,0,2307,2297,1,0,0,0,2307,2298,1,0,0,0,2307,
        2299,1,0,0,0,2307,2300,1,0,0,0,2307,2301,1,0,0,0,2307,2302,1,0,0,
        0,2307,2303,1,0,0,0,2307,2304,1,0,0,0,2307,2305,1,0,0,0,2307,2306,
        1,0,0,0,2308,311,1,0,0,0,2309,2310,5,21,0,0,2310,2315,3,646,323,
        0,2311,2316,3,596,298,0,2312,2316,3,600,300,0,2313,2316,3,602,301,
        0,2314,2316,3,620,310,0,2315,2311,1,0,0,0,2315,2312,1,0,0,0,2315,
        2313,1,0,0,0,2315,2314,1,0,0,0,2316,2328,1,0,0,0,2317,2321,3,596,
        298,0,2318,2321,3,600,300,0,2319,2321,3,620,310,0,2320,2317,1,0,
        0,0,2320,2318,1,0,0,0,2320,2319,1,0,0,0,2321,2325,1,0,0,0,2322,2323,
        3,646,323,0,2323,2324,3,604,302,0,2324,2326,1,0,0,0,2325,2322,1,
        0,0,0,2325,2326,1,0,0,0,2326,2328,1,0,0,0,2327,2309,1,0,0,0,2327,
        2320,1,0,0,0,2328,313,1,0,0,0,2329,2330,5,216,0,0,2330,2331,3,646,
        323,0,2331,2333,3,630,315,0,2332,2334,3,290,145,0,2333,2332,1,0,
        0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,2337,3,652,326,0,2336,
        2335,1,0,0,0,2337,2338,1,0,0,0,2338,2336,1,0,0,0,2338,2339,1,0,0,
        0,2339,2340,1,0,0,0,2340,2341,5,215,0,0,2341,315,1,0,0,0,2342,2345,
        3,318,159,0,2343,2345,3,320,160,0,2344,2342,1,0,0,0,2344,2343,1,
        0,0,0,2345,317,1,0,0,0,2346,2348,3,324,162,0,2347,2349,3,290,145,
        0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2351,1,0,0,0,2350,2352,
        3,652,326,0,2351,2350,1,0,0,0,2352,2353,1,0,0,0,2353,2351,1,0,0,
        0,2353,2354,1,0,0,0,2354,2355,1,0,0,0,2355,2356,5,132,0,0,2356,319,
        1,0,0,0,2357,2359,3,324,162,0,2358,2360,3,290,145,0,2359,2358,1,
        0,0,0,2359,2360,1,0,0,0,2360,2362,1,0,0,0,2361,2363,3,652,326,0,
        2362,2361,1,0,0,0,2363,2364,1,0,0,0,2364,2362,1,0,0,0,2364,2365,
        1,0,0,0,2365,2373,1,0,0,0,2366,2374,5,132,0,0,2367,2369,3,322,161,
        0,2368,2370,3,646,323,0,2369,2368,1,0,0,0,2369,2370,1,0,0,0,2370,
        2371,1,0,0,0,2371,2372,5,242,0,0,2372,2374,1,0,0,0,2373,2366,1,0,
        0,0,2373,2367,1,0,0,0,2374,2375,1,0,0,0,2375,2376,3,646,323,0,2376,
        2377,3,636,318,0,2377,321,1,0,0,0,2378,2381,3,320,160,0,2379,2381,
        3,338,169,0,2380,2378,1,0,0,0,2380,2379,1,0,0,0,2381,323,1,0,0,0,
        2382,2383,5,90,0,0,2383,2384,3,646,323,0,2384,2386,3,636,318,0,2385,
        2387,3,646,323,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,
        0,0,0,2388,2390,5,245,0,0,2389,2391,3,646,323,0,2390,2389,1,0,0,
        0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,2393,3,326,163,0,2393,
        2394,3,646,323,0,2394,2395,5,181,0,0,2395,2396,3,646,323,0,2396,
        2400,3,328,164,0,2397,2398,3,646,323,0,2398,2399,3,330,165,0,2399,
        2401,1,0,0,0,2400,2397,1,0,0,0,2400,2401,1,0,0,0,2401,325,1,0,0,
        0,2402,2403,3,580,290,0,2403,327,1,0,0,0,2404,2405,3,580,290,0,2405,
        329,1,0,0,0,2406,2407,5,173,0,0,2407,2408,3,646,323,0,2408,2409,
        3,332,166,0,2409,331,1,0,0,0,2410,2411,3,580,290,0,2411,333,1,0,
        0,0,2412,2415,3,336,168,0,2413,2415,3,338,169,0,2414,2412,1,0,0,
        0,2414,2413,1,0,0,0,2415,335,1,0,0,0,2416,2418,3,340,170,0,2417,
        2419,3,290,145,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,2421,1,
        0,0,0,2420,2422,3,652,326,0,2421,2420,1,0,0,0,2422,2423,1,0,0,0,
        2423,2421,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,
        5,132,0,0,2426,337,1,0,0,0,2427,2429,3,340,170,0,2428,2430,3,290,
        145,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2431,1,0,0,0,2431,
        2439,3,652,326,0,2432,2440,5,132,0,0,2433,2435,3,322,161,0,2434,
        2436,3,646,323,0,2435,2434,1,0,0,0,2435,2436,1,0,0,0,2436,2437,1,
        0,0,0,2437,2438,5,242,0,0,2438,2440,1,0,0,0,2439,2432,1,0,0,0,2439,
        2433,1,0,0,0,2440,2441,1,0,0,0,2441,2442,3,646,323,0,2442,2443,3,
        636,318,0,2443,339,1,0,0,0,2444,2445,5,90,0,0,2445,2446,3,646,323,
        0,2446,2448,5,73,0,0,2447,2449,3,646,323,0,2448,2447,1,0,0,0,2448,
        2449,1,0,0,0,2449,2450,1,0,0,0,2450,2452,3,636,318,0,2451,2453,3,
        646,323,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,2453,2454,1,0,0,0,
        2454,2456,5,100,0,0,2455,2457,3,646,323,0,2456,2455,1,0,0,0,2456,
        2457,1,0,0,0,2457,2458,1,0,0,0,2458,2459,3,342,171,0,2459,341,1,
        0,0,0,2460,2461,3,580,290,0,2461,343,1,0,0,0,2462,2463,5,85,0,0,
        2463,2464,3,646,323,0,2464,2465,5,90,0,0,2465,345,1,0,0,0,2466,2471,
        5,69,0,0,2467,2469,3,646,323,0,2468,2467,1,0,0,0,2468,2469,1,0,0,
        0,2469,2470,1,0,0,0,2470,2472,3,348,174,0,2471,2468,1,0,0,0,2471,
        2472,1,0,0,0,2472,2474,1,0,0,0,2473,2475,3,290,145,0,2474,2473,1,
        0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,2478,3,652,326,0,
        2477,2476,1,0,0,0,2478,2479,1,0,0,0,2479,2477,1,0,0,0,2479,2480,
        1,0,0,0,2480,2481,1,0,0,0,2481,2486,5,123,0,0,2482,2484,3,646,323,
        0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,2485,1,0,0,0,2485,2487,
        3,348,174,0,2486,2483,1,0,0,0,2486,2487,1,0,0,0,2487,347,1,0,0,0,
        2488,2491,3,350,175,0,2489,2491,3,352,176,0,2490,2488,1,0,0,0,2490,
        2489,1,0,0,0,2491,349,1,0,0,0,2492,2494,5,216,0,0,2493,2495,3,646,
        323,0,2494,2493,1,0,0,0,2494,2495,1,0,0,0,2495,2496,1,0,0,0,2496,
        2497,3,630,315,0,2497,351,1,0,0,0,2498,2500,5,187,0,0,2499,2501,
        3,646,323,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2502,1,0,0,
        0,2502,2503,3,630,315,0,2503,353,1,0,0,0,2504,2505,5,85,0,0,2505,
        2506,3,646,323,0,2506,2507,5,69,0,0,2507,355,1,0,0,0,2508,2510,5,
        97,0,0,2509,2511,3,646,323,0,2510,2509,1,0,0,0,2510,2511,1,0,0,0,
        2511,2512,1,0,0,0,2512,2514,3,630,315,0,2513,2515,3,646,323,0,2514,
        2513,1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2518,5,180,
        0,0,2517,2519,3,290,145,0,2518,2517,1,0,0,0,2518,2519,1,0,0,0,2519,
        2523,1,0,0,0,2520,2522,3,358,179,0,2521,2520,1,0,0,0,2522,2525,1,
        0,0,0,2523,2521,1,0,0,0,2523,2524,1,0,0,0,2524,2527,1,0,0,0,2525,
        2523,1,0,0,0,2526,2528,3,360,180,0,2527,2526,1,0,0,0,2527,2528,1,
        0,0,0,2528,2530,1,0,0,0,2529,2531,3,652,326,0,2530,2529,1,0,0,0,
        2531,2532,1,0,0,0,2532,2530,1,0,0,0,2532,2533,1,0,0,0,2533,2539,
        1,0,0,0,2534,2535,5,78,0,0,2535,2536,3,646,323,0,2536,2537,5,97,
        0,0,2537,2540,1,0,0,0,2538,2540,5,77,0,0,2539,2534,1,0,0,0,2539,
        2538,1,0,0,0,2540,357,1,0,0,0,2541,2543,3,652,326,0,2542,2541,1,
        0,0,0,2543,2546,1,0,0,0,2544,2542,1,0,0,0,2544,2545,1,0,0,0,2545,
        2547,1,0,0,0,2546,2544,1,0,0,0,2547,2548,3,648,324,0,2548,2550,5,
        75,0,0,2549,2551,3,646,323,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,
        2551,2552,1,0,0,0,2552,2554,3,630,315,0,2553,2555,3,646,323,0,2554,
        2553,1,0,0,0,2554,2555,1,0,0,0,2555,2556,1,0,0,0,2556,2558,5,180,
        0,0,2557,2559,3,648,324,0,2558,2557,1,0,0,0,2558,2559,1,0,0,0,2559,
        2561,1,0,0,0,2560,2562,3,290,145,0,2561,2560,1,0,0,0,2561,2562,1,
        0,0,0,2562,2582,1,0,0,0,2563,2565,3,652,326,0,2564,2563,1,0,0,0,
        2565,2568,1,0,0,0,2566,2564,1,0,0,0,2566,2567,1,0,0,0,2567,2569,
        1,0,0,0,2568,2566,1,0,0,0,2569,2571,5,75,0,0,2570,2572,3,646,323,
        0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,2572,2573,1,0,0,0,2573,2575,
        3,630,315,0,2574,2576,3,646,323,0,2575,2574,1,0,0,0,2575,2576,1,
        0,0,0,2576,2577,1,0,0,0,2577,2579,5,180,0,0,2578,2580,3,290,145,
        0,2579,2578,1,0,0,0,2579,2580,1,0,0,0,2580,2582,1,0,0,0,2581,2544,
        1,0,0,0,2581,2566,1,0,0,0,2582,359,1,0,0,0,2583,2585,3,648,324,0,
        2584,2583,1,0,0,0,2585,2586,1,0,0,0,2586,2584,1,0,0,0,2586,2587,
        1,0,0,0,2587,2588,1,0,0,0,2588,2590,5,74,0,0,2589,2591,3,648,324,
        0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,2594,
        3,646,323,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2596,1,0,0,
        0,2595,2597,3,290,145,0,2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,
        361,1,0,0,0,2598,2601,3,364,182,0,2599,2601,3,366,183,0,2600,2598,
        1,0,0,0,2600,2599,1,0,0,0,2601,363,1,0,0,0,2602,2603,5,97,0,0,2603,
        2604,3,646,323,0,2604,2605,3,630,315,0,2605,2606,3,646,323,0,2606,
        2607,5,180,0,0,2607,2608,3,646,323,0,2608,2612,3,370,185,0,2609,
        2610,3,646,323,0,2610,2611,3,368,184,0,2611,2613,1,0,0,0,2612,2609,
        1,0,0,0,2612,2613,1,0,0,0,2613,365,1,0,0,0,2614,2615,5,97,0,0,2615,
        2616,3,646,323,0,2616,2617,3,630,315,0,2617,2618,3,646,323,0,2618,
        2619,5,180,0,0,2619,2620,3,646,323,0,2620,2621,3,368,184,0,2621,
        367,1,0,0,0,2622,2624,5,74,0,0,2623,2625,3,646,323,0,2624,2623,1,
        0,0,0,2624,2625,1,0,0,0,2625,2627,1,0,0,0,2626,2628,3,370,185,0,
        2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,369,1,0,0,0,2629,2639,3,
        298,149,0,2630,2632,5,277,0,0,2631,2633,3,646,323,0,2632,2631,1,
        0,0,0,2632,2633,1,0,0,0,2633,2635,1,0,0,0,2634,2636,3,372,186,0,
        2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2638,1,0,0,0,2637,2630,
        1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,1,0,0,0,2640,
        2659,1,0,0,0,2641,2639,1,0,0,0,2642,2644,5,277,0,0,2643,2642,1,0,
        0,0,2643,2644,1,0,0,0,2644,2645,1,0,0,0,2645,2655,3,372,186,0,2646,
        2648,5,277,0,0,2647,2649,3,646,323,0,2648,2647,1,0,0,0,2648,2649,
        1,0,0,0,2649,2651,1,0,0,0,2650,2652,3,372,186,0,2651,2650,1,0,0,
        0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,2646,1,0,0,0,2654,2657,
        1,0,0,0,2655,2653,1,0,0,0,2655,2656,1,0,0,0,2656,2659,1,0,0,0,2657,
        2655,1,0,0,0,2658,2629,1,0,0,0,2658,2643,1,0,0,0,2659,371,1,0,0,
        0,2660,2665,3,484,242,0,2661,2665,3,472,236,0,2662,2665,3,414,207,
        0,2663,2665,3,310,155,0,2664,2660,1,0,0,0,2664,2661,1,0,0,0,2664,
        2662,1,0,0,0,2664,2663,1,0,0,0,2665,373,1,0,0,0,2666,2667,5,165,
        0,0,2667,2668,3,646,323,0,2668,2669,5,22,0,0,2669,2670,3,646,323,
        0,2670,2674,3,382,191,0,2671,2673,3,376,188,0,2672,2671,1,0,0,0,
        2673,2676,1,0,0,0,2674,2672,1,0,0,0,2674,2675,1,0,0,0,2675,2678,
        1,0,0,0,2676,2674,1,0,0,0,2677,2679,3,378,189,0,2678,2677,1,0,0,
        0,2678,2679,1,0,0,0,2679,2681,1,0,0,0,2680,2682,3,652,326,0,2681,
        2680,1,0,0,0,2682,2683,1,0,0,0,2683,2681,1,0,0,0,2683,2684,1,0,0,
        0,2684,2685,1,0,0,0,2685,2686,5,78,0,0,2686,2687,3,646,323,0,2687,
        2688,5,165,0,0,2688,375,1,0,0,0,2689,2691,3,652,326,0,2690,2689,
        1,0,0,0,2691,2692,1,0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,0,2693,
        2694,1,0,0,0,2694,2696,5,22,0,0,2695,2697,3,646,323,0,2696,2695,
        1,0,0,0,2696,2697,1,0,0,0,2697,2698,1,0,0,0,2698,2709,3,380,190,
        0,2699,2701,3,646,323,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,
        2702,1,0,0,0,2702,2704,5,242,0,0,2703,2705,3,646,323,0,2704,2703,
        1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,0,0,2706,2708,3,380,190,
        0,2707,2700,1,0,0,0,2708,2711,1,0,0,0,2709,2707,1,0,0,0,2709,2710,
        1,0,0,0,2710,2713,1,0,0,0,2711,2709,1,0,0,0,2712,2714,3,290,145,
        0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,377,1,0,0,0,2715,2717,
        3,652,326,0,2716,2715,1,0,0,0,2717,2718,1,0,0,0,2718,2716,1,0,0,
        0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2721,5,22,0,0,2721,2722,
        3,646,323,0,2722,2724,5,74,0,0,2723,2725,3,290,145,0,2724,2723,1,
        0,0,0,2724,2725,1,0,0,0,2725,379,1,0,0,0,2726,2748,3,580,290,0,2727,
        2729,3,326,163,0,2728,2730,3,646,323,0,2729,2728,1,0,0,0,2729,2730,
        1,0,0,0,2730,2731,1,0,0,0,2731,2733,5,181,0,0,2732,2734,3,646,323,
        0,2733,2732,1,0,0,0,2733,2734,1,0,0,0,2734,2735,1,0,0,0,2735,2736,
        3,328,164,0,2736,2748,1,0,0,0,2737,2739,5,104,0,0,2738,2737,1,0,
        0,0,2738,2739,1,0,0,0,2739,2740,1,0,0,0,2740,2741,3,646,323,0,2741,
        2743,3,384,192,0,2742,2744,3,646,323,0,2743,2742,1,0,0,0,2743,2744,
        1,0,0,0,2744,2745,1,0,0,0,2745,2746,3,580,290,0,2746,2748,1,0,0,
        0,2747,2726,1,0,0,0,2747,2727,1,0,0,0,2747,2738,1,0,0,0,2748,381,
        1,0,0,0,2749,2750,3,580,290,0,2750,383,1,0,0,0,2751,2752,7,8,0,0,
        2752,385,1,0,0,0,2753,2754,5,174,0,0,2754,387,1,0,0,0,2755,2756,
        5,94,0,0,2756,2757,3,646,323,0,2757,2758,5,181,0,0,2758,2761,1,0,
        0,0,2759,2761,5,96,0,0,2760,2755,1,0,0,0,2760,2759,1,0,0,0,2761,
        2762,1,0,0,0,2762,2763,3,646,323,0,2763,2764,3,298,149,0,2764,389,
        1,0,0,0,2765,2767,5,139,0,0,2766,2768,3,646,323,0,2767,2766,1,0,
        0,0,2767,2768,1,0,0,0,2768,2769,1,0,0,0,2769,2770,3,580,290,0,2770,
        2771,5,96,0,0,2771,2772,3,646,323,0,2772,2773,3,300,150,0,2773,391,
        1,0,0,0,2774,2775,5,94,0,0,2775,2776,3,646,323,0,2776,2777,5,177,
        0,0,2777,2780,1,0,0,0,2778,2780,5,95,0,0,2779,2774,1,0,0,0,2779,
        2778,1,0,0,0,2780,2781,1,0,0,0,2781,2782,3,646,323,0,2782,2783,3,
        298,149,0,2783,393,1,0,0,0,2784,2785,5,161,0,0,2785,395,1,0,0,0,
        2786,2788,5,139,0,0,2787,2789,3,646,323,0,2788,2787,1,0,0,0,2788,
        2789,1,0,0,0,2789,2790,1,0,0,0,2790,2792,3,580,290,0,2791,2793,3,
        646,323,0,2792,2791,1,0,0,0,2792,2793,1,0,0,0,2793,2794,1,0,0,0,
        2794,2795,5,95,0,0,2795,2796,3,646,323,0,2796,2797,3,300,150,0,2797,
        397,1,0,0,0,2798,2799,5,85,0,0,2799,2800,3,646,323,0,2800,2801,5,
        177,0,0,2801,399,1,0,0,0,2802,2803,5,85,0,0,2803,2804,3,646,323,
        0,2804,2805,5,91,0,0,2805,401,1,0,0,0,2806,2807,5,85,0,0,2807,2808,
        3,646,323,0,2808,2809,5,149,0,0,2809,403,1,0,0,0,2810,2812,5,155,
        0,0,2811,2813,3,646,323,0,2812,2811,1,0,0,0,2812,2813,1,0,0,0,2813,
        2814,1,0,0,0,2814,2816,3,660,330,0,2815,2817,3,646,323,0,2816,2815,
        1,0,0,0,2816,2817,1,0,0,0,2817,2828,1,0,0,0,2818,2820,5,251,0,0,
        2819,2821,3,646,323,0,2820,2819,1,0,0,0,2820,2821,1,0,0,0,2821,2822,
        1,0,0,0,2822,2824,3,406,203,0,2823,2825,3,646,323,0,2824,2823,1,
        0,0,0,2824,2825,1,0,0,0,2825,2826,1,0,0,0,2826,2827,5,262,0,0,2827,
        2829,1,0,0,0,2828,2818,1,0,0,0,2828,2829,1,0,0,0,2829,405,1,0,0,
        0,2830,2841,3,408,204,0,2831,2833,3,646,323,0,2832,2831,1,0,0,0,
        2832,2833,1,0,0,0,2833,2834,1,0,0,0,2834,2836,5,242,0,0,2835,2837,
        3,646,323,0,2836,2835,1,0,0,0,2836,2837,1,0,0,0,2837,2838,1,0,0,
        0,2838,2840,3,408,204,0,2839,2832,1,0,0,0,2840,2843,1,0,0,0,2841,
        2839,1,0,0,0,2841,2842,1,0,0,0,2842,2845,1,0,0,0,2843,2841,1,0,0,
        0,2844,2830,1,0,0,0,2844,2845,1,0,0,0,2845,407,1,0,0,0,2846,2847,
        3,580,290,0,2847,409,1,0,0,0,2848,2850,5,218,0,0,2849,2851,3,646,
        323,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,2852,1,0,0,0,2852,
        2854,3,580,290,0,2853,2855,3,290,145,0,2854,2853,1,0,0,0,2854,2855,
        1,0,0,0,2855,2857,1,0,0,0,2856,2858,3,652,326,0,2857,2856,1,0,0,
        0,2858,2859,1,0,0,0,2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,2861,
        1,0,0,0,2861,2862,5,78,0,0,2862,2863,3,646,323,0,2863,2864,5,218,
        0,0,2864,411,1,0,0,0,2865,2866,5,78,0,0,2866,413,1,0,0,0,2867,2878,
        3,416,208,0,2868,2878,3,418,209,0,2869,2878,3,420,210,0,2870,2878,
        3,422,211,0,2871,2878,3,448,224,0,2872,2878,3,454,227,0,2873,2878,
        3,466,233,0,2874,2878,3,464,232,0,2875,2878,3,468,234,0,2876,2878,
        3,470,235,0,2877,2867,1,0,0,0,2877,2868,1,0,0,0,2877,2869,1,0,0,
        0,2877,2870,1,0,0,0,2877,2871,1,0,0,0,2877,2872,1,0,0,0,2877,2873,
        1,0,0,0,2877,2874,1,0,0,0,2877,2875,1,0,0,0,2877,2876,1,0,0,0,2878,
        415,1,0,0,0,2879,2881,5,68,0,0,2880,2882,3,646,323,0,2881,2880,1,
        0,0,0,2881,2882,1,0,0,0,2882,2884,1,0,0,0,2883,2885,5,168,0,0,2884,
        2883,1,0,0,0,2884,2885,1,0,0,0,2885,2887,1,0,0,0,2886,2888,3,646,
        323,0,2887,2886,1,0,0,0,2887,2888,1,0,0,0,2888,2889,1,0,0,0,2889,
        2890,3,98,49,0,2890,417,1,0,0,0,2891,2892,5,172,0,0,2892,2893,3,
        646,323,0,2893,2894,3,98,49,0,2894,419,1,0,0,0,2895,2896,3,142,71,
        0,2896,421,1,0,0,0,2897,2901,5,157,0,0,2898,2899,3,646,323,0,2899,
        2900,5,146,0,0,2900,2902,1,0,0,0,2901,2898,1,0,0,0,2901,2902,1,0,
        0,0,2902,2904,1,0,0,0,2903,2905,3,646,323,0,2904,2903,1,0,0,0,2904,
        2905,1,0,0,0,2905,2906,1,0,0,0,2906,2907,3,424,212,0,2907,423,1,
        0,0,0,2908,2919,3,426,213,0,2909,2911,3,646,323,0,2910,2909,1,0,
        0,0,2910,2911,1,0,0,0,2911,2912,1,0,0,0,2912,2914,5,242,0,0,2913,
        2915,3,646,323,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,2916,1,
        0,0,0,2916,2918,3,426,213,0,2917,2910,1,0,0,0,2918,2921,1,0,0,0,
        2919,2917,1,0,0,0,2919,2920,1,0,0,0,2920,425,1,0,0,0,2921,2919,1,
        0,0,0,2922,2927,3,428,214,0,2923,2927,3,430,215,0,2924,2927,3,432,
        216,0,2925,2927,3,434,217,0,2926,2922,1,0,0,0,2926,2923,1,0,0,0,
        2926,2924,1,0,0,0,2926,2925,1,0,0,0,2927,427,1,0,0,0,2928,2930,3,
        694,347,0,2929,2931,3,646,323,0,2930,2929,1,0,0,0,2930,2931,1,0,
        0,0,2931,2932,1,0,0,0,2932,2933,3,436,218,0,2933,429,1,0,0,0,2934,
        2936,3,40,20,0,2935,2937,3,646,323,0,2936,2935,1,0,0,0,2936,2937,
        1,0,0,0,2937,2938,1,0,0,0,2938,2939,3,446,223,0,2939,431,1,0,0,0,
        2940,2942,3,620,310,0,2941,2943,3,646,323,0,2942,2941,1,0,0,0,2942,
        2943,1,0,0,0,2943,2944,1,0,0,0,2944,2945,3,436,218,0,2945,433,1,
        0,0,0,2946,2948,3,600,300,0,2947,2949,3,646,323,0,2948,2947,1,0,
        0,0,2948,2949,1,0,0,0,2949,2950,1,0,0,0,2950,2951,3,436,218,0,2951,
        435,1,0,0,0,2952,2954,5,251,0,0,2953,2955,3,646,323,0,2954,2953,
        1,0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,2956,2958,3,438,219,
        0,2957,2959,3,646,323,0,2958,2957,1,0,0,0,2958,2959,1,0,0,0,2959,
        2960,1,0,0,0,2960,2961,5,262,0,0,2961,437,1,0,0,0,2962,2973,3,440,
        220,0,2963,2965,3,646,323,0,2964,2963,1,0,0,0,2964,2965,1,0,0,0,
        2965,2966,1,0,0,0,2966,2968,5,242,0,0,2967,2969,3,646,323,0,2968,
        2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,0,2970,2972,3,440,
        220,0,2971,2964,1,0,0,0,2972,2975,1,0,0,0,2973,2971,1,0,0,0,2973,
        2974,1,0,0,0,2974,439,1,0,0,0,2975,2973,1,0,0,0,2976,2977,3,442,
        221,0,2977,2978,3,646,323,0,2978,2980,1,0,0,0,2979,2976,1,0,0,0,
        2979,2980,1,0,0,0,2980,2981,1,0,0,0,2981,2982,3,444,222,0,2982,441,
        1,0,0,0,2983,2985,3,632,316,0,2984,2986,3,646,323,0,2985,2984,1,
        0,0,0,2985,2986,1,0,0,0,2986,2987,1,0,0,0,2987,2988,5,181,0,0,2988,
        443,1,0,0,0,2989,2990,3,632,316,0,2990,445,1,0,0,0,2991,2993,3,436,
        218,0,2992,2994,3,646,323,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,
        2994,2996,1,0,0,0,2995,2997,3,108,54,0,2996,2995,1,0,0,0,2996,2997,
        1,0,0,0,2997,447,1,0,0,0,2998,3000,5,82,0,0,2999,3001,3,646,323,
        0,3000,2999,1,0,0,0,3000,3001,1,0,0,0,3001,3002,1,0,0,0,3002,3003,
        3,450,225,0,3003,449,1,0,0,0,3004,3015,3,452,226,0,3005,3007,3,646,
        323,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3008,1,0,0,0,3008,
        3010,5,242,0,0,3009,3011,3,646,323,0,3010,3009,1,0,0,0,3010,3011,
        1,0,0,0,3011,3012,1,0,0,0,3012,3014,3,452,226,0,3013,3006,1,0,0,
        0,3014,3017,1,0,0,0,3015,3013,1,0,0,0,3015,3016,1,0,0,0,3016,451,
        1,0,0,0,3017,3015,1,0,0,0,3018,3019,3,582,291,0,3019,453,1,0,0,0,
        3020,3022,3,456,228,0,3021,3023,3,646,323,0,3022,3021,1,0,0,0,3022,
        3023,1,0,0,0,3023,3024,1,0,0,0,3024,3026,5,251,0,0,3025,3027,3,646,
        323,0,3026,3025,1,0,0,0,3026,3027,1,0,0,0,3027,3028,1,0,0,0,3028,
        3030,3,458,229,0,3029,3031,3,646,323,0,3030,3029,1,0,0,0,3030,3031,
        1,0,0,0,3031,3032,1,0,0,0,3032,3034,5,242,0,0,3033,3035,3,646,323,
        0,3034,3033,1,0,0,0,3034,3035,1,0,0,0,3035,3036,1,0,0,0,3036,3038,
        3,460,230,0,3037,3039,3,646,323,0,3038,3037,1,0,0,0,3038,3039,1,
        0,0,0,3039,3045,1,0,0,0,3040,3042,5,242,0,0,3041,3043,3,646,323,
        0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3044,1,0,0,0,3044,3046,
        3,462,231,0,3045,3040,1,0,0,0,3045,3046,1,0,0,0,3046,3047,1,0,0,
        0,3047,3049,5,262,0,0,3048,3050,3,646,323,0,3049,3048,1,0,0,0,3049,
        3050,1,0,0,0,3050,3051,1,0,0,0,3051,3053,5,245,0,0,3052,3054,3,646,
        323,0,3053,3052,1,0,0,0,3053,3054,1,0,0,0,3054,3055,1,0,0,0,3055,
        3056,3,580,290,0,3056,455,1,0,0,0,3057,3058,7,9,0,0,3058,457,1,0,
        0,0,3059,3060,3,636,318,0,3060,459,1,0,0,0,3061,3062,3,632,316,0,
        3062,461,1,0,0,0,3063,3064,3,632,316,0,3064,463,1,0,0,0,3065,3067,
        5,124,0,0,3066,3068,3,646,323,0,3067,3066,1,0,0,0,3067,3068,1,0,
        0,0,3068,3069,1,0,0,0,3069,3071,3,636,318,0,3070,3072,3,646,323,
        0,3071,3070,1,0,0,0,3071,3072,1,0,0,0,3072,3073,1,0,0,0,3073,3075,
        5,245,0,0,3074,3076,3,646,323,0,3075,3074,1,0,0,0,3075,3076,1,0,
        0,0,3076,3077,1,0,0,0,3077,3078,3,580,290,0,3078,465,1,0,0,0,3079,
        3081,5,162,0,0,3080,3082,3,646,323,0,3081,3080,1,0,0,0,3081,3082,
        1,0,0,0,3082,3083,1,0,0,0,3083,3085,3,636,318,0,3084,3086,3,646,
        323,0,3085,3084,1,0,0,0,3085,3086,1,0,0,0,3086,3087,1,0,0,0,3087,
        3089,5,245,0,0,3088,3090,3,646,323,0,3089,3088,1,0,0,0,3089,3090,
        1,0,0,0,3090,3091,1,0,0,0,3091,3092,3,580,290,0,3092,467,1,0,0,0,
        3093,3094,5,111,0,0,3094,3096,3,646,323,0,3095,3093,1,0,0,0,3095,
        3096,1,0,0,0,3096,3097,1,0,0,0,3097,3099,3,582,291,0,3098,3100,3,
        646,323,0,3099,3098,1,0,0,0,3099,3100,1,0,0,0,3100,3101,1,0,0,0,
        3101,3103,5,245,0,0,3102,3104,3,646,323,0,3103,3102,1,0,0,0,3103,
        3104,1,0,0,0,3104,3105,1,0,0,0,3105,3106,3,580,290,0,3106,469,1,
        0,0,0,3107,3108,5,166,0,0,3108,3109,3,646,323,0,3109,3111,3,582,
        291,0,3110,3112,3,646,323,0,3111,3110,1,0,0,0,3111,3112,1,0,0,0,
        3112,3113,1,0,0,0,3113,3115,5,245,0,0,3114,3116,3,646,323,0,3115,
        3114,1,0,0,0,3115,3116,1,0,0,0,3116,3117,1,0,0,0,3117,3118,3,580,
        290,0,3118,471,1,0,0,0,3119,3123,3,474,237,0,3120,3123,3,478,239,
        0,3121,3123,3,480,240,0,3122,3119,1,0,0,0,3122,3120,1,0,0,0,3122,
        3121,1,0,0,0,3123,473,1,0,0,0,3124,3125,5,139,0,0,3125,3126,3,646,
        323,0,3126,3128,5,83,0,0,3127,3129,3,646,323,0,3128,3127,1,0,0,0,
        3128,3129,1,0,0,0,3129,3130,1,0,0,0,3130,3131,3,476,238,0,3131,475,
        1,0,0,0,3132,3133,5,160,0,0,3133,3134,3,646,323,0,3134,3135,5,132,
        0,0,3135,3142,1,0,0,0,3136,3138,5,96,0,0,3137,3139,3,646,323,0,3138,
        3137,1,0,0,0,3138,3139,1,0,0,0,3139,3140,1,0,0,0,3140,3142,3,298,
        149,0,3141,3132,1,0,0,0,3141,3136,1,0,0,0,3142,477,1,0,0,0,3143,
        3145,5,160,0,0,3144,3146,3,646,323,0,3145,3144,1,0,0,0,3145,3146,
        1,0,0,0,3146,3149,1,0,0,0,3147,3150,5,132,0,0,3148,3150,3,298,149,
        0,3149,3147,1,0,0,0,3149,3148,1,0,0,0,3149,3150,1,0,0,0,3150,479,
        1,0,0,0,3151,3152,5,83,0,0,3152,3153,3,646,323,0,3153,3154,3,482,
        241,0,3154,481,1,0,0,0,3155,3156,3,632,316,0,3156,483,1,0,0,0,3157,
        3170,3,486,243,0,3158,3170,3,510,255,0,3159,3170,3,514,257,0,3160,
        3170,3,518,259,0,3161,3170,3,526,263,0,3162,3170,3,528,264,0,3163,
        3170,3,532,266,0,3164,3170,3,536,268,0,3165,3170,3,556,278,0,3166,
        3170,3,558,279,0,3167,3170,3,564,282,0,3168,3170,3,570,285,0,3169,
        3157,1,0,0,0,3169,3158,1,0,0,0,3169,3159,1,0,0,0,3169,3160,1,0,0,
        0,3169,3161,1,0,0,0,3169,3162,1,0,0,0,3169,3163,1,0,0,0,3169,3164,
        1,0,0,0,3169,3165,1,0,0,0,3169,3166,1,0,0,0,3169,3167,1,0,0,0,3169,
        3168,1,0,0,0,3170,485,1,0,0,0,3171,3173,5,140,0,0,3172,3174,3,646,
        323,0,3173,3172,1,0,0,0,3173,3174,1,0,0,0,3174,3175,1,0,0,0,3175,
        3177,3,488,244,0,3176,3178,3,646,323,0,3177,3176,1,0,0,0,3177,3178,
        1,0,0,0,3178,3180,1,0,0,0,3179,3181,3,490,245,0,3180,3179,1,0,0,
        0,3180,3181,1,0,0,0,3181,3182,1,0,0,0,3182,3184,3,646,323,0,3183,
        3185,3,494,247,0,3184,3183,1,0,0,0,3184,3185,1,0,0,0,3185,3187,1,
        0,0,0,3186,3188,3,646,323,0,3187,3186,1,0,0,0,3187,3188,1,0,0,0,
        3188,3190,1,0,0,0,3189,3191,3,498,249,0,3190,3189,1,0,0,0,3190,3191,
        1,0,0,0,3191,3193,1,0,0,0,3192,3194,3,646,323,0,3193,3192,1,0,0,
        0,3193,3194,1,0,0,0,3194,3195,1,0,0,0,3195,3197,5,10,0,0,3196,3198,
        3,646,323,0,3197,3196,1,0,0,0,3197,3198,1,0,0,0,3198,3199,1,0,0,
        0,3199,3201,3,504,252,0,3200,3202,3,646,323,0,3201,3200,1,0,0,0,
        3201,3202,1,0,0,0,3202,3204,1,0,0,0,3203,3205,3,500,250,0,3204,3203,
        1,0,0,0,3204,3205,1,0,0,0,3205,487,1,0,0,0,3206,3207,3,580,290,0,
        3207,489,1,0,0,0,3208,3209,5,90,0,0,3209,3210,3,646,323,0,3210,3211,
        3,492,246,0,3211,491,1,0,0,0,3212,3213,7,10,0,0,3213,493,1,0,0,0,
        3214,3215,5,2,0,0,3215,3216,3,646,323,0,3216,3217,3,496,248,0,3217,
        495,1,0,0,0,3218,3225,5,156,0,0,3219,3225,5,220,0,0,3220,3221,5,
        156,0,0,3221,3222,3,646,323,0,3222,3223,5,220,0,0,3223,3225,1,0,
        0,0,3224,3218,1,0,0,0,3224,3219,1,0,0,0,3224,3220,1,0,0,0,3225,497,
        1,0,0,0,3226,3242,5,168,0,0,3227,3228,5,116,0,0,3228,3229,3,646,
        323,0,3229,3230,5,156,0,0,3230,3242,1,0,0,0,3231,3232,5,116,0,0,
        3232,3233,3,646,323,0,3233,3234,5,220,0,0,3234,3242,1,0,0,0,3235,
        3236,5,116,0,0,3236,3237,3,646,323,0,3237,3238,5,156,0,0,3238,3239,
        3,646,323,0,3239,3240,5,220,0,0,3240,3242,1,0,0,0,3241,3226,1,0,
        0,0,3241,3227,1,0,0,0,3241,3231,1,0,0,0,3241,3235,1,0,0,0,3242,499,
        1,0,0,0,3243,3244,5,109,0,0,3244,3245,3,646,323,0,3245,3246,5,245,
        0,0,3246,3247,3,646,323,0,3247,3248,3,502,251,0,3248,501,1,0,0,0,
        3249,3250,3,580,290,0,3250,503,1,0,0,0,3251,3254,3,506,253,0,3252,
        3254,3,508,254,0,3253,3251,1,0,0,0,3253,3252,1,0,0,0,3254,505,1,
        0,0,0,3255,3256,5,249,0,0,3256,3257,3,580,290,0,3257,507,1,0,0,0,
        3258,3259,3,580,290,0,3259,509,1,0,0,0,3260,3269,5,159,0,0,3261,
        3263,5,40,0,0,3262,3264,3,646,323,0,3263,3262,1,0,0,0,3263,3264,
        1,0,0,0,3264,3266,1,0,0,0,3265,3267,3,512,256,0,3266,3265,1,0,0,
        0,3266,3267,1,0,0,0,3267,3269,1,0,0,0,3268,3260,1,0,0,0,3268,3261,
        1,0,0,0,3269,511,1,0,0,0,3270,3281,3,504,252,0,3271,3273,3,646,323,
        0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,3274,1,0,0,0,3274,3276,
        5,242,0,0,3275,3277,3,646,323,0,3276,3275,1,0,0,0,3276,3277,1,0,
        0,0,3277,3278,1,0,0,0,3278,3280,3,504,252,0,3279,3272,1,0,0,0,3280,
        3283,1,0,0,0,3281,3279,1,0,0,0,3281,3282,1,0,0,0,3282,513,1,0,0,
        0,3283,3281,1,0,0,0,3284,3285,5,164,0,0,3285,3286,3,646,323,0,3286,
        3288,3,504,252,0,3287,3289,3,646,323,0,3288,3287,1,0,0,0,3288,3289,
        1,0,0,0,3289,3290,1,0,0,0,3290,3292,5,242,0,0,3291,3293,3,646,323,
        0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3294,1,0,0,0,3294,3295,
        3,516,258,0,3295,515,1,0,0,0,3296,3297,3,580,290,0,3297,517,1,0,
        0,0,3298,3299,5,116,0,0,3299,3300,3,646,323,0,3300,3302,3,504,252,
        0,3301,3303,3,646,323,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,
        3304,1,0,0,0,3304,3306,5,242,0,0,3305,3307,3,646,323,0,3306,3305,
        1,0,0,0,3306,3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,3,520,260,
        0,3309,519,1,0,0,0,3310,3320,3,522,261,0,3311,3313,3,522,261,0,3312,
        3311,1,0,0,0,3312,3313,1,0,0,0,3313,3314,1,0,0,0,3314,3315,3,646,
        323,0,3315,3316,5,181,0,0,3316,3317,3,646,323,0,3317,3318,3,524,
        262,0,3318,3320,1,0,0,0,3319,3310,1,0,0,0,3319,3312,1,0,0,0,3320,
        521,1,0,0,0,3321,3322,3,580,290,0,3322,523,1,0,0,0,3323,3324,3,580,
        290,0,3324,525,1,0,0,0,3325,3326,5,186,0,0,3326,3327,3,646,323,0,
        3327,3336,3,504,252,0,3328,3330,3,646,323,0,3329,3328,1,0,0,0,3329,
        3330,1,0,0,0,3330,3331,1,0,0,0,3331,3333,5,242,0,0,3332,3334,3,646,
        323,0,3333,3332,1,0,0,0,3333,3334,1,0,0,0,3334,3335,1,0,0,0,3335,
        3337,3,520,260,0,3336,3329,1,0,0,0,3336,3337,1,0,0,0,3337,527,1,
        0,0,0,3338,3339,5,114,0,0,3339,3340,3,646,323,0,3340,3341,5,101,
        0,0,3341,3342,3,646,323,0,3342,3344,3,506,253,0,3343,3345,3,646,
        323,0,3344,3343,1,0,0,0,3344,3345,1,0,0,0,3345,3346,1,0,0,0,3346,
        3348,5,242,0,0,3347,3349,3,646,323,0,3348,3347,1,0,0,0,3348,3349,
        1,0,0,0,3349,3350,1,0,0,0,3350,3351,3,530,265,0,3351,529,1,0,0,0,
        3352,3353,3,634,317,0,3353,531,1,0,0,0,3354,3355,5,217,0,0,3355,
        3356,3,646,323,0,3356,3358,3,506,253,0,3357,3359,3,646,323,0,3358,
        3357,1,0,0,0,3358,3359,1,0,0,0,3359,3360,1,0,0,0,3360,3362,5,242,
        0,0,3361,3363,3,646,323,0,3362,3361,1,0,0,0,3362,3363,1,0,0,0,3363,
        3364,1,0,0,0,3364,3365,3,534,267,0,3365,533,1,0,0,0,3366,3367,3,
        580,290,0,3367,535,1,0,0,0,3368,3369,5,147,0,0,3369,3370,3,646,323,
        0,3370,3372,3,506,253,0,3371,3373,3,646,323,0,3372,3371,1,0,0,0,
        3372,3373,1,0,0,0,3373,3374,1,0,0,0,3374,3376,5,242,0,0,3375,3377,
        3,646,323,0,3376,3375,1,0,0,0,3376,3377,1,0,0,0,3377,3379,1,0,0,
        0,3378,3380,3,538,269,0,3379,3378,1,0,0,0,3379,3380,1,0,0,0,3380,
        537,1,0,0,0,3381,3383,3,540,270,0,3382,3381,1,0,0,0,3383,3384,1,
        0,0,0,3384,3382,1,0,0,0,3384,3385,1,0,0,0,3385,539,1,0,0,0,3386,
        3388,3,542,271,0,3387,3389,3,544,272,0,3388,3387,1,0,0,0,3388,3389,
        1,0,0,0,3389,3392,1,0,0,0,3390,3392,3,544,272,0,3391,3386,1,0,0,
        0,3391,3390,1,0,0,0,3392,541,1,0,0,0,3393,3397,3,548,274,0,3394,
        3397,3,552,276,0,3395,3397,3,546,273,0,3396,3393,1,0,0,0,3396,3394,
        1,0,0,0,3396,3395,1,0,0,0,3397,543,1,0,0,0,3398,3399,7,11,0,0,3399,
        545,1,0,0,0,3400,3401,3,580,290,0,3401,547,1,0,0,0,3402,3403,5,171,
        0,0,3403,3404,3,646,323,0,3404,3406,5,251,0,0,3405,3407,3,646,323,
        0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3408,1,0,0,0,3408,3410,
        3,550,275,0,3409,3411,3,646,323,0,3410,3409,1,0,0,0,3410,3411,1,
        0,0,0,3411,3412,1,0,0,0,3412,3413,5,262,0,0,3413,549,1,0,0,0,3414,
        3415,3,580,290,0,3415,551,1,0,0,0,3416,3417,5,178,0,0,3417,3418,
        3,646,323,0,3418,3420,5,251,0,0,3419,3421,3,646,323,0,3420,3419,
        1,0,0,0,3420,3421,1,0,0,0,3421,3422,1,0,0,0,3422,3424,3,554,277,
        0,3423,3425,3,646,323,0,3424,3423,1,0,0,0,3424,3425,1,0,0,0,3425,
        3426,1,0,0,0,3426,3427,5,262,0,0,3427,553,1,0,0,0,3428,3429,3,580,
        290,0,3429,555,1,0,0,0,3430,3431,5,220,0,0,3431,3432,3,646,323,0,
        3432,3434,3,506,253,0,3433,3435,3,646,323,0,3434,3433,1,0,0,0,3434,
        3435,1,0,0,0,3435,3436,1,0,0,0,3436,3438,5,242,0,0,3437,3439,3,646,
        323,0,3438,3437,1,0,0,0,3438,3439,1,0,0,0,3439,3441,1,0,0,0,3440,
        3442,3,538,269,0,3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,557,1,
        0,0,0,3443,3444,5,101,0,0,3444,3445,3,646,323,0,3445,3447,3,506,
        253,0,3446,3448,3,646,323,0,3447,3446,1,0,0,0,3447,3448,1,0,0,0,
        3448,3449,1,0,0,0,3449,3451,5,242,0,0,3450,3452,3,646,323,0,3451,
        3450,1,0,0,0,3451,3452,1,0,0,0,3452,3453,1,0,0,0,3453,3454,3,560,
        280,0,3454,559,1,0,0,0,3455,3466,3,562,281,0,3456,3458,3,646,323,
        0,3457,3456,1,0,0,0,3457,3458,1,0,0,0,3458,3459,1,0,0,0,3459,3461,
        5,242,0,0,3460,3462,3,646,323,0,3461,3460,1,0,0,0,3461,3462,1,0,
        0,0,3462,3463,1,0,0,0,3463,3465,3,562,281,0,3464,3457,1,0,0,0,3465,
        3468,1,0,0,0,3466,3464,1,0,0,0,3466,3467,1,0,0,0,3467,561,1,0,0,
        0,3468,3466,1,0,0,0,3469,3470,3,636,318,0,3470,563,1,0,0,0,3471,
        3472,5,153,0,0,3472,3473,3,646,323,0,3473,3475,3,504,252,0,3474,
        3476,3,646,323,0,3475,3474,1,0,0,0,3475,3476,1,0,0,0,3476,3477,1,
        0,0,0,3477,3479,5,242,0,0,3478,3480,3,646,323,0,3479,3478,1,0,0,
        0,3479,3480,1,0,0,0,3480,3482,1,0,0,0,3481,3483,3,566,283,0,3482,
        3481,1,0,0,0,3482,3483,1,0,0,0,3483,3485,1,0,0,0,3484,3486,3,646,
        323,0,3485,3484,1,0,0,0,3485,3486,1,0,0,0,3486,3487,1,0,0,0,3487,
        3489,5,242,0,0,3488,3490,3,646,323,0,3489,3488,1,0,0,0,3489,3490,
        1,0,0,0,3490,3491,1,0,0,0,3491,3492,3,568,284,0,3492,565,1,0,0,0,
        3493,3494,3,580,290,0,3494,567,1,0,0,0,3495,3496,3,580,290,0,3496,
        569,1,0,0,0,3497,3498,5,92,0,0,3498,3499,3,646,323,0,3499,3501,3,
        504,252,0,3500,3502,3,646,323,0,3501,3500,1,0,0,0,3501,3502,1,0,
        0,0,3502,3503,1,0,0,0,3503,3505,5,242,0,0,3504,3506,3,646,323,0,
        3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,3508,1,0,0,0,3507,3509,
        3,566,283,0,3508,3507,1,0,0,0,3508,3509,1,0,0,0,3509,3511,1,0,0,
        0,3510,3512,3,646,323,0,3511,3510,1,0,0,0,3511,3512,1,0,0,0,3512,
        3513,1,0,0,0,3513,3515,5,242,0,0,3514,3516,3,646,323,0,3515,3514,
        1,0,0,0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,3518,3,572,286,
        0,3518,571,1,0,0,0,3519,3520,3,634,317,0,3520,573,1,0,0,0,3521,3522,
        5,7,0,0,3522,3523,5,279,0,0,3523,3524,3,660,330,0,3524,3525,5,258,
        0,0,3525,3527,3,576,288,0,3526,3528,5,279,0,0,3527,3526,1,0,0,0,
        3527,3528,1,0,0,0,3528,3529,1,0,0,0,3529,3531,5,245,0,0,3530,3532,
        5,279,0,0,3531,3530,1,0,0,0,3531,3532,1,0,0,0,3532,3533,1,0,0,0,
        3533,3534,5,267,0,0,3534,3565,1,0,0,0,3535,3536,5,7,0,0,3536,3537,
        5,279,0,0,3537,3538,3,660,330,0,3538,3539,5,258,0,0,3539,3541,3,
        578,289,0,3540,3542,5,279,0,0,3541,3540,1,0,0,0,3541,3542,1,0,0,
        0,3542,3543,1,0,0,0,3543,3545,5,245,0,0,3544,3546,5,279,0,0,3545,
        3544,1,0,0,0,3545,3546,1,0,0,0,3546,3548,1,0,0,0,3547,3549,5,253,
        0,0,3548,3547,1,0,0,0,3548,3549,1,0,0,0,3549,3550,1,0,0,0,3550,3551,
        5,268,0,0,3551,3565,1,0,0,0,3552,3553,5,7,0,0,3553,3554,5,279,0,
        0,3554,3555,3,660,330,0,3555,3556,5,258,0,0,3556,3557,5,204,0,0,
        3557,3558,5,258,0,0,3558,3559,5,197,0,0,3559,3560,5,279,0,0,3560,
        3561,5,245,0,0,3561,3562,5,279,0,0,3562,3563,5,267,0,0,3563,3565,
        1,0,0,0,3564,3521,1,0,0,0,3564,3535,1,0,0,0,3564,3552,1,0,0,0,3565,
        575,1,0,0,0,3566,3567,7,12,0,0,3567,577,1,0,0,0,3568,3569,7,13,0,
        0,3569,579,1,0,0,0,3570,3571,6,290,-1,0,3571,3579,3,584,292,0,3572,
        3579,3,586,293,0,3573,3579,3,588,294,0,3574,3579,3,590,295,0,3575,
        3579,3,594,297,0,3576,3579,3,592,296,0,3577,3579,3,582,291,0,3578,
        3570,1,0,0,0,3578,3572,1,0,0,0,3578,3573,1,0,0,0,3578,3574,1,0,0,
        0,3578,3575,1,0,0,0,3578,3576,1,0,0,0,3578,3577,1,0,0,0,3579,3645,
        1,0,0,0,3580,3582,10,10,0,0,3581,3583,3,646,323,0,3582,3581,1,0,
        0,0,3582,3583,1,0,0,0,3583,3584,1,0,0,0,3584,3586,5,261,0,0,3585,
        3587,3,646,323,0,3586,3585,1,0,0,0,3586,3587,1,0,0,0,3587,3588,1,
        0,0,0,3588,3644,3,580,290,11,3589,3591,10,8,0,0,3590,3592,3,646,
        323,0,3591,3590,1,0,0,0,3591,3592,1,0,0,0,3592,3593,1,0,0,0,3593,
        3595,7,14,0,0,3594,3596,3,646,323,0,3595,3594,1,0,0,0,3595,3596,
        1,0,0,0,3596,3597,1,0,0,0,3597,3644,3,580,290,9,3598,3600,10,7,0,
        0,3599,3601,3,646,323,0,3600,3599,1,0,0,0,3600,3601,1,0,0,0,3601,
        3602,1,0,0,0,3602,3604,5,130,0,0,3603,3605,3,646,323,0,3604,3603,
        1,0,0,0,3604,3605,1,0,0,0,3605,3606,1,0,0,0,3606,3644,3,580,290,
        8,3607,3609,10,6,0,0,3608,3610,3,646,323,0,3609,3608,1,0,0,0,3609,
        3610,1,0,0,0,3610,3611,1,0,0,0,3611,3613,7,15,0,0,3612,3614,3,646,
        323,0,3613,3612,1,0,0,0,3613,3614,1,0,0,0,3614,3615,1,0,0,0,3615,
        3644,3,580,290,7,3616,3618,10,5,0,0,3617,3619,3,646,323,0,3618,3617,
        1,0,0,0,3618,3619,1,0,0,0,3619,3620,1,0,0,0,3620,3622,5,239,0,0,
        3621,3623,3,646,323,0,3622,3621,1,0,0,0,3622,3623,1,0,0,0,3623,3624,
        1,0,0,0,3624,3644,3,580,290,6,3625,3627,10,4,0,0,3626,3628,3,646,
        323,0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3629,1,0,0,0,3629,
        3631,7,16,0,0,3630,3632,3,646,323,0,3631,3630,1,0,0,0,3631,3632,
        1,0,0,0,3632,3633,1,0,0,0,3633,3644,3,580,290,5,3634,3636,10,2,0,
        0,3635,3637,3,646,323,0,3636,3635,1,0,0,0,3636,3637,1,0,0,0,3637,
        3638,1,0,0,0,3638,3640,7,17,0,0,3639,3641,3,646,323,0,3640,3639,
        1,0,0,0,3640,3641,1,0,0,0,3641,3642,1,0,0,0,3642,3644,3,580,290,
        3,3643,3580,1,0,0,0,3643,3589,1,0,0,0,3643,3598,1,0,0,0,3643,3607,
        1,0,0,0,3643,3616,1,0,0,0,3643,3625,1,0,0,0,3643,3634,1,0,0,0,3644,
        3647,1,0,0,0,3645,3643,1,0,0,0,3645,3646,1,0,0,0,3646,581,1,0,0,
        0,3647,3645,1,0,0,0,3648,3649,6,291,-1,0,3649,3653,3,596,298,0,3650,
        3653,3,598,299,0,3651,3653,3,620,310,0,3652,3648,1,0,0,0,3652,3650,
        1,0,0,0,3652,3651,1,0,0,0,3653,3719,1,0,0,0,3654,3655,10,7,0,0,3655,
        3657,5,258,0,0,3656,3658,3,646,323,0,3657,3656,1,0,0,0,3657,3658,
        1,0,0,0,3658,3659,1,0,0,0,3659,3718,3,36,18,0,3660,3662,10,6,0,0,
        3661,3663,3,646,323,0,3662,3661,1,0,0,0,3662,3663,1,0,0,0,3663,3664,
        1,0,0,0,3664,3666,5,272,0,0,3665,3667,3,646,323,0,3666,3665,1,0,
        0,0,3666,3667,1,0,0,0,3667,3668,1,0,0,0,3668,3670,5,258,0,0,3669,
        3671,3,646,323,0,3670,3669,1,0,0,0,3670,3671,1,0,0,0,3671,3672,1,
        0,0,0,3672,3718,3,36,18,0,3673,3675,10,5,0,0,3674,3676,3,646,323,
        0,3675,3674,1,0,0,0,3675,3676,1,0,0,0,3676,3677,1,0,0,0,3677,3679,
        5,251,0,0,3678,3680,3,646,323,0,3679,3678,1,0,0,0,3679,3680,1,0,
        0,0,3680,3681,1,0,0,0,3681,3683,3,604,302,0,3682,3684,3,646,323,
        0,3683,3682,1,0,0,0,3683,3684,1,0,0,0,3684,3685,1,0,0,0,3685,3686,
        5,262,0,0,3686,3718,1,0,0,0,3687,3688,10,4,0,0,3688,3689,5,246,0,
        0,3689,3718,3,36,18,0,3690,3692,10,3,0,0,3691,3693,3,646,323,0,3692,
        3691,1,0,0,0,3692,3693,1,0,0,0,3693,3694,1,0,0,0,3694,3696,5,272,
        0,0,3695,3697,3,646,323,0,3696,3695,1,0,0,0,3696,3697,1,0,0,0,3697,
        3698,1,0,0,0,3698,3699,5,246,0,0,3699,3718,3,36,18,0,3700,3702,10,
        2,0,0,3701,3703,3,646,323,0,3702,3701,1,0,0,0,3702,3703,1,0,0,0,
        3703,3704,1,0,0,0,3704,3706,5,272,0,0,3705,3707,3,646,323,0,3706,
        3705,1,0,0,0,3706,3707,1,0,0,0,3707,3708,1,0,0,0,3708,3710,5,246,
        0,0,3709,3711,3,646,323,0,3710,3709,1,0,0,0,3710,3711,1,0,0,0,3711,
        3712,1,0,0,0,3712,3714,5,272,0,0,3713,3715,3,646,323,0,3714,3713,
        1,0,0,0,3714,3715,1,0,0,0,3715,3716,1,0,0,0,3716,3718,3,36,18,0,
        3717,3654,1,0,0,0,3717,3660,1,0,0,0,3717,3673,1,0,0,0,3717,3687,
        1,0,0,0,3717,3690,1,0,0,0,3717,3700,1,0,0,0,3718,3721,1,0,0,0,3719,
        3717,1,0,0,0,3719,3720,1,0,0,0,3720,583,1,0,0,0,3721,3719,1,0,0,
        0,3722,3731,5,270,0,0,3723,3731,5,269,0,0,3724,3731,5,268,0,0,3725,
        3731,5,267,0,0,3726,3728,3,680,340,0,3727,3729,3,696,348,0,3728,
        3727,1,0,0,0,3728,3729,1,0,0,0,3729,3731,1,0,0,0,3730,3722,1,0,0,
        0,3730,3723,1,0,0,0,3730,3724,1,0,0,0,3730,3725,1,0,0,0,3730,3726,
        1,0,0,0,3731,585,1,0,0,0,3732,3734,5,251,0,0,3733,3735,3,646,323,
        0,3734,3733,1,0,0,0,3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3738,
        3,580,290,0,3737,3739,3,646,323,0,3738,3737,1,0,0,0,3738,3739,1,
        0,0,0,3739,3740,1,0,0,0,3740,3741,5,262,0,0,3741,587,1,0,0,0,3742,
        3744,5,184,0,0,3743,3745,3,646,323,0,3744,3743,1,0,0,0,3744,3745,
        1,0,0,0,3745,3746,1,0,0,0,3746,3748,3,580,290,0,3747,3749,3,646,
        323,0,3748,3747,1,0,0,0,3748,3749,1,0,0,0,3749,3750,1,0,0,0,3750,
        3752,5,104,0,0,3751,3753,3,646,323,0,3752,3751,1,0,0,0,3752,3753,
        1,0,0,0,3753,3754,1,0,0,0,3754,3755,3,638,319,0,3755,589,1,0,0,0,
        3756,3758,5,133,0,0,3757,3759,3,646,323,0,3758,3757,1,0,0,0,3758,
        3759,1,0,0,0,3759,3760,1,0,0,0,3760,3761,3,580,290,0,3761,591,1,
        0,0,0,3762,3764,5,134,0,0,3763,3765,3,646,323,0,3764,3763,1,0,0,
        0,3764,3765,1,0,0,0,3765,3766,1,0,0,0,3766,3767,3,580,290,0,3767,
        593,1,0,0,0,3768,3770,5,253,0,0,3769,3771,3,646,323,0,3770,3769,
        1,0,0,0,3770,3771,1,0,0,0,3771,3772,1,0,0,0,3772,3773,3,580,290,
        0,3773,595,1,0,0,0,3774,3778,3,38,19,0,3775,3778,3,670,335,0,3776,
        3778,3,672,336,0,3777,3774,1,0,0,0,3777,3775,1,0,0,0,3777,3776,1,
        0,0,0,3778,597,1,0,0,0,3779,3780,5,125,0,0,3780,599,1,0,0,0,3781,
        3782,3,582,291,0,3782,3784,5,258,0,0,3783,3785,3,646,323,0,3784,
        3783,1,0,0,0,3784,3785,1,0,0,0,3785,3786,1,0,0,0,3786,3787,3,36,
        18,0,3787,3803,1,0,0,0,3788,3790,3,582,291,0,3789,3791,3,646,323,
        0,3790,3789,1,0,0,0,3790,3791,1,0,0,0,3791,3792,1,0,0,0,3792,3794,
        5,272,0,0,3793,3795,3,646,323,0,3794,3793,1,0,0,0,3794,3795,1,0,
        0,0,3795,3796,1,0,0,0,3796,3798,5,258,0,0,3797,3799,3,646,323,0,
        3798,3797,1,0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,3801,
        3,36,18,0,3801,3803,1,0,0,0,3802,3781,1,0,0,0,3802,3788,1,0,0,0,
        3803,601,1,0,0,0,3804,3806,3,582,291,0,3805,3807,3,646,323,0,3806,
        3805,1,0,0,0,3806,3807,1,0,0,0,3807,3808,1,0,0,0,3808,3810,5,251,
        0,0,3809,3811,3,646,323,0,3810,3809,1,0,0,0,3810,3811,1,0,0,0,3811,
        3812,1,0,0,0,3812,3814,3,604,302,0,3813,3815,3,646,323,0,3814,3813,
        1,0,0,0,3814,3815,1,0,0,0,3815,3816,1,0,0,0,3816,3817,5,262,0,0,
        3817,603,1,0,0,0,3818,3820,3,606,303,0,3819,3818,1,0,0,0,3819,3820,
        1,0,0,0,3820,605,1,0,0,0,3821,3823,3,608,304,0,3822,3824,3,646,323,
        0,3823,3822,1,0,0,0,3823,3824,1,0,0,0,3824,3825,1,0,0,0,3825,3827,
        5,242,0,0,3826,3828,3,646,323,0,3827,3826,1,0,0,0,3827,3828,1,0,
        0,0,3828,3830,1,0,0,0,3829,3821,1,0,0,0,3830,3833,1,0,0,0,3831,3829,
        1,0,0,0,3831,3832,1,0,0,0,3832,3834,1,0,0,0,3833,3831,1,0,0,0,3834,
        3850,3,610,305,0,3835,3837,3,608,304,0,3836,3838,3,646,323,0,3837,
        3836,1,0,0,0,3837,3838,1,0,0,0,3838,3839,1,0,0,0,3839,3841,5,242,
        0,0,3840,3842,3,646,323,0,3841,3840,1,0,0,0,3841,3842,1,0,0,0,3842,
        3844,1,0,0,0,3843,3835,1,0,0,0,3844,3847,1,0,0,0,3845,3843,1,0,0,
        0,3845,3846,1,0,0,0,3846,3848,1,0,0,0,3847,3845,1,0,0,0,3848,3850,
        3,612,306,0,3849,3831,1,0,0,0,3849,3845,1,0,0,0,3850,607,1,0,0,0,
        3851,3853,3,616,308,0,3852,3851,1,0,0,0,3852,3853,1,0,0,0,3853,609,
        1,0,0,0,3854,3855,3,616,308,0,3855,611,1,0,0,0,3856,3867,3,614,307,
        0,3857,3859,3,646,323,0,3858,3857,1,0,0,0,3858,3859,1,0,0,0,3859,
        3860,1,0,0,0,3860,3862,5,242,0,0,3861,3863,3,646,323,0,3862,3861,
        1,0,0,0,3862,3863,1,0,0,0,3863,3864,1,0,0,0,3864,3866,3,614,307,
        0,3865,3858,1,0,0,0,3866,3869,1,0,0,0,3867,3865,1,0,0,0,3867,3868,
        1,0,0,0,3868,613,1,0,0,0,3869,3867,1,0,0,0,3870,3872,3,36,18,0,3871,
        3873,3,646,323,0,3872,3871,1,0,0,0,3872,3873,1,0,0,0,3873,3874,1,
        0,0,0,3874,3876,5,241,0,0,3875,3877,3,646,323,0,3876,3875,1,0,0,
        0,3876,3877,1,0,0,0,3877,3878,1,0,0,0,3878,3879,3,616,308,0,3879,
        615,1,0,0,0,3880,3881,5,17,0,0,3881,3883,3,646,323,0,3882,3880,1,
        0,0,0,3882,3883,1,0,0,0,3883,3884,1,0,0,0,3884,3887,3,580,290,0,
        3885,3887,3,642,321,0,3886,3882,1,0,0,0,3886,3885,1,0,0,0,3887,617,
        1,0,0,0,3888,3889,3,582,291,0,3889,3890,5,246,0,0,3890,3891,3,36,
        18,0,3891,3922,1,0,0,0,3892,3894,3,582,291,0,3893,3895,3,646,323,
        0,3894,3893,1,0,0,0,3894,3895,1,0,0,0,3895,3896,1,0,0,0,3896,3898,
        5,272,0,0,3897,3899,3,646,323,0,3898,3897,1,0,0,0,3898,3899,1,0,
        0,0,3899,3900,1,0,0,0,3900,3901,5,246,0,0,3901,3902,3,36,18,0,3902,
        3922,1,0,0,0,3903,3905,3,582,291,0,3904,3906,3,646,323,0,3905,3904,
        1,0,0,0,3905,3906,1,0,0,0,3906,3907,1,0,0,0,3907,3909,5,272,0,0,
        3908,3910,3,646,323,0,3909,3908,1,0,0,0,3909,3910,1,0,0,0,3910,3911,
        1,0,0,0,3911,3913,5,246,0,0,3912,3914,3,646,323,0,3913,3912,1,0,
        0,0,3913,3914,1,0,0,0,3914,3915,1,0,0,0,3915,3917,5,272,0,0,3916,
        3918,3,646,323,0,3917,3916,1,0,0,0,3917,3918,1,0,0,0,3918,3919,1,
        0,0,0,3919,3920,3,36,18,0,3920,3922,1,0,0,0,3921,3888,1,0,0,0,3921,
        3892,1,0,0,0,3921,3903,1,0,0,0,3922,619,1,0,0,0,3923,3926,3,622,
        311,0,3924,3926,3,624,312,0,3925,3923,1,0,0,0,3925,3924,1,0,0,0,
        3926,621,1,0,0,0,3927,3928,5,258,0,0,3928,3929,3,36,18,0,3929,623,
        1,0,0,0,3930,3931,5,246,0,0,3931,3932,3,36,18,0,3932,625,1,0,0,0,
        3933,3934,3,580,290,0,3934,627,1,0,0,0,3935,3936,3,580,290,0,3936,
        629,1,0,0,0,3937,3938,3,580,290,0,3938,631,1,0,0,0,3939,3940,3,580,
        290,0,3940,633,1,0,0,0,3941,3942,3,582,291,0,3942,635,1,0,0,0,3943,
        3944,3,582,291,0,3944,637,1,0,0,0,3945,3948,3,692,346,0,3946,3948,
        3,640,320,0,3947,3945,1,0,0,0,3947,3946,1,0,0,0,3948,639,1,0,0,0,
        3949,3952,3,596,298,0,3950,3952,3,600,300,0,3951,3949,1,0,0,0,3951,
        3950,1,0,0,0,3952,641,1,0,0,0,3953,3954,5,3,0,0,3954,3955,3,646,
        323,0,3955,3956,3,644,322,0,3956,643,1,0,0,0,3957,3960,3,596,298,
        0,3958,3960,3,600,300,0,3959,3957,1,0,0,0,3959,3958,1,0,0,0,3960,
        645,1,0,0,0,3961,3963,7,18,0,0,3962,3961,1,0,0,0,3963,3964,1,0,0,
        0,3964,3962,1,0,0,0,3964,3965,1,0,0,0,3965,647,1,0,0,0,3966,3968,
        3,646,323,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3972,1,0,0,
        0,3969,3973,5,273,0,0,3970,3973,3,656,328,0,3971,3973,3,306,153,
        0,3972,3969,1,0,0,0,3972,3970,1,0,0,0,3972,3971,1,0,0,0,3973,3975,
        1,0,0,0,3974,3976,3,646,323,0,3975,3974,1,0,0,0,3975,3976,1,0,0,
        0,3976,649,1,0,0,0,3977,3979,3,646,323,0,3978,3977,1,0,0,0,3978,
        3979,1,0,0,0,3979,3983,1,0,0,0,3980,3984,5,273,0,0,3981,3984,3,656,
        328,0,3982,3984,3,306,153,0,3983,3980,1,0,0,0,3983,3981,1,0,0,0,
        3983,3982,1,0,0,0,3984,651,1,0,0,0,3985,3994,3,648,324,0,3986,3988,
        3,646,323,0,3987,3986,1,0,0,0,3987,3988,1,0,0,0,3988,3989,1,0,0,
        0,3989,3991,5,277,0,0,3990,3992,3,646,323,0,3991,3990,1,0,0,0,3991,
        3992,1,0,0,0,3992,3994,1,0,0,0,3993,3985,1,0,0,0,3993,3987,1,0,0,
        0,3994,3995,1,0,0,0,3995,3993,1,0,0,0,3995,3996,1,0,0,0,3996,653,
        1,0,0,0,3997,4003,3,650,325,0,3998,4000,3,646,323,0,3999,3998,1,
        0,0,0,3999,4000,1,0,0,0,4000,4001,1,0,0,0,4001,4003,5,277,0,0,4002,
        3997,1,0,0,0,4002,3999,1,0,0,0,4003,4004,1,0,0,0,4004,4002,1,0,0,
        0,4004,4005,1,0,0,0,4005,655,1,0,0,0,4006,4007,5,275,0,0,4007,657,
        1,0,0,0,4008,4019,3,662,331,0,4009,4019,3,666,333,0,4010,4019,3,
        668,334,0,4011,4019,3,672,336,0,4012,4019,3,670,335,0,4013,4019,
        3,674,337,0,4014,4019,3,680,340,0,4015,4019,3,664,332,0,4016,4019,
        3,688,344,0,4017,4019,3,690,345,0,4018,4008,1,0,0,0,4018,4009,1,
        0,0,0,4018,4010,1,0,0,0,4018,4011,1,0,0,0,4018,4012,1,0,0,0,4018,
        4013,1,0,0,0,4018,4014,1,0,0,0,4018,4015,1,0,0,0,4018,4016,1,0,0,
        0,4018,4017,1,0,0,0,4019,659,1,0,0,0,4020,4023,5,281,0,0,4021,4023,
        3,698,349,0,4022,4020,1,0,0,0,4022,4021,1,0,0,0,4023,661,1,0,0,0,
        4024,4025,7,19,0,0,4025,663,1,0,0,0,4026,4027,5,158,0,0,4027,665,
        1,0,0,0,4028,4029,7,20,0,0,4029,667,1,0,0,0,4030,4031,7,21,0,0,4031,
        669,1,0,0,0,4032,4033,7,22,0,0,4033,671,1,0,0,0,4034,4035,7,23,0,
        0,4035,673,1,0,0,0,4036,4037,7,24,0,0,4037,675,1,0,0,0,4038,4039,
        7,25,0,0,4039,677,1,0,0,0,4040,4041,7,26,0,0,4041,679,1,0,0,0,4042,
        4046,3,682,341,0,4043,4046,3,684,342,0,4044,4046,3,686,343,0,4045,
        4042,1,0,0,0,4045,4043,1,0,0,0,4045,4044,1,0,0,0,4046,681,1,0,0,
        0,4047,4048,7,27,0,0,4048,683,1,0,0,0,4049,4050,5,135,0,0,4050,685,
        1,0,0,0,4051,4052,7,28,0,0,4052,687,1,0,0,0,4053,4054,7,29,0,0,4054,
        689,1,0,0,0,4055,4056,7,30,0,0,4056,691,1,0,0,0,4057,4062,3,674,
        337,0,4058,4062,3,676,338,0,4059,4062,5,137,0,0,4060,4062,5,138,
        0,0,4061,4057,1,0,0,0,4061,4058,1,0,0,0,4061,4059,1,0,0,0,4061,4060,
        1,0,0,0,4062,693,1,0,0,0,4063,4064,3,660,330,0,4064,4065,3,696,348,
        0,4065,4070,1,0,0,0,4066,4067,3,678,339,0,4067,4068,3,696,348,0,
        4068,4070,1,0,0,0,4069,4063,1,0,0,0,4069,4066,1,0,0,0,4070,695,1,
        0,0,0,4071,4072,7,31,0,0,4072,697,1,0,0,0,4073,4074,7,32,0,0,4074,
        699,1,0,0,0,601,706,716,721,725,739,745,750,757,761,764,768,772,
        775,779,783,789,801,805,809,814,817,822,831,838,843,850,858,860,
        865,870,878,887,895,900,904,908,915,921,924,928,932,936,941,945,
        949,954,958,962,967,971,975,980,984,988,993,997,1001,1004,1007,1012,
        1018,1024,1029,1033,1038,1044,1049,1055,1061,1070,1073,1079,1083,
        1089,1093,1102,1106,1109,1114,1123,1128,1134,1140,1173,1179,1212,
        1217,1225,1229,1232,1243,1253,1259,1262,1266,1270,1274,1279,1283,
        1288,1293,1297,1300,1304,1308,1314,1318,1326,1334,1337,1340,1346,
        1350,1355,1359,1362,1385,1395,1405,1417,1421,1426,1431,1435,1439,
        1447,1450,1454,1464,1478,1484,1496,1501,1505,1515,1528,1536,1550,
        1556,1568,1573,1577,1581,1584,1588,1600,1604,1614,1624,1629,1635,
        1650,1657,1661,1664,1667,1675,1680,1687,1692,1699,1704,1710,1715,
        1720,1726,1729,1735,1738,1741,1745,1748,1751,1756,1762,1767,1772,
        1778,1781,1784,1787,1793,1796,1799,1802,1805,1809,1812,1815,1820,
        1826,1831,1836,1844,1847,1850,1853,1861,1864,1867,1870,1874,1877,
        1880,1885,1891,1896,1901,1909,1920,1924,1927,1930,1935,1941,1946,
        1953,1957,1961,1965,1968,1978,1983,1988,1994,1997,2001,2007,2010,
        2013,2019,2023,2027,2029,2033,2039,2043,2049,2053,2056,2060,2064,
        2068,2073,2078,2082,2087,2095,2103,2106,2113,2123,2125,2129,2133,
        2137,2143,2149,2154,2161,2165,2180,2185,2194,2202,2208,2214,2221,
        2228,2232,2239,2241,2245,2249,2253,2256,2267,2273,2280,2284,2307,
        2315,2320,2325,2327,2333,2338,2344,2348,2353,2359,2364,2369,2373,
        2380,2386,2390,2400,2414,2418,2423,2429,2435,2439,2448,2452,2456,
        2468,2471,2474,2479,2483,2486,2490,2494,2500,2510,2514,2518,2523,
        2527,2532,2539,2544,2550,2554,2558,2561,2566,2571,2575,2579,2581,
        2586,2590,2593,2596,2600,2612,2624,2627,2632,2635,2639,2643,2648,
        2651,2655,2658,2664,2674,2678,2683,2692,2696,2700,2704,2709,2713,
        2718,2724,2729,2733,2738,2743,2747,2760,2767,2779,2788,2792,2812,
        2816,2820,2824,2828,2832,2836,2841,2844,2850,2854,2859,2877,2881,
        2884,2887,2901,2904,2910,2914,2919,2926,2930,2936,2942,2948,2954,
        2958,2964,2968,2973,2979,2985,2993,2996,3000,3006,3010,3015,3022,
        3026,3030,3034,3038,3042,3045,3049,3053,3067,3071,3075,3081,3085,
        3089,3095,3099,3103,3111,3115,3122,3128,3138,3141,3145,3149,3169,
        3173,3177,3180,3184,3187,3190,3193,3197,3201,3204,3224,3241,3253,
        3263,3266,3268,3272,3276,3281,3288,3292,3302,3306,3312,3319,3329,
        3333,3336,3344,3348,3358,3362,3372,3376,3379,3384,3388,3391,3396,
        3406,3410,3420,3424,3434,3438,3441,3447,3451,3457,3461,3466,3475,
        3479,3482,3485,3489,3501,3505,3508,3511,3515,3527,3531,3541,3545,
        3548,3564,3578,3582,3586,3591,3595,3600,3604,3609,3613,3618,3622,
        3627,3631,3636,3640,3643,3645,3652,3657,3662,3666,3670,3675,3679,
        3683,3692,3696,3702,3706,3710,3714,3717,3719,3728,3730,3734,3738,
        3744,3748,3752,3758,3764,3770,3777,3784,3790,3794,3798,3802,3806,
        3810,3814,3819,3823,3827,3831,3837,3841,3845,3849,3852,3858,3862,
        3867,3872,3876,3882,3886,3894,3898,3905,3909,3913,3917,3921,3925,
        3947,3951,3959,3964,3967,3972,3975,3978,3983,3987,3991,3993,3995,
        3999,4002,4004,4018,4022,4045,4061,4069
    ]

class vbaParser ( Parser ):

    grammarFileName = "vbaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABS'", "'ACCESS'", "'ADDRESSOF'", "'ALIAS'", 
                     "'AND'", "'ANY'", "'ATTRIBUTE'", "'APPEND'", "'ARRAY'", 
                     "'AS'", "'BASE'", "'BEGIN'", "'BEGINPROPERTY'", "'BINARY'", 
                     "'BOOLEAN'", "'[BOOLEAN]'", "'BYVAL'", "'BYREF'", "'BYTE'", 
                     "'[BYTE]'", "'CALL'", "'CASE'", "'CBOOL'", "'CBYTE'", 
                     "'CCUR'", "'CDATE'", "'CDBL'", "'CDEC'", "'CDECL'", 
                     "'CHDIR'", "'CHDRIVE'", "'CINT'", "'CIRCLE'", "'CLASS'", 
                     "'CLASS_INITIALIZE'", "'CLASS_TERMINATE'", "'CLNG'", 
                     "'CLNGLNG'", "'CLNGPTR'", "'CLOSE'", "'COMPARE'", "'CONST'", 
                     "'CSNG'", "'CSTR'", "'CVAR'", "'CVERR'", "'CURRENCY'", 
                     "'[CURRENCY]'", "'DATE'", "'[DATE]'", "'DEBUG'", "'DECLARE'", 
                     "'DECIMAL'", "'DEFBOOL'", "'DEFBYTE'", "'DEFCUR'", 
                     "'DEFDATE'", "'DEFDBL'", "'DEFDEC'", "'DEFINT'", "'DEFLNG'", 
                     "'DEFLNGLNG'", "'DEFLNGPTR'", "'DEFOBJ'", "'DEFSNG'", 
                     "'DEFSTR'", "'DEFVAR'", "'DIM'", "'DO'", "'DOEVENTS'", 
                     "'DOUBLE'", "'[DOUBLE]'", "'EACH'", "'ELSE'", "'ELSEIF'", 
                     "'EMPTY'", "'ENDIF'", "'END'", "'ENDPROPERTY'", "'ENUM'", 
                     "'EQV'", "'ERASE'", "'ERROR'", "'EVENT'", "'EXIT'", 
                     "'EXPLICIT'", "'FALSE'", "'FIX'", "'FRIEND'", "'FOR'", 
                     "'FUNCTION'", "'GET'", "'GLOBAL'", "'GO'", "'GOSUB'", 
                     "'GOTO'", "'IF'", "'IMP'", "'IMPLEMENTS'", "'IN'", 
                     "'INPUT'", "'INPUTB'", "'INT'", "'IS'", "'INTEGER'", 
                     "'[INTEGER]'", "'KILL'", "'LBOUND'", "'LEN'", "'LENB'", 
                     "'LET'", "'LIB'", "'LIKE'", "'LINE'", "'LINEINPUT'", 
                     "'LOCK'", "'LONG'", "'[LONG]'", "'LONGLONG'", "'[LONGLONG]'", 
                     "'LONGPTR'", "'[LONGPTR]'", "'LOOP'", "'LSET'", "'ME'", 
                     "'MID'", "'MIDB'", "'MID$'", "'MIDB$'", "'MOD'", "'MODULE'", 
                     "'NEXT'", "'NEW'", "'NOT'", "'NOTHING'", "'NULL'", 
                     "'OBJECT'", "'[OBJECT]'", "'ON'", "'OPEN'", "'OPTION'", 
                     "'OPTIONAL'", "'OR'", "'OUTPUT'", "'PARAMARRAY'", "'PRESERVE'", 
                     "'PRINT'", "'PRIVATE'", "'PROPERTY'", "'PSET'", "'PTRSAFE'", 
                     "'PUBLIC'", "'PUT'", "'RANDOM'", "'RAISEEVENT'", "'READ'", 
                     "'REDIM'", "'REM'", "'RESET'", "'RESUME'", "'RETURN'", 
                     "'RSET'", "'SCALE'", "'SEEK'", "'SELECT'", "'SET'", 
                     "'SGN'", "'SHARED'", "'SINGLE'", "'[SINGLE]'", "'SPC'", 
                     "'STATIC'", "'STEP'", "'STOP'", "'STRING'", "'[STRING]'", 
                     "'SUB'", "'TAB'", "'TEXT'", "'THEN'", "'TO'", "'TRUE'", 
                     "'TYPE'", "'TYPEOF'", "'UBOUND'", "'UNLOCK'", "'UNTIL'", 
                     "'VB_BASE'", "'VB_CONTROL'", "'VB_CREATABLE'", "'VB_CUSTOMIZABLE'", 
                     "'VB_DESCRIPTION'", "'VB_EXPOSED'", "'VB_EXT_KEY '", 
                     "'VB_GLOBALNAMESPACE'", "'VB_HELPID'", "'VB_INVOKE_FUNC'", 
                     "'VB_INVOKE_PROPERTY '", "'VB_INVOKE_PROPERTYPUT'", 
                     "'VB_INVOKE_PROPERTYPUTREF'", "'VB_MEMBERFLAGS'", "'VB_NAME'", 
                     "'VB_PREDECLAREDID'", "'VB_PROCDATA'", "'VB_TEMPLATEDERIVED'", 
                     "'VB_USERMEMID'", "'VB_VARDESCRIPTION'", "'VB_VARHELPID'", 
                     "'VB_VARMEMBERFLAGS'", "'VB_VARPROCDATA '", "'VB_VARUSERMEMID'", 
                     "'VARIANT'", "'[VARIANT]'", "'VERSION'", "'WEND'", 
                     "'WHILE'", "'WIDTH'", "'WITH'", "'WITHEVENTS'", "'WRITE'", 
                     "'XOR'", "'APPACTIVATE'", "'BEEP'", "'COLLECTION'", 
                     "'DATABASE'", "'DELETESETTING'", "'FILECOPY'", "'MKDIR'", 
                     "'NAME'", "'RANDOMIZE'", "'RMDIR'", "'SAVEPICTURE'", 
                     "'SAVESETTING'", "'SENDKEYS'", "'SETATTR'", "'TIME'", 
                     "'LOAD'", "'UNLOAD'", "'&'", "'@'", "':='", "','", 
                     "<INVALID>", "'$'", "'='", "'!'", "'>='", "'>'", "'#'", 
                     "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", 
                     "'%'", "'.'", "'+'", "'+='", "'^'", "')'", "';'", "'['", 
                     "']'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'''", "':'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACCESS", "ADDRESSOF", "ALIAS", 
                      "AND", "ANY", "ATTRIBUTE", "APPEND", "ARRAY", "AS", 
                      "BASE", "BEGIN", "BEGINPROPERTY", "BINARY", "BOOLEAN", 
                      "BOOLEAN_B", "BYVAL", "BYREF", "BYTE", "BYTE_B", "CALL", 
                      "CASE", "CBOOL", "CBYTE", "CCUR", "CDATE", "CDBL", 
                      "CDEC", "CDECL", "CHDIR", "CHDRIVE", "CINT", "CIRCLE", 
                      "CLASS", "CLASS_INITIALIZE", "CLASS_TERMINATE", "CLNG", 
                      "CLNGLNG", "CLNGPTR", "CLOSE", "COMPARE", "CONST", 
                      "CSNG", "CSTR", "CVAR", "CVERR", "CURRENCY", "CURRENCY_B", 
                      "DATE", "DATE_B", "DEBUG", "DECLARE", "DECIMAL", "DEFBOOL", 
                      "DEFBYTE", "DEFCUR", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", 
                      "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOEVENTS", 
                      "DOUBLE", "DOUBLE_B", "EACH", "ELSE", "ELSEIF", "EMPTY_X", 
                      "ENDIF", "END", "ENDPROPERTY", "ENUM", "EQV", "ERASE", 
                      "ERROR", "EVENT", "EXIT", "EXPLICIT", "FALSE", "FIX", 
                      "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GO", 
                      "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", 
                      "INPUT", "INPUTB", "INT", "IS", "INTEGER", "INTEGER_B", 
                      "KILL", "LBOUND", "LEN", "LENB", "LET", "LIB", "LIKE", 
                      "LINE", "LINEINPUT", "LOCK", "LONG", "LONG_B", "LONGLONG", 
                      "LONGLONG_B", "LONGPTR", "LONGPTR_B", "LOOP", "LSET", 
                      "ME", "MID", "MIDB", "MID_D", "MIDB_D", "MOD", "MODULE", 
                      "NEXT", "NEW", "NOT", "NOTHING", "NULL_", "OBJECT", 
                      "OBJECT_B", "ON", "OPEN", "OPTION", "OPTIONAL", "OR", 
                      "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", 
                      "PROPERTY", "PSET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", 
                      "RAISEEVENT", "READ", "REDIM", "REM", "RESET", "RESUME", 
                      "RETURN", "RSET", "SCALE", "SEEK", "SELECT", "SET", 
                      "SGN", "SHARED", "SINGLE", "SINGLE_B", "SPC", "STATIC", 
                      "STEP", "STOP", "STRING", "STRING_B", "SUB", "TAB", 
                      "TEXT", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", "UBOUND", 
                      "UNLOCK", "UNTIL", "VB_BASE", "VB_CONTROL", "VB_CREATABLE", 
                      "VB_CUSTOMIZABLE", "VB_DESCRIPTION", "VB_EXPOSED", 
                      "VB_EXT_KEY", "VB_GLOBALNAMESPACE", "VB_HELPID", "VB_INVOKE_FUNC", 
                      "VB_INVOKE_PROPERTY", "VB_INVOKE_PROPERTYPUT", "VB_INVOKE_PROPERTYPUTREF", 
                      "VB_MEMBERFLAGS", "VB_NAME", "VB_PREDECLAREDID", "VB_PROCDATA", 
                      "VB_TEMPLATEDERIVED", "VB_USERMEMID", "VB_VARDESCRIPTION", 
                      "VB_VARHELPID", "VB_VARMEMBERFLAGS", "VB_VARPROCDATA", 
                      "VB_VARUSERMEMID", "VARIANT", "VARIANT_B", "VERSION", 
                      "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", 
                      "XOR", "APPACTIVATE", "BEEP", "COLLECTION", "DATABASE", 
                      "DELETESETTING", "FILECOPY", "MKDIR", "NAME", "RANDOMIZE", 
                      "RMDIR", "SAVEPICTURE", "SAVESETTING", "SENDKEYS", 
                      "SETATTR", "TIME", "LOAD", "UNLOAD", "AMPERSAND", 
                      "ASPERAND", "ASSIGN", "COMMA", "DIV", "Dollar", "EQ", 
                      "EXCLAM", "GEQ", "GT", "HASH", "LEQ", "LPAREN", "LT", 
                      "MINUS", "MINUS_EQ", "MULT", "NEQ", "PERCENT", "PERIOD", 
                      "PLUS", "PLUS_EQ", "POW", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "GUID", "STRINGLITERAL", "INTEGERLITERAL", 
                      "FLOATLITERAL", "DATELITERAL", "FILEOFFSET", "LINE_CONTINUATION", 
                      "NEWLINE", "REMCOMMENT", "COMMENT", "SINGLEQUOTE", 
                      "COLON", "UNDERSCORE", "WS", "MACRO_LINE", "IDENTIFIER", 
                      "FOREIGN_NAME" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_classFileHeader = 2
    RULE_classVersionIdentification = 3
    RULE_classBeginBlock = 4
    RULE_beginBlockConfigElement = 5
    RULE_formFileHeader = 6
    RULE_formVersionIdentification = 7
    RULE_formObjectAssign = 8
    RULE_formBeginBlock = 9
    RULE_beginPropertyBlock = 10
    RULE_proceduralModule = 11
    RULE_classModule = 12
    RULE_proceduralModuleHeader = 13
    RULE_classModuleHeader = 14
    RULE_classAttr = 15
    RULE_proceduralModuleBody = 16
    RULE_classModuleBody = 17
    RULE_unrestrictedName = 18
    RULE_name = 19
    RULE_untypedName = 20
    RULE_proceduralModuleDeclarationSection = 21
    RULE_classModuleDeclarationSection = 22
    RULE_proceduralModuleDirectiveElement = 23
    RULE_proceduralModuleDeclarationElement = 24
    RULE_classModuleDirectiveElement = 25
    RULE_classModuleDeclarationElement = 26
    RULE_commonOptionDirective = 27
    RULE_optionCompareDirective = 28
    RULE_optionBaseDirective = 29
    RULE_optionExplicitDirective = 30
    RULE_optionPrivateDirective = 31
    RULE_defDirective = 32
    RULE_letterSpec = 33
    RULE_singleLetter = 34
    RULE_universalLetterRange = 35
    RULE_upperCaseA = 36
    RULE_upperCaseZ = 37
    RULE_letterRange = 38
    RULE_firstLetter = 39
    RULE_lastLetter = 40
    RULE_defType = 41
    RULE_commonModuleDeclarationElement = 42
    RULE_moduleVariableDeclaration = 43
    RULE_variableHelpAttribute = 44
    RULE_globalVariableDeclaration = 45
    RULE_publicVariableDecalation = 46
    RULE_privateVariableDeclaration = 47
    RULE_moduleVariableDeclarationList = 48
    RULE_variableDeclarationList = 49
    RULE_variableDcl = 50
    RULE_typedVariableDcl = 51
    RULE_untypedVariableDcl = 52
    RULE_arrayClause = 53
    RULE_asClause = 54
    RULE_witheventsVariableDcl = 55
    RULE_classTypeName = 56
    RULE_arrayDim = 57
    RULE_boundsList = 58
    RULE_dimSpec = 59
    RULE_lowerBound = 60
    RULE_upperBound = 61
    RULE_asAutoObject = 62
    RULE_asType = 63
    RULE_typeSpec = 64
    RULE_fixedLengthStringSpec = 65
    RULE_stringLength = 66
    RULE_constantName = 67
    RULE_publicConstDeclaration = 68
    RULE_privateConstDeclaration = 69
    RULE_moduleConstDeclaration = 70
    RULE_constDeclaration = 71
    RULE_constItemList = 72
    RULE_constItem = 73
    RULE_typedNameConstItem = 74
    RULE_untypedNameConstItem = 75
    RULE_constAsClause = 76
    RULE_publicTypeDeclaration = 77
    RULE_privateTypeDeclaration = 78
    RULE_udtDeclaration = 79
    RULE_udtMemberList = 80
    RULE_udtElement = 81
    RULE_udtMember = 82
    RULE_untypedNameMemberDcl = 83
    RULE_reservedNameMemberDcl = 84
    RULE_optionalArrayClause = 85
    RULE_reservedMemberName = 86
    RULE_globalEnumDeclaration = 87
    RULE_publicEnumDeclaration = 88
    RULE_privateEnumDeclaration = 89
    RULE_enumDeclaration = 90
    RULE_enumMemberList = 91
    RULE_enumElement = 92
    RULE_enumMember = 93
    RULE_publicExternalProcedureDeclaration = 94
    RULE_privateExternalProcedureDeclaration = 95
    RULE_externalProcDcl = 96
    RULE_externalSub = 97
    RULE_externalFunction = 98
    RULE_libInfo = 99
    RULE_libClause = 100
    RULE_aliasClause = 101
    RULE_implementsDirective = 102
    RULE_eventDeclaration = 103
    RULE_eventParameterList = 104
    RULE_proceduralModuleCode = 105
    RULE_classModuleCode = 106
    RULE_proceduralModuleCodeElement = 107
    RULE_classModuleCodeElement = 108
    RULE_commonModuleCodeElement = 109
    RULE_procedureDeclaration = 110
    RULE_subroutineDeclaration = 111
    RULE_functionDeclaration = 112
    RULE_propertyGetDeclaration = 113
    RULE_propertyLhsDeclaration = 114
    RULE_endLabel = 115
    RULE_procedureTail = 116
    RULE_procedureScope = 117
    RULE_initialStatic = 118
    RULE_trailingStatic = 119
    RULE_subroutineName = 120
    RULE_functionName = 121
    RULE_prefixedName = 122
    RULE_functionType = 123
    RULE_arrayDesignator = 124
    RULE_procedureParameters = 125
    RULE_propertyParameters = 126
    RULE_parameterList = 127
    RULE_positionalParameters = 128
    RULE_optionalParameters = 129
    RULE_valueParam = 130
    RULE_positionalParam = 131
    RULE_optionalParam = 132
    RULE_paramArray = 133
    RULE_paramDcl = 134
    RULE_untypedNameParamDcl = 135
    RULE_typedNameParamDcl = 136
    RULE_optionalPrefix = 137
    RULE_parameterMechanism = 138
    RULE_parameterType = 139
    RULE_defaultValue = 140
    RULE_eventHandlerName = 141
    RULE_implementedName = 142
    RULE_lifecycleHandlerName = 143
    RULE_procedureBody = 144
    RULE_statementBlock = 145
    RULE_blockStatement = 146
    RULE_statement = 147
    RULE_statementLabelDefinition = 148
    RULE_statementLabel = 149
    RULE_statementLabelList = 150
    RULE_identifierStatementLabel = 151
    RULE_lineNumberLabel = 152
    RULE_remStatement = 153
    RULE_controlStatement = 154
    RULE_controlStatementExceptMultilineIf = 155
    RULE_callStatement = 156
    RULE_whileStatement = 157
    RULE_forStatement = 158
    RULE_simpleForStatement = 159
    RULE_explicitForStatement = 160
    RULE_nestedForStatement = 161
    RULE_forClause = 162
    RULE_startValue = 163
    RULE_endValue = 164
    RULE_stepClause = 165
    RULE_stepIncrement = 166
    RULE_forEachStatement = 167
    RULE_simpleForEachStatement = 168
    RULE_explicitForEachStatement = 169
    RULE_forEachClause = 170
    RULE_collection = 171
    RULE_exitForStatement = 172
    RULE_doStatement = 173
    RULE_conditionClause = 174
    RULE_whileClause = 175
    RULE_untilClause = 176
    RULE_exitDoStatement = 177
    RULE_ifStatement = 178
    RULE_elseIfBlock = 179
    RULE_elseBlock = 180
    RULE_singleLineIfStatement = 181
    RULE_ifWithNonEmptyThen = 182
    RULE_ifWithEmptyThen = 183
    RULE_singleLineElseClause = 184
    RULE_listOrLabel = 185
    RULE_sameLineStatement = 186
    RULE_selectCaseStatement = 187
    RULE_caseClause = 188
    RULE_caseElseClause = 189
    RULE_rangeClause = 190
    RULE_selectExpression = 191
    RULE_comparisonOperator = 192
    RULE_stopStatement = 193
    RULE_gotoStatement = 194
    RULE_onGotoStatement = 195
    RULE_gosubStatement = 196
    RULE_returnStatement = 197
    RULE_onGosubStatement = 198
    RULE_exitSubStatement = 199
    RULE_exitFunctionStatement = 200
    RULE_exitPropertyStatement = 201
    RULE_raiseeventStatement = 202
    RULE_eventArgumentList = 203
    RULE_eventArgument = 204
    RULE_withStatement = 205
    RULE_endStatement = 206
    RULE_dataManipulationStatement = 207
    RULE_localVariableDeclaration = 208
    RULE_staticVariableDeclaration = 209
    RULE_localConstDeclaration = 210
    RULE_redimStatement = 211
    RULE_redimDeclarationList = 212
    RULE_redimVariableDcl = 213
    RULE_redimTypedVariableDcl = 214
    RULE_redimUntypedDcl = 215
    RULE_withExpressionDcl = 216
    RULE_memberAccessExpressionDcl = 217
    RULE_dynamicArrayDim = 218
    RULE_dynamicBoundsList = 219
    RULE_dynamicDimSpec = 220
    RULE_dynamicLowerBound = 221
    RULE_dynamicUpperBound = 222
    RULE_dynamicArrayClause = 223
    RULE_eraseStatement = 224
    RULE_eraseList = 225
    RULE_eraseElement = 226
    RULE_midStatement = 227
    RULE_modeSpecifier = 228
    RULE_stringArgument = 229
    RULE_startMid = 230
    RULE_length = 231
    RULE_lsetStatement = 232
    RULE_rsetStatement = 233
    RULE_letStatement = 234
    RULE_setStatement = 235
    RULE_errorHandlingStatement = 236
    RULE_onErrorStatement = 237
    RULE_errorBehavior = 238
    RULE_resumeStatement = 239
    RULE_errorStatement = 240
    RULE_errorNumber = 241
    RULE_fileStatement = 242
    RULE_openStatement = 243
    RULE_pathName = 244
    RULE_modeClause = 245
    RULE_modeOpt = 246
    RULE_accessClause = 247
    RULE_access = 248
    RULE_lock = 249
    RULE_lenClause = 250
    RULE_recLength = 251
    RULE_fileNumber = 252
    RULE_markedFileNumber = 253
    RULE_unmarkedFileNumber = 254
    RULE_closeStatement = 255
    RULE_fileNumberList = 256
    RULE_seekStatement = 257
    RULE_position = 258
    RULE_lockStatement = 259
    RULE_recordRange = 260
    RULE_startRecordNumber = 261
    RULE_endRecordNumber = 262
    RULE_unlockStatement = 263
    RULE_lineInputStatement = 264
    RULE_variableName = 265
    RULE_widthStatement = 266
    RULE_lineWidth = 267
    RULE_printStatement = 268
    RULE_outputList = 269
    RULE_outputItem = 270
    RULE_outputClause = 271
    RULE_charPosition = 272
    RULE_outputExpression = 273
    RULE_spcClause = 274
    RULE_spcNumber = 275
    RULE_tabClause = 276
    RULE_tabNumber = 277
    RULE_writeStatement = 278
    RULE_inputStatement = 279
    RULE_inputList = 280
    RULE_inputVariable = 281
    RULE_putStatement = 282
    RULE_recordNumber = 283
    RULE_data = 284
    RULE_getStatement = 285
    RULE_variable = 286
    RULE_attributeStatement = 287
    RULE_attributeDescName = 288
    RULE_attributeUsrName = 289
    RULE_expression = 290
    RULE_lExpression = 291
    RULE_literalExpression = 292
    RULE_parenthesizedExpression = 293
    RULE_typeofIsExpression = 294
    RULE_newExpress = 295
    RULE_notOperatorExpression = 296
    RULE_unaryMinusExpression = 297
    RULE_simpleNameExpression = 298
    RULE_instanceExpression = 299
    RULE_memberAccessExpression = 300
    RULE_indexExpression = 301
    RULE_argumentList = 302
    RULE_positionalOrNamedArgumentList = 303
    RULE_positionalArgument = 304
    RULE_requiredPositionalArgument = 305
    RULE_namedArgumentList = 306
    RULE_namedArgument = 307
    RULE_argumentExpression = 308
    RULE_dictionaryAccessExpression = 309
    RULE_withExpression = 310
    RULE_withMemberAccessExpression = 311
    RULE_withDictionaryAccessExpression = 312
    RULE_constantExpression = 313
    RULE_ccExpression = 314
    RULE_booleanExpression = 315
    RULE_integerExpression = 316
    RULE_variableExpression = 317
    RULE_boundVariableExpression = 318
    RULE_typeExpression = 319
    RULE_definedTypeExpression = 320
    RULE_addressofExpression = 321
    RULE_procedurePointerExpression = 322
    RULE_wsc = 323
    RULE_endOfLine = 324
    RULE_endOfLineNoWs = 325
    RULE_endOfStatement = 326
    RULE_endOfStatementNoWs = 327
    RULE_commentBody = 328
    RULE_reservedIdentifier = 329
    RULE_ambiguousIdentifier = 330
    RULE_statementKeyword = 331
    RULE_remKeyword = 332
    RULE_markerKeyword = 333
    RULE_operatorIdentifier = 334
    RULE_reservedName = 335
    RULE_specialForm = 336
    RULE_reservedTypeIdentifier = 337
    RULE_reservedTypeIdentifierB = 338
    RULE_typeableReservedName = 339
    RULE_literalIdentifier = 340
    RULE_booleanLiteralIdentifier = 341
    RULE_objectLiteralIdentifier = 342
    RULE_variantLiteralIdentifier = 343
    RULE_reservedForImplementationUse = 344
    RULE_futureReserved = 345
    RULE_builtinType = 346
    RULE_typedName = 347
    RULE_typeSuffix = 348
    RULE_ambiguousKeyword = 349

    ruleNames =  [ "startRule", "module", "classFileHeader", "classVersionIdentification", 
                   "classBeginBlock", "beginBlockConfigElement", "formFileHeader", 
                   "formVersionIdentification", "formObjectAssign", "formBeginBlock", 
                   "beginPropertyBlock", "proceduralModule", "classModule", 
                   "proceduralModuleHeader", "classModuleHeader", "classAttr", 
                   "proceduralModuleBody", "classModuleBody", "unrestrictedName", 
                   "name", "untypedName", "proceduralModuleDeclarationSection", 
                   "classModuleDeclarationSection", "proceduralModuleDirectiveElement", 
                   "proceduralModuleDeclarationElement", "classModuleDirectiveElement", 
                   "classModuleDeclarationElement", "commonOptionDirective", 
                   "optionCompareDirective", "optionBaseDirective", "optionExplicitDirective", 
                   "optionPrivateDirective", "defDirective", "letterSpec", 
                   "singleLetter", "universalLetterRange", "upperCaseA", 
                   "upperCaseZ", "letterRange", "firstLetter", "lastLetter", 
                   "defType", "commonModuleDeclarationElement", "moduleVariableDeclaration", 
                   "variableHelpAttribute", "globalVariableDeclaration", 
                   "publicVariableDecalation", "privateVariableDeclaration", 
                   "moduleVariableDeclarationList", "variableDeclarationList", 
                   "variableDcl", "typedVariableDcl", "untypedVariableDcl", 
                   "arrayClause", "asClause", "witheventsVariableDcl", "classTypeName", 
                   "arrayDim", "boundsList", "dimSpec", "lowerBound", "upperBound", 
                   "asAutoObject", "asType", "typeSpec", "fixedLengthStringSpec", 
                   "stringLength", "constantName", "publicConstDeclaration", 
                   "privateConstDeclaration", "moduleConstDeclaration", 
                   "constDeclaration", "constItemList", "constItem", "typedNameConstItem", 
                   "untypedNameConstItem", "constAsClause", "publicTypeDeclaration", 
                   "privateTypeDeclaration", "udtDeclaration", "udtMemberList", 
                   "udtElement", "udtMember", "untypedNameMemberDcl", "reservedNameMemberDcl", 
                   "optionalArrayClause", "reservedMemberName", "globalEnumDeclaration", 
                   "publicEnumDeclaration", "privateEnumDeclaration", "enumDeclaration", 
                   "enumMemberList", "enumElement", "enumMember", "publicExternalProcedureDeclaration", 
                   "privateExternalProcedureDeclaration", "externalProcDcl", 
                   "externalSub", "externalFunction", "libInfo", "libClause", 
                   "aliasClause", "implementsDirective", "eventDeclaration", 
                   "eventParameterList", "proceduralModuleCode", "classModuleCode", 
                   "proceduralModuleCodeElement", "classModuleCodeElement", 
                   "commonModuleCodeElement", "procedureDeclaration", "subroutineDeclaration", 
                   "functionDeclaration", "propertyGetDeclaration", "propertyLhsDeclaration", 
                   "endLabel", "procedureTail", "procedureScope", "initialStatic", 
                   "trailingStatic", "subroutineName", "functionName", "prefixedName", 
                   "functionType", "arrayDesignator", "procedureParameters", 
                   "propertyParameters", "parameterList", "positionalParameters", 
                   "optionalParameters", "valueParam", "positionalParam", 
                   "optionalParam", "paramArray", "paramDcl", "untypedNameParamDcl", 
                   "typedNameParamDcl", "optionalPrefix", "parameterMechanism", 
                   "parameterType", "defaultValue", "eventHandlerName", 
                   "implementedName", "lifecycleHandlerName", "procedureBody", 
                   "statementBlock", "blockStatement", "statement", "statementLabelDefinition", 
                   "statementLabel", "statementLabelList", "identifierStatementLabel", 
                   "lineNumberLabel", "remStatement", "controlStatement", 
                   "controlStatementExceptMultilineIf", "callStatement", 
                   "whileStatement", "forStatement", "simpleForStatement", 
                   "explicitForStatement", "nestedForStatement", "forClause", 
                   "startValue", "endValue", "stepClause", "stepIncrement", 
                   "forEachStatement", "simpleForEachStatement", "explicitForEachStatement", 
                   "forEachClause", "collection", "exitForStatement", "doStatement", 
                   "conditionClause", "whileClause", "untilClause", "exitDoStatement", 
                   "ifStatement", "elseIfBlock", "elseBlock", "singleLineIfStatement", 
                   "ifWithNonEmptyThen", "ifWithEmptyThen", "singleLineElseClause", 
                   "listOrLabel", "sameLineStatement", "selectCaseStatement", 
                   "caseClause", "caseElseClause", "rangeClause", "selectExpression", 
                   "comparisonOperator", "stopStatement", "gotoStatement", 
                   "onGotoStatement", "gosubStatement", "returnStatement", 
                   "onGosubStatement", "exitSubStatement", "exitFunctionStatement", 
                   "exitPropertyStatement", "raiseeventStatement", "eventArgumentList", 
                   "eventArgument", "withStatement", "endStatement", "dataManipulationStatement", 
                   "localVariableDeclaration", "staticVariableDeclaration", 
                   "localConstDeclaration", "redimStatement", "redimDeclarationList", 
                   "redimVariableDcl", "redimTypedVariableDcl", "redimUntypedDcl", 
                   "withExpressionDcl", "memberAccessExpressionDcl", "dynamicArrayDim", 
                   "dynamicBoundsList", "dynamicDimSpec", "dynamicLowerBound", 
                   "dynamicUpperBound", "dynamicArrayClause", "eraseStatement", 
                   "eraseList", "eraseElement", "midStatement", "modeSpecifier", 
                   "stringArgument", "startMid", "length", "lsetStatement", 
                   "rsetStatement", "letStatement", "setStatement", "errorHandlingStatement", 
                   "onErrorStatement", "errorBehavior", "resumeStatement", 
                   "errorStatement", "errorNumber", "fileStatement", "openStatement", 
                   "pathName", "modeClause", "modeOpt", "accessClause", 
                   "access", "lock", "lenClause", "recLength", "fileNumber", 
                   "markedFileNumber", "unmarkedFileNumber", "closeStatement", 
                   "fileNumberList", "seekStatement", "position", "lockStatement", 
                   "recordRange", "startRecordNumber", "endRecordNumber", 
                   "unlockStatement", "lineInputStatement", "variableName", 
                   "widthStatement", "lineWidth", "printStatement", "outputList", 
                   "outputItem", "outputClause", "charPosition", "outputExpression", 
                   "spcClause", "spcNumber", "tabClause", "tabNumber", "writeStatement", 
                   "inputStatement", "inputList", "inputVariable", "putStatement", 
                   "recordNumber", "data", "getStatement", "variable", "attributeStatement", 
                   "attributeDescName", "attributeUsrName", "expression", 
                   "lExpression", "literalExpression", "parenthesizedExpression", 
                   "typeofIsExpression", "newExpress", "notOperatorExpression", 
                   "unaryMinusExpression", "simpleNameExpression", "instanceExpression", 
                   "memberAccessExpression", "indexExpression", "argumentList", 
                   "positionalOrNamedArgumentList", "positionalArgument", 
                   "requiredPositionalArgument", "namedArgumentList", "namedArgument", 
                   "argumentExpression", "dictionaryAccessExpression", "withExpression", 
                   "withMemberAccessExpression", "withDictionaryAccessExpression", 
                   "constantExpression", "ccExpression", "booleanExpression", 
                   "integerExpression", "variableExpression", "boundVariableExpression", 
                   "typeExpression", "definedTypeExpression", "addressofExpression", 
                   "procedurePointerExpression", "wsc", "endOfLine", "endOfLineNoWs", 
                   "endOfStatement", "endOfStatementNoWs", "commentBody", 
                   "reservedIdentifier", "ambiguousIdentifier", "statementKeyword", 
                   "remKeyword", "markerKeyword", "operatorIdentifier", 
                   "reservedName", "specialForm", "reservedTypeIdentifier", 
                   "reservedTypeIdentifierB", "typeableReservedName", "literalIdentifier", 
                   "booleanLiteralIdentifier", "objectLiteralIdentifier", 
                   "variantLiteralIdentifier", "reservedForImplementationUse", 
                   "futureReserved", "builtinType", "typedName", "typeSuffix", 
                   "ambiguousKeyword" ]

    EOF = Token.EOF
    ABS=1
    ACCESS=2
    ADDRESSOF=3
    ALIAS=4
    AND=5
    ANY=6
    ATTRIBUTE=7
    APPEND=8
    ARRAY=9
    AS=10
    BASE=11
    BEGIN=12
    BEGINPROPERTY=13
    BINARY=14
    BOOLEAN=15
    BOOLEAN_B=16
    BYVAL=17
    BYREF=18
    BYTE=19
    BYTE_B=20
    CALL=21
    CASE=22
    CBOOL=23
    CBYTE=24
    CCUR=25
    CDATE=26
    CDBL=27
    CDEC=28
    CDECL=29
    CHDIR=30
    CHDRIVE=31
    CINT=32
    CIRCLE=33
    CLASS=34
    CLASS_INITIALIZE=35
    CLASS_TERMINATE=36
    CLNG=37
    CLNGLNG=38
    CLNGPTR=39
    CLOSE=40
    COMPARE=41
    CONST=42
    CSNG=43
    CSTR=44
    CVAR=45
    CVERR=46
    CURRENCY=47
    CURRENCY_B=48
    DATE=49
    DATE_B=50
    DEBUG=51
    DECLARE=52
    DECIMAL=53
    DEFBOOL=54
    DEFBYTE=55
    DEFCUR=56
    DEFDATE=57
    DEFDBL=58
    DEFDEC=59
    DEFINT=60
    DEFLNG=61
    DEFLNGLNG=62
    DEFLNGPTR=63
    DEFOBJ=64
    DEFSNG=65
    DEFSTR=66
    DEFVAR=67
    DIM=68
    DO=69
    DOEVENTS=70
    DOUBLE=71
    DOUBLE_B=72
    EACH=73
    ELSE=74
    ELSEIF=75
    EMPTY_X=76
    ENDIF=77
    END=78
    ENDPROPERTY=79
    ENUM=80
    EQV=81
    ERASE=82
    ERROR=83
    EVENT=84
    EXIT=85
    EXPLICIT=86
    FALSE=87
    FIX=88
    FRIEND=89
    FOR=90
    FUNCTION=91
    GET=92
    GLOBAL=93
    GO=94
    GOSUB=95
    GOTO=96
    IF=97
    IMP=98
    IMPLEMENTS=99
    IN=100
    INPUT=101
    INPUTB=102
    INT=103
    IS=104
    INTEGER=105
    INTEGER_B=106
    KILL=107
    LBOUND=108
    LEN=109
    LENB=110
    LET=111
    LIB=112
    LIKE=113
    LINE=114
    LINEINPUT=115
    LOCK=116
    LONG=117
    LONG_B=118
    LONGLONG=119
    LONGLONG_B=120
    LONGPTR=121
    LONGPTR_B=122
    LOOP=123
    LSET=124
    ME=125
    MID=126
    MIDB=127
    MID_D=128
    MIDB_D=129
    MOD=130
    MODULE=131
    NEXT=132
    NEW=133
    NOT=134
    NOTHING=135
    NULL_=136
    OBJECT=137
    OBJECT_B=138
    ON=139
    OPEN=140
    OPTION=141
    OPTIONAL=142
    OR=143
    OUTPUT=144
    PARAMARRAY=145
    PRESERVE=146
    PRINT=147
    PRIVATE=148
    PROPERTY=149
    PSET=150
    PTRSAFE=151
    PUBLIC=152
    PUT=153
    RANDOM=154
    RAISEEVENT=155
    READ=156
    REDIM=157
    REM=158
    RESET=159
    RESUME=160
    RETURN=161
    RSET=162
    SCALE=163
    SEEK=164
    SELECT=165
    SET=166
    SGN=167
    SHARED=168
    SINGLE=169
    SINGLE_B=170
    SPC=171
    STATIC=172
    STEP=173
    STOP=174
    STRING=175
    STRING_B=176
    SUB=177
    TAB=178
    TEXT=179
    THEN=180
    TO=181
    TRUE=182
    TYPE=183
    TYPEOF=184
    UBOUND=185
    UNLOCK=186
    UNTIL=187
    VB_BASE=188
    VB_CONTROL=189
    VB_CREATABLE=190
    VB_CUSTOMIZABLE=191
    VB_DESCRIPTION=192
    VB_EXPOSED=193
    VB_EXT_KEY=194
    VB_GLOBALNAMESPACE=195
    VB_HELPID=196
    VB_INVOKE_FUNC=197
    VB_INVOKE_PROPERTY=198
    VB_INVOKE_PROPERTYPUT=199
    VB_INVOKE_PROPERTYPUTREF=200
    VB_MEMBERFLAGS=201
    VB_NAME=202
    VB_PREDECLAREDID=203
    VB_PROCDATA=204
    VB_TEMPLATEDERIVED=205
    VB_USERMEMID=206
    VB_VARDESCRIPTION=207
    VB_VARHELPID=208
    VB_VARMEMBERFLAGS=209
    VB_VARPROCDATA=210
    VB_VARUSERMEMID=211
    VARIANT=212
    VARIANT_B=213
    VERSION=214
    WEND=215
    WHILE=216
    WIDTH=217
    WITH=218
    WITHEVENTS=219
    WRITE=220
    XOR=221
    APPACTIVATE=222
    BEEP=223
    COLLECTION=224
    DATABASE=225
    DELETESETTING=226
    FILECOPY=227
    MKDIR=228
    NAME=229
    RANDOMIZE=230
    RMDIR=231
    SAVEPICTURE=232
    SAVESETTING=233
    SENDKEYS=234
    SETATTR=235
    TIME=236
    LOAD=237
    UNLOAD=238
    AMPERSAND=239
    ASPERAND=240
    ASSIGN=241
    COMMA=242
    DIV=243
    Dollar=244
    EQ=245
    EXCLAM=246
    GEQ=247
    GT=248
    HASH=249
    LEQ=250
    LPAREN=251
    LT=252
    MINUS=253
    MINUS_EQ=254
    MULT=255
    NEQ=256
    PERCENT=257
    PERIOD=258
    PLUS=259
    PLUS_EQ=260
    POW=261
    RPAREN=262
    SEMICOLON=263
    L_SQUARE_BRACKET=264
    R_SQUARE_BRACKET=265
    GUID=266
    STRINGLITERAL=267
    INTEGERLITERAL=268
    FLOATLITERAL=269
    DATELITERAL=270
    FILEOFFSET=271
    LINE_CONTINUATION=272
    NEWLINE=273
    REMCOMMENT=274
    COMMENT=275
    SINGLEQUOTE=276
    COLON=277
    UNDERSCORE=278
    WS=279
    MACRO_LINE=280
    IDENTIFIER=281
    FOREIGN_NAME=282

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.module()
            self.state = 701
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModule(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleContext,0)


        def classFileHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassFileHeaderContext,0)


        def classModule(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleContext,0)


        def formFileHeader(self):
            return self.getTypedRuleContext(vbaParser.FormFileHeaderContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 703
                    self.endOfLineNoWs() 
                self.state = 708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 709
                self.proceduralModule()
                pass

            elif la_ == 2:
                self.state = 710
                self.classFileHeader()
                self.state = 711
                self.classModule()
                pass

            elif la_ == 3:
                self.state = 713
                self.formFileHeader()
                self.state = 714
                self.classModule()
                pass


            self.state = 721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self.endOfLine() 
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 724
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassFileHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classVersionIdentification(self):
            return self.getTypedRuleContext(vbaParser.ClassVersionIdentificationContext,0)


        def classBeginBlock(self):
            return self.getTypedRuleContext(vbaParser.ClassBeginBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classFileHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassFileHeader" ):
                listener.enterClassFileHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassFileHeader" ):
                listener.exitClassFileHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassFileHeader" ):
                return visitor.visitClassFileHeader(self)
            else:
                return visitor.visitChildren(self)




    def classFileHeader(self):

        localctx = vbaParser.ClassFileHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_classFileHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.classVersionIdentification()
            self.state = 728
            self.classBeginBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassVersionIdentificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classVersionIdentification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassVersionIdentification" ):
                listener.enterClassVersionIdentification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassVersionIdentification" ):
                listener.exitClassVersionIdentification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassVersionIdentification" ):
                return visitor.visitClassVersionIdentification(self)
            else:
                return visitor.visitChildren(self)




    def classVersionIdentification(self):

        localctx = vbaParser.ClassVersionIdentificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classVersionIdentification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(vbaParser.VERSION)
            self.state = 731
            self.match(vbaParser.WS)
            self.state = 732
            self.match(vbaParser.FLOATLITERAL)
            self.state = 733
            self.match(vbaParser.WS)
            self.state = 734
            self.match(vbaParser.CLASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBeginBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def beginBlockConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BeginBlockConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BeginBlockConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classBeginBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBeginBlock" ):
                listener.enterClassBeginBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBeginBlock" ):
                listener.exitClassBeginBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBeginBlock" ):
                return visitor.visitClassBeginBlock(self)
            else:
                return visitor.visitChildren(self)




    def classBeginBlock(self):

        localctx = vbaParser.ClassBeginBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classBeginBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 736
                self.endOfLine()
                self.state = 739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 741
            self.match(vbaParser.BEGIN)
            self.state = 743 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 742
                    self.beginBlockConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 745 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 748 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 747
                self.endOfLine()
                self.state = 750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 752
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginBlockConfigElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def FILEOFFSET(self):
            return self.getToken(vbaParser.FILEOFFSET, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def UNDERSCORE(self):
            return self.getToken(vbaParser.UNDERSCORE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def literalExpression(self):
            return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,0)


        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def formBeginBlock(self):
            return self.getTypedRuleContext(vbaParser.FormBeginBlockContext,0)


        def beginPropertyBlock(self):
            return self.getTypedRuleContext(vbaParser.BeginPropertyBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_beginBlockConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginBlockConfigElement" ):
                listener.enterBeginBlockConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginBlockConfigElement" ):
                listener.exitBeginBlockConfigElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginBlockConfigElement" ):
                return visitor.visitBeginBlockConfigElement(self)
            else:
                return visitor.visitChildren(self)




    def beginBlockConfigElement(self):

        localctx = vbaParser.BeginBlockConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_beginBlockConfigElement)
        self._la = 0 # Token type
        try:
            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 755 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 754
                    self.endOfLine()
                    self.state = 757 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                        break

                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 759
                    self.match(vbaParser.OBJECT)
                    self.state = 760
                    self.match(vbaParser.PERIOD)


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 763
                    self.match(vbaParser.UNDERSCORE)


                self.state = 766
                self.ambiguousIdentifier()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 767
                    self.match(vbaParser.WS)


                self.state = 770
                self.match(vbaParser.EQ)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 771
                    self.match(vbaParser.WS)


                self.state = 779
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [76, 87, 135, 136, 182, 253, 267, 268, 269, 270]:
                    self.state = 775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==253:
                        self.state = 774
                        self.match(vbaParser.MINUS)


                    self.state = 777
                    self.literalExpression()
                    pass
                elif token in [271]:
                    self.state = 778
                    self.match(vbaParser.FILEOFFSET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.formBeginBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 782
                self.beginPropertyBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormFileHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formVersionIdentification(self):
            return self.getTypedRuleContext(vbaParser.FormVersionIdentificationContext,0)


        def formBeginBlock(self):
            return self.getTypedRuleContext(vbaParser.FormBeginBlockContext,0)


        def formObjectAssign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FormObjectAssignContext)
            else:
                return self.getTypedRuleContext(vbaParser.FormObjectAssignContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_formFileHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormFileHeader" ):
                listener.enterFormFileHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormFileHeader" ):
                listener.exitFormFileHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormFileHeader" ):
                return visitor.visitFormFileHeader(self)
            else:
                return visitor.visitChildren(self)




    def formFileHeader(self):

        localctx = vbaParser.FormFileHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_formFileHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.formVersionIdentification()
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 786
                    self.formObjectAssign() 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 792
            self.formBeginBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormVersionIdentificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_formVersionIdentification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormVersionIdentification" ):
                listener.enterFormVersionIdentification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormVersionIdentification" ):
                listener.exitFormVersionIdentification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormVersionIdentification" ):
                return visitor.visitFormVersionIdentification(self)
            else:
                return visitor.visitChildren(self)




    def formVersionIdentification(self):

        localctx = vbaParser.FormVersionIdentificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_formVersionIdentification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(vbaParser.VERSION)
            self.state = 795
            self.match(vbaParser.WS)
            self.state = 796
            self.match(vbaParser.FLOATLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormObjectAssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.STRINGLITERAL)
            else:
                return self.getToken(vbaParser.STRINGLITERAL, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def SEMICOLON(self):
            return self.getToken(vbaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_formObjectAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormObjectAssign" ):
                listener.enterFormObjectAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormObjectAssign" ):
                listener.exitFormObjectAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormObjectAssign" ):
                return visitor.visitFormObjectAssign(self)
            else:
                return visitor.visitChildren(self)




    def formObjectAssign(self):

        localctx = vbaParser.FormObjectAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_formObjectAssign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 798
                self.endOfLine()
                self.state = 801 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 803
            self.match(vbaParser.OBJECT)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 804
                self.match(vbaParser.WS)


            self.state = 807
            self.match(vbaParser.EQ)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 808
                self.match(vbaParser.WS)


            self.state = 811
            self.match(vbaParser.STRINGLITERAL)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 812
                self.match(vbaParser.SEMICOLON)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 813
                    self.match(vbaParser.WS)


                self.state = 816
                self.match(vbaParser.STRINGLITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormBeginBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def GUID(self):
            return self.getToken(vbaParser.GUID, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def beginBlockConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BeginBlockConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BeginBlockConfigElementContext,i)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_formBeginBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormBeginBlock" ):
                listener.enterFormBeginBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormBeginBlock" ):
                listener.exitFormBeginBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormBeginBlock" ):
                return visitor.visitFormBeginBlock(self)
            else:
                return visitor.visitChildren(self)




    def formBeginBlock(self):

        localctx = vbaParser.FormBeginBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_formBeginBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 819
                self.endOfLine()
                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 824
            self.match(vbaParser.BEGIN)
            self.state = 825
            self.match(vbaParser.WS)
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [266]:
                self.state = 826
                self.match(vbaParser.GUID)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.state = 827
                self.ambiguousIdentifier()
                self.state = 828
                self.match(vbaParser.PERIOD)
                self.state = 829
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 833
            self.match(vbaParser.WS)
            self.state = 834
            self.ambiguousIdentifier()
            self.state = 836 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 835
                    self.beginBlockConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 838 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 841 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 840
                self.endOfLine()
                self.state = 843 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 845
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginPropertyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINPROPERTY(self):
            return self.getToken(vbaParser.BEGINPROPERTY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def ENDPROPERTY(self):
            return self.getToken(vbaParser.ENDPROPERTY, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def GUID(self):
            return self.getToken(vbaParser.GUID, 0)

        def beginBlockConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BeginBlockConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BeginBlockConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_beginPropertyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginPropertyBlock" ):
                listener.enterBeginPropertyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginPropertyBlock" ):
                listener.exitBeginPropertyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginPropertyBlock" ):
                return visitor.visitBeginPropertyBlock(self)
            else:
                return visitor.visitChildren(self)




    def beginPropertyBlock(self):

        localctx = vbaParser.BeginPropertyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_beginPropertyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 847
                self.endOfLine()
                self.state = 850 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 852
            self.match(vbaParser.BEGINPROPERTY)
            self.state = 853
            self.match(vbaParser.WS)
            self.state = 854
            self.ambiguousIdentifier()
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 855
                self.match(vbaParser.WS)
                self.state = 856
                self.match(vbaParser.GUID)
                self.state = 858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.match(vbaParser.WS)




            self.state = 863 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 862
                    self.beginBlockConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 865 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 868 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 867
                self.endOfLine()
                self.state = 870 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 872
            self.match(vbaParser.ENDPROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleHeaderContext,0)


        def proceduralModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleBodyContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModule" ):
                listener.enterProceduralModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModule" ):
                listener.exitProceduralModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModule" ):
                return visitor.visitProceduralModule(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModule(self):

        localctx = vbaParser.ProceduralModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_proceduralModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.proceduralModuleHeader()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 875
                    self.endOfLineNoWs() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 881
            self.proceduralModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleHeaderContext,0)


        def classModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleBodyContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModule" ):
                listener.enterClassModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModule" ):
                listener.exitClassModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModule" ):
                return visitor.visitClassModule(self)
            else:
                return visitor.visitChildren(self)




    def classModule(self):

        localctx = vbaParser.ClassModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.classModuleHeader()
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 884
                    self.endOfLine() 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 890
            self.classModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleHeader" ):
                listener.enterProceduralModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleHeader" ):
                listener.exitProceduralModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleHeader" ):
                return visitor.visitProceduralModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleHeader(self):

        localctx = vbaParser.ProceduralModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_proceduralModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0):
                self.state = 892
                self.endOfLine()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 898
            self.match(vbaParser.ATTRIBUTE)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 899
                self.match(vbaParser.WS)


            self.state = 902
            self.match(vbaParser.VB_NAME)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 903
                self.match(vbaParser.WS)


            self.state = 906
            self.match(vbaParser.EQ)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 907
                self.match(vbaParser.WS)


            self.state = 910
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassAttrContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassAttrContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleHeader" ):
                listener.enterClassModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleHeader" ):
                listener.exitClassModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleHeader" ):
                return visitor.visitClassModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def classModuleHeader(self):

        localctx = vbaParser.ClassModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 913 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 912
                        self.endOfLine()
                        self.state = 915 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                            break

                    self.state = 917
                    self.classAttr()

                else:
                    raise NoViableAltException(self)
                self.state = 921 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassAttr" ):
                listener.enterClassAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassAttr" ):
                listener.exitClassAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassAttr" ):
                return visitor.visitClassAttr(self)
            else:
                return visitor.visitChildren(self)




    def classAttr(self):

        localctx = vbaParser.ClassAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classAttr)
        self._la = 0 # Token type
        try:
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(vbaParser.ATTRIBUTE)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 927
                    self.match(vbaParser.WS)


                self.state = 930
                self.match(vbaParser.VB_NAME)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 931
                    self.match(vbaParser.WS)


                self.state = 934
                self.match(vbaParser.EQ)
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 935
                    self.match(vbaParser.WS)


                self.state = 938
                self.match(vbaParser.STRINGLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.match(vbaParser.ATTRIBUTE)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 940
                    self.match(vbaParser.WS)


                self.state = 943
                self.match(vbaParser.VB_GLOBALNAMESPACE)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 944
                    self.match(vbaParser.WS)


                self.state = 947
                self.match(vbaParser.EQ)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 948
                    self.match(vbaParser.WS)


                self.state = 951
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.match(vbaParser.ATTRIBUTE)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 953
                    self.match(vbaParser.WS)


                self.state = 956
                self.match(vbaParser.VB_CREATABLE)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 957
                    self.match(vbaParser.WS)


                self.state = 960
                self.match(vbaParser.EQ)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 961
                    self.match(vbaParser.WS)


                self.state = 964
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 965
                self.match(vbaParser.ATTRIBUTE)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 966
                    self.match(vbaParser.WS)


                self.state = 969
                self.match(vbaParser.VB_PREDECLAREDID)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 970
                    self.match(vbaParser.WS)


                self.state = 973
                self.match(vbaParser.EQ)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 974
                    self.match(vbaParser.WS)


                self.state = 977
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 978
                self.match(vbaParser.ATTRIBUTE)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 979
                    self.match(vbaParser.WS)


                self.state = 982
                self.match(vbaParser.VB_EXPOSED)
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 983
                    self.match(vbaParser.WS)


                self.state = 986
                self.match(vbaParser.EQ)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 987
                    self.match(vbaParser.WS)


                self.state = 990
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 991
                self.match(vbaParser.ATTRIBUTE)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 992
                    self.match(vbaParser.WS)


                self.state = 995
                self.match(vbaParser.VB_CUSTOMIZABLE)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 996
                    self.match(vbaParser.WS)


                self.state = 999
                self.match(vbaParser.EQ)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 1000
                    self.match(vbaParser.WS)


                self.state = 1003
                self.booleanLiteralIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeContext,0)


        def proceduralModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationSectionContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleBody" ):
                listener.enterProceduralModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleBody" ):
                listener.exitProceduralModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleBody" ):
                return visitor.visitProceduralModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleBody(self):

        localctx = vbaParser.ProceduralModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_proceduralModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.proceduralModuleDeclarationSection()


            self.state = 1012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1009
                    self.endOfLine() 
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 1015
            self.proceduralModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleCodeContext,0)


        def classModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationSectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleBody" ):
                listener.enterClassModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleBody" ):
                listener.exitClassModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleBody" ):
                return visitor.visitClassModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def classModuleBody(self):

        localctx = vbaParser.ClassModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1017
                self.classModuleDeclarationSection()


            self.state = 1020
            self.classModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnrestrictedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedIdentifierContext,0)


        def name(self):
            return self.getTypedRuleContext(vbaParser.NameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unrestrictedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnrestrictedName" ):
                listener.enterUnrestrictedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnrestrictedName" ):
                listener.exitUnrestrictedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnrestrictedName" ):
                return visitor.visitUnrestrictedName(self)
            else:
                return visitor.visitChildren(self)




    def unrestrictedName(self):

        localctx = vbaParser.UnrestrictedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unrestrictedName)
        try:
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.reservedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = vbaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_name)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.untypedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.typedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1028
                self.markedFileNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def FOREIGN_NAME(self):
            return self.getToken(vbaParser.FOREIGN_NAME, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_untypedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedName" ):
                listener.enterUntypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedName" ):
                listener.exitUntypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedName" ):
                return visitor.visitUntypedName(self)
            else:
                return visitor.visitChildren(self)




    def untypedName(self):

        localctx = vbaParser.UntypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_untypedName)
        try:
            self.state = 1033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.ambiguousIdentifier()
                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(vbaParser.FOREIGN_NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def proceduralModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationSection" ):
                listener.enterProceduralModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationSection" ):
                listener.exitProceduralModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationSection" ):
                return visitor.visitProceduralModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationSection(self):

        localctx = vbaParser.ProceduralModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_proceduralModuleDeclarationSection)
        self._la = 0 # Token type
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1036 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1035
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1038 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                        self.state = 1040
                        self.proceduralModuleDeclarationElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1044 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1047 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1046
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1049 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                        self.state = 1051
                        self.proceduralModuleDirectiveElement() 
                    self.state = 1057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 1059 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1058
                    self.endOfLine()
                    self.state = 1061 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                        break

                self.state = 1063
                self.defDirective()
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1065
                        self.proceduralModuleDeclarationElement()
                        self.state = 1066
                        self.endOfLineNoWs() 
                    self.state = 1072
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def classModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationSection" ):
                listener.enterClassModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationSection" ):
                listener.exitClassModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationSection" ):
                return visitor.visitClassModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationSection(self):

        localctx = vbaParser.ClassModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_classModuleDeclarationSection)
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1075
                        self.classModuleDeclarationElement()
                        self.state = 1077 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1076
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1079 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 1083 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1085
                        self.classModuleDirectiveElement()
                        self.state = 1087 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1086
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1089 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                 
                    self.state = 1095
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 1096
                self.defDirective()
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1098
                        self.classModuleDeclarationElement()
                        self.state = 1100 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1099
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1102 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                 
                    self.state = 1108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDirectiveElement" ):
                listener.enterProceduralModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDirectiveElement" ):
                listener.exitProceduralModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDirectiveElement" ):
                return visitor.visitProceduralModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDirectiveElement(self):

        localctx = vbaParser.ProceduralModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_proceduralModuleDirectiveElement)
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.commonOptionDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.optionPrivateDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.defDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def globalVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalVariableDeclarationContext,0)


        def publicConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicConstDeclarationContext,0)


        def publicExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicExternalProcedureDeclarationContext,0)


        def globalEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalEnumDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationElement" ):
                listener.enterProceduralModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationElement" ):
                listener.exitProceduralModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationElement" ):
                return visitor.visitProceduralModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationElement(self):

        localctx = vbaParser.ProceduralModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_proceduralModuleDeclarationElement)
        try:
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.globalVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.publicConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1119
                self.publicExternalProcedureDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1120
                self.globalEnumDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1121
                self.commonOptionDirective()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1122
                self.optionPrivateDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDirectiveElement" ):
                listener.enterClassModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDirectiveElement" ):
                listener.exitClassModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDirectiveElement" ):
                return visitor.visitClassModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDirectiveElement(self):

        localctx = vbaParser.ClassModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_classModuleDirectiveElement)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.commonOptionDirective()
                pass
            elif token in [54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.defDirective()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def eventDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EventDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationElement" ):
                listener.enterClassModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationElement" ):
                listener.exitClassModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationElement" ):
                return visitor.visitClassModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationElement(self):

        localctx = vbaParser.ClassModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classModuleDeclarationElement)
        try:
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.eventDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1132
                self.commonOptionDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.implementsDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonOptionDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionCompareDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionCompareDirectiveContext,0)


        def optionBaseDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionBaseDirectiveContext,0)


        def optionExplicitDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionExplicitDirectiveContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonOptionDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonOptionDirective" ):
                listener.enterCommonOptionDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonOptionDirective" ):
                listener.exitCommonOptionDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonOptionDirective" ):
                return visitor.visitCommonOptionDirective(self)
            else:
                return visitor.visitChildren(self)




    def commonOptionDirective(self):

        localctx = vbaParser.CommonOptionDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_commonOptionDirective)
        try:
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.optionCompareDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.optionBaseDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1138
                self.optionExplicitDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1139
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionCompareDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionCompareDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareDirective" ):
                listener.enterOptionCompareDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareDirective" ):
                listener.exitOptionCompareDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionCompareDirective" ):
                return visitor.visitOptionCompareDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionCompareDirective(self):

        localctx = vbaParser.OptionCompareDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_optionCompareDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(vbaParser.OPTION)
            self.state = 1143
            self.wsc()
            self.state = 1144
            self.match(vbaParser.COMPARE)
            self.state = 1145
            self.wsc()
            self.state = 1146
            _la = self._input.LA(1)
            if not(_la==14 or _la==179):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionBaseDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionBaseDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseDirective" ):
                listener.enterOptionBaseDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseDirective" ):
                listener.exitOptionBaseDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionBaseDirective" ):
                return visitor.visitOptionBaseDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionBaseDirective(self):

        localctx = vbaParser.OptionBaseDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_optionBaseDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(vbaParser.OPTION)
            self.state = 1149
            self.wsc()
            self.state = 1150
            self.match(vbaParser.BASE)
            self.state = 1151
            self.wsc()
            self.state = 1152
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionExplicitDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def EXPLICIT(self):
            return self.getToken(vbaParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionExplicitDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitDirective" ):
                listener.enterOptionExplicitDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitDirective" ):
                listener.exitOptionExplicitDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionExplicitDirective" ):
                return visitor.visitOptionExplicitDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionExplicitDirective(self):

        localctx = vbaParser.OptionExplicitDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_optionExplicitDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(vbaParser.OPTION)
            self.state = 1155
            self.wsc()
            self.state = 1156
            self.match(vbaParser.EXPLICIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionPrivateDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionPrivateDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateDirective" ):
                listener.enterOptionPrivateDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateDirective" ):
                listener.exitOptionPrivateDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionPrivateDirective" ):
                return visitor.visitOptionPrivateDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionPrivateDirective(self):

        localctx = vbaParser.OptionPrivateDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_optionPrivateDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(vbaParser.OPTION)
            self.state = 1159
            self.wsc()
            self.state = 1160
            self.match(vbaParser.PRIVATE)
            self.state = 1161
            self.wsc()
            self.state = 1162
            self.match(vbaParser.MODULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defType(self):
            return self.getTypedRuleContext(vbaParser.DefTypeContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def getRuleIndex(self):
            return vbaParser.RULE_defDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefDirective" ):
                listener.enterDefDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefDirective" ):
                listener.exitDefDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefDirective" ):
                return visitor.visitDefDirective(self)
            else:
                return visitor.visitChildren(self)




    def defDirective(self):

        localctx = vbaParser.DefDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_defDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.defType()
            self.state = 1165
            self.match(vbaParser.WS)
            self.state = 1166
            self.letterSpec()
            self.state = 1173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1167
                    self.match(vbaParser.WS)
                    self.state = 1168
                    self.match(vbaParser.COMMA)
                    self.state = 1169
                    self.match(vbaParser.WS)
                    self.state = 1170
                    self.letterSpec() 
                self.state = 1175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleLetter(self):
            return self.getTypedRuleContext(vbaParser.SingleLetterContext,0)


        def universalLetterRange(self):
            return self.getTypedRuleContext(vbaParser.UniversalLetterRangeContext,0)


        def letterRange(self):
            return self.getTypedRuleContext(vbaParser.LetterRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterSpec" ):
                listener.enterLetterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterSpec" ):
                listener.exitLetterSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterSpec" ):
                return visitor.visitLetterSpec(self)
            else:
                return visitor.visitChildren(self)




    def letterSpec(self):

        localctx = vbaParser.LetterSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_letterSpec)
        try:
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                self.singleLetter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                self.universalLetterRange()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1178
                self.letterRange()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLetter" ):
                listener.enterSingleLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLetter" ):
                listener.exitSingleLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLetter" ):
                return visitor.visitSingleLetter(self)
            else:
                return visitor.visitChildren(self)




    def singleLetter(self):

        localctx = vbaParser.SingleLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_singleLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniversalLetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCaseA(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseAContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def upperCaseZ(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseZContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_universalLetterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversalLetterRange" ):
                listener.enterUniversalLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversalLetterRange" ):
                listener.exitUniversalLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversalLetterRange" ):
                return visitor.visitUniversalLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def universalLetterRange(self):

        localctx = vbaParser.UniversalLetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_universalLetterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.upperCaseA()
            self.state = 1184
            self.match(vbaParser.WS)
            self.state = 1185
            self.match(vbaParser.MINUS)
            self.state = 1186
            self.match(vbaParser.WS)
            self.state = 1187
            self.upperCaseZ()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseA" ):
                listener.enterUpperCaseA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseA" ):
                listener.exitUpperCaseA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseA" ):
                return visitor.visitUpperCaseA(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseA(self):

        localctx = vbaParser.UpperCaseAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_upperCaseA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseZContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseZ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseZ" ):
                listener.enterUpperCaseZ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseZ" ):
                listener.exitUpperCaseZ(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseZ" ):
                return visitor.visitUpperCaseZ(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseZ(self):

        localctx = vbaParser.UpperCaseZContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_upperCaseZ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstLetter(self):
            return self.getTypedRuleContext(vbaParser.FirstLetterContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def lastLetter(self):
            return self.getTypedRuleContext(vbaParser.LastLetterContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterRange" ):
                listener.enterLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterRange" ):
                listener.exitLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterRange" ):
                return visitor.visitLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def letterRange(self):

        localctx = vbaParser.LetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_letterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.firstLetter()
            self.state = 1194
            self.match(vbaParser.WS)
            self.state = 1195
            self.match(vbaParser.MINUS)
            self.state = 1196
            self.match(vbaParser.WS)
            self.state = 1197
            self.lastLetter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_firstLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstLetter" ):
                listener.enterFirstLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstLetter" ):
                listener.exitFirstLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirstLetter" ):
                return visitor.visitFirstLetter(self)
            else:
                return visitor.visitChildren(self)




    def firstLetter(self):

        localctx = vbaParser.FirstLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_firstLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lastLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastLetter" ):
                listener.enterLastLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastLetter" ):
                listener.exitLastLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastLetter" ):
                return visitor.visitLastLetter(self)
            else:
                return visitor.visitChildren(self)




    def lastLetter(self):

        localctx = vbaParser.LastLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_lastLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_defType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefType" ):
                listener.enterDefType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefType" ):
                listener.exitDefType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefType" ):
                return visitor.visitDefType(self)
            else:
                return visitor.visitChildren(self)




    def defType(self):

        localctx = vbaParser.DefTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_defType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            _la = self._input.LA(1)
            if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 16351) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationContext,0)


        def privateConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateConstDeclarationContext,0)


        def privateTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateTypeDeclarationContext,0)


        def publicTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicTypeDeclarationContext,0)


        def privateEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateEnumDeclarationContext,0)


        def publicEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicEnumDeclarationContext,0)


        def privateExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateExternalProcedureDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleDeclarationElement" ):
                listener.enterCommonModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleDeclarationElement" ):
                listener.exitCommonModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleDeclarationElement" ):
                return visitor.visitCommonModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleDeclarationElement(self):

        localctx = vbaParser.CommonModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_commonModuleDeclarationElement)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1205
                self.moduleVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1206
                self.privateConstDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1207
                self.privateTypeDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1208
                self.publicTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1209
                self.privateEnumDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1210
                self.publicEnumDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1211
                self.privateExternalProcedureDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publicVariableDecalation(self):
            return self.getTypedRuleContext(vbaParser.PublicVariableDecalationContext,0)


        def privateVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateVariableDeclarationContext,0)


        def variableHelpAttribute(self):
            return self.getTypedRuleContext(vbaParser.VariableHelpAttributeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclaration" ):
                listener.enterModuleVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclaration" ):
                listener.exitModuleVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclaration" ):
                return visitor.visitModuleVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclaration(self):

        localctx = vbaParser.ModuleVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_moduleVariableDeclaration)
        try:
            self.state = 1217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.publicVariableDecalation()
                pass
            elif token in [68, 148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.privateVariableDeclaration()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1216
                self.variableHelpAttribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableHelpAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def VB_VARHELPID(self):
            return self.getToken(vbaParser.VB_VARHELPID, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variableHelpAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableHelpAttribute" ):
                listener.enterVariableHelpAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableHelpAttribute" ):
                listener.exitVariableHelpAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableHelpAttribute" ):
                return visitor.visitVariableHelpAttribute(self)
            else:
                return visitor.visitChildren(self)




    def variableHelpAttribute(self):

        localctx = vbaParser.VariableHelpAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableHelpAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(vbaParser.ATTRIBUTE)
            self.state = 1220
            self.match(vbaParser.WS)
            self.state = 1221
            self.ambiguousIdentifier()
            self.state = 1222
            self.match(vbaParser.PERIOD)
            self.state = 1223
            self.match(vbaParser.VB_VARHELPID)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1224
                self.match(vbaParser.WS)


            self.state = 1227
            self.match(vbaParser.EQ)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 1228
                self.match(vbaParser.WS)


            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253:
                self.state = 1231
                self.match(vbaParser.MINUS)


            self.state = 1234
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVariableDeclaration" ):
                listener.enterGlobalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVariableDeclaration" ):
                listener.exitGlobalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalVariableDeclaration" ):
                return visitor.visitGlobalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalVariableDeclaration(self):

        localctx = vbaParser.GlobalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_globalVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(vbaParser.GLOBAL)
            self.state = 1237
            self.match(vbaParser.WS)
            self.state = 1238
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicVariableDecalationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicVariableDecalation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicVariableDecalation" ):
                listener.enterPublicVariableDecalation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicVariableDecalation" ):
                listener.exitPublicVariableDecalation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicVariableDecalation" ):
                return visitor.visitPublicVariableDecalation(self)
            else:
                return visitor.visitChildren(self)




    def publicVariableDecalation(self):

        localctx = vbaParser.PublicVariableDecalationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_publicVariableDecalation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(vbaParser.PUBLIC)
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1241
                self.match(vbaParser.WS)
                self.state = 1242
                self.match(vbaParser.SHARED)


            self.state = 1245
            self.match(vbaParser.WS)
            self.state = 1246
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_privateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateVariableDeclaration" ):
                listener.enterPrivateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateVariableDeclaration" ):
                listener.exitPrivateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateVariableDeclaration" ):
                return visitor.visitPrivateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateVariableDeclaration(self):

        localctx = vbaParser.PrivateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_privateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            _la = self._input.LA(1)
            if not(_la==68 or _la==148):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1249
            self.wsc()
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 1251
                self.match(vbaParser.SHARED)
                self.state = 1252
                self.wsc()


            self.state = 1255
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witheventsVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WitheventsVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.WitheventsVariableDclContext,i)


        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclarationList" ):
                listener.enterModuleVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclarationList" ):
                listener.exitModuleVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclarationList" ):
                return visitor.visitModuleVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclarationList(self):

        localctx = vbaParser.ModuleVariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_moduleVariableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.state = 1257
                self.witheventsVariableDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 49, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 175, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.state = 1258
                self.variableDcl()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1261
                        self.wsc()


                    self.state = 1264
                    self.match(vbaParser.COMMA)
                    self.state = 1266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1265
                        self.wsc()


                    self.state = 1270
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [219]:
                        self.state = 1268
                        self.witheventsVariableDcl()
                        pass
                    elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 49, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 175, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                        self.state = 1269
                        self.variableDcl()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = vbaParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.variableDcl()
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1278
                        self.wsc()


                    self.state = 1281
                    self.match(vbaParser.COMMA)
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1282
                        self.wsc()


                    self.state = 1285
                    self.variableDcl() 
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedVariableDclContext,0)


        def untypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedVariableDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDcl" ):
                listener.enterVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDcl" ):
                listener.exitVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDcl" ):
                return visitor.visitVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def variableDcl(self):

        localctx = vbaParser.VariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_variableDcl)
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.typedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.untypedVariableDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableDcl" ):
                listener.enterTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableDcl" ):
                listener.exitTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedVariableDcl" ):
                return visitor.visitTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedVariableDcl(self):

        localctx = vbaParser.TypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typedVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.typedName()
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.wsc()


            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 1299
                self.arrayDim()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayClause(self):
            return self.getTypedRuleContext(vbaParser.ArrayClauseContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedVariableDcl" ):
                listener.enterUntypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedVariableDcl" ):
                listener.exitUntypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedVariableDcl" ):
                return visitor.visitUntypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedVariableDcl(self):

        localctx = vbaParser.UntypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_untypedVariableDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.ambiguousIdentifier()
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1303
                self.wsc()


            self.state = 1308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [251]:
                self.state = 1306
                self.arrayClause()
                pass
            elif token in [10]:
                self.state = 1307
                self.asClause()
                pass
            elif token in [-1, 7, 75, 89, 91, 93, 148, 149, 152, 172, 177, 242, 272, 273, 274, 275, 277, 279]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayClause" ):
                listener.enterArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayClause" ):
                listener.exitArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayClause" ):
                return visitor.visitArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayClause(self):

        localctx = vbaParser.ArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arrayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.arrayDim()
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.wsc()
                self.state = 1312
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asAutoObject(self):
            return self.getTypedRuleContext(vbaParser.AsAutoObjectContext,0)


        def asType(self):
            return self.getTypedRuleContext(vbaParser.AsTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsClause" ):
                listener.enterAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsClause" ):
                listener.exitAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsClause" ):
                return visitor.visitAsClause(self)
            else:
                return visitor.visitChildren(self)




    def asClause(self):

        localctx = vbaParser.AsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_asClause)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.asAutoObject()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1317
                self.asType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WitheventsVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_witheventsVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitheventsVariableDcl" ):
                listener.enterWitheventsVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitheventsVariableDcl" ):
                listener.exitWitheventsVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWitheventsVariableDcl" ):
                return visitor.visitWitheventsVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def witheventsVariableDcl(self):

        localctx = vbaParser.WitheventsVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_witheventsVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(vbaParser.WITHEVENTS)
            self.state = 1321
            self.wsc()
            self.state = 1322
            self.ambiguousIdentifier()
            self.state = 1323
            self.wsc()
            self.state = 1324
            self.match(vbaParser.AS)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1325
                self.wsc()


            self.state = 1328
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeName" ):
                listener.enterClassTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeName" ):
                listener.exitClassTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTypeName" ):
                return visitor.visitClassTypeName(self)
            else:
                return visitor.visitChildren(self)




    def classTypeName(self):

        localctx = vbaParser.ClassTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_classTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.definedTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundsList(self):
            return self.getTypedRuleContext(vbaParser.BoundsListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDim" ):
                listener.enterArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDim" ):
                listener.exitArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDim" ):
                return visitor.visitArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def arrayDim(self):

        localctx = vbaParser.ArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(vbaParser.LPAREN)
            self.state = 1334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1333
                self.wsc()


            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1336
                self.boundsList()


            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1339
                self.wsc()


            self.state = 1342
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_boundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundsList" ):
                listener.enterBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundsList" ):
                listener.exitBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundsList" ):
                return visitor.visitBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def boundsList(self):

        localctx = vbaParser.BoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_boundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.dimSpec()
            self.state = 1355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1345
                        self.wsc()


                    self.state = 1348
                    self.match(vbaParser.COMMA)
                    self.state = 1350
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        self.state = 1349
                        self.wsc()


                    self.state = 1352
                    self.dimSpec() 
                self.state = 1357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperBound(self):
            return self.getTypedRuleContext(vbaParser.UpperBoundContext,0)


        def lowerBound(self):
            return self.getTypedRuleContext(vbaParser.LowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimSpec" ):
                listener.enterDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimSpec" ):
                listener.exitDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimSpec" ):
                return visitor.visitDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dimSpec(self):

        localctx = vbaParser.DimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_dimSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1358
                self.lowerBound()


            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1361
                self.wsc()


            self.state = 1364
            self.upperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerBound" ):
                listener.enterLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerBound" ):
                listener.exitLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLowerBound" ):
                return visitor.visitLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def lowerBound(self):

        localctx = vbaParser.LowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_lowerBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.constantExpression()
            self.state = 1367
            self.wsc()
            self.state = 1368
            self.match(vbaParser.TO)
            self.state = 1369
            self.wsc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperBound" ):
                listener.enterUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperBound" ):
                listener.exitUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperBound" ):
                return visitor.visitUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def upperBound(self):

        localctx = vbaParser.UpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_upperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsAutoObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asAutoObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsAutoObject" ):
                listener.enterAsAutoObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsAutoObject" ):
                listener.exitAsAutoObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsAutoObject" ):
                return visitor.visitAsAutoObject(self)
            else:
                return visitor.visitChildren(self)




    def asAutoObject(self):

        localctx = vbaParser.AsAutoObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_asAutoObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(vbaParser.AS)
            self.state = 1374
            self.match(vbaParser.WS)
            self.state = 1375
            self.match(vbaParser.NEW)
            self.state = 1376
            self.match(vbaParser.WS)
            self.state = 1377
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def typeSpec(self):
            return self.getTypedRuleContext(vbaParser.TypeSpecContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsType" ):
                listener.enterAsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsType" ):
                listener.exitAsType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsType" ):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = vbaParser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(vbaParser.AS)
            self.state = 1380
            self.match(vbaParser.WS)
            self.state = 1381
            self.typeSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixedLengthStringSpec(self):
            return self.getTypedRuleContext(vbaParser.FixedLengthStringSpecContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = vbaParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeSpec)
        try:
            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1383
                self.fixedLengthStringSpec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FixedLengthStringSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def stringLength(self):
            return self.getTypedRuleContext(vbaParser.StringLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fixedLengthStringSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedLengthStringSpec" ):
                listener.enterFixedLengthStringSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedLengthStringSpec" ):
                listener.exitFixedLengthStringSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFixedLengthStringSpec" ):
                return visitor.visitFixedLengthStringSpec(self)
            else:
                return visitor.visitChildren(self)




    def fixedLengthStringSpec(self):

        localctx = vbaParser.FixedLengthStringSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fixedLengthStringSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(vbaParser.STRING)
            self.state = 1388
            self.match(vbaParser.WS)
            self.state = 1389
            self.match(vbaParser.MULT)
            self.state = 1390
            self.match(vbaParser.WS)
            self.state = 1391
            self.stringLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def constantName(self):
            return self.getTypedRuleContext(vbaParser.ConstantNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLength" ):
                listener.enterStringLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLength" ):
                listener.exitStringLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLength" ):
                return visitor.visitStringLength(self)
            else:
                return visitor.visitChildren(self)




    def stringLength(self):

        localctx = vbaParser.StringLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stringLength)
        try:
            self.state = 1395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 79, 83, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 137, 144, 149, 150, 154, 156, 159, 163, 167, 173, 175, 179, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 281, 282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.constantName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantName" ):
                listener.enterConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantName" ):
                listener.exitConstantName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantName" ):
                return visitor.visitConstantName(self)
            else:
                return visitor.visitChildren(self)




    def constantName(self):

        localctx = vbaParser.ConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.simpleNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicConstDeclaration" ):
                listener.enterPublicConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicConstDeclaration" ):
                listener.exitPublicConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicConstDeclaration" ):
                return visitor.visitPublicConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicConstDeclaration(self):

        localctx = vbaParser.PublicConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_publicConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            _la = self._input.LA(1)
            if not(_la==93 or _la==152):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1400
            self.wsc()
            self.state = 1401
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateConstDeclaration" ):
                listener.enterPrivateConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateConstDeclaration" ):
                listener.exitPrivateConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateConstDeclaration" ):
                return visitor.visitPrivateConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateConstDeclaration(self):

        localctx = vbaParser.PrivateConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_privateConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1403
                self.match(vbaParser.PRIVATE)
                self.state = 1404
                self.wsc()


            self.state = 1407
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConstDeclaration" ):
                listener.enterModuleConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConstDeclaration" ):
                listener.exitModuleConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleConstDeclaration" ):
                return visitor.visitModuleConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleConstDeclaration(self):

        localctx = vbaParser.ModuleConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_moduleConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def constItemList(self):
            return self.getTypedRuleContext(vbaParser.ConstItemListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = vbaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_constDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(vbaParser.CONST)
            self.state = 1412
            self.wsc()
            self.state = 1413
            self.constItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_constItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItemList" ):
                listener.enterConstItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItemList" ):
                listener.exitConstItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItemList" ):
                return visitor.visitConstItemList(self)
            else:
                return visitor.visitChildren(self)




    def constItemList(self):

        localctx = vbaParser.ConstItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_constItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.constItem()
            self.state = 1426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1416
                        self.wsc()


                    self.state = 1419
                    self.match(vbaParser.COMMA)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1420
                        self.wsc()


                    self.state = 1423
                    self.constItem() 
                self.state = 1428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.TypedNameConstItemContext,0)


        def untypedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameConstItemContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItem" ):
                listener.enterConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItem" ):
                listener.exitConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItem" ):
                return visitor.visitConstItem(self)
            else:
                return visitor.visitChildren(self)




    def constItem(self):

        localctx = vbaParser.ConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_constItem)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.typedNameConstItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.untypedNameConstItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameConstItem" ):
                listener.enterTypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameConstItem" ):
                listener.exitTypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameConstItem" ):
                return visitor.visitTypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def typedNameConstItem(self):

        localctx = vbaParser.TypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.typedName()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1434
                self.wsc()


            self.state = 1437
            self.match(vbaParser.EQ)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1438
                self.wsc()


            self.state = 1441
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def constAsClause(self):
            return self.getTypedRuleContext(vbaParser.ConstAsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameConstItem" ):
                listener.enterUntypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameConstItem" ):
                listener.exitUntypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameConstItem" ):
                return visitor.visitUntypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameConstItem(self):

        localctx = vbaParser.UntypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_untypedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.ambiguousIdentifier()
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1444
                self.wsc()
                self.state = 1445
                self.constAsClause()


            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1449
                self.wsc()


            self.state = 1452
            self.match(vbaParser.EQ)
            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1453
                self.wsc()


            self.state = 1456
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstAsClause" ):
                listener.enterConstAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstAsClause" ):
                listener.exitConstAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstAsClause" ):
                return visitor.visitConstAsClause(self)
            else:
                return visitor.visitChildren(self)




    def constAsClause(self):

        localctx = vbaParser.ConstAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_constAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(vbaParser.AS)
            self.state = 1459
            self.wsc()
            self.state = 1460
            self.builtinType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicTypeDeclaration" ):
                listener.enterPublicTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicTypeDeclaration" ):
                listener.exitPublicTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicTypeDeclaration" ):
                return visitor.visitPublicTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicTypeDeclaration(self):

        localctx = vbaParser.PublicTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_publicTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93 or _la==152:
                self.state = 1462
                _la = self._input.LA(1)
                if not(_la==93 or _la==152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1463
                self.wsc()


            self.state = 1466
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateTypeDeclaration" ):
                listener.enterPrivateTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateTypeDeclaration" ):
                listener.exitPrivateTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateTypeDeclaration" ):
                return visitor.visitPrivateTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateTypeDeclaration(self):

        localctx = vbaParser.PrivateTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_privateTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(vbaParser.PRIVATE)
            self.state = 1469
            self.wsc()
            self.state = 1470
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.TYPE)
            else:
                return self.getToken(vbaParser.TYPE, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def udtMemberList(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtDeclaration" ):
                listener.enterUdtDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtDeclaration" ):
                listener.exitUdtDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtDeclaration" ):
                return visitor.visitUdtDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def udtDeclaration(self):

        localctx = vbaParser.UdtDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_udtDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(vbaParser.TYPE)
            self.state = 1473
            self.wsc()
            self.state = 1474
            self.untypedName()
            self.state = 1476 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1475
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1478 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1480
            self.udtMemberList()
            self.state = 1482 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1481
                self.endOfStatement()
                self.state = 1484 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1486
            self.match(vbaParser.END)
            self.state = 1487
            self.wsc()
            self.state = 1488
            self.match(vbaParser.TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udtElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.UdtElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.UdtElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMemberList" ):
                listener.enterUdtMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMemberList" ):
                listener.exitUdtMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMemberList" ):
                return visitor.visitUdtMemberList(self)
            else:
                return visitor.visitChildren(self)




    def udtMemberList(self):

        localctx = vbaParser.UdtMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_udtMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.udtElement()
            self.state = 1496
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1491
                    self.endOfStatement()
                    self.state = 1492
                    self.udtElement() 
                self.state = 1498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def udtMember(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtElement" ):
                listener.enterUdtElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtElement" ):
                listener.exitUdtElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtElement" ):
                return visitor.visitUdtElement(self)
            else:
                return visitor.visitChildren(self)




    def udtElement(self):

        localctx = vbaParser.UdtElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_udtElement)
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.remStatement()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.udtMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameMemberDclContext,0)


        def untypedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameMemberDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMember" ):
                listener.enterUdtMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMember" ):
                listener.exitUdtMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMember" ):
                return visitor.visitUdtMember(self)
            else:
                return visitor.visitChildren(self)




    def udtMember(self):

        localctx = vbaParser.UdtMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_udtMember)
        try:
            self.state = 1505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 6, 7, 9, 10, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 113, 115, 116, 123, 124, 125, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 152, 153, 155, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 218, 219, 220, 221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1503
                self.reservedNameMemberDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1504
                self.untypedNameMemberDcl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def optionalArrayClause(self):
            return self.getTypedRuleContext(vbaParser.OptionalArrayClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameMemberDcl" ):
                listener.enterUntypedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameMemberDcl" ):
                listener.exitUntypedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameMemberDcl" ):
                return visitor.visitUntypedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameMemberDcl(self):

        localctx = vbaParser.UntypedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_untypedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.ambiguousIdentifier()
            self.state = 1508
            self.optionalArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedMemberName(self):
            return self.getTypedRuleContext(vbaParser.ReservedMemberNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedNameMemberDcl" ):
                listener.enterReservedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedNameMemberDcl" ):
                listener.exitReservedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedNameMemberDcl" ):
                return visitor.visitReservedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def reservedNameMemberDcl(self):

        localctx = vbaParser.ReservedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_reservedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.reservedMemberName()
            self.state = 1511
            self.wsc()
            self.state = 1512
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalArrayClause" ):
                listener.enterOptionalArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalArrayClause" ):
                listener.exitOptionalArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalArrayClause" ):
                return visitor.visitOptionalArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalArrayClause(self):

        localctx = vbaParser.OptionalArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_optionalArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 1514
                self.arrayDim()


            self.state = 1517
            self.wsc()
            self.state = 1518
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedMemberNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedMemberName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedMemberName" ):
                listener.enterReservedMemberName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedMemberName" ):
                listener.exitReservedMemberName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedMemberName" ):
                return visitor.visitReservedMemberName(self)
            else:
                return visitor.visitChildren(self)




    def reservedMemberName(self):

        localctx = vbaParser.ReservedMemberNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_reservedMemberName)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1522
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1523
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1524
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1525
                self.literalIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1526
                self.reservedForImplementationUse()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1527
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalEnumDeclaration" ):
                listener.enterGlobalEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalEnumDeclaration" ):
                listener.exitGlobalEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalEnumDeclaration" ):
                return visitor.visitGlobalEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalEnumDeclaration(self):

        localctx = vbaParser.GlobalEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_globalEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(vbaParser.GLOBAL)
            self.state = 1531
            self.wsc()
            self.state = 1532
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicEnumDeclaration" ):
                listener.enterPublicEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicEnumDeclaration" ):
                listener.exitPublicEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicEnumDeclaration" ):
                return visitor.visitPublicEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicEnumDeclaration(self):

        localctx = vbaParser.PublicEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_publicEnumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1534
                self.match(vbaParser.PUBLIC)
                self.state = 1535
                self.wsc()


            self.state = 1538
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateEnumDeclaration" ):
                listener.enterPrivateEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateEnumDeclaration" ):
                listener.exitPrivateEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateEnumDeclaration" ):
                return visitor.visitPrivateEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateEnumDeclaration(self):

        localctx = vbaParser.PrivateEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_privateEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(vbaParser.PRIVATE)
            self.state = 1541
            self.wsc()
            self.state = 1542
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.ENUM)
            else:
                return self.getToken(vbaParser.ENUM, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def enumMemberList(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = vbaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.match(vbaParser.ENUM)
            self.state = 1545
            self.wsc()
            self.state = 1546
            self.untypedName()
            self.state = 1548 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1547
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1550 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1552
            self.enumMemberList()
            self.state = 1554 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1553
                self.endOfStatement()
                self.state = 1556 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1558
            self.match(vbaParser.END)
            self.state = 1559
            self.wsc()
            self.state = 1560
            self.match(vbaParser.ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMemberList" ):
                listener.enterEnumMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMemberList" ):
                listener.exitEnumMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMemberList" ):
                return visitor.visitEnumMemberList(self)
            else:
                return visitor.visitChildren(self)




    def enumMemberList(self):

        localctx = vbaParser.EnumMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_enumMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.enumElement()
            self.state = 1568
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1563
                    self.endOfStatement()
                    self.state = 1564
                    self.enumElement() 
                self.state = 1570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def enumMember(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_enumElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumElement" ):
                listener.enterEnumElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumElement" ):
                listener.exitEnumElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumElement" ):
                return visitor.visitEnumElement(self)
            else:
                return visitor.visitChildren(self)




    def enumElement(self):

        localctx = vbaParser.EnumElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_enumElement)
        try:
            self.state = 1573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1571
                self.remStatement()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281, 282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1572
                self.enumMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMember" ):
                listener.enterEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMember" ):
                listener.exitEnumMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMember" ):
                return visitor.visitEnumMember(self)
            else:
                return visitor.visitChildren(self)




    def enumMember(self):

        localctx = vbaParser.EnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enumMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.untypedName()
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1576
                    self.wsc()


                self.state = 1579
                self.match(vbaParser.EQ)
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1580
                    self.wsc()


                self.state = 1583
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicExternalProcedureDeclaration" ):
                listener.enterPublicExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicExternalProcedureDeclaration" ):
                listener.exitPublicExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicExternalProcedureDeclaration" ):
                return visitor.visitPublicExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicExternalProcedureDeclaration(self):

        localctx = vbaParser.PublicExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_publicExternalProcedureDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1586
                self.match(vbaParser.PUBLIC)
                self.state = 1587
                self.wsc()


            self.state = 1590
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateExternalProcedureDeclaration" ):
                listener.enterPrivateExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateExternalProcedureDeclaration" ):
                listener.exitPrivateExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateExternalProcedureDeclaration" ):
                return visitor.visitPrivateExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateExternalProcedureDeclaration(self):

        localctx = vbaParser.PrivateExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_privateExternalProcedureDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(vbaParser.PRIVATE)
            self.state = 1593
            self.wsc()
            self.state = 1594
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalProcDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def externalSub(self):
            return self.getTypedRuleContext(vbaParser.ExternalSubContext,0)


        def externalFunction(self):
            return self.getTypedRuleContext(vbaParser.ExternalFunctionContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_externalProcDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalProcDcl" ):
                listener.enterExternalProcDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalProcDcl" ):
                listener.exitExternalProcDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalProcDcl" ):
                return visitor.visitExternalProcDcl(self)
            else:
                return visitor.visitChildren(self)




    def externalProcDcl(self):

        localctx = vbaParser.ExternalProcDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_externalProcDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.match(vbaParser.DECLARE)
            self.state = 1597
            self.wsc()
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1598
                self.match(vbaParser.PTRSAFE)
                self.state = 1599
                self.wsc()


            self.state = 1604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177]:
                self.state = 1602
                self.externalSub()
                pass
            elif token in [91]:
                self.state = 1603
                self.externalFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalSubContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalSub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalSub" ):
                listener.enterExternalSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalSub" ):
                listener.exitExternalSub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalSub" ):
                return visitor.visitExternalSub(self)
            else:
                return visitor.visitChildren(self)




    def externalSub(self):

        localctx = vbaParser.ExternalSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_externalSub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(vbaParser.SUB)
            self.state = 1607
            self.wsc()
            self.state = 1608
            self.subroutineName()
            self.state = 1609
            self.wsc()
            self.state = 1610
            self.libInfo()
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1611
                self.wsc()
                self.state = 1612
                self.procedureParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunction" ):
                listener.enterExternalFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunction" ):
                listener.exitExternalFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalFunction" ):
                return visitor.visitExternalFunction(self)
            else:
                return visitor.visitChildren(self)




    def externalFunction(self):

        localctx = vbaParser.ExternalFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_externalFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(vbaParser.FUNCTION)
            self.state = 1617
            self.wsc()
            self.state = 1618
            self.functionName()
            self.state = 1619
            self.wsc()
            self.state = 1620
            self.libInfo()
            self.state = 1624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1621
                self.wsc()
                self.state = 1622
                self.procedureParameters()


            self.state = 1629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1626
                self.wsc()
                self.state = 1627
                self.functionType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libClause(self):
            return self.getTypedRuleContext(vbaParser.LibClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def aliasClause(self):
            return self.getTypedRuleContext(vbaParser.AliasClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_libInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibInfo" ):
                listener.enterLibInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibInfo" ):
                listener.exitLibInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibInfo" ):
                return visitor.visitLibInfo(self)
            else:
                return visitor.visitChildren(self)




    def libInfo(self):

        localctx = vbaParser.LibInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_libInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.libClause()
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1632
                self.wsc()
                self.state = 1633
                self.aliasClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_libClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibClause" ):
                listener.enterLibClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibClause" ):
                listener.exitLibClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibClause" ):
                return visitor.visitLibClause(self)
            else:
                return visitor.visitChildren(self)




    def libClause(self):

        localctx = vbaParser.LibClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_libClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(vbaParser.LIB)
            self.state = 1638
            self.wsc()
            self.state = 1639
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_aliasClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasClause" ):
                listener.enterAliasClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasClause" ):
                listener.exitAliasClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasClause" ):
                return visitor.visitAliasClause(self)
            else:
                return visitor.visitChildren(self)




    def aliasClause(self):

        localctx = vbaParser.AliasClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_aliasClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(vbaParser.ALIAS)
            self.state = 1642
            self.wsc()
            self.state = 1643
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsDirective" ):
                listener.enterImplementsDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsDirective" ):
                listener.exitImplementsDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementsDirective" ):
                return visitor.visitImplementsDirective(self)
            else:
                return visitor.visitChildren(self)




    def implementsDirective(self):

        localctx = vbaParser.ImplementsDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_implementsDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1646
            self.match(vbaParser.WS)
            self.state = 1647
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def eventParameterList(self):
            return self.getTypedRuleContext(vbaParser.EventParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDeclaration" ):
                listener.enterEventDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDeclaration" ):
                listener.exitEventDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDeclaration" ):
                return visitor.visitEventDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def eventDeclaration(self):

        localctx = vbaParser.EventDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_eventDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1649
                self.match(vbaParser.PUBLIC)


            self.state = 1652
            self.wsc()
            self.state = 1653
            self.match(vbaParser.EVENT)
            self.state = 1654
            self.wsc()
            self.state = 1655
            self.ambiguousIdentifier()
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 1656
                self.eventParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = vbaParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.match(vbaParser.LPAREN)
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1660
                self.wsc()


            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 565272457410836) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 294845081322553361) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 37044130849) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 33554185) != 0) or _la==281:
                self.state = 1663
                self.positionalParameters()


            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 1666
                self.wsc()


            self.state = 1669
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCode" ):
                listener.enterProceduralModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCode" ):
                listener.exitProceduralModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCode" ):
                return visitor.visitProceduralModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCode(self):

        localctx = vbaParser.ProceduralModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_proceduralModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1671
                    self.proceduralModuleCodeElement()
                    self.state = 1675
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1672
                            self.endOfLine() 
                        self.state = 1677
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
             
                self.state = 1682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCode" ):
                listener.enterClassModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCode" ):
                listener.exitClassModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCode" ):
                return visitor.visitClassModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCode(self):

        localctx = vbaParser.ClassModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_classModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1683
                    self.classModuleCodeElement()
                    self.state = 1687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1684
                            self.endOfLine() 
                        self.state = 1689
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
             
                self.state = 1694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCodeElement" ):
                listener.enterProceduralModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCodeElement" ):
                listener.exitProceduralModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCodeElement" ):
                return visitor.visitProceduralModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCodeElement(self):

        localctx = vbaParser.ProceduralModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_proceduralModuleCodeElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.commonModuleCodeElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCodeElement" ):
                listener.enterClassModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCodeElement" ):
                listener.exitClassModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCodeElement" ):
                return visitor.visitClassModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCodeElement(self):

        localctx = vbaParser.ClassModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_classModuleCodeElement)
        try:
            self.state = 1699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 89, 91, 93, 148, 149, 152, 172, 177, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.commonModuleCodeElement()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def procedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ProcedureDeclarationContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(vbaParser.AttributeStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleCodeElement" ):
                listener.enterCommonModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleCodeElement" ):
                listener.exitCommonModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleCodeElement" ):
                return visitor.visitCommonModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleCodeElement(self):

        localctx = vbaParser.CommonModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_commonModuleCodeElement)
        try:
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self.remStatement()
                pass
            elif token in [89, 91, 93, 148, 149, 152, 172, 177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1702
                self.procedureDeclaration()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1703
                self.attributeStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDeclaration(self):
            return self.getTypedRuleContext(vbaParser.SubroutineDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(vbaParser.FunctionDeclarationContext,0)


        def propertyGetDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetDeclarationContext,0)


        def propertyLhsDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyLhsDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDeclaration" ):
                listener.enterProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDeclaration" ):
                listener.exitProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDeclaration" ):
                return visitor.visitProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclaration(self):

        localctx = vbaParser.ProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_procedureDeclaration)
        try:
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.subroutineDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1707
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1708
                self.propertyGetDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1709
                self.propertyLhsDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SUB)
            else:
                return self.getToken(vbaParser.SUB, i)

        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDeclaration" ):
                listener.enterSubroutineDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDeclaration" ):
                listener.exitSubroutineDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDeclaration" ):
                return visitor.visitSubroutineDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDeclaration(self):

        localctx = vbaParser.SubroutineDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_subroutineDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & -8646911284551352303) != 0):
                self.state = 1712
                self.procedureScope()
                self.state = 1713
                self.wsc()


            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 1717
                    self.initialStatic()
                    self.state = 1718
                    self.wsc()


                self.state = 1722
                self.match(vbaParser.SUB)
                self.state = 1723
                self.wsc()
                self.state = 1724
                self.subroutineName()

                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.wsc()


                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251:
                    self.state = 1728
                    self.procedureParameters()


                pass

            elif la_ == 2:
                self.state = 1731
                self.match(vbaParser.SUB)
                self.state = 1732
                self.wsc()
                self.state = 1733
                self.subroutineName()
                self.state = 1738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1734
                        self.wsc()


                    self.state = 1737
                    self.procedureParameters()


                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1740
                    self.wsc()


                self.state = 1743
                self.trailingStatic()
                pass


            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1747
                self.procedureBody()


            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1750
                self.endLabel()


            self.state = 1754 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1753
                self.endOfStatement()
                self.state = 1756 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1758
            self.match(vbaParser.END)
            self.state = 1759
            self.wsc()
            self.state = 1760
            self.match(vbaParser.SUB)
            self.state = 1762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1761
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.FUNCTION)
            else:
                return self.getToken(vbaParser.FUNCTION, i)

        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = vbaParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & -8646911284551352303) != 0):
                self.state = 1764
                self.procedureScope()
                self.state = 1765
                self.wsc()


            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 1769
                    self.initialStatic()
                    self.state = 1770
                    self.wsc()


                self.state = 1774
                self.match(vbaParser.FUNCTION)
                self.state = 1775
                self.wsc()
                self.state = 1776
                self.functionName()
                self.state = 1781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1778
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1777
                        self.wsc()


                    self.state = 1780
                    self.procedureParameters()


                self.state = 1787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1783
                        self.wsc()


                    self.state = 1786
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1789
                self.match(vbaParser.FUNCTION)
                self.state = 1790
                self.wsc()
                self.state = 1791
                self.functionName()
                self.state = 1796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1792
                        self.wsc()


                    self.state = 1795
                    self.procedureParameters()


                self.state = 1802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1798
                        self.wsc()


                    self.state = 1801
                    self.functionType()


                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1804
                    self.wsc()


                self.state = 1807
                self.trailingStatic()
                pass


            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1811
                self.procedureBody()


            self.state = 1815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1814
                self.endLabel()


            self.state = 1818 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1817
                self.endOfStatement()
                self.state = 1820 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1822
            self.match(vbaParser.END)
            self.state = 1823
            self.wsc()
            self.state = 1824
            self.match(vbaParser.FUNCTION)
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1825
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetDeclaration" ):
                listener.enterPropertyGetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetDeclaration" ):
                listener.exitPropertyGetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetDeclaration" ):
                return visitor.visitPropertyGetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyGetDeclaration(self):

        localctx = vbaParser.PropertyGetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_propertyGetDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & -8646911284551352303) != 0):
                self.state = 1828
                self.procedureScope()
                self.state = 1829
                self.wsc()


            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 1833
                    self.initialStatic()
                    self.state = 1834
                    self.wsc()


                self.state = 1838
                self.match(vbaParser.PROPERTY)
                self.state = 1839
                self.wsc()
                self.state = 1840
                self.match(vbaParser.GET)
                self.state = 1841
                self.wsc()
                self.state = 1842
                self.functionName()
                self.state = 1847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1843
                        self.wsc()


                    self.state = 1846
                    self.procedureParameters()


                self.state = 1853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1849
                        self.wsc()


                    self.state = 1852
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1855
                self.match(vbaParser.PROPERTY)
                self.state = 1856
                self.wsc()
                self.state = 1857
                self.match(vbaParser.GET)
                self.state = 1858
                self.wsc()
                self.state = 1859
                self.functionName()
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251:
                    self.state = 1860
                    self.procedureParameters()


                self.state = 1867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 1863
                        self.wsc()


                    self.state = 1866
                    self.functionType()


                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1869
                    self.wsc()


                self.state = 1872
                self.trailingStatic()
                pass


            self.state = 1877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1876
                self.procedureBody()


            self.state = 1880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1879
                self.endLabel()


            self.state = 1883 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1882
                self.endOfStatement()
                self.state = 1885 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1887
            self.match(vbaParser.END)
            self.state = 1888
            self.wsc()
            self.state = 1889
            self.match(vbaParser.PROPERTY)
            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLhsDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def propertyParameters(self):
            return self.getTypedRuleContext(vbaParser.PropertyParametersContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLhsDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLhsDeclaration" ):
                listener.enterPropertyLhsDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLhsDeclaration" ):
                listener.exitPropertyLhsDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyLhsDeclaration" ):
                return visitor.visitPropertyLhsDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyLhsDeclaration(self):

        localctx = vbaParser.PropertyLhsDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_propertyLhsDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & -8646911284551352303) != 0):
                self.state = 1893
                self.procedureScope()
                self.state = 1894
                self.wsc()


            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 1898
                    self.initialStatic()
                    self.state = 1899
                    self.wsc()


                self.state = 1903
                self.match(vbaParser.PROPERTY)
                self.state = 1904
                self.wsc()
                self.state = 1905
                _la = self._input.LA(1)
                if not(_la==111 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1906
                self.wsc()
                self.state = 1907
                self.subroutineName()
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1908
                    self.wsc()


                self.state = 1911
                self.propertyParameters()
                pass

            elif la_ == 2:
                self.state = 1913
                self.match(vbaParser.PROPERTY)
                self.state = 1914
                self.wsc()
                self.state = 1915
                _la = self._input.LA(1)
                if not(_la==111 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1916
                self.wsc()
                self.state = 1917
                self.subroutineName()
                self.state = 1918
                self.propertyParameters()
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1919
                    self.wsc()


                self.state = 1922
                self.trailingStatic()
                pass


            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1926
                self.procedureBody()


            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.endLabel()


            self.state = 1933 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1932
                self.endOfStatement()
                self.state = 1935 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 1937
            self.match(vbaParser.END)
            self.state = 1938
            self.wsc()
            self.state = 1939
            self.match(vbaParser.PROPERTY)
            self.state = 1941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1940
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndLabel" ):
                listener.enterEndLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndLabel" ):
                listener.exitEndLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndLabel" ):
                return visitor.visitEndLabel(self)
            else:
                return visitor.visitChildren(self)




    def endLabel(self):

        localctx = vbaParser.EndLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_endLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1943
                    self.endOfStatement() 
                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1949
            self.endOfLineNoWs()
            self.state = 1950
            self.statementLabelDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureTail" ):
                listener.enterProcedureTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureTail" ):
                listener.exitProcedureTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureTail" ):
                return visitor.visitProcedureTail(self)
            else:
                return visitor.visitChildren(self)




    def procedureTail(self):

        localctx = vbaParser.ProcedureTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_procedureTail)
        self._la = 0 # Token type
        try:
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1952
                    self.wsc()


                self.state = 1955
                self.match(vbaParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 1956
                    self.wsc()


                self.state = 1959
                self.commentBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 1960
                    self.match(vbaParser.WS)


                self.state = 1963
                self.match(vbaParser.COLON)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 1964
                    self.match(vbaParser.WS)


                self.state = 1967
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureScope" ):
                listener.enterProcedureScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureScope" ):
                listener.exitProcedureScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureScope" ):
                return visitor.visitProcedureScope(self)
            else:
                return visitor.visitChildren(self)




    def procedureScope(self):

        localctx = vbaParser.ProcedureScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_procedureScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & -8646911284551352303) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitialStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_initialStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitialStatic" ):
                listener.enterInitialStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitialStatic" ):
                listener.exitInitialStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitialStatic" ):
                return visitor.visitInitialStatic(self)
            else:
                return visitor.visitChildren(self)




    def initialStatic(self):

        localctx = vbaParser.InitialStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initialStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_trailingStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingStatic" ):
                listener.enterTrailingStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingStatic" ):
                listener.exitTrailingStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingStatic" ):
                return visitor.visitTrailingStatic(self)
            else:
                return visitor.visitChildren(self)




    def trailingStatic(self):

        localctx = vbaParser.TrailingStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_trailingStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineName" ):
                listener.enterSubroutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineName" ):
                listener.exitSubroutineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineName" ):
                return visitor.visitSubroutineName(self)
            else:
                return visitor.visitChildren(self)




    def subroutineName(self):

        localctx = vbaParser.SubroutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_subroutineName)
        try:
            self.state = 1978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1976
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1977
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = vbaParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionName)
        try:
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1980
                self.typedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.ambiguousIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1982
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventHandlerName(self):
            return self.getTypedRuleContext(vbaParser.EventHandlerNameContext,0)


        def implementedName(self):
            return self.getTypedRuleContext(vbaParser.ImplementedNameContext,0)


        def lifecycleHandlerName(self):
            return self.getTypedRuleContext(vbaParser.LifecycleHandlerNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_prefixedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixedName" ):
                listener.enterPrefixedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixedName" ):
                listener.exitPrefixedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixedName" ):
                return visitor.visitPrefixedName(self)
            else:
                return visitor.visitChildren(self)




    def prefixedName(self):

        localctx = vbaParser.PrefixedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_prefixedName)
        try:
            self.state = 1988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1985
                self.eventHandlerName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1986
                self.implementedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1987
                self.lifecycleHandlerName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = vbaParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(vbaParser.AS)
            self.state = 1991
            self.wsc()
            self.state = 1992
            self.typeExpression()
            self.state = 1994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1993
                self.wsc()


            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 1996
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDesignator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDesignator" ):
                listener.enterArrayDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDesignator" ):
                listener.exitArrayDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDesignator" ):
                return visitor.visitArrayDesignator(self)
            else:
                return visitor.visitChildren(self)




    def arrayDesignator(self):

        localctx = vbaParser.ArrayDesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_arrayDesignator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(vbaParser.LPAREN)
            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2000
                self.wsc()


            self.state = 2003
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameters" ):
                listener.enterProcedureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameters" ):
                listener.exitProcedureParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameters" ):
                return visitor.visitProcedureParameters(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameters(self):

        localctx = vbaParser.ProcedureParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_procedureParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(vbaParser.LPAREN)
            self.state = 2007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 2006
                self.wsc()


            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 565272457410836) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & -8928526955532222447) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 37044130851) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 33554185) != 0) or _la==281:
                self.state = 2009
                self.parameterList()


            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2012
                self.wsc()


            self.state = 2015
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def valueParam(self):
            return self.getTypedRuleContext(vbaParser.ValueParamContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_propertyParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyParameters" ):
                listener.enterPropertyParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyParameters" ):
                listener.exitPropertyParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyParameters" ):
                return visitor.visitPropertyParameters(self)
            else:
                return visitor.visitChildren(self)




    def propertyParameters(self):

        localctx = vbaParser.PropertyParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_propertyParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            self.match(vbaParser.LPAREN)
            self.state = 2019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2018
                self.wsc()


            self.state = 2029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 2021
                self.parameterList()
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2022
                    self.wsc()


                self.state = 2025
                self.match(vbaParser.COMMA)
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2026
                    self.wsc()




            self.state = 2031
            self.valueParam()
            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2032
                self.wsc()


            self.state = 2035
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def optionalParameters(self):
            return self.getTypedRuleContext(vbaParser.OptionalParametersContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramArray(self):
            return self.getTypedRuleContext(vbaParser.ParamArrayContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = vbaParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.state = 2060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.positionalParameters()
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2038
                    self.wsc()


                self.state = 2041
                self.match(vbaParser.COMMA)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2042
                    self.wsc()


                self.state = 2045
                self.optionalParameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2047
                self.positionalParameters()
                self.state = 2056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2048
                        self.wsc()


                    self.state = 2051
                    self.match(vbaParser.COMMA)
                    self.state = 2053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2052
                        self.wsc()


                    self.state = 2055
                    self.paramArray()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2058
                self.optionalParameters()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2059
                self.paramArray()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParameters" ):
                listener.enterPositionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParameters" ):
                listener.exitPositionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParameters" ):
                return visitor.visitPositionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def positionalParameters(self):

        localctx = vbaParser.PositionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_positionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.positionalParam()
            self.state = 2073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2063
                        self.wsc()


                    self.state = 2066
                    self.match(vbaParser.COMMA)
                    self.state = 2068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2067
                        self.wsc()


                    self.state = 2070
                    self.positionalParam() 
                self.state = 2075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OptionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.OptionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParameters" ):
                listener.enterOptionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParameters" ):
                listener.exitOptionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParameters" ):
                return visitor.visitOptionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def optionalParameters(self):

        localctx = vbaParser.OptionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_optionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.optionalParam()
            self.state = 2087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2077
                        self.wsc()


                    self.state = 2080
                    self.match(vbaParser.COMMA)
                    self.state = 2082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2081
                        self.wsc()


                    self.state = 2084
                    self.optionalParam() 
                self.state = 2089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self):
            return self.getTypedRuleContext(vbaParser.PositionalParamContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_valueParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueParam" ):
                listener.enterValueParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueParam" ):
                listener.exitValueParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueParam" ):
                return visitor.visitValueParam(self)
            else:
                return visitor.visitChildren(self)




    def valueParam(self):

        localctx = vbaParser.ValueParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_valueParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.positionalParam()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParam" ):
                listener.enterPositionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParam" ):
                listener.exitPositionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParam" ):
                return visitor.visitPositionalParam(self)
            else:
                return visitor.visitChildren(self)




    def positionalParam(self):

        localctx = vbaParser.PositionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_positionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==18:
                self.state = 2092
                self.parameterMechanism()
                self.state = 2093
                self.wsc()


            self.state = 2097
            self.paramDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalPrefix(self):
            return self.getTypedRuleContext(vbaParser.OptionalPrefixContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def defaultValue(self):
            return self.getTypedRuleContext(vbaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParam" ):
                listener.enterOptionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParam" ):
                listener.exitOptionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParam" ):
                return visitor.visitOptionalParam(self)
            else:
                return visitor.visitChildren(self)




    def optionalParam(self):

        localctx = vbaParser.OptionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_optionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.optionalPrefix()
            self.state = 2100
            self.wsc()
            self.state = 2101
            self.paramDcl()
            self.state = 2103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 2102
                self.wsc()


            self.state = 2106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==245:
                self.state = 2105
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def L_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_paramArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamArray" ):
                listener.enterParamArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamArray" ):
                listener.exitParamArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamArray" ):
                return visitor.visitParamArray(self)
            else:
                return visitor.visitChildren(self)




    def paramArray(self):

        localctx = vbaParser.ParamArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_paramArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(vbaParser.PARAMARRAY)
            self.state = 2109
            self.wsc()
            self.state = 2110
            self.ambiguousIdentifier()
            self.state = 2111
            self.match(vbaParser.LPAREN)
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2112
                self.wsc()


            self.state = 2115
            self.match(vbaParser.RPAREN)
            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2116
                self.wsc()
                self.state = 2117
                self.match(vbaParser.AS)
                self.state = 2118
                self.wsc()
                self.state = 2123
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [212]:
                    self.state = 2119
                    self.match(vbaParser.VARIANT)
                    pass
                elif token in [264]:
                    self.state = 2120
                    self.match(vbaParser.L_SQUARE_BRACKET)
                    self.state = 2121
                    self.match(vbaParser.VARIANT)
                    self.state = 2122
                    self.match(vbaParser.R_SQUARE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameParamDclContext,0)


        def typedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedNameParamDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_paramDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamDcl" ):
                listener.enterParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamDcl" ):
                listener.exitParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamDcl" ):
                return visitor.visitParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def paramDcl(self):

        localctx = vbaParser.ParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_paramDcl)
        try:
            self.state = 2129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2127
                self.untypedNameParamDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2128
                self.typedNameParamDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def parameterType(self):
            return self.getTypedRuleContext(vbaParser.ParameterTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameParamDcl" ):
                listener.enterUntypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameParamDcl" ):
                listener.exitUntypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameParamDcl" ):
                return visitor.visitUntypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameParamDcl(self):

        localctx = vbaParser.UntypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_untypedNameParamDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.ambiguousIdentifier()
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 2132
                self.parameterType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameParamDcl" ):
                listener.enterTypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameParamDcl" ):
                listener.exitTypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameParamDcl" ):
                return visitor.visitTypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedNameParamDcl(self):

        localctx = vbaParser.TypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_typedNameParamDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.typedName()
            self.state = 2137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 2136
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalPrefix" ):
                listener.enterOptionalPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalPrefix" ):
                listener.exitOptionalPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalPrefix" ):
                return visitor.visitOptionalPrefix(self)
            else:
                return visitor.visitChildren(self)




    def optionalPrefix(self):

        localctx = vbaParser.OptionalPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_optionalPrefix)
        try:
            self.state = 2149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2139
                self.match(vbaParser.OPTIONAL)
                self.state = 2143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2140
                    self.wsc()
                    self.state = 2141
                    self.parameterMechanism()


                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2145
                self.parameterMechanism()
                self.state = 2146
                self.wsc()
                self.state = 2147
                self.match(vbaParser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterMechanismContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_parameterMechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterMechanism" ):
                listener.enterParameterMechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterMechanism" ):
                listener.exitParameterMechanism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterMechanism" ):
                return visitor.visitParameterMechanism(self)
            else:
                return visitor.visitChildren(self)




    def parameterMechanism(self):

        localctx = vbaParser.ParameterMechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_parameterMechanism)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterType" ):
                listener.enterParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterType" ):
                listener.exitParameterType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterType" ):
                return visitor.visitParameterType(self)
            else:
                return visitor.visitChildren(self)




    def parameterType(self):

        localctx = vbaParser.ParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_parameterType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 2153
                self.arrayDesignator()


            self.state = 2156
            self.wsc()
            self.state = 2157
            self.match(vbaParser.AS)
            self.state = 2158
            self.wsc()
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 70, 71, 72, 79, 83, 88, 94, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 114, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 131, 137, 138, 144, 149, 150, 154, 156, 159, 163, 167, 169, 170, 173, 175, 176, 179, 185, 212, 213, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 258, 281, 282]:
                self.state = 2159
                self.typeExpression()
                pass
            elif token in [6]:
                self.state = 2160
                self.match(vbaParser.ANY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = vbaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.match(vbaParser.EQ)
            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2164
                self.wsc()


            self.state = 2167
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventHandlerName" ):
                listener.enterEventHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventHandlerName" ):
                listener.exitEventHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventHandlerName" ):
                return visitor.visitEventHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def eventHandlerName(self):

        localctx = vbaParser.EventHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_eventHandlerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementedName" ):
                listener.enterImplementedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementedName" ):
                listener.exitImplementedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementedName" ):
                return visitor.visitImplementedName(self)
            else:
                return visitor.visitChildren(self)




    def implementedName(self):

        localctx = vbaParser.ImplementedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_implementedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifecycleHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lifecycleHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifecycleHandlerName" ):
                listener.enterLifecycleHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifecycleHandlerName" ):
                listener.exitLifecycleHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLifecycleHandlerName" ):
                return visitor.visitLifecycleHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def lifecycleHandlerName(self):

        localctx = vbaParser.LifecycleHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_lifecycleHandlerName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            _la = self._input.LA(1)
            if not(_la==35 or _la==36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureBody" ):
                listener.enterProcedureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureBody" ):
                listener.exitProcedureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureBody" ):
                return visitor.visitProcedureBody(self)
            else:
                return visitor.visitChildren(self)




    def procedureBody(self):

        localctx = vbaParser.ProcedureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_procedureBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementBlock" ):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)




    def statementBlock(self):

        localctx = vbaParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_statementBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2177
                    self.blockStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 2180 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(vbaParser.StatementContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(vbaParser.AttributeStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = vbaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_blockStatement)
        try:
            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2182
                        self.endOfStatement() 
                    self.state = 2187
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

                self.state = 2188
                self.endOfLineNoWs()
                self.state = 2189
                self.statementLabelDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2192 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2191
                        self.endOfStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2194 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                self.state = 2196
                self.remStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2198
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2199
                        self.endOfStatement() 
                    self.state = 2204
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

                self.state = 2205
                self.endOfLineNoWs()
                self.state = 2206
                self.attributeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlStatement(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = vbaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.controlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2211
                    self.endOfStatement()
                    self.state = 2214 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                        break

                self.state = 2216
                self.dataManipulationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2219 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2218
                    self.endOfStatement()
                    self.state = 2221 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                        break

                self.state = 2223
                self.errorHandlingStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2226 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2225
                    self.endOfStatement()
                    self.state = 2228 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                        break

                self.state = 2230
                self.fileStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelDefinition" ):
                listener.enterStatementLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelDefinition" ):
                listener.exitStatementLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelDefinition" ):
                return visitor.visitStatementLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelDefinition(self):

        localctx = vbaParser.StatementLabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_statementLabelDefinition)
        try:
            self.state = 2241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2234
                self.identifierStatementLabel()
                self.state = 2235
                self.match(vbaParser.COLON)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2237
                self.lineNumberLabel()
                self.state = 2239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2238
                    self.match(vbaParser.COLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabel" ):
                listener.enterStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabel" ):
                listener.exitStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabel" ):
                return visitor.visitStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def statementLabel(self):

        localctx = vbaParser.StatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_statementLabel)
        try:
            self.state = 2245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                self.identifierStatementLabel()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                self.lineNumberLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.StatementLabelContext)
            else:
                return self.getTypedRuleContext(vbaParser.StatementLabelContext,i)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelList" ):
                listener.enterStatementLabelList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelList" ):
                listener.exitStatementLabelList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelList" ):
                return visitor.visitStatementLabelList(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelList(self):

        localctx = vbaParser.StatementLabelListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_statementLabelList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.statementLabel()
            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2248
                    self.wsc()


                self.state = 2251
                self.match(vbaParser.COMMA)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2252
                    self.wsc()


                self.state = 2255
                self.statementLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierStatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_identifierStatementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierStatementLabel" ):
                listener.enterIdentifierStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierStatementLabel" ):
                listener.exitIdentifierStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierStatementLabel" ):
                return visitor.visitIdentifierStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def identifierStatementLabel(self):

        localctx = vbaParser.IdentifierStatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_identifierStatementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineNumberLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineNumberLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineNumberLabel" ):
                listener.enterLineNumberLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineNumberLabel" ):
                listener.exitLineNumberLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineNumberLabel" ):
                return visitor.visitLineNumberLabel(self)
            else:
                return visitor.visitChildren(self)




    def lineNumberLabel(self):

        localctx = vbaParser.LineNumberLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_lineNumberLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemStatement" ):
                listener.enterRemStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemStatement" ):
                listener.exitRemStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemStatement" ):
                return visitor.visitRemStatement(self)
            else:
                return visitor.visitChildren(self)




    def remStatement(self):

        localctx = vbaParser.RemStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_remStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(vbaParser.IfStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatement" ):
                listener.enterControlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatement" ):
                listener.exitControlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatement" ):
                return visitor.visitControlStatement(self)
            else:
                return visitor.visitChildren(self)




    def controlStatement(self):

        localctx = vbaParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_controlStatement)
        self._la = 0 # Token type
        try:
            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2264
                        self.endOfStatement() 
                    self.state = 2269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                self.state = 2271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2270
                    self.endOfLine()
                    self.state = 2273 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                        break

                self.state = 2275
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2277
                    self.endOfStatement()
                    self.state = 2280 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                        break

                self.state = 2282
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementExceptMultilineIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callStatement(self):
            return self.getTypedRuleContext(vbaParser.CallStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(vbaParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(vbaParser.ForStatementContext,0)


        def exitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitForStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(vbaParser.DoStatementContext,0)


        def exitDoStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitDoStatementContext,0)


        def singleLineIfStatement(self):
            return self.getTypedRuleContext(vbaParser.SingleLineIfStatementContext,0)


        def selectCaseStatement(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStatementContext,0)


        def stopStatement(self):
            return self.getTypedRuleContext(vbaParser.StopStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(vbaParser.GotoStatementContext,0)


        def onGotoStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGotoStatementContext,0)


        def gosubStatement(self):
            return self.getTypedRuleContext(vbaParser.GosubStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(vbaParser.ReturnStatementContext,0)


        def onGosubStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGosubStatementContext,0)


        def forEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ForEachStatementContext,0)


        def exitSubStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitSubStatementContext,0)


        def exitFunctionStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitFunctionStatementContext,0)


        def exitPropertyStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitPropertyStatementContext,0)


        def raiseeventStatement(self):
            return self.getTypedRuleContext(vbaParser.RaiseeventStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(vbaParser.WithStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(vbaParser.EndStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatementExceptMultilineIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatementExceptMultilineIf" ):
                listener.enterControlStatementExceptMultilineIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatementExceptMultilineIf" ):
                listener.exitControlStatementExceptMultilineIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatementExceptMultilineIf" ):
                return visitor.visitControlStatementExceptMultilineIf(self)
            else:
                return visitor.visitChildren(self)




    def controlStatementExceptMultilineIf(self):

        localctx = vbaParser.ControlStatementExceptMultilineIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_controlStatementExceptMultilineIf)
        try:
            self.state = 2307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.callStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2287
                self.whileStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2288
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2289
                self.exitForStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2290
                self.doStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2291
                self.exitDoStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2292
                self.singleLineIfStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2293
                self.selectCaseStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2294
                self.stopStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2295
                self.gotoStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2296
                self.onGotoStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2297
                self.gosubStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2298
                self.returnStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2299
                self.onGosubStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2300
                self.forEachStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2301
                self.exitSubStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2302
                self.exitFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2303
                self.exitPropertyStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2304
                self.raiseeventStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2305
                self.withStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2306
                self.endStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(vbaParser.IndexExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = vbaParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_callStatement)
        try:
            self.state = 2327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2309
                self.match(vbaParser.CALL)
                self.state = 2310
                self.wsc()
                self.state = 2315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2311
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2312
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2313
                    self.indexExpression()
                    pass

                elif la_ == 4:
                    self.state = 2314
                    self.withExpression()
                    pass


                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 79, 83, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 137, 144, 149, 150, 154, 156, 159, 163, 167, 173, 175, 179, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 258, 281, 282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2317
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2318
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2319
                    self.withExpression()
                    pass


                self.state = 2325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2322
                    self.wsc()
                    self.state = 2323
                    self.argumentList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = vbaParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self.match(vbaParser.WHILE)
            self.state = 2330
            self.wsc()
            self.state = 2331
            self.booleanExpression()
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2332
                self.statementBlock()


            self.state = 2336 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2335
                self.endOfStatement()
                self.state = 2338 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2340
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForStatementContext,0)


        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = vbaParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_forStatement)
        try:
            self.state = 2344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.simpleForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.explicitForStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForStatement" ):
                listener.enterSimpleForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForStatement" ):
                listener.exitSimpleForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForStatement" ):
                return visitor.visitSimpleForStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForStatement(self):

        localctx = vbaParser.SimpleForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_simpleForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.forClause()
            self.state = 2348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2347
                self.statementBlock()


            self.state = 2351 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2350
                self.endOfStatement()
                self.state = 2353 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2355
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForStatement" ):
                listener.enterExplicitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForStatement" ):
                listener.exitExplicitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForStatement" ):
                return visitor.visitExplicitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForStatement(self):

        localctx = vbaParser.ExplicitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_explicitForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2357
            self.forClause()
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2358
                self.statementBlock()


            self.state = 2362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2361
                self.endOfStatement()
                self.state = 2364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                self.state = 2366
                self.match(vbaParser.NEXT)
                pass
            elif token in [90]:
                self.state = 2367
                self.nestedForStatement()
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2368
                    self.wsc()


                self.state = 2371
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2375
            self.wsc()
            self.state = 2376
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_nestedForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedForStatement" ):
                listener.enterNestedForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedForStatement" ):
                listener.exitNestedForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedForStatement" ):
                return visitor.visitNestedForStatement(self)
            else:
                return visitor.visitChildren(self)




    def nestedForStatement(self):

        localctx = vbaParser.NestedForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_nestedForStatement)
        try:
            self.state = 2380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2378
                self.explicitForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2379
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def stepClause(self):
            return self.getTypedRuleContext(vbaParser.StepClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForClause" ):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = vbaParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self.match(vbaParser.FOR)
            self.state = 2383
            self.wsc()
            self.state = 2384
            self.boundVariableExpression()
            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2385
                self.wsc()


            self.state = 2388
            self.match(vbaParser.EQ)
            self.state = 2390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2389
                self.wsc()


            self.state = 2392
            self.startValue()
            self.state = 2393
            self.wsc()
            self.state = 2394
            self.match(vbaParser.TO)
            self.state = 2395
            self.wsc()
            self.state = 2396
            self.endValue()
            self.state = 2400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 2397
                self.wsc()
                self.state = 2398
                self.stepClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartValue" ):
                listener.enterStartValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartValue" ):
                listener.exitStartValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartValue" ):
                return visitor.visitStartValue(self)
            else:
                return visitor.visitChildren(self)




    def startValue(self):

        localctx = vbaParser.StartValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_startValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndValue" ):
                listener.enterEndValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndValue" ):
                listener.exitEndValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndValue" ):
                return visitor.visitEndValue(self)
            else:
                return visitor.visitChildren(self)




    def endValue(self):

        localctx = vbaParser.EndValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_endValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def stepIncrement(self):
            return self.getTypedRuleContext(vbaParser.StepIncrementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepClause" ):
                listener.enterStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepClause" ):
                listener.exitStepClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepClause" ):
                return visitor.visitStepClause(self)
            else:
                return visitor.visitChildren(self)




    def stepClause(self):

        localctx = vbaParser.StepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_stepClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2406
            self.match(vbaParser.STEP)
            self.state = 2407
            self.wsc()
            self.state = 2408
            self.stepIncrement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepIncrementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepIncrement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepIncrement" ):
                listener.enterStepIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepIncrement" ):
                listener.exitStepIncrement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepIncrement" ):
                return visitor.visitStepIncrement(self)
            else:
                return visitor.visitChildren(self)




    def stepIncrement(self):

        localctx = vbaParser.StepIncrementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_stepIncrement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForEachStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachStatement" ):
                return visitor.visitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def forEachStatement(self):

        localctx = vbaParser.ForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_forEachStatement)
        try:
            self.state = 2414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2412
                self.simpleForEachStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForEachStatement" ):
                listener.enterSimpleForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForEachStatement" ):
                listener.exitSimpleForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForEachStatement" ):
                return visitor.visitSimpleForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForEachStatement(self):

        localctx = vbaParser.SimpleForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_simpleForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.forEachClause()
            self.state = 2418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2417
                self.statementBlock()


            self.state = 2421 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2420
                self.endOfStatement()
                self.state = 2423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2425
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForEachStatement" ):
                listener.enterExplicitForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForEachStatement" ):
                listener.exitExplicitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForEachStatement" ):
                return visitor.visitExplicitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForEachStatement(self):

        localctx = vbaParser.ExplicitForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_explicitForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.forEachClause()
            self.state = 2429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2428
                self.statementBlock()


            self.state = 2431
            self.endOfStatement()
            self.state = 2439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                self.state = 2432
                self.match(vbaParser.NEXT)
                pass
            elif token in [90]:
                self.state = 2433
                self.nestedForStatement()
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2434
                    self.wsc()


                self.state = 2437
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2441
            self.wsc()
            self.state = 2442
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def collection(self):
            return self.getTypedRuleContext(vbaParser.CollectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachClause" ):
                listener.enterForEachClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachClause" ):
                listener.exitForEachClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachClause" ):
                return visitor.visitForEachClause(self)
            else:
                return visitor.visitChildren(self)




    def forEachClause(self):

        localctx = vbaParser.ForEachClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_forEachClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(vbaParser.FOR)
            self.state = 2445
            self.wsc()
            self.state = 2446
            self.match(vbaParser.EACH)
            self.state = 2448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2447
                self.wsc()


            self.state = 2450
            self.boundVariableExpression()
            self.state = 2452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2451
                self.wsc()


            self.state = 2454
            self.match(vbaParser.IN)
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2455
                self.wsc()


            self.state = 2458
            self.collection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection" ):
                listener.enterCollection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection" ):
                listener.exitCollection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection" ):
                return visitor.visitCollection(self)
            else:
                return visitor.visitChildren(self)




    def collection(self):

        localctx = vbaParser.CollectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitForStatement" ):
                listener.enterExitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitForStatement" ):
                listener.exitExitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitForStatement" ):
                return visitor.visitExitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitForStatement(self):

        localctx = vbaParser.ExitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_exitForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.match(vbaParser.EXIT)
            self.state = 2463
            self.wsc()
            self.state = 2464
            self.match(vbaParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def conditionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConditionClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConditionClauseContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = vbaParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_doStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(vbaParser.DO)
            self.state = 2471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2467
                    self.wsc()


                self.state = 2470
                self.conditionClause()


            self.state = 2474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2473
                self.statementBlock()


            self.state = 2477 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2476
                self.endOfStatement()
                self.state = 2479 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2481
            self.match(vbaParser.LOOP)
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2482
                    self.wsc()


                self.state = 2485
                self.conditionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileClause(self):
            return self.getTypedRuleContext(vbaParser.WhileClauseContext,0)


        def untilClause(self):
            return self.getTypedRuleContext(vbaParser.UntilClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_conditionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionClause" ):
                listener.enterConditionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionClause" ):
                listener.exitConditionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionClause" ):
                return visitor.visitConditionClause(self)
            else:
                return visitor.visitChildren(self)




    def conditionClause(self):

        localctx = vbaParser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_conditionClause)
        try:
            self.state = 2490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [216]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2488
                self.whileClause()
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2489
                self.untilClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileClause" ):
                listener.enterWhileClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileClause" ):
                listener.exitWhileClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileClause" ):
                return visitor.visitWhileClause(self)
            else:
                return visitor.visitChildren(self)




    def whileClause(self):

        localctx = vbaParser.WhileClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_whileClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(vbaParser.WHILE)
            self.state = 2494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2493
                self.wsc()


            self.state = 2496
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untilClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntilClause" ):
                listener.enterUntilClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntilClause" ):
                listener.exitUntilClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntilClause" ):
                return visitor.visitUntilClause(self)
            else:
                return visitor.visitChildren(self)




    def untilClause(self):

        localctx = vbaParser.UntilClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_untilClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self.match(vbaParser.UNTIL)
            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2499
                self.wsc()


            self.state = 2502
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitDoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitDoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitDoStatement" ):
                listener.enterExitDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitDoStatement" ):
                listener.exitExitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitDoStatement" ):
                return visitor.visitExitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitDoStatement(self):

        localctx = vbaParser.ExitDoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_exitDoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(vbaParser.EXIT)
            self.state = 2505
            self.wsc()
            self.state = 2506
            self.match(vbaParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IF)
            else:
                return self.getToken(vbaParser.IF, i)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def elseIfBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ElseIfBlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.ElseIfBlockContext,i)


        def elseBlock(self):
            return self.getTypedRuleContext(vbaParser.ElseBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = vbaParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(vbaParser.IF)
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2509
                self.wsc()


            self.state = 2512
            self.booleanExpression()
            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2513
                self.wsc()


            self.state = 2516
            self.match(vbaParser.THEN)
            self.state = 2518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2517
                self.statementBlock()


            self.state = 2523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2520
                    self.elseIfBlock() 
                self.state = 2525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

            self.state = 2527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 2526
                self.elseBlock()


            self.state = 2530 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2529
                self.endOfStatement()
                self.state = 2532 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 2534
                self.match(vbaParser.END)
                self.state = 2535
                self.wsc()
                self.state = 2536
                self.match(vbaParser.IF)
                pass
            elif token in [77]:
                self.state = 2538
                self.match(vbaParser.ENDIF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseIfBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfBlock" ):
                listener.enterElseIfBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfBlock" ):
                listener.exitElseIfBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfBlock" ):
                return visitor.visitElseIfBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseIfBlock(self):

        localctx = vbaParser.ElseIfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_elseIfBlock)
        self._la = 0 # Token type
        try:
            self.state = 2581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2541
                        self.endOfStatement() 
                    self.state = 2546
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                self.state = 2547
                self.endOfLine()
                self.state = 2548
                self.match(vbaParser.ELSEIF)
                self.state = 2550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2549
                    self.wsc()


                self.state = 2552
                self.booleanExpression()
                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2553
                    self.wsc()


                self.state = 2556
                self.match(vbaParser.THEN)
                self.state = 2558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 2557
                    self.endOfLine()


                self.state = 2561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2560
                    self.statementBlock()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0):
                    self.state = 2563
                    self.endOfStatement()
                    self.state = 2568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2569
                self.match(vbaParser.ELSEIF)
                self.state = 2571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2570
                    self.wsc()


                self.state = 2573
                self.booleanExpression()
                self.state = 2575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2574
                    self.wsc()


                self.state = 2577
                self.match(vbaParser.THEN)
                self.state = 2579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2578
                    self.statementBlock()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseBlock" ):
                return visitor.visitElseBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseBlock(self):

        localctx = vbaParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2583
                self.endOfLine()
                self.state = 2586 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 143) != 0)):
                    break

            self.state = 2588
            self.match(vbaParser.ELSE)
            self.state = 2590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2589
                self.endOfLine()


            self.state = 2593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2592
                self.wsc()


            self.state = 2596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2595
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifWithNonEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithNonEmptyThenContext,0)


        def ifWithEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithEmptyThenContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineIfStatement" ):
                listener.enterSingleLineIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineIfStatement" ):
                listener.exitSingleLineIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineIfStatement" ):
                return visitor.visitSingleLineIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleLineIfStatement(self):

        localctx = vbaParser.SingleLineIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_singleLineIfStatement)
        try:
            self.state = 2600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2598
                self.ifWithNonEmptyThen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2599
                self.ifWithEmptyThen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithNonEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithNonEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithNonEmptyThen" ):
                listener.enterIfWithNonEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithNonEmptyThen" ):
                listener.exitIfWithNonEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithNonEmptyThen" ):
                return visitor.visitIfWithNonEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithNonEmptyThen(self):

        localctx = vbaParser.IfWithNonEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_ifWithNonEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.match(vbaParser.IF)
            self.state = 2603
            self.wsc()
            self.state = 2604
            self.booleanExpression()
            self.state = 2605
            self.wsc()
            self.state = 2606
            self.match(vbaParser.THEN)
            self.state = 2607
            self.wsc()
            self.state = 2608
            self.listOrLabel()
            self.state = 2612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2609
                self.wsc()
                self.state = 2610
                self.singleLineElseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithEmptyThen" ):
                listener.enterIfWithEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithEmptyThen" ):
                listener.exitIfWithEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithEmptyThen" ):
                return visitor.visitIfWithEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithEmptyThen(self):

        localctx = vbaParser.IfWithEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_ifWithEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self.match(vbaParser.IF)
            self.state = 2615
            self.wsc()
            self.state = 2616
            self.booleanExpression()
            self.state = 2617
            self.wsc()
            self.state = 2618
            self.match(vbaParser.THEN)
            self.state = 2619
            self.wsc()
            self.state = 2620
            self.singleLineElseClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineElseClause" ):
                listener.enterSingleLineElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineElseClause" ):
                listener.exitSingleLineElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineElseClause" ):
                return visitor.visitSingleLineElseClause(self)
            else:
                return visitor.visitChildren(self)




    def singleLineElseClause(self):

        localctx = vbaParser.SingleLineElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_singleLineElseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.match(vbaParser.ELSE)
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2623
                self.wsc()


            self.state = 2627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2626
                self.listOrLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOrLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def sameLineStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SameLineStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.SameLineStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_listOrLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOrLabel" ):
                listener.enterListOrLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOrLabel" ):
                listener.exitListOrLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOrLabel" ):
                return visitor.visitListOrLabel(self)
            else:
                return visitor.visitChildren(self)




    def listOrLabel(self):

        localctx = vbaParser.ListOrLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_listOrLabel)
        self._la = 0 # Token type
        try:
            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2629
                self.statementLabel()
                self.state = 2639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2630
                        self.match(vbaParser.COLON)
                        self.state = 2632
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                        if la_ == 1:
                            self.state = 2631
                            self.wsc()


                        self.state = 2635
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2955486712331030) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -4683357072969774073) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 849340518053005) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 17630874304349) != 0) or _la==281 or _la==282:
                            self.state = 2634
                            self.sameLineStatement()

                 
                    self.state = 2641
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==277:
                    self.state = 2642
                    self.match(vbaParser.COLON)


                self.state = 2645
                self.sameLineStatement()
                self.state = 2655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2646
                        self.match(vbaParser.COLON)
                        self.state = 2648
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                        if la_ == 1:
                            self.state = 2647
                            self.wsc()


                        self.state = 2651
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2955486712331030) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -4683357072969774073) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 849340518053005) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 17630874304349) != 0) or _la==281 or _la==282:
                            self.state = 2650
                            self.sameLineStatement()

                 
                    self.state = 2657
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SameLineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sameLineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSameLineStatement" ):
                listener.enterSameLineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSameLineStatement" ):
                listener.exitSameLineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSameLineStatement" ):
                return visitor.visitSameLineStatement(self)
            else:
                return visitor.visitChildren(self)




    def sameLineStatement(self):

        localctx = vbaParser.SameLineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_sameLineStatement)
        try:
            self.state = 2664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2660
                self.fileStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2661
                self.errorHandlingStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2662
                self.dataManipulationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2663
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SELECT)
            else:
                return self.getToken(vbaParser.SELECT, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def selectExpression(self):
            return self.getTypedRuleContext(vbaParser.SelectExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.CaseClauseContext,i)


        def caseElseClause(self):
            return self.getTypedRuleContext(vbaParser.CaseElseClauseContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStatement" ):
                listener.enterSelectCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStatement" ):
                listener.exitSelectCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectCaseStatement" ):
                return visitor.visitSelectCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectCaseStatement(self):

        localctx = vbaParser.SelectCaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_selectCaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2666
            self.match(vbaParser.SELECT)
            self.state = 2667
            self.wsc()
            self.state = 2668
            self.match(vbaParser.CASE)
            self.state = 2669
            self.wsc()
            self.state = 2670
            self.selectExpression()
            self.state = 2674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2671
                    self.caseClause() 
                self.state = 2676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 2677
                self.caseElseClause()


            self.state = 2681 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2680
                self.endOfStatement()
                self.state = 2683 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2685
            self.match(vbaParser.END)
            self.state = 2686
            self.wsc()
            self.state = 2687
            self.match(vbaParser.SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def rangeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RangeClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.RangeClauseContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = vbaParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_caseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2690 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2689
                self.endOfStatement()
                self.state = 2692 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2694
            self.match(vbaParser.CASE)
            self.state = 2696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 2695
                self.wsc()


            self.state = 2698
            self.rangeClause()
            self.state = 2709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2699
                        self.wsc()


                    self.state = 2702
                    self.match(vbaParser.COMMA)
                    self.state = 2704
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                    if la_ == 1:
                        self.state = 2703
                        self.wsc()


                    self.state = 2706
                    self.rangeClause() 
                self.state = 2711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

            self.state = 2713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2712
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseElseClause" ):
                listener.enterCaseElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseElseClause" ):
                listener.exitCaseElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseElseClause" ):
                return visitor.visitCaseElseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseElseClause(self):

        localctx = vbaParser.CaseElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_caseElseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2715
                self.endOfStatement()
                self.state = 2718 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2720
            self.match(vbaParser.CASE)
            self.state = 2721
            self.wsc()
            self.state = 2722
            self.match(vbaParser.ELSE)
            self.state = 2724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2723
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = vbaParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_rangeClause)
        self._la = 0 # Token type
        try:
            self.state = 2747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2726
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2727
                self.startValue()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2728
                    self.wsc()


                self.state = 2731
                self.match(vbaParser.TO)
                self.state = 2733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2732
                    self.wsc()


                self.state = 2735
                self.endValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 2737
                    self.match(vbaParser.IS)


                self.state = 2740
                self.wsc()
                self.state = 2741
                self.comparisonOperator()
                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2742
                    self.wsc()


                self.state = 2745
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpression" ):
                return visitor.visitSelectExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectExpression(self):

        localctx = vbaParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_selectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            _la = self._input.LA(1)
            if not(_la==133 or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 173) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStatement" ):
                listener.enterStopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStatement" ):
                listener.exitStopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopStatement" ):
                return visitor.visitStopStatement(self)
            else:
                return visitor.visitChildren(self)




    def stopStatement(self):

        localctx = vbaParser.StopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_stopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2753
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def gotoStatement(self):

        localctx = vbaParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 2755
                self.match(vbaParser.GO)
                self.state = 2756
                self.wsc()
                self.state = 2757
                self.match(vbaParser.TO)
                pass
            elif token in [96]:
                self.state = 2759
                self.match(vbaParser.GOTO)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2762
            self.wsc()
            self.state = 2763
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGotoStatement" ):
                listener.enterOnGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGotoStatement" ):
                listener.exitOnGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGotoStatement" ):
                return visitor.visitOnGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGotoStatement(self):

        localctx = vbaParser.OnGotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_onGotoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(vbaParser.ON)
            self.state = 2767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2766
                self.wsc()


            self.state = 2769
            self.expression(0)
            self.state = 2770
            self.match(vbaParser.GOTO)
            self.state = 2771
            self.wsc()
            self.state = 2772
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGosubStatement" ):
                listener.enterGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGosubStatement" ):
                listener.exitGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGosubStatement" ):
                return visitor.visitGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def gosubStatement(self):

        localctx = vbaParser.GosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_gosubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 2774
                self.match(vbaParser.GO)
                self.state = 2775
                self.wsc()
                self.state = 2776
                self.match(vbaParser.SUB)
                pass
            elif token in [95]:
                self.state = 2778
                self.match(vbaParser.GOSUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2781
            self.wsc()
            self.state = 2782
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = vbaParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGosubStatement" ):
                listener.enterOnGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGosubStatement" ):
                listener.exitOnGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGosubStatement" ):
                return visitor.visitOnGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGosubStatement(self):

        localctx = vbaParser.OnGosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_onGosubStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.match(vbaParser.ON)
            self.state = 2788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2787
                self.wsc()


            self.state = 2790
            self.expression(0)
            self.state = 2792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2791
                self.wsc()


            self.state = 2794
            self.match(vbaParser.GOSUB)
            self.state = 2795
            self.wsc()
            self.state = 2796
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitSubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitSubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitSubStatement" ):
                listener.enterExitSubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitSubStatement" ):
                listener.exitExitSubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitSubStatement" ):
                return visitor.visitExitSubStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitSubStatement(self):

        localctx = vbaParser.ExitSubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_exitSubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self.match(vbaParser.EXIT)
            self.state = 2799
            self.wsc()
            self.state = 2800
            self.match(vbaParser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitFunctionStatement" ):
                listener.enterExitFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitFunctionStatement" ):
                listener.exitExitFunctionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitFunctionStatement" ):
                return visitor.visitExitFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitFunctionStatement(self):

        localctx = vbaParser.ExitFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_exitFunctionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2802
            self.match(vbaParser.EXIT)
            self.state = 2803
            self.wsc()
            self.state = 2804
            self.match(vbaParser.FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitPropertyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitPropertyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitPropertyStatement" ):
                listener.enterExitPropertyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitPropertyStatement" ):
                listener.exitExitPropertyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitPropertyStatement" ):
                return visitor.visitExitPropertyStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitPropertyStatement(self):

        localctx = vbaParser.ExitPropertyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_exitPropertyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self.match(vbaParser.EXIT)
            self.state = 2807
            self.wsc()
            self.state = 2808
            self.match(vbaParser.PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseeventStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def eventArgumentList(self):
            return self.getTypedRuleContext(vbaParser.EventArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_raiseeventStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseeventStatement" ):
                listener.enterRaiseeventStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseeventStatement" ):
                listener.exitRaiseeventStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseeventStatement" ):
                return visitor.visitRaiseeventStatement(self)
            else:
                return visitor.visitChildren(self)




    def raiseeventStatement(self):

        localctx = vbaParser.RaiseeventStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_raiseeventStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self.match(vbaParser.RAISEEVENT)
            self.state = 2812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2811
                self.wsc()


            self.state = 2814
            self.ambiguousIdentifier()
            self.state = 2816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2815
                self.wsc()


            self.state = 2828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 2818
                self.match(vbaParser.LPAREN)
                self.state = 2820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2819
                    self.wsc()


                self.state = 2822
                self.eventArgumentList()
                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 2823
                    self.wsc()


                self.state = 2826
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EventArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.EventArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgumentList" ):
                listener.enterEventArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgumentList" ):
                listener.exitEventArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgumentList" ):
                return visitor.visitEventArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def eventArgumentList(self):

        localctx = vbaParser.EventArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_eventArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                self.state = 2830
                self.eventArgument()
                self.state = 2841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 2831
                            self.wsc()


                        self.state = 2834
                        self.match(vbaParser.COMMA)
                        self.state = 2836
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 2835
                            self.wsc()


                        self.state = 2838
                        self.eventArgument() 
                    self.state = 2843
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgument" ):
                listener.enterEventArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgument" ):
                listener.exitEventArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgument" ):
                return visitor.visitEventArgument(self)
            else:
                return visitor.visitChildren(self)




    def eventArgument(self):

        localctx = vbaParser.EventArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_eventArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2846
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WITH)
            else:
                return self.getToken(vbaParser.WITH, i)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStatement" ):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)




    def withStatement(self):

        localctx = vbaParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_withStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2848
            self.match(vbaParser.WITH)
            self.state = 2850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2849
                self.wsc()


            self.state = 2852
            self.expression(0)
            self.state = 2854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 2853
                self.statementBlock()


            self.state = 2857 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2856
                self.endOfStatement()
                self.state = 2859 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

            self.state = 2861
            self.match(vbaParser.END)
            self.state = 2862
            self.wsc()
            self.state = 2863
            self.match(vbaParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = vbaParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataManipulationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalVariableDeclarationContext,0)


        def staticVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.StaticVariableDeclarationContext,0)


        def localConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalConstDeclarationContext,0)


        def redimStatement(self):
            return self.getTypedRuleContext(vbaParser.RedimStatementContext,0)


        def eraseStatement(self):
            return self.getTypedRuleContext(vbaParser.EraseStatementContext,0)


        def midStatement(self):
            return self.getTypedRuleContext(vbaParser.MidStatementContext,0)


        def rsetStatement(self):
            return self.getTypedRuleContext(vbaParser.RsetStatementContext,0)


        def lsetStatement(self):
            return self.getTypedRuleContext(vbaParser.LsetStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(vbaParser.LetStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(vbaParser.SetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dataManipulationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataManipulationStatement" ):
                listener.enterDataManipulationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataManipulationStatement" ):
                listener.exitDataManipulationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataManipulationStatement" ):
                return visitor.visitDataManipulationStatement(self)
            else:
                return visitor.visitChildren(self)




    def dataManipulationStatement(self):

        localctx = vbaParser.DataManipulationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_dataManipulationStatement)
        try:
            self.state = 2877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2867
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2868
                self.staticVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2869
                self.localConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2870
                self.redimStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2871
                self.eraseStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2872
                self.midStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2873
                self.rsetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2874
                self.lsetStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2875
                self.letStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2876
                self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = vbaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self.match(vbaParser.DIM)
            self.state = 2881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2880
                self.wsc()


            self.state = 2884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 2883
                self.match(vbaParser.SHARED)


            self.state = 2887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2886
                self.wsc()


            self.state = 2889
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_staticVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableDeclaration" ):
                listener.enterStaticVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableDeclaration" ):
                listener.exitStaticVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVariableDeclaration" ):
                return visitor.visitStaticVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticVariableDeclaration(self):

        localctx = vbaParser.StaticVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_staticVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self.match(vbaParser.STATIC)
            self.state = 2892
            self.wsc()
            self.state = 2893
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_localConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalConstDeclaration" ):
                listener.enterLocalConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalConstDeclaration" ):
                listener.exitLocalConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalConstDeclaration" ):
                return visitor.visitLocalConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localConstDeclaration(self):

        localctx = vbaParser.LocalConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_localConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2895
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def redimDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.RedimDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStatement" ):
                listener.enterRedimStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStatement" ):
                listener.exitRedimStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimStatement" ):
                return visitor.visitRedimStatement(self)
            else:
                return visitor.visitChildren(self)




    def redimStatement(self):

        localctx = vbaParser.RedimStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_redimStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2897
            self.match(vbaParser.REDIM)
            self.state = 2901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2898
                self.wsc()
                self.state = 2899
                self.match(vbaParser.PRESERVE)


            self.state = 2904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2903
                self.wsc()


            self.state = 2906
            self.redimDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimVariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_redimDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimDeclarationList" ):
                listener.enterRedimDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimDeclarationList" ):
                listener.exitRedimDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimDeclarationList" ):
                return visitor.visitRedimDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def redimDeclarationList(self):

        localctx = vbaParser.RedimDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_redimDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2908
            self.redimVariableDcl()
            self.state = 2919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2909
                        self.wsc()


                    self.state = 2912
                    self.match(vbaParser.COMMA)
                    self.state = 2914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2913
                        self.wsc()


                    self.state = 2916
                    self.redimVariableDcl() 
                self.state = 2921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimTypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimTypedVariableDclContext,0)


        def redimUntypedDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimUntypedDclContext,0)


        def withExpressionDcl(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionDclContext,0)


        def memberAccessExpressionDcl(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimVariableDcl" ):
                listener.enterRedimVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimVariableDcl" ):
                listener.exitRedimVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimVariableDcl" ):
                return visitor.visitRedimVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimVariableDcl(self):

        localctx = vbaParser.RedimVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_redimVariableDcl)
        try:
            self.state = 2926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2922
                self.redimTypedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2923
                self.redimUntypedDcl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2924
                self.withExpressionDcl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2925
                self.memberAccessExpressionDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimTypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimTypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimTypedVariableDcl" ):
                listener.enterRedimTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimTypedVariableDcl" ):
                listener.exitRedimTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimTypedVariableDcl" ):
                return visitor.visitRedimTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimTypedVariableDcl(self):

        localctx = vbaParser.RedimTypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_redimTypedVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2928
            self.typedName()
            self.state = 2930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2929
                self.wsc()


            self.state = 2932
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimUntypedDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def dynamicArrayClause(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimUntypedDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimUntypedDcl" ):
                listener.enterRedimUntypedDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimUntypedDcl" ):
                listener.exitRedimUntypedDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimUntypedDcl" ):
                return visitor.visitRedimUntypedDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimUntypedDcl(self):

        localctx = vbaParser.RedimUntypedDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_redimUntypedDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self.untypedName()
            self.state = 2936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2935
                self.wsc()


            self.state = 2938
            self.dynamicArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExpressionDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withExpressionDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithExpressionDcl" ):
                listener.enterWithExpressionDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithExpressionDcl" ):
                listener.exitWithExpressionDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpressionDcl" ):
                return visitor.visitWithExpressionDcl(self)
            else:
                return visitor.visitChildren(self)




    def withExpressionDcl(self):

        localctx = vbaParser.WithExpressionDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_withExpressionDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.withExpression()
            self.state = 2942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2941
                self.wsc()


            self.state = 2944
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessExpressionDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_memberAccessExpressionDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpressionDcl" ):
                listener.enterMemberAccessExpressionDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpressionDcl" ):
                listener.exitMemberAccessExpressionDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessExpressionDcl" ):
                return visitor.visitMemberAccessExpressionDcl(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessExpressionDcl(self):

        localctx = vbaParser.MemberAccessExpressionDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_memberAccessExpressionDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            self.memberAccessExpression()
            self.state = 2948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2947
                self.wsc()


            self.state = 2950
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def dynamicBoundsList(self):
            return self.getTypedRuleContext(vbaParser.DynamicBoundsListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayDim" ):
                listener.enterDynamicArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayDim" ):
                listener.exitDynamicArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayDim" ):
                return visitor.visitDynamicArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayDim(self):

        localctx = vbaParser.DynamicArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dynamicArrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.match(vbaParser.LPAREN)
            self.state = 2954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2953
                self.wsc()


            self.state = 2956
            self.dynamicBoundsList()
            self.state = 2958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2957
                self.wsc()


            self.state = 2960
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicBoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicDimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DynamicDimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DynamicDimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicBoundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicBoundsList" ):
                listener.enterDynamicBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicBoundsList" ):
                listener.exitDynamicBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicBoundsList" ):
                return visitor.visitDynamicBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def dynamicBoundsList(self):

        localctx = vbaParser.DynamicBoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_dynamicBoundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            self.dynamicDimSpec()
            self.state = 2973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,401,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2963
                        self.wsc()


                    self.state = 2966
                    self.match(vbaParser.COMMA)
                    self.state = 2968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 2967
                        self.wsc()


                    self.state = 2970
                    self.dynamicDimSpec() 
                self.state = 2975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicDimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicUpperBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicUpperBoundContext,0)


        def dynamicLowerBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicLowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicDimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicDimSpec" ):
                listener.enterDynamicDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicDimSpec" ):
                listener.exitDynamicDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicDimSpec" ):
                return visitor.visitDynamicDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dynamicDimSpec(self):

        localctx = vbaParser.DynamicDimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_dynamicDimSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 2976
                self.dynamicLowerBound()
                self.state = 2977
                self.wsc()


            self.state = 2981
            self.dynamicUpperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicLowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLowerBound" ):
                listener.enterDynamicLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLowerBound" ):
                listener.exitDynamicLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicLowerBound" ):
                return visitor.visitDynamicLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicLowerBound(self):

        localctx = vbaParser.DynamicLowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_dynamicLowerBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            self.integerExpression()
            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2984
                self.wsc()


            self.state = 2987
            self.match(vbaParser.TO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicUpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicUpperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicUpperBound" ):
                listener.enterDynamicUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicUpperBound" ):
                listener.exitDynamicUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicUpperBound" ):
                return visitor.visitDynamicUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicUpperBound(self):

        localctx = vbaParser.DynamicUpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dynamicUpperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayClause" ):
                listener.enterDynamicArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayClause" ):
                listener.exitDynamicArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayClause" ):
                return visitor.visitDynamicArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayClause(self):

        localctx = vbaParser.DynamicArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_dynamicArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2991
            self.dynamicArrayDim()
            self.state = 2993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.state = 2992
                self.wsc()


            self.state = 2996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2995
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def eraseList(self):
            return self.getTypedRuleContext(vbaParser.EraseListContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStatement" ):
                listener.enterEraseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStatement" ):
                listener.exitEraseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseStatement" ):
                return visitor.visitEraseStatement(self)
            else:
                return visitor.visitChildren(self)




    def eraseStatement(self):

        localctx = vbaParser.EraseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_eraseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(vbaParser.ERASE)
            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 2999
                self.wsc()


            self.state = 3002
            self.eraseList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eraseElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EraseElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EraseElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseList" ):
                listener.enterEraseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseList" ):
                listener.exitEraseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseList" ):
                return visitor.visitEraseList(self)
            else:
                return visitor.visitChildren(self)




    def eraseList(self):

        localctx = vbaParser.EraseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_eraseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            self.eraseElement()
            self.state = 3015
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3005
                        self.wsc()


                    self.state = 3008
                    self.match(vbaParser.COMMA)
                    self.state = 3010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3009
                        self.wsc()


                    self.state = 3012
                    self.eraseElement() 
                self.state = 3017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseElement" ):
                listener.enterEraseElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseElement" ):
                listener.exitEraseElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseElement" ):
                return visitor.visitEraseElement(self)
            else:
                return visitor.visitChildren(self)




    def eraseElement(self):

        localctx = vbaParser.EraseElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_eraseElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3018
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeSpecifier(self):
            return self.getTypedRuleContext(vbaParser.ModeSpecifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(vbaParser.StringArgumentContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def startMid(self):
            return self.getTypedRuleContext(vbaParser.StartMidContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def length(self):
            return self.getTypedRuleContext(vbaParser.LengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_midStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStatement" ):
                listener.enterMidStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStatement" ):
                listener.exitMidStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidStatement" ):
                return visitor.visitMidStatement(self)
            else:
                return visitor.visitChildren(self)




    def midStatement(self):

        localctx = vbaParser.MidStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_midStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self.modeSpecifier()
            self.state = 3022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3021
                self.wsc()


            self.state = 3024
            self.match(vbaParser.LPAREN)
            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3025
                self.wsc()


            self.state = 3028
            self.stringArgument()
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3029
                self.wsc()


            self.state = 3032
            self.match(vbaParser.COMMA)
            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3033
                self.wsc()


            self.state = 3036
            self.startMid()
            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3037
                self.wsc()


            self.state = 3045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==242:
                self.state = 3040
                self.match(vbaParser.COMMA)
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3041
                    self.wsc()


                self.state = 3044
                self.length()


            self.state = 3047
            self.match(vbaParser.RPAREN)
            self.state = 3049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3048
                self.wsc()


            self.state = 3051
            self.match(vbaParser.EQ)
            self.state = 3053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3052
                self.wsc()


            self.state = 3055
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeSpecifier" ):
                listener.enterModeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeSpecifier" ):
                listener.exitModeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeSpecifier" ):
                return visitor.visitModeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def modeSpecifier(self):

        localctx = vbaParser.ModeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_modeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringArgument" ):
                listener.enterStringArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringArgument" ):
                listener.exitStringArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringArgument" ):
                return visitor.visitStringArgument(self)
            else:
                return visitor.visitChildren(self)




    def stringArgument(self):

        localctx = vbaParser.StringArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_stringArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3059
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartMidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startMid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartMid" ):
                listener.enterStartMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartMid" ):
                listener.exitStartMid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartMid" ):
                return visitor.visitStartMid(self)
            else:
                return visitor.visitChildren(self)




    def startMid(self):

        localctx = vbaParser.StartMidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_startMid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLength" ):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = vbaParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3063
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStatement" ):
                listener.enterLsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStatement" ):
                listener.exitLsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLsetStatement" ):
                return visitor.visitLsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def lsetStatement(self):

        localctx = vbaParser.LsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_lsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3065
            self.match(vbaParser.LSET)
            self.state = 3067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3066
                self.wsc()


            self.state = 3069
            self.boundVariableExpression()
            self.state = 3071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3070
                self.wsc()


            self.state = 3073
            self.match(vbaParser.EQ)
            self.state = 3075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3074
                self.wsc()


            self.state = 3077
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStatement" ):
                listener.enterRsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStatement" ):
                listener.exitRsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRsetStatement" ):
                return visitor.visitRsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def rsetStatement(self):

        localctx = vbaParser.RsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_rsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self.match(vbaParser.RSET)
            self.state = 3081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3080
                self.wsc()


            self.state = 3083
            self.boundVariableExpression()
            self.state = 3085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3084
                self.wsc()


            self.state = 3087
            self.match(vbaParser.EQ)
            self.state = 3089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3088
                self.wsc()


            self.state = 3091
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatement" ):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)




    def letStatement(self):

        localctx = vbaParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_letStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 3093
                self.match(vbaParser.LET)
                self.state = 3094
                self.wsc()


            self.state = 3097
            self.lExpression(0)
            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3098
                self.wsc()


            self.state = 3101
            self.match(vbaParser.EQ)
            self.state = 3103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3102
                self.wsc()


            self.state = 3105
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = vbaParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self.match(vbaParser.SET)
            self.state = 3108
            self.wsc()
            self.state = 3109
            self.lExpression(0)
            self.state = 3111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3110
                self.wsc()


            self.state = 3113
            self.match(vbaParser.EQ)
            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3114
                self.wsc()


            self.state = 3117
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorHandlingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onErrorStatement(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStatementContext,0)


        def resumeStatement(self):
            return self.getTypedRuleContext(vbaParser.ResumeStatementContext,0)


        def errorStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorHandlingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorHandlingStatement" ):
                listener.enterErrorHandlingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorHandlingStatement" ):
                listener.exitErrorHandlingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorHandlingStatement" ):
                return visitor.visitErrorHandlingStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorHandlingStatement(self):

        localctx = vbaParser.ErrorHandlingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_errorHandlingStatement)
        try:
            self.state = 3122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3119
                self.onErrorStatement()
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3120
                self.resumeStatement()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3121
                self.errorStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def errorBehavior(self):
            return self.getTypedRuleContext(vbaParser.ErrorBehaviorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStatement" ):
                listener.enterOnErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStatement" ):
                listener.exitOnErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnErrorStatement" ):
                return visitor.visitOnErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def onErrorStatement(self):

        localctx = vbaParser.OnErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_onErrorStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3124
            self.match(vbaParser.ON)
            self.state = 3125
            self.wsc()
            self.state = 3126
            self.match(vbaParser.ERROR)
            self.state = 3128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3127
                self.wsc()


            self.state = 3130
            self.errorBehavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBehavior" ):
                listener.enterErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBehavior" ):
                listener.exitErrorBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBehavior" ):
                return visitor.visitErrorBehavior(self)
            else:
                return visitor.visitChildren(self)




    def errorBehavior(self):

        localctx = vbaParser.ErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_errorBehavior)
        self._la = 0 # Token type
        try:
            self.state = 3141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3132
                self.match(vbaParser.RESUME)
                self.state = 3133
                self.wsc()
                self.state = 3134
                self.match(vbaParser.NEXT)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3136
                self.match(vbaParser.GOTO)
                self.state = 3138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3137
                    self.wsc()


                self.state = 3140
                self.statementLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStatement" ):
                listener.enterResumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStatement" ):
                listener.exitResumeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResumeStatement" ):
                return visitor.visitResumeStatement(self)
            else:
                return visitor.visitChildren(self)




    def resumeStatement(self):

        localctx = vbaParser.ResumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_resumeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3143
            self.match(vbaParser.RESUME)
            self.state = 3145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 3144
                self.wsc()


            self.state = 3149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                self.state = 3147
                self.match(vbaParser.NEXT)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 268, 281]:
                self.state = 3148
                self.statementLabel()
                pass
            elif token in [75, 272, 273, 274, 275, 277, 279]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def errorNumber(self):
            return self.getTypedRuleContext(vbaParser.ErrorNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStatement" ):
                listener.enterErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStatement" ):
                listener.exitErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStatement" ):
                return visitor.visitErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorStatement(self):

        localctx = vbaParser.ErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_errorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self.match(vbaParser.ERROR)
            self.state = 3152
            self.wsc()
            self.state = 3153
            self.errorNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorNumber" ):
                listener.enterErrorNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorNumber" ):
                listener.exitErrorNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorNumber" ):
                return visitor.visitErrorNumber(self)
            else:
                return visitor.visitChildren(self)




    def errorNumber(self):

        localctx = vbaParser.ErrorNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_errorNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openStatement(self):
            return self.getTypedRuleContext(vbaParser.OpenStatementContext,0)


        def closeStatement(self):
            return self.getTypedRuleContext(vbaParser.CloseStatementContext,0)


        def seekStatement(self):
            return self.getTypedRuleContext(vbaParser.SeekStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(vbaParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(vbaParser.UnlockStatementContext,0)


        def lineInputStatement(self):
            return self.getTypedRuleContext(vbaParser.LineInputStatementContext,0)


        def widthStatement(self):
            return self.getTypedRuleContext(vbaParser.WidthStatementContext,0)


        def printStatement(self):
            return self.getTypedRuleContext(vbaParser.PrintStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(vbaParser.WriteStatementContext,0)


        def inputStatement(self):
            return self.getTypedRuleContext(vbaParser.InputStatementContext,0)


        def putStatement(self):
            return self.getTypedRuleContext(vbaParser.PutStatementContext,0)


        def getStatement(self):
            return self.getTypedRuleContext(vbaParser.GetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileStatement" ):
                listener.enterFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileStatement" ):
                listener.exitFileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileStatement" ):
                return visitor.visitFileStatement(self)
            else:
                return visitor.visitChildren(self)




    def fileStatement(self):

        localctx = vbaParser.FileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_fileStatement)
        try:
            self.state = 3169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3157
                self.openStatement()
                pass
            elif token in [40, 159]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3158
                self.closeStatement()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3159
                self.seekStatement()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3160
                self.lockStatement()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3161
                self.unlockStatement()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3162
                self.lineInputStatement()
                pass
            elif token in [217]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3163
                self.widthStatement()
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3164
                self.printStatement()
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3165
                self.writeStatement()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3166
                self.inputStatement()
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3167
                self.putStatement()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3168
                self.getStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def pathName(self):
            return self.getTypedRuleContext(vbaParser.PathNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def modeClause(self):
            return self.getTypedRuleContext(vbaParser.ModeClauseContext,0)


        def accessClause(self):
            return self.getTypedRuleContext(vbaParser.AccessClauseContext,0)


        def lock(self):
            return self.getTypedRuleContext(vbaParser.LockContext,0)


        def lenClause(self):
            return self.getTypedRuleContext(vbaParser.LenClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_openStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStatement" ):
                listener.enterOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStatement" ):
                listener.exitOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenStatement" ):
                return visitor.visitOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def openStatement(self):

        localctx = vbaParser.OpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_openStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3171
            self.match(vbaParser.OPEN)
            self.state = 3173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3172
                self.wsc()


            self.state = 3175
            self.pathName()
            self.state = 3177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 3176
                self.wsc()


            self.state = 3180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 3179
                self.modeClause()


            self.state = 3182
            self.wsc()
            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3183
                self.accessClause()


            self.state = 3187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3186
                self.wsc()


            self.state = 3190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116 or _la==168:
                self.state = 3189
                self.lock()


            self.state = 3193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3192
                self.wsc()


            self.state = 3195
            self.match(vbaParser.AS)
            self.state = 3197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3196
                self.wsc()


            self.state = 3199
            self.fileNumber()
            self.state = 3201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 3200
                self.wsc()


            self.state = 3204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 3203
                self.lenClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_pathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathName" ):
                listener.enterPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathName" ):
                listener.exitPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathName" ):
                return visitor.visitPathName(self)
            else:
                return visitor.visitChildren(self)




    def pathName(self):

        localctx = vbaParser.PathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_pathName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3206
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def modeOpt(self):
            return self.getTypedRuleContext(vbaParser.ModeOptContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_modeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeClause" ):
                listener.enterModeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeClause" ):
                listener.exitModeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeClause" ):
                return visitor.visitModeClause(self)
            else:
                return visitor.visitChildren(self)




    def modeClause(self):

        localctx = vbaParser.ModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_modeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.match(vbaParser.FOR)
            self.state = 3209
            self.wsc()
            self.state = 3210
            self.modeOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeOptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeOpt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeOpt" ):
                listener.enterModeOpt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeOpt" ):
                listener.exitModeOpt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeOpt" ):
                return visitor.visitModeOpt(self)
            else:
                return visitor.visitChildren(self)




    def modeOpt(self):

        localctx = vbaParser.ModeOptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_modeOpt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            _la = self._input.LA(1)
            if not(_la==8 or _la==14 or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 9015995347763201) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def access(self):
            return self.getTypedRuleContext(vbaParser.AccessContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_accessClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessClause" ):
                listener.enterAccessClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessClause" ):
                listener.exitAccessClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessClause" ):
                return visitor.visitAccessClause(self)
            else:
                return visitor.visitChildren(self)




    def accessClause(self):

        localctx = vbaParser.AccessClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_accessClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.match(vbaParser.ACCESS)
            self.state = 3215
            self.wsc()
            self.state = 3216
            self.access()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess" ):
                listener.enterAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess" ):
                listener.exitAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess" ):
                return visitor.visitAccess(self)
            else:
                return visitor.visitChildren(self)




    def access(self):

        localctx = vbaParser.AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_access)
        try:
            self.state = 3224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3218
                self.match(vbaParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3219
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3220
                self.match(vbaParser.READ)
                self.state = 3221
                self.wsc()
                self.state = 3222
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock" ):
                listener.enterLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock" ):
                listener.exitLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock" ):
                return visitor.visitLock(self)
            else:
                return visitor.visitChildren(self)




    def lock(self):

        localctx = vbaParser.LockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_lock)
        try:
            self.state = 3241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3226
                self.match(vbaParser.SHARED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3227
                self.match(vbaParser.LOCK)
                self.state = 3228
                self.wsc()
                self.state = 3229
                self.match(vbaParser.READ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3231
                self.match(vbaParser.LOCK)
                self.state = 3232
                self.wsc()
                self.state = 3233
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3235
                self.match(vbaParser.LOCK)
                self.state = 3236
                self.wsc()
                self.state = 3237
                self.match(vbaParser.READ)
                self.state = 3238
                self.wsc()
                self.state = 3239
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def recLength(self):
            return self.getTypedRuleContext(vbaParser.RecLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLenClause" ):
                listener.enterLenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLenClause" ):
                listener.exitLenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLenClause" ):
                return visitor.visitLenClause(self)
            else:
                return visitor.visitChildren(self)




    def lenClause(self):

        localctx = vbaParser.LenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_lenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3243
            self.match(vbaParser.LEN)
            self.state = 3244
            self.wsc()
            self.state = 3245
            self.match(vbaParser.EQ)
            self.state = 3246
            self.wsc()
            self.state = 3247
            self.recLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecLength" ):
                listener.enterRecLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecLength" ):
                listener.exitRecLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecLength" ):
                return visitor.visitRecLength(self)
            else:
                return visitor.visitChildren(self)




    def recLength(self):

        localctx = vbaParser.RecLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_recLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3249
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def unmarkedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.UnmarkedFileNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumber" ):
                return visitor.visitFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_fileNumber)
        try:
            self.state = 3253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3251
                self.markedFileNumber()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3252
                self.unmarkedFileNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_markedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkedFileNumber" ):
                listener.enterMarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkedFileNumber" ):
                listener.exitMarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkedFileNumber" ):
                return visitor.visitMarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def markedFileNumber(self):

        localctx = vbaParser.MarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_markedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3255
            self.match(vbaParser.HASH)
            self.state = 3256
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnmarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unmarkedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmarkedFileNumber" ):
                listener.enterUnmarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmarkedFileNumber" ):
                listener.exitUnmarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnmarkedFileNumber" ):
                return visitor.visitUnmarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def unmarkedFileNumber(self):

        localctx = vbaParser.UnmarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_unmarkedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3258
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def fileNumberList(self):
            return self.getTypedRuleContext(vbaParser.FileNumberListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStatement" ):
                listener.enterCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStatement" ):
                listener.exitCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStatement" ):
                return visitor.visitCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeStatement(self):

        localctx = vbaParser.CloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_closeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [159]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3260
                self.match(vbaParser.RESET)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3261
                self.match(vbaParser.CLOSE)
                self.state = 3263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 3262
                    self.wsc()


                self.state = 3266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                    self.state = 3265
                    self.fileNumberList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumberList" ):
                listener.enterFileNumberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumberList" ):
                listener.exitFileNumberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumberList" ):
                return visitor.visitFileNumberList(self)
            else:
                return visitor.visitChildren(self)




    def fileNumberList(self):

        localctx = vbaParser.FileNumberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_fileNumberList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self.fileNumber()
            self.state = 3281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,455,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3271
                        self.wsc()


                    self.state = 3274
                    self.match(vbaParser.COMMA)
                    self.state = 3276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3275
                        self.wsc()


                    self.state = 3278
                    self.fileNumber() 
                self.state = 3283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,455,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeekStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def position(self):
            return self.getTypedRuleContext(vbaParser.PositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStatement" ):
                listener.enterSeekStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStatement" ):
                listener.exitSeekStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeekStatement" ):
                return visitor.visitSeekStatement(self)
            else:
                return visitor.visitChildren(self)




    def seekStatement(self):

        localctx = vbaParser.SeekStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_seekStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3284
            self.match(vbaParser.SEEK)
            self.state = 3285
            self.wsc()
            self.state = 3286
            self.fileNumber()
            self.state = 3288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3287
                self.wsc()


            self.state = 3290
            self.match(vbaParser.COMMA)
            self.state = 3292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3291
                self.wsc()


            self.state = 3294
            self.position()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)




    def position(self):

        localctx = vbaParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3296
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStatement" ):
                return visitor.visitLockStatement(self)
            else:
                return visitor.visitChildren(self)




    def lockStatement(self):

        localctx = vbaParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            self.match(vbaParser.LOCK)
            self.state = 3299
            self.wsc()
            self.state = 3300
            self.fileNumber()

            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3301
                self.wsc()


            self.state = 3304
            self.match(vbaParser.COMMA)
            self.state = 3306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3305
                self.wsc()


            self.state = 3308
            self.recordRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.StartRecordNumberContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.EndRecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordRange" ):
                listener.enterRecordRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordRange" ):
                listener.exitRecordRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordRange" ):
                return visitor.visitRecordRange(self)
            else:
                return visitor.visitChildren(self)




    def recordRange(self):

        localctx = vbaParser.RecordRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_recordRange)
        self._la = 0 # Token type
        try:
            self.state = 3319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3310
                self.startRecordNumber()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                    self.state = 3311
                    self.startRecordNumber()


                self.state = 3314
                self.wsc()
                self.state = 3315
                self.match(vbaParser.TO)
                self.state = 3316
                self.wsc()
                self.state = 3317
                self.endRecordNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRecordNumber" ):
                listener.enterStartRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRecordNumber" ):
                listener.exitStartRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRecordNumber" ):
                return visitor.visitStartRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def startRecordNumber(self):

        localctx = vbaParser.StartRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_startRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndRecordNumber" ):
                listener.enterEndRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndRecordNumber" ):
                listener.exitEndRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndRecordNumber" ):
                return visitor.visitEndRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def endRecordNumber(self):

        localctx = vbaParser.EndRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_endRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3323
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStatement" ):
                listener.enterUnlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStatement" ):
                listener.exitUnlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockStatement" ):
                return visitor.visitUnlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def unlockStatement(self):

        localctx = vbaParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.match(vbaParser.UNLOCK)
            self.state = 3326
            self.wsc()
            self.state = 3327
            self.fileNumber()
            self.state = 3336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 3329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3328
                    self.wsc()


                self.state = 3331
                self.match(vbaParser.COMMA)
                self.state = 3333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
                if la_ == 1:
                    self.state = 3332
                    self.wsc()


                self.state = 3335
                self.recordRange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def variableName(self):
            return self.getTypedRuleContext(vbaParser.VariableNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStatement" ):
                listener.enterLineInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStatement" ):
                listener.exitLineInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineInputStatement" ):
                return visitor.visitLineInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def lineInputStatement(self):

        localctx = vbaParser.LineInputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_lineInputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3338
            self.match(vbaParser.LINE)
            self.state = 3339
            self.wsc()
            self.state = 3340
            self.match(vbaParser.INPUT)
            self.state = 3341
            self.wsc()
            self.state = 3342
            self.markedFileNumber()
            self.state = 3344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3343
                self.wsc()


            self.state = 3346
            self.match(vbaParser.COMMA)
            self.state = 3348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3347
                self.wsc()


            self.state = 3350
            self.variableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableName" ):
                listener.enterVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableName" ):
                listener.exitVariableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableName" ):
                return visitor.visitVariableName(self)
            else:
                return visitor.visitChildren(self)




    def variableName(self):

        localctx = vbaParser.VariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_variableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def lineWidth(self):
            return self.getTypedRuleContext(vbaParser.LineWidthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStatement" ):
                listener.enterWidthStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStatement" ):
                listener.exitWidthStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWidthStatement" ):
                return visitor.visitWidthStatement(self)
            else:
                return visitor.visitChildren(self)




    def widthStatement(self):

        localctx = vbaParser.WidthStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_widthStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3354
            self.match(vbaParser.WIDTH)
            self.state = 3355
            self.wsc()
            self.state = 3356
            self.markedFileNumber()
            self.state = 3358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3357
                self.wsc()


            self.state = 3360
            self.match(vbaParser.COMMA)
            self.state = 3362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3361
                self.wsc()


            self.state = 3364
            self.lineWidth()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineWidthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineWidth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineWidth" ):
                listener.enterLineWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineWidth" ):
                listener.exitLineWidth(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineWidth" ):
                return visitor.visitLineWidth(self)
            else:
                return visitor.visitChildren(self)




    def lineWidth(self):

        localctx = vbaParser.LineWidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_lineWidth)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStatement" ):
                listener.enterPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStatement" ):
                listener.exitPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStatement" ):
                return visitor.visitPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def printStatement(self):

        localctx = vbaParser.PrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_printStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3368
            self.match(vbaParser.PRINT)
            self.state = 3369
            self.wsc()
            self.state = 3370
            self.markedFileNumber()
            self.state = 3372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3371
                self.wsc()


            self.state = 3374
            self.match(vbaParser.COMMA)
            self.state = 3376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 3375
                self.wsc()


            self.state = 3379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3714846639096847) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135689257112043273) != 0) or _la==281 or _la==282:
                self.state = 3378
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputItemContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputList" ):
                return visitor.visitOutputList(self)
            else:
                return visitor.visitChildren(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3381
                self.outputItem()
                self.state = 3384 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3714846639096847) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135689257112043273) != 0) or _la==281 or _la==282):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputClause(self):
            return self.getTypedRuleContext(vbaParser.OutputClauseContext,0)


        def charPosition(self):
            return self.getTypedRuleContext(vbaParser.CharPositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputItem" ):
                listener.enterOutputItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputItem" ):
                listener.exitOutputItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputItem" ):
                return visitor.visitOutputItem(self)
            else:
                return visitor.visitChildren(self)




    def outputItem(self):

        localctx = vbaParser.OutputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_outputItem)
        try:
            self.state = 3391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 76, 79, 83, 87, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 144, 149, 150, 154, 156, 159, 163, 167, 171, 173, 175, 178, 179, 182, 184, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 251, 253, 258, 267, 268, 269, 270, 281, 282]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3386
                self.outputClause()
                self.state = 3388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3387
                    self.charPosition()


                pass
            elif token in [242, 263]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3390
                self.charPosition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spcClause(self):
            return self.getTypedRuleContext(vbaParser.SpcClauseContext,0)


        def tabClause(self):
            return self.getTypedRuleContext(vbaParser.TabClauseContext,0)


        def outputExpression(self):
            return self.getTypedRuleContext(vbaParser.OutputExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputClause" ):
                listener.enterOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputClause" ):
                listener.exitOutputClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputClause" ):
                return visitor.visitOutputClause(self)
            else:
                return visitor.visitChildren(self)




    def outputClause(self):

        localctx = vbaParser.OutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_outputClause)
        try:
            self.state = 3396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3393
                self.spcClause()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3394
                self.tabClause()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 76, 79, 83, 87, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 144, 149, 150, 154, 156, 159, 163, 167, 173, 175, 179, 182, 184, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 251, 253, 258, 267, 268, 269, 270, 281, 282]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3395
                self.outputExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(vbaParser.SEMICOLON, 0)

        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_charPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharPosition" ):
                listener.enterCharPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharPosition" ):
                listener.exitCharPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharPosition" ):
                return visitor.visitCharPosition(self)
            else:
                return visitor.visitChildren(self)




    def charPosition(self):

        localctx = vbaParser.CharPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_charPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3398
            _la = self._input.LA(1)
            if not(_la==242 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputExpression" ):
                listener.enterOutputExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputExpression" ):
                listener.exitOutputExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputExpression" ):
                return visitor.visitOutputExpression(self)
            else:
                return visitor.visitChildren(self)




    def outputExpression(self):

        localctx = vbaParser.OutputExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_outputExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def spcNumber(self):
            return self.getTypedRuleContext(vbaParser.SpcNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_spcClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcClause" ):
                listener.enterSpcClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcClause" ):
                listener.exitSpcClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcClause" ):
                return visitor.visitSpcClause(self)
            else:
                return visitor.visitChildren(self)




    def spcClause(self):

        localctx = vbaParser.SpcClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_spcClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402
            self.match(vbaParser.SPC)
            self.state = 3403
            self.wsc()
            self.state = 3404
            self.match(vbaParser.LPAREN)
            self.state = 3406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3405
                self.wsc()


            self.state = 3408
            self.spcNumber()
            self.state = 3410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3409
                self.wsc()


            self.state = 3412
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_spcNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcNumber" ):
                listener.enterSpcNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcNumber" ):
                listener.exitSpcNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcNumber" ):
                return visitor.visitSpcNumber(self)
            else:
                return visitor.visitChildren(self)




    def spcNumber(self):

        localctx = vbaParser.SpcNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_spcNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def tabNumber(self):
            return self.getTypedRuleContext(vbaParser.TabNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_tabClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabClause" ):
                listener.enterTabClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabClause" ):
                listener.exitTabClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabClause" ):
                return visitor.visitTabClause(self)
            else:
                return visitor.visitChildren(self)




    def tabClause(self):

        localctx = vbaParser.TabClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_tabClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3416
            self.match(vbaParser.TAB)
            self.state = 3417
            self.wsc()
            self.state = 3418
            self.match(vbaParser.LPAREN)
            self.state = 3420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3419
                self.wsc()


            self.state = 3422
            self.tabNumber()
            self.state = 3424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3423
                self.wsc()


            self.state = 3426
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_tabNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabNumber" ):
                listener.enterTabNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabNumber" ):
                listener.exitTabNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabNumber" ):
                return visitor.visitTabNumber(self)
            else:
                return visitor.visitChildren(self)




    def tabNumber(self):

        localctx = vbaParser.TabNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_tabNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3428
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStatement" ):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = vbaParser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_writeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self.match(vbaParser.WRITE)
            self.state = 3431
            self.wsc()
            self.state = 3432
            self.markedFileNumber()
            self.state = 3434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3433
                self.wsc()


            self.state = 3436
            self.match(vbaParser.COMMA)
            self.state = 3438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.state = 3437
                self.wsc()


            self.state = 3441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3714846639096847) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135689257112043273) != 0) or _la==281 or _la==282:
                self.state = 3440
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def inputList(self):
            return self.getTypedRuleContext(vbaParser.InputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStatement" ):
                listener.enterInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStatement" ):
                listener.exitInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputStatement" ):
                return visitor.visitInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def inputStatement(self):

        localctx = vbaParser.InputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_inputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443
            self.match(vbaParser.INPUT)
            self.state = 3444
            self.wsc()
            self.state = 3445
            self.markedFileNumber()
            self.state = 3447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3446
                self.wsc()


            self.state = 3449
            self.match(vbaParser.COMMA)
            self.state = 3451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3450
                self.wsc()


            self.state = 3453
            self.inputList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inputVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.InputVariableContext)
            else:
                return self.getTypedRuleContext(vbaParser.InputVariableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputList" ):
                listener.enterInputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputList" ):
                listener.exitInputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputList" ):
                return visitor.visitInputList(self)
            else:
                return visitor.visitChildren(self)




    def inputList(self):

        localctx = vbaParser.InputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_inputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3455
            self.inputVariable()
            self.state = 3466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3456
                        self.wsc()


                    self.state = 3459
                    self.match(vbaParser.COMMA)
                    self.state = 3461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3460
                        self.wsc()


                    self.state = 3463
                    self.inputVariable() 
                self.state = 3468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputVariable" ):
                listener.enterInputVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputVariable" ):
                listener.exitInputVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputVariable" ):
                return visitor.visitInputVariable(self)
            else:
                return visitor.visitChildren(self)




    def inputVariable(self):

        localctx = vbaParser.InputVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_inputVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3469
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def data(self):
            return self.getTypedRuleContext(vbaParser.DataContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_putStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStatement" ):
                listener.enterPutStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStatement" ):
                listener.exitPutStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPutStatement" ):
                return visitor.visitPutStatement(self)
            else:
                return visitor.visitChildren(self)




    def putStatement(self):

        localctx = vbaParser.PutStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_putStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3471
            self.match(vbaParser.PUT)
            self.state = 3472
            self.wsc()
            self.state = 3473
            self.fileNumber()
            self.state = 3475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3474
                self.wsc()


            self.state = 3477
            self.match(vbaParser.COMMA)
            self.state = 3479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
            if la_ == 1:
                self.state = 3478
                self.wsc()


            self.state = 3482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                self.state = 3481
                self.recordNumber()


            self.state = 3485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3484
                self.wsc()


            self.state = 3487
            self.match(vbaParser.COMMA)
            self.state = 3489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3488
                self.wsc()


            self.state = 3491
            self.data()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordNumber" ):
                listener.enterRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordNumber" ):
                listener.exitRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordNumber" ):
                return visitor.visitRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def recordNumber(self):

        localctx = vbaParser.RecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_recordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3493
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = vbaParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_data)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3495
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def variable(self):
            return self.getTypedRuleContext(vbaParser.VariableContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_getStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStatement" ):
                listener.enterGetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStatement" ):
                listener.exitGetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStatement" ):
                return visitor.visitGetStatement(self)
            else:
                return visitor.visitChildren(self)




    def getStatement(self):

        localctx = vbaParser.GetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_getStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497
            self.match(vbaParser.GET)
            self.state = 3498
            self.wsc()
            self.state = 3499
            self.fileNumber()
            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3500
                self.wsc()


            self.state = 3503
            self.match(vbaParser.COMMA)
            self.state = 3505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 3504
                self.wsc()


            self.state = 3508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152094998) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                self.state = 3507
                self.recordNumber()


            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3510
                self.wsc()


            self.state = 3513
            self.match(vbaParser.COMMA)
            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3514
                self.wsc()


            self.state = 3517
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = vbaParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PERIOD)
            else:
                return self.getToken(vbaParser.PERIOD, i)

        def attributeDescName(self):
            return self.getTypedRuleContext(vbaParser.AttributeDescNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def attributeUsrName(self):
            return self.getTypedRuleContext(vbaParser.AttributeUsrNameContext,0)


        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatement" ):
                listener.enterAttributeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatement" ):
                listener.exitAttributeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatement" ):
                return visitor.visitAttributeStatement(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatement(self):

        localctx = vbaParser.AttributeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_attributeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3521
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3522
                self.match(vbaParser.WS)
                self.state = 3523
                self.ambiguousIdentifier()
                self.state = 3524
                self.match(vbaParser.PERIOD)
                self.state = 3525
                self.attributeDescName()
                self.state = 3527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 3526
                    self.match(vbaParser.WS)


                self.state = 3529
                self.match(vbaParser.EQ)
                self.state = 3531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 3530
                    self.match(vbaParser.WS)


                self.state = 3533
                self.match(vbaParser.STRINGLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3535
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3536
                self.match(vbaParser.WS)
                self.state = 3537
                self.ambiguousIdentifier()
                self.state = 3538
                self.match(vbaParser.PERIOD)
                self.state = 3539
                self.attributeUsrName()
                self.state = 3541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 3540
                    self.match(vbaParser.WS)


                self.state = 3543
                self.match(vbaParser.EQ)
                self.state = 3545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 3544
                    self.match(vbaParser.WS)


                self.state = 3548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==253:
                    self.state = 3547
                    self.match(vbaParser.MINUS)


                self.state = 3550
                self.match(vbaParser.INTEGERLITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3552
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3553
                self.match(vbaParser.WS)
                self.state = 3554
                self.ambiguousIdentifier()
                self.state = 3555
                self.match(vbaParser.PERIOD)
                self.state = 3556
                self.match(vbaParser.VB_PROCDATA)
                self.state = 3557
                self.match(vbaParser.PERIOD)
                self.state = 3558
                self.match(vbaParser.VB_INVOKE_FUNC)
                self.state = 3559
                self.match(vbaParser.WS)
                self.state = 3560
                self.match(vbaParser.EQ)
                self.state = 3561
                self.match(vbaParser.WS)
                self.state = 3562
                self.match(vbaParser.STRINGLITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeDescNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_MEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_MEMBERFLAGS, 0)

        def VB_VARMEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_VARMEMBERFLAGS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeDescName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeDescName" ):
                listener.enterAttributeDescName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeDescName" ):
                listener.exitAttributeDescName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeDescName" ):
                return visitor.visitAttributeDescName(self)
            else:
                return visitor.visitChildren(self)




    def attributeDescName(self):

        localctx = vbaParser.AttributeDescNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_attributeDescName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3566
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 164353) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeUsrNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeUsrName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeUsrName" ):
                listener.enterAttributeUsrName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeUsrName" ):
                listener.exitAttributeUsrName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeUsrName" ):
                return visitor.visitAttributeUsrName(self)
            else:
                return visitor.visitChildren(self)




    def attributeUsrName(self):

        localctx = vbaParser.AttributeUsrNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_attributeUsrName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3568
            _la = self._input.LA(1)
            if not(_la==206 or _la==211):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(vbaParser.ParenthesizedExpressionContext,0)


        def typeofIsExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeofIsExpressionContext,0)


        def newExpress(self):
            return self.getTypedRuleContext(vbaParser.NewExpressContext,0)


        def unaryMinusExpression(self):
            return self.getTypedRuleContext(vbaParser.UnaryMinusExpressionContext,0)


        def notOperatorExpression(self):
            return self.getTypedRuleContext(vbaParser.NotOperatorExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 580
        self.enterRecursionRule(localctx, 580, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 87, 135, 136, 182, 267, 268, 269, 270]:
                self.state = 3571
                self.literalExpression()
                pass
            elif token in [251]:
                self.state = 3572
                self.parenthesizedExpression()
                pass
            elif token in [184]:
                self.state = 3573
                self.typeofIsExpression()
                pass
            elif token in [133]:
                self.state = 3574
                self.newExpress()
                pass
            elif token in [253]:
                self.state = 3575
                self.unaryMinusExpression()
                pass
            elif token in [134]:
                self.state = 3576
                self.notOperatorExpression()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 79, 83, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 137, 144, 149, 150, 154, 156, 159, 163, 167, 173, 175, 179, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 258, 281, 282]:
                self.state = 3577
                self.lExpression(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 3645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,520,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3643
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3580
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3582
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3581
                            self.wsc()


                        self.state = 3584
                        self.match(vbaParser.POW)
                        self.state = 3586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3585
                            self.wsc()


                        self.state = 3588
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3589
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3590
                            self.wsc()


                        self.state = 3593
                        _la = self._input.LA(1)
                        if not(_la==243 or _la==255):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3594
                            self.wsc()


                        self.state = 3597
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3598
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3599
                            self.wsc()


                        self.state = 3602
                        self.match(vbaParser.MOD)
                        self.state = 3604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3603
                            self.wsc()


                        self.state = 3606
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3607
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3608
                            self.wsc()


                        self.state = 3611
                        _la = self._input.LA(1)
                        if not(_la==253 or _la==259):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3612
                            self.wsc()


                        self.state = 3615
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3616
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3617
                            self.wsc()


                        self.state = 3620
                        self.match(vbaParser.AMPERSAND)
                        self.state = 3622
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3621
                            self.wsc()


                        self.state = 3624
                        self.expression(6)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3625
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3626
                            self.wsc()


                        self.state = 3629
                        _la = self._input.LA(1)
                        if not(_la==104 or _la==113 or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 2221) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3630
                            self.wsc()


                        self.state = 3633
                        self.expression(5)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3634
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3636
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3635
                            self.wsc()


                        self.state = 3638
                        _la = self._input.LA(1)
                        if not(_la==5 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4611686018427518977) != 0) or _la==221):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3639
                            self.wsc()


                        self.state = 3642
                        self.expression(3)
                        pass

             
                self.state = 3647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,520,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def instanceExpression(self):
            return self.getTypedRuleContext(vbaParser.InstanceExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLExpression" ):
                listener.enterLExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLExpression" ):
                listener.exitLExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLExpression" ):
                return visitor.visitLExpression(self)
            else:
                return visitor.visitChildren(self)



    def lExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.LExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 582
        self.enterRecursionRule(localctx, 582, self.RULE_lExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.state = 3649
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.state = 3650
                self.instanceExpression()
                pass

            elif la_ == 3:
                self.state = 3651
                self.withExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,536,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3717
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3654
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3655
                        self.match(vbaParser.PERIOD)
                        self.state = 3657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3656
                            self.wsc()


                        self.state = 3659
                        self.unrestrictedName()
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3660
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3662
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                        if la_ == 1:
                            self.state = 3661
                            self.wsc()


                        self.state = 3664
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3666
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3665
                            self.wsc()


                        self.state = 3668
                        self.match(vbaParser.PERIOD)
                        self.state = 3670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3669
                            self.wsc()


                        self.state = 3672
                        self.unrestrictedName()
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3673
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3675
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3674
                            self.wsc()


                        self.state = 3677
                        self.match(vbaParser.LPAREN)
                        self.state = 3679
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                        if la_ == 1:
                            self.state = 3678
                            self.wsc()


                        self.state = 3681
                        self.argumentList()
                        self.state = 3683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3682
                            self.wsc()


                        self.state = 3685
                        self.match(vbaParser.RPAREN)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3687
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3688
                        self.match(vbaParser.EXCLAM)
                        self.state = 3689
                        self.unrestrictedName()
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3690
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3692
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                        if la_ == 1:
                            self.state = 3691
                            self.wsc()


                        self.state = 3694
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3695
                            self.wsc()


                        self.state = 3698
                        self.match(vbaParser.EXCLAM)
                        self.state = 3699
                        self.unrestrictedName()
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3700
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3702
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                        if la_ == 1:
                            self.state = 3701
                            self.wsc()


                        self.state = 3704
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3705
                            self.wsc()


                        self.state = 3708
                        self.match(vbaParser.EXCLAM)
                        self.state = 3710
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                        if la_ == 1:
                            self.state = 3709
                            self.wsc()


                        self.state = 3712
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3714
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3713
                            self.wsc()


                        self.state = 3716
                        self.unrestrictedName()
                        pass

             
                self.state = 3721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,536,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def literalExpression(self):

        localctx = vbaParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_literalExpression)
        try:
            self.state = 3730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [270]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3722
                self.match(vbaParser.DATELITERAL)
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3723
                self.match(vbaParser.FLOATLITERAL)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3724
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3725
                self.match(vbaParser.STRINGLITERAL)
                pass
            elif token in [76, 87, 135, 136, 182]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3726
                self.literalIdentifier()
                self.state = 3728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
                if la_ == 1:
                    self.state = 3727
                    self.typeSuffix()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = vbaParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3732
            self.match(vbaParser.LPAREN)
            self.state = 3734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3733
                self.wsc()


            self.state = 3736
            self.expression(0)
            self.state = 3738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3737
                self.wsc()


            self.state = 3740
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeofIsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeofIsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofIsExpression" ):
                listener.enterTypeofIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofIsExpression" ):
                listener.exitTypeofIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeofIsExpression" ):
                return visitor.visitTypeofIsExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeofIsExpression(self):

        localctx = vbaParser.TypeofIsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_typeofIsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3742
            self.match(vbaParser.TYPEOF)
            self.state = 3744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3743
                self.wsc()


            self.state = 3746
            self.expression(0)
            self.state = 3748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3747
                self.wsc()


            self.state = 3750
            self.match(vbaParser.IS)
            self.state = 3752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3751
                self.wsc()


            self.state = 3754
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_newExpress

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpress" ):
                listener.enterNewExpress(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpress" ):
                listener.exitNewExpress(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpress" ):
                return visitor.visitNewExpress(self)
            else:
                return visitor.visitChildren(self)




    def newExpress(self):

        localctx = vbaParser.NewExpressContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_newExpress)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            self.match(vbaParser.NEW)
            self.state = 3758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3757
                self.wsc()


            self.state = 3760
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_notOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperatorExpression" ):
                listener.enterNotOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperatorExpression" ):
                listener.exitNotOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperatorExpression" ):
                return visitor.visitNotOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def notOperatorExpression(self):

        localctx = vbaParser.NotOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_notOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3762
            self.match(vbaParser.NOT)
            self.state = 3764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3763
                self.wsc()


            self.state = 3766
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryMinusExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unaryMinusExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryMinusExpression(self):

        localctx = vbaParser.UnaryMinusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_unaryMinusExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3768
            self.match(vbaParser.MINUS)
            self.state = 3770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3769
                self.wsc()


            self.state = 3772
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(vbaParser.NameContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameExpression" ):
                return visitor.visitSimpleNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def simpleNameExpression(self):

        localctx = vbaParser.SimpleNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_simpleNameExpression)
        try:
            self.state = 3777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3774
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3775
                self.reservedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3776
                self.specialForm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_instanceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceExpression" ):
                return visitor.visitInstanceExpression(self)
            else:
                return visitor.visitChildren(self)




    def instanceExpression(self):

        localctx = vbaParser.InstanceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_instanceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.match(vbaParser.ME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self):
            return self.getToken(vbaParser.LINE_CONTINUATION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_memberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessExpression" ):
                return visitor.visitMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessExpression(self):

        localctx = vbaParser.MemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_memberAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3781
                self.lExpression(0)
                self.state = 3782
                self.match(vbaParser.PERIOD)
                self.state = 3784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3783
                    self.wsc()


                self.state = 3786
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3788
                self.lExpression(0)
                self.state = 3790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
                if la_ == 1:
                    self.state = 3789
                    self.wsc()


                self.state = 3792
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3793
                    self.wsc()


                self.state = 3796
                self.match(vbaParser.PERIOD)
                self.state = 3798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3797
                    self.wsc()


                self.state = 3800
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)




    def indexExpression(self):

        localctx = vbaParser.IndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_indexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3804
            self.lExpression(0)
            self.state = 3806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3805
                self.wsc()


            self.state = 3808
            self.match(vbaParser.LPAREN)
            self.state = 3810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.state = 3809
                self.wsc()


            self.state = 3812
            self.argumentList()
            self.state = 3814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3813
                self.wsc()


            self.state = 3816
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalOrNamedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.PositionalOrNamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = vbaParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_argumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.state = 3818
                self.positionalOrNamedArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalOrNamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiredPositionalArgument(self):
            return self.getTypedRuleContext(vbaParser.RequiredPositionalArgumentContext,0)


        def positionalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def namedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.NamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalOrNamedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalOrNamedArgumentList" ):
                listener.enterPositionalOrNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalOrNamedArgumentList" ):
                listener.exitPositionalOrNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalOrNamedArgumentList" ):
                return visitor.visitPositionalOrNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def positionalOrNamedArgumentList(self):

        localctx = vbaParser.PositionalOrNamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_positionalOrNamedArgumentList)
        self._la = 0 # Token type
        try:
            self.state = 3849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,559,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3821
                        self.positionalArgument()
                        self.state = 3823
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3822
                            self.wsc()


                        self.state = 3825
                        self.match(vbaParser.COMMA)
                        self.state = 3827
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
                        if la_ == 1:
                            self.state = 3826
                            self.wsc()

                 
                    self.state = 3833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,559,self._ctx)

                self.state = 3834
                self.requiredPositionalArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,562,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3835
                        self.positionalArgument()
                        self.state = 3837
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3836
                            self.wsc()


                        self.state = 3839
                        self.match(vbaParser.COMMA)
                        self.state = 3841
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
                        if la_ == 1:
                            self.state = 3840
                            self.wsc()

                 
                    self.state = 3847
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,562,self._ctx)

                self.state = 3848
                self.namedArgumentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def positionalArgument(self):

        localctx = vbaParser.PositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_positionalArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2949989152226078) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -5800612253186776511) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 3697117014098959) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 135126306890186505) != 0) or _la==281 or _la==282:
                self.state = 3851
                self.argumentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiredPositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_requiredPositionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiredPositionalArgument" ):
                listener.enterRequiredPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiredPositionalArgument" ):
                listener.exitRequiredPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiredPositionalArgument" ):
                return visitor.visitRequiredPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def requiredPositionalArgument(self):

        localctx = vbaParser.RequiredPositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_requiredPositionalArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3854
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.NamedArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentList" ):
                listener.enterNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentList" ):
                listener.exitNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgumentList" ):
                return visitor.visitNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def namedArgumentList(self):

        localctx = vbaParser.NamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_namedArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3856
            self.namedArgument()
            self.state = 3867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,567,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3857
                        self.wsc()


                    self.state = 3860
                    self.match(vbaParser.COMMA)
                    self.state = 3862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3861
                        self.wsc()


                    self.state = 3864
                    self.namedArgument() 
                self.state = 3869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,567,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)




    def namedArgument(self):

        localctx = vbaParser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_namedArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3870
            self.unrestrictedName()
            self.state = 3872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3871
                self.wsc()


            self.state = 3874
            self.match(vbaParser.ASSIGN)
            self.state = 3876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3875
                self.wsc()


            self.state = 3878
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def addressofExpression(self):
            return self.getTypedRuleContext(vbaParser.AddressofExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpression" ):
                return visitor.visitArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpression(self):

        localctx = vbaParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_argumentExpression)
        self._la = 0 # Token type
        try:
            self.state = 3886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 17, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 51, 70, 76, 79, 83, 87, 88, 94, 101, 102, 103, 107, 108, 109, 110, 112, 114, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 144, 149, 150, 154, 156, 159, 163, 167, 173, 175, 179, 182, 184, 185, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 251, 253, 258, 267, 268, 269, 270, 281, 282]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 3880
                    self.match(vbaParser.BYVAL)
                    self.state = 3881
                    self.wsc()


                self.state = 3884
                self.expression(0)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3885
                self.addressofExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryAccessExpression" ):
                listener.enterDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryAccessExpression" ):
                listener.exitDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryAccessExpression" ):
                return visitor.visitDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryAccessExpression(self):

        localctx = vbaParser.DictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_dictionaryAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3888
                self.lExpression(0)
                self.state = 3889
                self.match(vbaParser.EXCLAM)
                self.state = 3890
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3892
                self.lExpression(0)
                self.state = 3894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                if la_ == 1:
                    self.state = 3893
                    self.wsc()


                self.state = 3896
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3897
                    self.wsc()


                self.state = 3900
                self.match(vbaParser.EXCLAM)
                self.state = 3901
                self.unrestrictedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3903
                self.lExpression(0)
                self.state = 3905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
                if la_ == 1:
                    self.state = 3904
                    self.wsc()


                self.state = 3907
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3908
                    self.wsc()


                self.state = 3911
                self.match(vbaParser.EXCLAM)
                self.state = 3913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
                if la_ == 1:
                    self.state = 3912
                    self.wsc()


                self.state = 3915
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==279:
                    self.state = 3916
                    self.wsc()


                self.state = 3919
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withMemberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithMemberAccessExpressionContext,0)


        def withDictionaryAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithDictionaryAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithExpression" ):
                listener.enterWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithExpression" ):
                listener.exitWithExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpression" ):
                return visitor.visitWithExpression(self)
            else:
                return visitor.visitChildren(self)




    def withExpression(self):

        localctx = vbaParser.WithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_withExpression)
        try:
            self.state = 3925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [258]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3923
                self.withMemberAccessExpression()
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3924
                self.withDictionaryAccessExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithMemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withMemberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithMemberAccessExpression" ):
                listener.enterWithMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithMemberAccessExpression" ):
                listener.exitWithMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithMemberAccessExpression" ):
                return visitor.visitWithMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withMemberAccessExpression(self):

        localctx = vbaParser.WithMemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_withMemberAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3927
            self.match(vbaParser.PERIOD)
            self.state = 3928
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithDictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withDictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithDictionaryAccessExpression" ):
                listener.enterWithDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithDictionaryAccessExpression" ):
                listener.exitWithDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithDictionaryAccessExpression" ):
                return visitor.visitWithDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withDictionaryAccessExpression(self):

        localctx = vbaParser.WithDictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_withDictionaryAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3930
            self.match(vbaParser.EXCLAM)
            self.state = 3931
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = vbaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3933
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CcExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ccExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCcExpression" ):
                listener.enterCcExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCcExpression" ):
                listener.exitCcExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCcExpression" ):
                return visitor.visitCcExpression(self)
            else:
                return visitor.visitChildren(self)




    def ccExpression(self):

        localctx = vbaParser.CcExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_ccExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3935
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_booleanExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpression" ):
                listener.enterBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpression" ):
                listener.exitBooleanExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanExpression" ):
                return visitor.visitBooleanExpression(self)
            else:
                return visitor.visitChildren(self)




    def booleanExpression(self):

        localctx = vbaParser.BooleanExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_booleanExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3937
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_integerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerExpression" ):
                listener.enterIntegerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerExpression" ):
                listener.exitIntegerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerExpression" ):
                return visitor.visitIntegerExpression(self)
            else:
                return visitor.visitChildren(self)




    def integerExpression(self):

        localctx = vbaParser.IntegerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_integerExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3939
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableExpression" ):
                listener.enterVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableExpression" ):
                listener.exitVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableExpression" ):
                return visitor.visitVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def variableExpression(self):

        localctx = vbaParser.VariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_variableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3941
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundVariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_boundVariableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundVariableExpression" ):
                listener.enterBoundVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundVariableExpression" ):
                listener.exitBoundVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundVariableExpression" ):
                return visitor.visitBoundVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def boundVariableExpression(self):

        localctx = vbaParser.BoundVariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_boundVariableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3943
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeExpression(self):

        localctx = vbaParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_typeExpression)
        try:
            self.state = 3947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3945
                self.builtinType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3946
                self.definedTypeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_definedTypeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedTypeExpression" ):
                listener.enterDefinedTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedTypeExpression" ):
                listener.exitDefinedTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinedTypeExpression" ):
                return visitor.visitDefinedTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def definedTypeExpression(self):

        localctx = vbaParser.DefinedTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_definedTypeExpression)
        try:
            self.state = 3951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3949
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3950
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def procedurePointerExpression(self):
            return self.getTypedRuleContext(vbaParser.ProcedurePointerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_addressofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressofExpression" ):
                listener.enterAddressofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressofExpression" ):
                listener.exitAddressofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddressofExpression" ):
                return visitor.visitAddressofExpression(self)
            else:
                return visitor.visitChildren(self)




    def addressofExpression(self):

        localctx = vbaParser.AddressofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_addressofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3953
            self.match(vbaParser.ADDRESSOF)
            self.state = 3954
            self.wsc()
            self.state = 3955
            self.procedurePointerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedurePointerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedurePointerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedurePointerExpression" ):
                listener.enterProcedurePointerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedurePointerExpression" ):
                listener.exitProcedurePointerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedurePointerExpression" ):
                return visitor.visitProcedurePointerExpression(self)
            else:
                return visitor.visitChildren(self)




    def procedurePointerExpression(self):

        localctx = vbaParser.ProcedurePointerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_procedurePointerExpression)
        try:
            self.state = 3959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3957
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3958
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def getRuleIndex(self):
            return vbaParser.RULE_wsc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsc" ):
                listener.enterWsc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsc" ):
                listener.exitWsc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWsc" ):
                return visitor.visitWsc(self)
            else:
                return visitor.visitChildren(self)




    def wsc(self):

        localctx = vbaParser.WscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_wsc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3962 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3961
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==279):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 3964 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,583,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLine" ):
                return visitor.visitEndOfLine(self)
            else:
                return visitor.visitChildren(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3966
                self.wsc()


            self.state = 3972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [273]:
                self.state = 3969
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [275]:
                self.state = 3970
                self.commentBody()
                pass
            elif token in [274]:
                self.state = 3971
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,586,self._ctx)
            if la_ == 1:
                self.state = 3974
                self.wsc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endOfLineNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLineNoWs" ):
                listener.enterEndOfLineNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLineNoWs" ):
                listener.exitEndOfLineNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLineNoWs" ):
                return visitor.visitEndOfLineNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfLineNoWs(self):

        localctx = vbaParser.EndOfLineNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_endOfLineNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==279:
                self.state = 3977
                self.wsc()


            self.state = 3983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [273]:
                self.state = 3980
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [275]:
                self.state = 3981
                self.commentBody()
                pass
            elif token in [274]:
                self.state = 3982
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatement" ):
                return visitor.visitEndOfStatement(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3993 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
                    if la_ == 1:
                        self.state = 3985
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 3987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==272 or _la==279:
                            self.state = 3986
                            self.wsc()


                        self.state = 3989
                        self.match(vbaParser.COLON)
                        self.state = 3991
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
                        if la_ == 1:
                            self.state = 3990
                            self.wsc()


                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3995 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,592,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatementNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatementNoWs" ):
                listener.enterEndOfStatementNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatementNoWs" ):
                listener.exitEndOfStatementNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatementNoWs" ):
                return visitor.visitEndOfStatementNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatementNoWs(self):

        localctx = vbaParser.EndOfStatementNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_endOfStatementNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4002 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4002
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
                if la_ == 1:
                    self.state = 3997
                    self.endOfLineNoWs()
                    pass

                elif la_ == 2:
                    self.state = 3999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272 or _la==279:
                        self.state = 3998
                        self.wsc()


                    self.state = 4001
                    self.match(vbaParser.COLON)
                    pass


                self.state = 4004 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 175) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_commentBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentBody" ):
                listener.enterCommentBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentBody" ):
                listener.exitCommentBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentBody" ):
                return visitor.visitCommentBody(self)
            else:
                return visitor.visitChildren(self)




    def commentBody(self):

        localctx = vbaParser.CommentBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_commentBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4006
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def remKeyword(self):
            return self.getTypedRuleContext(vbaParser.RemKeywordContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedIdentifier" ):
                listener.enterReservedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedIdentifier" ):
                listener.exitReservedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedIdentifier" ):
                return visitor.visitReservedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedIdentifier(self):

        localctx = vbaParser.ReservedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_reservedIdentifier)
        try:
            self.state = 4018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4008
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4009
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4010
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4011
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4012
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4013
                self.reservedTypeIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4014
                self.literalIdentifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4015
                self.remKeyword()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4016
                self.reservedForImplementationUse()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4017
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(vbaParser.IDENTIFIER, 0)

        def ambiguousKeyword(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousIdentifier" ):
                return visitor.visitAmbiguousIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_ambiguousIdentifier)
        try:
            self.state = 4022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4020
                self.match(vbaParser.IDENTIFIER)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4021
                self.ambiguousKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_statementKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementKeyword" ):
                listener.enterStatementKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementKeyword" ):
                listener.exitStatementKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementKeyword" ):
                return visitor.visitStatementKeyword(self)
            else:
                return visitor.visitChildren(self)




    def statementKeyword(self):

        localctx = vbaParser.StatementKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_statementKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4024
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -589966053621104640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1734026781900762175) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 20306912242402177) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & 43) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemKeyword" ):
                listener.enterRemKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemKeyword" ):
                listener.exitRemKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemKeyword" ):
                return visitor.visitRemKeyword(self)
            else:
                return visitor.visitChildren(self)




    def remKeyword(self):

        localctx = vbaParser.RemKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_remKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4026
            self.match(vbaParser.REM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkerKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_markerKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkerKeyword" ):
                listener.enterMarkerKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkerKeyword" ):
                listener.exitMarkerKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkerKeyword" ):
                return visitor.visitMarkerKeyword(self)
            else:
                return visitor.visitChildren(self)




    def markerKeyword(self):

        localctx = vbaParser.MarkerKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_markerKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4028
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4588608) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 1152921504741064707) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 36078329266201) != 0) or _la==219 or _la==220):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_operatorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIdentifier" ):
                listener.enterOperatorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIdentifier" ):
                listener.exitOperatorIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorIdentifier" ):
                return visitor.visitOperatorIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def operatorIdentifier(self):

        localctx = vbaParser.OperatorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_operatorIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4030
            _la = self._input.LA(1)
            if not(_la==3 or _la==5 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4625759771566407681) != 0) or _la==184 or _la==221):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(vbaParser.ABS, 0)

        def CBOOL(self):
            return self.getToken(vbaParser.CBOOL, 0)

        def CBYTE(self):
            return self.getToken(vbaParser.CBYTE, 0)

        def CCUR(self):
            return self.getToken(vbaParser.CCUR, 0)

        def CDATE(self):
            return self.getToken(vbaParser.CDATE, 0)

        def CDBL(self):
            return self.getToken(vbaParser.CDBL, 0)

        def CDEC(self):
            return self.getToken(vbaParser.CDEC, 0)

        def CINT(self):
            return self.getToken(vbaParser.CINT, 0)

        def CLNG(self):
            return self.getToken(vbaParser.CLNG, 0)

        def CLNGLNG(self):
            return self.getToken(vbaParser.CLNGLNG, 0)

        def CLNGPTR(self):
            return self.getToken(vbaParser.CLNGPTR, 0)

        def CSNG(self):
            return self.getToken(vbaParser.CSNG, 0)

        def CSTR(self):
            return self.getToken(vbaParser.CSTR, 0)

        def CVAR(self):
            return self.getToken(vbaParser.CVAR, 0)

        def CVERR(self):
            return self.getToken(vbaParser.CVERR, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DEBUG(self):
            return self.getToken(vbaParser.DEBUG, 0)

        def DOEVENTS(self):
            return self.getToken(vbaParser.DOEVENTS, 0)

        def FIX(self):
            return self.getToken(vbaParser.FIX, 0)

        def INT(self):
            return self.getToken(vbaParser.INT, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LENB(self):
            return self.getToken(vbaParser.LENB, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def PSET(self):
            return self.getToken(vbaParser.PSET, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def SGN(self):
            return self.getToken(vbaParser.SGN, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedName" ):
                listener.enterReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedName" ):
                listener.exitReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedName" ):
                return visitor.visitReservedName(self)
            else:
                return visitor.visitChildren(self)




    def reservedName(self):

        localctx = vbaParser.ReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_reservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4032
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2947658058563586) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 36030454876602369) != 0) or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 33693697) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(vbaParser.ARRAY, 0)

        def CIRCLE(self):
            return self.getToken(vbaParser.CIRCLE, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def INPUTB(self):
            return self.getToken(vbaParser.INPUTB, 0)

        def LBOUND(self):
            return self.getToken(vbaParser.LBOUND, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def UBOUND(self):
            return self.getToken(vbaParser.UBOUND, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_specialForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialForm" ):
                listener.enterSpecialForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialForm" ):
                listener.exitSpecialForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialForm" ):
                return visitor.visitSpecialForm(self)
            else:
                return visitor.visitChildren(self)




    def specialForm(self):

        localctx = vbaParser.SpecialFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_specialForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            _la = self._input.LA(1)
            if not(_la==9 or _la==33 or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 4611686018427388035) != 0) or _la==185):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedTypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CURRENCY(self):
            return self.getToken(vbaParser.CURRENCY, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LONGLONG(self):
            return self.getToken(vbaParser.LONGLONG, 0)

        def LONGPTR(self):
            return self.getToken(vbaParser.LONGPTR, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedTypeIdentifier" ):
                listener.enterReservedTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedTypeIdentifier" ):
                listener.exitReservedTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedTypeIdentifier" ):
                return visitor.visitReservedTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedTypeIdentifier(self):

        localctx = vbaParser.ReservedTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_reservedTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4036
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 703687442333696) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 1477760807600129) != 0) or ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & 8796093022273) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedTypeIdentifierBContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_B(self):
            return self.getToken(vbaParser.BOOLEAN_B, 0)

        def BYTE_B(self):
            return self.getToken(vbaParser.BYTE_B, 0)

        def CURRENCY_B(self):
            return self.getToken(vbaParser.CURRENCY_B, 0)

        def DATE_B(self):
            return self.getToken(vbaParser.DATE_B, 0)

        def DOUBLE_B(self):
            return self.getToken(vbaParser.DOUBLE_B, 0)

        def INTEGER_B(self):
            return self.getToken(vbaParser.INTEGER_B, 0)

        def LONG_B(self):
            return self.getToken(vbaParser.LONG_B, 0)

        def LONGLONG_B(self):
            return self.getToken(vbaParser.LONGLONG_B, 0)

        def LONGPTR_B(self):
            return self.getToken(vbaParser.LONGPTR_B, 0)

        def SINGLE_B(self):
            return self.getToken(vbaParser.SINGLE_B, 0)

        def STRING_B(self):
            return self.getToken(vbaParser.STRING_B, 0)

        def VARIANT_B(self):
            return self.getToken(vbaParser.VARIANT_B, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedTypeIdentifierB

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedTypeIdentifierB" ):
                listener.enterReservedTypeIdentifierB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedTypeIdentifierB" ):
                listener.exitReservedTypeIdentifierB(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedTypeIdentifierB" ):
                return visitor.visitReservedTypeIdentifierB(self)
            else:
                return visitor.visitChildren(self)




    def reservedTypeIdentifierB(self):

        localctx = vbaParser.ReservedTypeIdentifierBContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_reservedTypeIdentifierB)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4038
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1407374884667392) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 1477760807600129) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & 8796093022273) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeableReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeableReservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeableReservedName" ):
                listener.enterTypeableReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeableReservedName" ):
                listener.exitTypeableReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeableReservedName" ):
                return visitor.visitTypeableReservedName(self)
            else:
                return visitor.visitChildren(self)




    def typeableReservedName(self):

        localctx = vbaParser.TypeableReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_typeableReservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4040
            _la = self._input.LA(1)
            if not(_la==49 or _la==175):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def objectLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ObjectLiteralIdentifierContext,0)


        def variantLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.VariantLiteralIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralIdentifier" ):
                listener.enterLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralIdentifier" ):
                listener.exitLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralIdentifier" ):
                return visitor.visitLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def literalIdentifier(self):

        localctx = vbaParser.LiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_literalIdentifier)
        try:
            self.state = 4045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87, 182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4042
                self.booleanLiteralIdentifier()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4043
                self.objectLiteralIdentifier()
                pass
            elif token in [76, 136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4044
                self.variantLiteralIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_booleanLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralIdentifier" ):
                listener.enterBooleanLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralIdentifier" ):
                listener.exitBooleanLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteralIdentifier" ):
                return visitor.visitBooleanLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteralIdentifier(self):

        localctx = vbaParser.BooleanLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_booleanLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4047
            _la = self._input.LA(1)
            if not(_la==87 or _la==182):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_objectLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralIdentifier" ):
                listener.enterObjectLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralIdentifier" ):
                listener.exitObjectLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteralIdentifier" ):
                return visitor.visitObjectLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteralIdentifier(self):

        localctx = vbaParser.ObjectLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_objectLiteralIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4049
            self.match(vbaParser.NOTHING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMPTY_X(self):
            return self.getToken(vbaParser.EMPTY_X, 0)

        def NULL_(self):
            return self.getToken(vbaParser.NULL_, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variantLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantLiteralIdentifier" ):
                listener.enterVariantLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantLiteralIdentifier" ):
                listener.exitVariantLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariantLiteralIdentifier" ):
                return visitor.visitVariantLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def variantLiteralIdentifier(self):

        localctx = vbaParser.VariantLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_variantLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4051
            _la = self._input.LA(1)
            if not(_la==76 or _la==136):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedForImplementationUseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def LINEINPUT(self):
            return self.getToken(vbaParser.LINEINPUT, 0)

        def VB_BASE(self):
            return self.getToken(vbaParser.VB_BASE, 0)

        def VB_CONTROL(self):
            return self.getToken(vbaParser.VB_CONTROL, 0)

        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_EXT_KEY(self):
            return self.getToken(vbaParser.VB_EXT_KEY, 0)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def VB_HELPID(self):
            return self.getToken(vbaParser.VB_HELPID, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def VB_INVOKE_PROPERTY(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTY, 0)

        def VB_INVOKE_PROPERTYPUT(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUT, 0)

        def VB_INVOKE_PROPERTYPUTREF(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUTREF, 0)

        def VB_MEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_MEMBERFLAGS, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_TEMPLATEDERIVED(self):
            return self.getToken(vbaParser.VB_TEMPLATEDERIVED, 0)

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_VARHELPID(self):
            return self.getToken(vbaParser.VB_VARHELPID, 0)

        def VB_VARMEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_VARMEMBERFLAGS, 0)

        def VB_VARPROCDATA(self):
            return self.getToken(vbaParser.VB_VARPROCDATA, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedForImplementationUse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedForImplementationUse" ):
                listener.enterReservedForImplementationUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedForImplementationUse" ):
                listener.exitReservedForImplementationUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedForImplementationUse" ):
                return visitor.visitReservedForImplementationUse(self)
            else:
                return visitor.visitChildren(self)




    def reservedForImplementationUse(self):

        localctx = vbaParser.ReservedForImplementationUseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_reservedForImplementationUse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            _la = self._input.LA(1)
            if not(_la==7 or _la==115 or ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & 16777215) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FutureReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CDECL(self):
            return self.getToken(vbaParser.CDECL, 0)

        def DECIMAL(self):
            return self.getToken(vbaParser.DECIMAL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_futureReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFutureReserved" ):
                listener.enterFutureReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFutureReserved" ):
                listener.exitFutureReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFutureReserved" ):
                return visitor.visitFutureReserved(self)
            else:
                return visitor.visitChildren(self)




    def futureReserved(self):

        localctx = vbaParser.FutureReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_futureReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4055
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 585467952095035392) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def reservedTypeIdentifierB(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierBContext,0)


        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def OBJECT_B(self):
            return self.getToken(vbaParser.OBJECT_B, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_builtinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltinType" ):
                listener.enterBuiltinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltinType" ):
                listener.exitBuiltinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltinType" ):
                return visitor.visitBuiltinType(self)
            else:
                return visitor.visitChildren(self)




    def builtinType(self):

        localctx = vbaParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_builtinType)
        try:
            self.state = 4061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 47, 49, 71, 105, 117, 119, 121, 169, 175, 212]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4057
                self.reservedTypeIdentifier()
                pass
            elif token in [16, 20, 48, 50, 72, 106, 118, 120, 122, 170, 176, 213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4058
                self.reservedTypeIdentifierB()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4059
                self.match(vbaParser.OBJECT)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4060
                self.match(vbaParser.OBJECT_B)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def typeableReservedName(self):
            return self.getTypedRuleContext(vbaParser.TypeableReservedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedName" ):
                listener.enterTypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedName" ):
                listener.exitTypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedName" ):
                return visitor.visitTypedName(self)
            else:
                return visitor.visitChildren(self)




    def typedName(self):

        localctx = vbaParser.TypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_typedName)
        try:
            self.state = 4069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 14, 30, 31, 34, 35, 36, 41, 79, 83, 94, 107, 112, 114, 126, 127, 128, 129, 131, 137, 144, 149, 154, 156, 159, 173, 179, 214, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4063
                self.ambiguousIdentifier()
                self.state = 4064
                self.typeSuffix()
                pass
            elif token in [49, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4066
                self.typeableReservedName()
                self.state = 4067
                self.typeSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def PERCENT(self):
            return self.getToken(vbaParser.PERCENT, 0)

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def ASPERAND(self):
            return self.getToken(vbaParser.ASPERAND, 0)

        def Dollar(self):
            return self.getToken(vbaParser.Dollar, 0)

        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = vbaParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4071
            _la = self._input.LA(1)
            if not(((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & 4457635) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BEGINPROPERTY(self):
            return self.getToken(vbaParser.BEGINPROPERTY, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def ENDPROPERTY(self):
            return self.getToken(vbaParser.ENDPROPERTY, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousKeyword" ):
                return visitor.visitAmbiguousKeyword(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4073
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2322503596308) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 294845081322553361) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 34896647201) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 33554185) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[290] = self.expression_sempred
        self._predicates[291] = self.lExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def lExpression_sempred(self, localctx:LExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         




