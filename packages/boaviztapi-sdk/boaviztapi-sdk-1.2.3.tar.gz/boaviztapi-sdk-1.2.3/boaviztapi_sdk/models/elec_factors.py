# coding: utf-8

"""
    BOAVIZTAPI - DEMO

    <p>🎯 Retrieving the impacts of digital elements.</p> <p>This is a quick demo, to see full documentation <a href=\"https://doc.api.boavizta.org\">click here</a></p> <h2>Features</h2> <p>Bellow a list of all available features.</p> <h3>👄 Verbose</h3> <p>Verbose is an HTTP parameter. If set at true :</p> <ul> <li>Shows the impacts of each component</li> <li>Shows the value used for each attribute</li> </ul> <p><em>\"attribute\": {\"value\": \"value\", \"unit\": \"unit\", \"status\": \"Status\", \"source\": \"Source\", \"min\":\"min\", \"max\":\"max\", \"significant_figures\":\"significant_figures\"}</em></p> <h3>🔨 Embedded</h3> <ul> <li>Embedded impacts are the impacts occurring during raw material extraction, manufacture, distribution and end of life</li> <li>When end of life is not taken into account, we specified it in the <code>warnings</code></li> </ul> <h3>🔌  Usage</h3> <p>Usage impacts are assessed by multiplying :</p> <ul> <li> <p>a <strong>duration</strong></p> </li> <li> <p>an <strong>impact factor</strong> </p> </li> <li> <p>an <strong>electrical consumption</strong> </p> </li> </ul> <h4>⏲ Duration</h4> <p>Usage impacts can be given as a router parameter, in hours.</p> <p>If no duration is given, <strong>the impact is assess for the all life duration of the asset</strong>.</p> <h4>✖️ Impact factors</h4> <ul> <li>Impact factors can be given : <em>\"usage\":{\"elec_factors\":{[criteria]: 0.38}}</em></li> <li> <p>Impact factors can be retrieved from : <em>\"usage\":{\"usage_location\": \"FRA\"}</em>. </p> </li> <li> <p>See the list of locations : <a href=\"/v1/utils/country_code\">/v1/utils/country_code</a>*</p> </li> </ul> <h4>⚡ Electrical consumption</h4> <h5>⏺️ Given</h5> <ul> <li>Electrical consumption can be given for one hour (average) <em>\"usage\":{\"avg_power\": 1}</em>.</li> </ul> <h5>📈 Modeled</h5> <ul> <li>Electrical consumption can be retrieved from consumption profile using <em>usage:{time_workload: 50}</em>.</li> </ul> <h5>📋 Archetype</h5> <ul> <li>In some cases, default electrical consumption can be taken from the archetype</li> </ul> <h3>🔃 Auto-complete &amp; 📋 Archetype</h3> <p>The API will complete the missing attributes in a request with a completion function or with values taken from the <code>archetype</code> specified in the route parameter.</p> <h3>⏬ Allocation</h3> <ul> <li>Usage impacts are assessed on the duration given in route parameter</li> <li>Embedded impacts are allocated linearly on the duration given in parameter <code>embedded_impact = impact * (duration/life_duration)</code></li> </ul> <p>If no duration is given, the life_duration (<code>`hours_life_time</code>) of the asset is used.</p>

    The version of the OpenAPI document: 1.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ElecFactors(BaseModel):
    """
    BaseDTO is simple BaseModel object
    """ # noqa: E501
    gwp: Optional[Union[StrictFloat, StrictInt]] = None
    adp: Optional[Union[StrictFloat, StrictInt]] = None
    pe: Optional[Union[StrictFloat, StrictInt]] = None
    gwppb: Optional[Union[StrictFloat, StrictInt]] = None
    gwppf: Optional[Union[StrictFloat, StrictInt]] = None
    gwpplu: Optional[Union[StrictFloat, StrictInt]] = None
    ir: Optional[Union[StrictFloat, StrictInt]] = None
    lu: Optional[Union[StrictFloat, StrictInt]] = None
    odp: Optional[Union[StrictFloat, StrictInt]] = None
    pm: Optional[Union[StrictFloat, StrictInt]] = None
    pocp: Optional[Union[StrictFloat, StrictInt]] = None
    wu: Optional[Union[StrictFloat, StrictInt]] = None
    mips: Optional[Union[StrictFloat, StrictInt]] = None
    adpe: Optional[Union[StrictFloat, StrictInt]] = None
    adpf: Optional[Union[StrictFloat, StrictInt]] = None
    ap: Optional[Union[StrictFloat, StrictInt]] = None
    ctue: Optional[Union[StrictFloat, StrictInt]] = None
    ctuh_c: Optional[Union[StrictFloat, StrictInt]] = None
    ctuh_nc: Optional[Union[StrictFloat, StrictInt]] = None
    epf: Optional[Union[StrictFloat, StrictInt]] = None
    epm: Optional[Union[StrictFloat, StrictInt]] = None
    ept: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["gwp", "adp", "pe", "gwppb", "gwppf", "gwpplu", "ir", "lu", "odp", "pm", "pocp", "wu", "mips", "adpe", "adpf", "ap", "ctue", "ctuh_c", "ctuh_nc", "epf", "epm", "ept"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElecFactors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElecFactors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gwp": obj.get("gwp"),
            "adp": obj.get("adp"),
            "pe": obj.get("pe"),
            "gwppb": obj.get("gwppb"),
            "gwppf": obj.get("gwppf"),
            "gwpplu": obj.get("gwpplu"),
            "ir": obj.get("ir"),
            "lu": obj.get("lu"),
            "odp": obj.get("odp"),
            "pm": obj.get("pm"),
            "pocp": obj.get("pocp"),
            "wu": obj.get("wu"),
            "mips": obj.get("mips"),
            "adpe": obj.get("adpe"),
            "adpf": obj.get("adpf"),
            "ap": obj.get("ap"),
            "ctue": obj.get("ctue"),
            "ctuh_c": obj.get("ctuh_c"),
            "ctuh_nc": obj.get("ctuh_nc"),
            "epf": obj.get("epf"),
            "epm": obj.get("epm"),
            "ept": obj.get("ept")
        })
        return _obj


