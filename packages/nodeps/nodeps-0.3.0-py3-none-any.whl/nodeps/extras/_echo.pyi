import enum
from enum import Enum
from typing import IO, Any, TypeAlias

try:
    # nodeps[echo] extras
    import click as click  # type: ignore[attr-defined]
    import typer as typer  # type: ignore[attr-defined]
except ModuleNotFoundError:
    click: TypeAlias = None  # noqa: PYI042
    typer: TypeAlias = None  # noqa: PYI042

__all__ = (
    "COLORIZE",
    "EnumLower",
    "Color",
    "SYMBOL",
    "Symbol"
)

COLORIZE: str | None = ...


def msg_click_typer(): ...


class EnumLower(enum.Enum):
    def _generate_next_value_(self: str, *args): ...


class _Color(EnumLower):
    # noinspection PyShadowingBuiltins
    def __call__(self,
                 message: Any = ...,
                 exit: int | None = ...,  # noqa: A002
                 stderr: bool = ...,
                 file: IO[Any] | str = ...,
                 newline: bool = ...,
                 bg: str | int | tuple[int, int, int] = ...,
                 bold: bool | None = ...,
                 dim: bool | None = ...,
                 underline: bool | None = ...,
                 overline: bool | None = ...,
                 italic: bool | None = ...,
                 blink: bool | None = ...,
                 reverse: bool | None = ...,
                 strikethrough: bool | None = ...,
                 reset: bool = ...,
                 colorize: bool | None = None) -> ...: ...


class Color(_Color):
    BLACK = ...
    BLUE = ...
    CYAN = ...
    GREEN = ...
    MAGENTA = ...
    RED = ...
    WHITE = ...
    YELLOW = ...
    BRIGHT_BLACK = ...
    BRIGHT_BLUE = ...
    BRIGHT_CYAN = ...
    BRIGHT_GREEN = ...
    BRIGHT_MAGENTA = ...
    BRIGHT_RED = ...
    BRIGHT_WHITE = ...
    BRIGHT_YELLOW = ...
    RESET = ...

    def style(self, text: Any,
              bg: str | int | tuple[int, int, int] = ...,
              bold: bool | None = ...,
              dim: bool | None = ...,
              underline: bool | None = ...,
              overline: bool | None = ...,
              italic: bool | None = ...,
              blink: bool | None = ...,
              reverse: bool | None = ...,
              strikethrough: bool | None = ...,
              reset: bool = True) -> str: ...


COLOR_FIRST_OTHER = ...
SYMBOL = ...


class _Symbol(Enum):
    def _generate_next_value_(self: str, start: int, count: int, last_values: list[Any]) -> Any: ...

    def __call__(self,
                 first: Any = ...,
                 other: Any = ...,
                 separator: str = ...,
                 exit: int | None = ...,  # noqa: A002
                 stderr: bool = ...,
                 file: IO[Any] | str | None = ...,
                 newline: bool = ...,
                 colorize: bool | None = None) -> ...: ...


class Symbol(_Symbol):
    CRITICAL = ...
    ERROR = ...
    OK = ...
    NOTICE = ...
    SUCCESS = ...
    VERBOSE = ...
    WARNING = ...
    MINUS = ...
    MORE = ...
    MULTIPLY = ...
    PLUS = ...
    WAIT = ...
