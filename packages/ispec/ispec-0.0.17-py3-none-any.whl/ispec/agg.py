# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_agg.ipynb.

# %% auto 0
__all__ = ['logclslvl', 'aggattrs', 'aggopt', 'aggoptadd', 'clssupkws']

# %% ../nbs/09_agg.ipynb 4
import inspect, string
from typing import Type, Tuple, Union

from chck import isint, isdict

# %% ../nbs/09_agg.ipynb 5
from .types import (AttrLvl)
from .utils import (passable, kwsadd, kwsopt, funkws)
from .ann import (getannkws)
from .dun import getsupnew

# %% ../nbs/09_agg.ipynb 6
def logclslvl(cls: AttrLvl, lvl: AttrLvl, isobj: bool = False, verbose: bool = False):
    tabs = '\t' * lvl
    sobj = 'isobj = $isobj --> continue' if isobj else '$isobj'
    tmpl = string.Template(f'$tabs lvl = $lvl\t cls = $cls\t {sobj}')
    sout = tmpl.substitute(tabs=tabs, lvl=lvl, cls=cls.__name__, isobj=isobj or '')
    if verbose: print(sout)
    if verbose and cls is object:
        print(f'{tabs} \t\t is object --> continue')
        

# %% ../nbs/09_agg.ipynb 7
def aggattrs(
    obj, 
    lvl: AttrLvl, 
    agg: bool = True, 
    return_cls: bool = False,
    return_arr: bool = False,
    verbose: bool = False,
    getkwsfunc: callable = getannkws
) -> Union[dict, Tuple[dict, Type]]:
    kwarr, adict = list(), dict()     
    for curlvl, curcls in enumerate(inspect.getmro(obj)):                
        logclslvl(curcls, curlvl, isobj=curcls is object, verbose=verbose)
        if curcls is object: continue
        
        clslvl = curlvl if isint(lvl) else curcls
        curkws = getkwsfunc(curcls)
        
        # If we've gone too far i.e. curlvl >= lvl or curcls is no longer a subclass
        if clslvl == lvl:
            kwarr.extend(kw for kw in curkws if kw not in kwarr)            
            if isdict(curkws):
                adict = kwsadd(adict, **curkws)
            break
        
        # Otherwise, add the keywords to the result        
        kwarr.extend(kw for kw in curkws if kw not in kwarr)
        if isdict(curkws):
            adict = kwsadd(adict, **curkws)
    
    if return_arr and isdict(curkws):
        curkws = list(curkws.keys())
    
    kwarr = sorted(kwarr if agg else curkws)
    if adict: 
        if agg:            
            adict = {**adict, **{k: v for k,v in curkws.items() if k not in adict}}            
        else:
            adict = curkws.copy()

    result = kwarr if return_arr else adict        
    return (result, curcls) if return_cls else result

# %% ../nbs/09_agg.ipynb 8
def aggopt(cls: Type, **kwargs) -> dict:
    '''Aggregate all attributes of a class then override with kwargs
    e.g. `kwsopt(aggattrs(cls, -1), **kwargs)`
    '''
    kws = aggattrs(cls, -1)
    kws = kwsopt(kws, **kwargs)
    return kws

def aggoptadd(cls: Type, **kwargs) -> dict:
    '''Aggregate all attributes of a class then override and update with kwargs
    e.g. `kwsadd(aggopt(cls, **kwargs), **kwargs)`
    '''
    kws = aggopt(cls, **kwargs)
    kws = kwsadd(kws, **kwargs)
    return kws

def clssupkws(cls: Type, **kwargs) -> dict:
    supnew = getsupnew(cls, obj=None, default=passable)
    kwsopt = aggopt(cls, **kwargs)
    supkws = funkws(supnew, **kwsopt)
    return supkws
