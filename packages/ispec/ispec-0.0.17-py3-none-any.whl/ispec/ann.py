# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_ann.ipynb.

# %% auto 0
__all__ = ['getannargs', 'getannspec', 'getannsig', 'getanncls', 'getannkws', 'getdefkws']

# %% ../nbs/06_ann.ipynb 4
from .utils import (getattrs, safemake, dropna_args)
from .sig import (getspeckws, getsigkws)
from .dun import (getannots)

# %% ../nbs/06_ann.ipynb 6
def getannargs(obj) -> dict:
    '''Get non-`empty` / `KW_ONLY` annotationed parameters'''
    return dropna_args(**getannots(obj))

def getannspec(obj) -> dict:
    '''Get class annotationed parameters with defaults in spec'''
    adict = getspeckws(obj) # arguments with defaults
    avals = getannargs(obj) # annotationed arguments
    return getattrs(obj, adict, avals)

def getannsig(obj) -> dict:
    '''Get class annotationed parameters with defaults in signature'''
    adict = getsigkws(obj)  # arguments with defaults
    avals = getannargs(obj) # annotationed arguments
    return getattrs(obj, adict, avals)

def getanncls(obj):
    avals = getannargs(obj) # annotationed arguments
    return getattrs(obj, avals)

def getannkws(obj) -> dict:
    return {**getannsig(obj), **getannspec(obj), **getanncls(obj)}
    
def getdefkws(obj) -> dict:
    '''Get default arguments from signature and annotations'''
    avals = getannargs(obj) # annotationed arguments
    adict = getannkws(obj)  # annotationed keywords
    rdict = dict()
    # try to fill in missing arguments with constructor from annotations
    for arg, anntype in avals.items():
        rdict[arg] = adict[arg] if arg in adict else safemake(anntype)
    return {**rdict, **adict}
