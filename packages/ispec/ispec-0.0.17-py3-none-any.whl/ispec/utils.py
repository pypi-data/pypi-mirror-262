# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_utils.ipynb.

# %% auto 0
__all__ = ['identity', 'passable', 'key1st', 'idx1st', 'arg1st', 'getattrs', 'safemake', 'typenone', 'tryattrs', 'safegetspec',
           'safegetsig', 'dropna_args', 'dropcls_args', 'filterargvals', 'funkws', 'kwskws', 'kwsopt', 'kwsadd',
           'kwsobj', 'objtype', 'unpack_optout']

# %% ../nbs/02_utils.ipynb 4
import inspect
from typing import Any, Type, Union, Callable

from quac import anyq, callq, dictq,  intq, boolq, flagfunc
from chck import isdict, istypeq, isany, ispself, ispcls, iscls, istuple
from nlit import __CALL__, __NEW__, __INIT__

# %% ../nbs/02_utils.ipynb 5
from .types import (ArgsTuple, isargvalnil)

# %% ../nbs/02_utils.ipynb 8
def identity(x: Any, *args, **kwargs) -> Any:
    return x

def passable(*args, **kwargs) -> tuple[tuple[Any, ...], dict]:
    return *args, kwargs

# %% ../nbs/02_utils.ipynb 10
def key1st(dct: dict, keys: list, flag: flagfunc = isany, default: anyq = None, fallback: boolq = True,) -> anyq:
    gen = (dct[key] for key in keys if key in dct and flag(dct[key]))
    dflt = default or (dct.get(keys[-1], None) if (keys and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 11
def idx1st(*args, flag: flagfunc = isany, fallback: boolq = True, default: anyq = None) -> intq:
    gen = (i for i in range(len(args)) if flag(args[i]))
    dflt = default or (len(args) - 1 if (args and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 12
def arg1st(*args, flag: flagfunc = isany, fallback: boolq = True, default: anyq = None) -> int:
    '''Returns the first argument that satisfies the flag function.'''
    gen = (arg for arg in args if flag(arg))
    dflt = default or (args[-1] if (args and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 14
def getattrs(obj, attrs: Union[list, dict] = None,  avals: Union[list, dict] = None) -> dict:
    '''
    Get attribute values of an object.

    Parameters
    ----------
    obj : Any
        The object whose attributes you want to get.
    attrs : list | dict, optional
        A list of attribute names or a dictionary of {attr: value}.
    avals : list | dict, optional
        Default values to use for attributes, only used when `attrs` is a list.

    Returns
    -------
    attrs : dict
        A dictionary containing {attr: value} from obj.
    '''
    adict = attrs if isdict(attrs) else {}

    if not adict:
        akeys = list(attrs) if isinstance(attrs, (list, tuple, dict)) else []
        avals = [None] * len(akeys) if avals is None else avals
        if isdict(avals): avals = avals.values()
        adict = {k: avals[i] for i, k in enumerate(akeys) if i < len(avals)}

    return {k: getattr(obj, k, v) for k, v in adict.items()}

# %% ../nbs/02_utils.ipynb 16
def safemake(cls, *args, **kwargs) -> anyq:
    '''
    Safely create an object from a class.

    Parameters
    ----------
    cls : Type
        The class to instantiate.
    args : tuple
        Positional arguments for the class constructor.
    kwargs : dict
        Keyword arguments for the class constructor.

    Returns
    -------
    anyq
        The instantiated object or None if an exception occurs.
    '''
    try: return cls(*args, **kwargs)
    except Exception as e: return None

def typenone(obj: anyq, cls: Type) -> anyq:
    '''Return `obj` if it `cls` or `None` otherwise try `cls()` else `None`'''    
    return obj if istypeq(obj, cls) else safemake(cls)

# %% ../nbs/02_utils.ipynb 18
def tryattrs(
    call: Callable,
    func: Callable,
    attrs: list = [__CALL__, __NEW__, __INIT__],
    default: anyq = None,
    return_errs: boolq = False,
    *args, **kwargs
) -> anyq:
    spec, errs = None, []
    
    try:
        spec = func(call)
    except Exception as err:
        errs.append(err)    
    if spec is not None: 
        if return_errs: return spec, errs
        return spec
    
    for attr in attrs:
        try: 
            spec = func(getattr(call, attr, None))
        except Exception as err: 
            errs.append(err)    
        if spec is not None: 
            if return_errs: return spec, errs
            return spec
    return default

# %% ../nbs/02_utils.ipynb 20
def safegetspec(func: Callable) -> inspect.FullArgSpec:
    default = inspect.FullArgSpec([], None, None, None, [], None, dict())
    return tryattrs(func, inspect.getfullargspec, attrs=[], default=default)

def safegetsig(func: Callable) -> inspect.FullArgSpec:
    default = inspect.Signature()
    return tryattrs(func, inspect.signature, attrs=[], default=default)

# %% ../nbs/02_utils.ipynb 23
def dropna_args(**kwargs) -> dict:
    '''Drop `KW_ONLY` and `Parameter.empty` values from `args`'''
    return {k: v for k, v in kwargs.items() if not isargvalnil(v)} 

def dropcls_args(**kwargs) -> dict:
    '''Drop `cls` and `self` from `args`'''
    return {k: v for k, v in kwargs.items() if not (ispcls(v) or ispself(v))}

def filterargvals(__dropna: bool = True, __dropcls: bool = True, **kwargs) -> ArgsTuple:
    adict = kwargs.copy()
    if __dropna:
        adict = dropna_args(**adict)
    if __dropcls:
        adict = dropcls_args(**adict)
    return tuple(adict.items())

# %% ../nbs/02_utils.ipynb 25
def funkws(fnc: callq = None, **kwargs) -> dict:
    '''Filter keyword arguments to function signature'''
    if not fnc: return kwargs
    params = fnc if isdict(fnc) else inspect.signature(fnc).parameters
    return {k: v for k, v in kwargs.items() if k in params}

def kwskws(kws: dictq = None, **kwargs) -> dict:    
    '''merge kwargs into kws if kws is not None otherwise return kwargs'''
    if not kws: return kwargs
    return {**kws, **{k: v for k, v in kwargs.items() if k in kws and kwargs[k] is not None}}

def kwsopt(kws: dictq = None, **kwargs) -> dict:
    '''optional overrides for `kws`'''
    return kwskws(kws, **kwargs)

def kwsadd(kws: dictq = None, **kwargs) -> dict:    
    '''add missing kwargs to `kws`'''
    if not kws: return kwargs
    return {**kws, **{k: v for k, v in kwargs.items() if k not in kws or kws[k] is None}}

def kwsobj(obj: Type, attr: str, **kwargs) -> anyq:
    '''Get attribute from `kwargs` or `obj`'''
    if not obj: return None
    cur = getattr(obj, attr, None)
    kws = kwargs.get(attr, None)
    return arg1st(kws, cur)

# %% ../nbs/02_utils.ipynb 27
def objtype(obj: anyq, **kwargs) -> type | None:
    '''Get the class of the object or `cls` from kwargs'''
    cls = obj if iscls(obj) else type(obj)
    cls = kwargs.get('cls', cls)    
    return cls

# %% ../nbs/02_utils.ipynb 29
def unpack_optout(output: tuple, expected: int = 1) -> tuple:
    '''Unpacks the output of a function with any number of optional return values.'''
    res = output if istuple(output) else (output,)
    try:
        res, *opt = res
        if len(opt) < expected:
            opt += [None] * (expected - len(opt))        
        return res, *tuple(opt)
    except TypeError:
        return res, *tuple([None] * max((expected), 1))
    return output
