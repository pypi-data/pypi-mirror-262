# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_sig.ipynb.

# %% auto 0
__all__ = ['getpos', 'getkwo', 'getposdef', 'getkwodef', 'getspec', 'getspecdef', 'getsig', 'getsigdef', 'getspeckws',
           'getsigkws', 'getspeckwo', 'getsigkwo']

# %% ../nbs/05_sig.ipynb 4
from typing import Callable
from .types import (ArgsTuple,)
from .utils import (filterargvals, safegetspec, safegetsig)
from .utils import (funkws, kwsopt)

# %% ../nbs/05_sig.ipynb 7
def getpos(func: Callable) -> ArgsTuple:    
    '''Retrieve all positional arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of positional arguments and their default values.

    Notes
    -----
    Uses `inspect.getfullargspec` to retrieve the arguments.
    '''
    # spec = inspect.getfullargspec(func)
    spec = safegetspec(func)
    if spec.defaults is None: return tuple()
    
    # NOTE: for readability, we assume that the last n arguments are the defaults
    nvals = len(spec.defaults)
    names = spec.args[-nvals:]
    adict = dict(zip(names, spec.defaults))
    return tuple(adict.items())

def getkwo(func: Callable) -> ArgsTuple:    
    '''Retrieve all keyword-only arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of keyword-only arguments and their default values.

    Notes
    -----
    Uses `inspect.kwonlyargs` to retrieve the arguments.
    '''
    # spec = inspect.getfullargspec(func)
    spec = safegetspec(func)
    if spec.kwonlydefaults is None: return tuple()
    return tuple(spec.kwonlydefaults.items())


# %% ../nbs/05_sig.ipynb 8
def getposdef(func: Callable) -> ArgsTuple:    
    '''Retrieve non-nil positional arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of positional arguments and their default values.

    Notes
    -----
    Uses `inspect.getfullargspec` to retrieve the arguments.
    '''
    return filterargvals(**dict(getpos(func)))

def getkwodef(func: Callable) -> ArgsTuple:    
    '''
    Retrieve non-nil keyword-only arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of keyword-only arguments and their default values.

    Notes
    -----
    Uses `inspect.kwonlyargs` to retrieve the arguments.
    ''' 
    return filterargvals(**dict(getkwo(func)))


# %% ../nbs/05_sig.ipynb 10
def getspec(func: Callable) -> ArgsTuple:
    '''
    Retrieve both positional and keyword-only arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of keyword-only arguments and their default values.

    Notes
    -----
    Uses `inspect.kwonlyargs` to retrieve the arguments.
    '''
    return getpos(func) + getkwo(func)

def getspecdef(func: Callable) -> ArgsTuple:
    '''
    Retrieve non-nil positional and keyword-only arguments with their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of keyword-only arguments and their default values.

    Notes
    -----
    Uses `inspect.kwonlyargs` to retrieve the arguments.
    '''
    return getposdef(func) + getkwodef(func)


# %% ../nbs/05_sig.ipynb 12
def getsig(func: Callable) -> ArgsTuple:
    '''Retrieve all parameters from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of arguments and their values.

    Notes
    -----
    Uses `inspect.signature` to retrieve the parameters.
    '''    
    spec = safegetsig(func)
    args = {p.name: p.default for p in spec.parameters.values()}
    return args

def getsigdef(func: Callable) -> ArgsTuple:
    '''Retrieve all keyword-only arguments and their default values from a function.

    Parameters
    ----------
    func : Callable
        The function to inspect.

    Returns
    -------
    Tuple[Tuple[str, Any], ...]
        Tuple of keyword-only arguments and their default values.

    Notes
    -----
    Uses `inspect.signature` to retrieve the parameters.
    '''        
    args = filterargvals(**getsig(func))
    return args

# %% ../nbs/05_sig.ipynb 14
def getspeckws(obj, **kwargs) -> dict:
    '''Get signature keywords with defaults only'''
    specdict = dict(getsig(obj))
    fullargs = funkws(specdict, **kwsopt(specdict, **kwargs))
    return dict(filterargvals(**fullargs))

def getsigkws(obj, **kwargs) -> dict:    
    '''Get all default parameters with optional overrides.'''
    fullargs = funkws(getsig(obj), **kwsopt(getsig(obj), **kwargs))
    return dict(filterargvals(**fullargs))

# %% ../nbs/05_sig.ipynb 15
def getspeckwo(obj) -> dict:
    '''Get signature keywords with defaults only'''
    return dict(getspecdef(obj)) # arguments with defaults

def getsigkwo(obj) -> dict:    
    '''Get all parameters with defaults.'''
    return dict(getsigdef(obj)) # arguments with defaults
