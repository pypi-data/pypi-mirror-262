# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/13_dec.ipynb.

# %% auto 0
__all__ = ['optarg', 'optclsattr']

# %% ../nbs/13_dec.ipynb 4
from quac import anyq, callq
from .utils import identity

# %% ../nbs/13_dec.ipynb 5
def optarg(
    arg: str,  
    fallback:   anyq  = None, 
    flbkfunc:   callq = identity,
    isclsfunc:  bool  = False, 
    isinsfunc:  bool  = False,
    passcls:    bool  = False,
    passself:   bool  = False,
    passargs:   bool  = False,
    passkwds:   bool  = False,
):
    '''Decorator to set default values for optional arguments based on a fallback function.
    
    Parameters
    ----------
    arg : str
        Name of the optional argument.
    fallback : anyq, optional
        Default value of the optional argument.
    flbkfunc : callq, optional
        Function to call to generate the default value of the optional argument.
    isclsfunc : bool, optional
        Whether the decorated function is a class method.
    isinsfunc : bool, optional
        Whether the decorated function is an instance method.
    passcls : bool, optional
        Whether to pass the class as the first argument to the fallback function.
    passself : bool, optional
        Whether to pass the instance as the first argument to the fallback function.
    passargs : bool, optional
        Whether to pass the arguments to the fallback function.
    passkwds : bool, optional
        Whether to pass the keyword arguments to the fallback function.
    '''
    def decorator(func):
        def wrapper(*args, **kwargs):
            # cls or self if isclsfunc or isinsfunc respectively
            arg1st = args[0] if args else None

            # Fallback value provided directly
            if fallback is not None:
                kwargs.setdefault(arg, fallback)

            # Fallback function provided
            elif kwargs.get(arg) is None:
                params = [arg]

                if passargs:
                    params.extend(args)
                if (isclsfunc and passcls) or passcls:
                    params.insert(0, arg1st)
                if (isinsfunc and passself) or passself:
                    params.insert(0, arg1st)

                kwds = kwargs.copy() if passkwds else {}
                kwargs[arg] = flbkfunc(*params, **kwds)
                
            return func(*args, **kwargs)
        return wrapper
    return decorator

# %% ../nbs/13_dec.ipynb 6
def optclsattr(arg: str):
    '''Specialized decorator for optional keyword arguments falling back to class attributes.'''

    def fallback_func(self, attr: str, default: anyq = None):
        cls = type(self)
        if hasattr(cls, attr):
            return getattr(cls, attr, default)
        return default

    return optarg(
        arg = arg, 
        flbkfunc  = fallback_func,
        isinsfunc = True, 
        passself  = True,    
    )
