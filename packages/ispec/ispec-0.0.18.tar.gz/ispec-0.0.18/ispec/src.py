# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_src.ipynb.

# %% auto 0
__all__ = ['srcdict']

# %% ../nbs/10_src.ipynb 4
from quac import anyq, strq, boolq
from .types import TypeQ, AttrPrefQ
from .enums import (AttrSrc)
from .preps import (prep__all)
from .val import (newval, inival, annval, supval, defval)

# %% ../nbs/10_src.ipynb 5
def srcdict(
    __o: anyq = None,      # obj
    __a: strq = None,      # attr 
    __c: TypeQ = None,     # cls
    __p: AttrPrefQ = None, # pref
    __h: boolq = False,    # hush (don't raise exceptions)
    __v: boolq = False,    # verbose (print)
    **kwargs
) -> anyq:
    '''Check for the value of an attribute in a variety of places including
    kwargs, object, class, new, init, and annotation.  The order of checking
    is determined by the order parameter.  The first non-None value is returned.
    '''
    vals = None
    try:
        obj, attr, cls, pref, hush, verb, kwargs = prep__all(__o, __a, __c, __p, __h, __v, **kwargs)
        kwargs.update(__o=obj, __a=attr, __c=cls, __p=pref, __h=hush, __v=verb)
        vals = dict()
        for src in pref:
            match src:
                case AttrSrc.KWS:
                    vals['kwsval'] = kwargs.get(attr, None)
                case AttrSrc.OBJ:
                    vals['objval'] = getattr(obj, attr, None)
                case AttrSrc.CLS:
                    vals['clsval'] = getattr(cls, attr, None)
                case AttrSrc.NEW:
                    vals['newval'] = newval(obj, attr)
                case AttrSrc.INI:
                    vals['inival'] = inival(obj, attr)
                case AttrSrc.ANN:
                    vals['annval'] = annval(obj, attr)
                case AttrSrc.SUP:
                    vals['supval'] = supval(obj, attr)
                case AttrSrc.DEF:
                    vals['defval'] = defval(**kwargs)
                case _:
                    if not __h:
                        raise ValueError(f'Unknown AttrSrc: {src}')
                    
    except Exception as e:
        if not hush: return None
        if verb:
            print(
                e, f'obj: {obj}', f'attr: {attr}', f'pref: {pref}',
                f'vals: {vals}', f'kwargs: {kwargs}',  sep='\n'
            )
        raise e
    return vals
